---
layout: page
title: Lifecycle Manager | Governance API | Overview
description: Contains information about the Lifecycle Manager Governance API.
product: lm
category: ref
sub-nav-class: LM APIs
weight: 05
type: page
nav-title: LM Governance API
---
<h1 id="top">Lifecycle Manager Governance API: Overview</h1>
<p>Contains information about the Lifecycle Manager Governance API.</p>
<p>The base URI for all operations in the Governance API is:</p>
<p><span class="apidoc_code">http://&lt;host:port&gt;/lm/rest/governance/&lt;libraryname&gt;</span></p>
<hr class="divide_hr" />



<h2 style="color: gray;">Table of Contents</h2>
<ul class="table_of_contents">
	<li><a href="#overview">Overview</a></li>
	<li><a href="#operations_asset">Asset Operations</a>
		<ul>
			<li><a href="#asset_get_initial_asset">Get Initial Asset</a></li>
			<li><a href="#asset_create_asset">Create Asset</a></li>
			<li><a href="#asset_update_asset">Update Asset</a></li>
			<li><a href="#asset_get_asset">Get Asset</a></li>
			<li><a href="#asset_delete_asset">Delete Asset</a></li>
			<li><a href="#asset_lock_asset">Lock Asset</a></li>
			<li><a href="#asset_unlock_asset">Unlock Asset</a></li>
			<li><a href="#asset_get_assets">Get Assets</a></li>
			<li><a href="#asset_create_asset_file">Create Asset File</a></li>
			<li><a href="#asset_get_asset_file">Get Asset File</a></li>
			<li><a href="#asset_update_asset_file">Update Asset File</a></li>
			<li><a href="#asset_delete_artifact">Delete Artifact</a></li>
			</ul>
		</li>
	
	<li><a href="#operations_request">Request Operations</a>
		<ul>
			<li><a href="#request_submit_request">Submit Request</a></li>
			<li><a href="#request_update_request">Update Request</a></li>
			<li><a href="#request_get_request">Get Request</a></li>
			<li><a href="#request_delete_request">Delete Request</a></li>
			<li><a href="#request_get_requests">Get Requests</a></li>
			<li><a href="#request_create_request_file">Create Request File</a></li>
			<li><a href="#request_update_request_file">Update Request File</a></li>
			<li><a href="#request_get_asset_file">Get Asset File</a></li>
			<li><a href="#request_delete_artifact">Delete Artifact</a></li>
		</ul>
		</li>
</ul>
<hr class="divide_hr" />



<h2 id="overview">Overview</h2>
<p>Lifecycle Manager governance APIs are separated into operations on <strong>assets</strong> and <strong>requests</strong>. Assets are the entities being governed and support custom lifecycles. Requests represent a user's <strong>request</strong> to promote the asset to its next lifecycle state. Requests are submitted then approved or rejected and may follow their own micro-lifecycle on the way to final approval of an asset transition.</p>
<p>The governance API attempts to simplify the client's interaction with Lifecycle Manager relative to Lifecycle Manager's own native clients. Some aspects of this simplification are:</p>
<ul>
	<li><a href="#s_01">Asset Structure</a></li>
	<li><a href="#s_02">Locking</a></li>
	<li><a href="#s_03">Role Management</a></li>
	<li><a href="#s_04">Notification</a></li>
	<li><a href="#s_05">By-value Artifacts</a></li>
</ul>


<h3 id="s_01">Asset Structure</h3>
<p>Assets are represented in HTTP form style as a set of fields. These fields may be of simple types such as string, Boolean or decimal or may be of type File. The RAS-based classifier/artifact/relationship structure is hidden from the API client.</p>
<p>Operations retrieving individual assets or requests will return the field data of the request entity along with field metadata in Alpaca format consisting of a JSON schema structure and an additional JSON <strong>options</strong> structure.</p>
<p>When passing in an asset or request, clients need only provide the entity data.</p>


<h3 id="s_02">Locking</h3>
<p>The governance API uses an optimistic implicit locking model which assumes that it's not common that another user is concurrently updating assets maintained through the API. However, the API does expose explicit locking methods for a client that wants to manage locking.</p>


<h3 id="s_03">Role Management</h3>
<p>The governance API assumes that the management of users and associated roles is the responsibility of the client application. While some API operations require user ids and role names, Lifecycle Manager does not retain knowledge of the assignment of roles to users.</p>


<h3 id="s_04">Notification</h3>
<p>In the initial release of the APIs there is no formal callback subscription model. Client applications can poll the <strong>GET</strong> operations or install custom listeners within the Lifecycle Manager configuration to manage callbacks.</p>


<h3 id="s_05">By-value Artifacts</h3>
<p>Client applications may allow Lifecycle Manager to implicitly manage File fields as <strong>by-value</strong> artifacts through use of the multi-part API operations or may choose to explicitly manage artifact using artifact operations. In either case the artifact-id is assumed to be the File field name. This implies that file fields must be single-valued.</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>




<hr class="divide_hr" />
<h2 id="operations_asset">Asset Operations</h2>




<h2 id="asset_get_initial_asset">Get Initial Asset</h2>
<p>This method is used to get the initial format information as well as any default data for the specified asset-type. Typically an application would call this method to produce the initial form to present to a user. While the asset in the response will have a unique id, the asset has not yet been created persistently within Lifecycle Manager.</p>


<h3>HTTP Operation</h3>
<p class="httpverb">GET</p>


<h3>Path</h3>
<pre class="soaapidoc_endpoint">/assets/new</pre>


<h3>Parameters</h3>
<dl>
<dt>asset-type (string)</dt>
<dd>Type of the asset to create. Corresponds to an asset-type configured within Lifecycle Manager.</dd>
<dt>user-id (string)</dt>
<dd>The user requesting the asset. User id is optional and used only to allow customizations e.g. validators within Lifecycle Manager, to have access to the user.</dd>
<dt>role (string[&#160;])</dt>
<dd>Roles the user possesses. These may optionally be used by the Lifecycle Manager configuration for filtering the fields presented on the asset.</dd>
<dt>set-field (string[&#160;])</dt>
<dd>Used to prime fields within the asset for the sake of tailoring the initial asset representation. For example, these field values may activate conditional fields within the Lifecycle Manager configuration allowing different initial asset formats. Values are assumed to be in the form <strong>&lt;asset-field-name&gt;:&lt;asset- field-value&gt;</strong> and must specify valid asset fields for the asset-type. For example, specifying a parameter of <strong>set-field=subtype:Accounting</strong> will prime the asset field <strong>subtype</strong> with the value <strong>Accounting</strong>.</dd>
</dl>



<h3>Response</h3>
<dl>
<dt>JSON</dt>
<dd>Initial asset data with asset-id, defaulted fields and field metadata.</dd>
</dl>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h2 id="asset_create_asset">Create Asset</h2>
<p>Create a new asset within Lifecycle Manager. By default the submission process for the initial state is triggered. If the submission process requires request input from the user the request data and format metadata prepared for the submitting user will be returned. If user input is not required on the request, only the request-id will be returned.</p>


<h3>HTTP Operation</h3>
<p class="httpverb">POST</p>


<h3>Path</h3>
<pre class="soaapidoc_endpoint">/assets</pre>


<h3>Parameters</h3>
<dl>
<dt>user-id (string)</dt>
<dd>The user submitting the asset. User id will be used to implicitly lock the asset and track asset change history. This parameter is optional and is defaulted to the Lifecycle Manager application user.</dd>
<dt>submit (boolean)</dt>
<dd>Indicates whether the asset should be submitted for the initial approval process. Default is <strong>true</strong>.</dd>
</dl>


<h3>Request Body</h3>
<dl>
<dt>JSON</dt>
<dd>Asset data in JSON format. File fields must be explicitly handled by client through artifact management API operations.</dd>
<dt>Multipart/form-data</dt>
<dd>Asset and accompanying Files in multipart form style. Files will be implicitly created as artifacts</dd>
</dl>


<h3>Response</h3>
<dl>
<dt>JSON</dt>
<dd>If submit is <strong>true</strong> and submitter request input is required, the request id along with the request data and format metadata prepared for the submitter will be returned in a single JSON structure.</dd>
<dd>If submit is <strong>true</strong> and submitter request input is not required, the returned JSON structure will contain only the request-id.</dd>
<dd>If submit is <strong>false</strong>, no data is returned.</dd>
</dl>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h2 id="asset_update_asset">Update Asset</h2>
<p>Update an existing asset. By default the submission process for next approval process in the asset's lifecycle is triggered. If the submission process requires request input from the user the request data and format metadata prepared for the submitting user will be returned. If user input is not required on the request, only the request-id will be returned.</p>


<h3>HTTP Operation</h3>
<p class="httpverb">POST</p>


<h3>Path</h3>
<pre class="soaapidoc_endpoint">/assets/{asset-id}</pre>


<h3>Parameters</h3>
<dl>
<dt>user-id (string)</dt>
<dd>The user submitting the asset. User id will be used to implicitly lock the asset and track asset change history. This parameter is optional and is defaulted to the Lifecycle Manager application user.</dd>
<dt>submit (boolean)</dt>
<dd>Indicates whether the asset should be submitted for the next approval process. Default is <strong>true</strong>.</dd>
<dt>overwrite (Boolean)</dt>
<dd>Indicates that any changes to the asset since the asset was fetched by the client are overwritten. If <strong>false</strong> a locking error will be thrown if the asset is out-of-sync and asset will not be updated. The default value is <strong>true</strong>.</dd>
</dl>


<h3>Request Body</h3>
<dl>
<dt>JSON</dt>
<dd>Asset data in JSON format. File fields must be explicitly handled by client through artifact management API operations.</dd>
<dt>Multipart/form-data</dt>
<dd>Asset and accompanying Files in multipart form style. Updated File fields (those with a value set) will be implicitly be created as artifacts or replace existing artifacts</dd>
</dl>


<h3>Response</h3>
<dl>
<dt>JSON</dt>
<dd>If submit is <strong>true</strong> and submitter request input is required, the request id along with the request data and format metadata prepared for the submitter will be returned in a single JSON structure.</dd>
<dd>If submit is <strong>true</strong> and submitter request input is not required, the returned JSON structure will contain only the request-id.</dd>
<dd>If submit is <strong>false</strong>, no data is returned.</dd>
</dl>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h2 id="asset_get_asset">Get Asset</h2>
<p>Retrieve the current asset data and format metadata for an existing asset. By default this will be the data of the latest <strong>in-progress</strong> version of the asset in Lifecycle Manager, but it is also possible to specify that the latest <strong>approved</strong> version of the asset be returned.</p>


<h3>HTTP Operation</h3>
<p class="httpverb">GET</p>


<h3>Path</h3>
<pre class="soaapidoc_endpoint">/assets/{asset-id}</pre>


<h3>Parameters</h3>
<dl>
<dt>role (string[&#160;])</dt>
<dd>Roles the user possesses. These may optionally be used by the Lifecycle Manager configuration for filtering the fields presented on the asset.</dd>
<dt>approved-version (Boolean)</dt>
<dd>A value of <strong>true</strong> indicates that the latest approved version of the asset in Lifecycle Manager should be returned (the <strong>published</strong> asset in Lifecycle Manager terms). A value of <strong>false</strong> indicates that the latest <strong>in-progress</strong> version of the asset in Lifecycle Manager should be returned even if the approval of that version is not completed. The default value is <strong>false</strong>.</dd>
</dl>


<h3>Response</h3>
<dl>
<dt>JSON</dt>
<dd>Asset data and field metadata.</dd>
</dl>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h2 id="asset_delete_asset">Delete Asset</h2>
<p>Delete an existing asset.</p>


<h3>HTTP Operation</h3>
<p class="httpverb">DELETE</p>


<h3>Path</h3>
<pre class="soaapidoc_endpoint">/assets/{asset-id}</pre>


<h3>Parameters</h3>
<dl>
<dt>user-id (string)</dt>
<dd>The user deleting the asset. User id will be used to implicitly lock the asset prior to deletion and track asset change history.</dd>
</dl>


<h3>Response</h3>
<p>NONE</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h2 id="asset_lock_asset">Lock Asset</h2>
<p>Explicitly lock an existing asset. If already locked by the specified user the operation has no effect. If the asset is locked by a different user the operation will fail.</p>


<h3>HTTP Operation</h3>
<p class="httpverb">POST</p>


<h3>Path</h3>
<pre class="soaapidoc_endpoint">/assets/locks/{asset-id}</pre>


<h3>Parameters</h3>
<dl>
	<dt>user-id (string)</dt>
	<dd>The user locking the asset. This parameter is optional and is defaulted to the Lifecycle Manager application user.</dd>
</dl>


<h3>Response</h3>
<p>NONE</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h2 id="asset_unlock_asset">Unlock Asset</h2>
<p>Explicitly unlock an existing asset. If the asset is already locked by the specified user the operation has no effect. If the asset is locked by a different user the operation will fail.</p>


<h3>HTTP Operation</h3>
<p class="httpverb">DELETE</p>


<h3>Path</h3>
<pre class="soaapidoc_endpoint">/assets/locks/{asset-id}</pre>


<h3>Parameters</h3>
<dl>
	<dt>user-id (string)</dt>
	<dd>The user unlocking the asset. This must match the user-id the asset is currently locked under. This parameter is optional and is defaulted to the Lifecycle Manager application user.</dd>
</dl>


<h3>Response</h3>
<p>NONE</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h2 id="asset_get_assets">Get Assets</h2>
<p>Query existing assets for those meeting the specified criteria. Data for specified fields is returned for each matching asset. The query may be specified to consider either in-progress or approved versions of assets based on <strong>approved-version</strong> parameter.</p>


<h3>HTTP Operation</h3>
<p class="httpverb">GET</p>


<h3>Path</h3>
<pre class="soaapidoc_endpoint">/assets</pre>


<h3>Parameters</h3>
<dl>
<dt>approved-version (Boolean)</dt>
<dd>A value of <strong>true</strong> indicates that only the latest approved versions of the assets in Lifecycle Manager be queried.</dd>
<dd>A value of <strong>false</strong> indicates that the latest <strong>in-progress</strong> versions of the assets in Lifecycle Manager are queried. The default value is <strong>false</strong>.</dd>
<dt>page (integer)</dt>
<dd>The number of the page of asset results to retrieve, starting with 1. The default value is <strong>1</strong>.</dd>
<dt>page-size (integer)</dt>
<dd>The number of result assets to return per page. The default value is 500</dd>
<dt>include-field (string[&#160;])</dt>
<dd>Names of fields to be included for each asset in the results</dd>
<dt>order-by-fields</dt>
<dd>Ordered list of field names to use in ordering results. Specified fields should be string or decimal type. Field names are separated using <strong>|</strong>. For example <strong>order-by-fields=field1|field2|field3</strong></dd>
<dt>filter-field (string[&#160;])</dt>
<dd>A list of required values for designated asset fields names may be provided to filter the results of the query. Values are assumed to be in the form <strong>&lt;asset-field-name&gt;:&lt;asset-field-value&gt;</strong> and must specify valid asset fields for the asset-type. For example, specifying a parameter of <strong>filter- field=color:blue</strong> indicates that only assets with a <strong>color</strong> field value of <strong>blue</strong> should be selected. Multiple values may be specified for a single field by specifying them in multiple parameters with the same field name. In this case the value will be logically OR'ed together.</dd>
<dd>For example, specifying <strong>&amp;filter-field=color:blue&amp; filter-field=color:green</strong> will match assets with either <strong>blue</strong> or <strong>green</strong> as a value for the <strong>color</strong> field.</dd>
</dl>


<h3>Response</h3>
<dl>
<dt>JSON</dt>
<dd>A JSON structure with an array of asset data elements containing the fields specified in the include-field parameters.</dd>
</dl>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h2 id="asset_create_asset_file">Create Asset File</h2>
<p>Create a <strong>by value</strong> File in Lifecycle Manager for the specified asset field. Used by clients explicitly managing asset File fields.</p>


<h3>HTTP Operation</h3>
<p class="httpverb">POST</p>


<h3>Path</h3>
<pre class="soaapidoc_endpoint">/assets/{asset-id}/files/{field}</pre>


<h3>Parameters</h3>
<p>NONE</p>


<h3>Request Body</h3>
<dl>
<dt>Multipart/form-data</dt>
<dd>File contents</dd>
</dl>

<h3>Response</h3>
<p>NONE</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h2 id="asset_update_asset_file">Update Asset File</h2>
<p>Update a <strong>by value</strong> File in Lifecycle Manager for the specified asset field. Used by clients explicitly managing asset File fields.</p>


<h3>HTTP Operation</h3>
<p class="httpverb">PUT</p>


<h3>Path</h3>
<pre class="soaapidoc_endpoint">/assets/{asset-id}/files/{field}</pre>


<h3>Parameters</h3>
<p>NONE</p>


<h3>Request Body</h3>
<dl>
	<dt>Multipart/form-data</dt>
	<dd>File contents</dd>
</dl>


<h3>Response</h3>
<p>NONE</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h2 id="asset_get_asset_file">Get Asset File</h2>
<p>Retrieve a <strong>by value</strong> File in Lifecycle Manager for the specified asset field. Used by clients explicitly managing asset File fields.</p>


<h3>HTTP Operation</h3>
<p class="httpverb">GET</p>



<h3>Path</h3>
<pre class="soaapidoc_endpoint">/assets/{asset-id}/files/{field}</pre>


<h3>Parameters</h3>
<p>NONE</p>


<h3>Response</h3>
<dl>
	<dt>Application/octet-stream</dt>
	<dd>File contents.</dd>
</dl>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h2 id="asset_delete_artifact">Delete Artifact</h2>
<p>Delete a <strong>by value</strong> File in Lifecycle Manager for the specified asset field. Used by clients explicitly managing asset File fields.</p>


<h3>HTTP Operation</h3>
<p class="httpverb">DELETE</p>


<h3>Path</h3>
<pre class="soaapidoc_endpoint">/assets/{asset-id}/files/{field}</pre>


<h3>Parameters</h3>
<p>NONE</p>


<h3>Response</h3>
<p>NONE</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>




<hr class="divide_hr" />
<h2 id="operations_request">Request Operations</h2>




<h2 id="request_submit_request">Submit Request</h2>
<p>Clients should use this operation to submit a request completed by the submitting user of an asset.</p>


<h3>HTTP Operation</h3>
<p class="httpverb">POST</p>


<h3>Path</h3>
<pre class="soaapidoc_endpoint">/requests</pre>


<h3>Parameters</h3>
<dl>
<dt>user-id (string)</dt>
<dd>The submitting user. User id will be used in the request history. This parameter is optional and is defaulted to the Lifecycle Manager application user.</dd>
</dl>


<h3>Request Body</h3>
<dl>
<dt>JSON</dt>
<dd>Request data in JSON format. File fields must be explicitly handled by client through File management API operations.</dd>
<dt>Multipart/form-data</dt>
<dd>Request and accompanying Files in multipart form style. Files will be implicitly created as File properties.</dd>
</dl>


<h3>Response</h3>
<p>NONE</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h2 id="request_update_request">Update Request</h2>
<p>Update, approve or reject an existing request. The type of action performed is determined by the <strong>action</strong> parameter.</p>


<h3>HTTP Operation</h3>
<p class="httpverb">POST</p>


<h3>Path</h3>
<pre class="soaapidoc_endpoint">/requests/{request-id}</pre>


<h3>Parameters</h3>
<dl>
<dt>user-id (string)</dt>
<dd>The user performing the action. User id will be used in the request history. This parameter is optional and is defaulted to the Lifecycle Manager application user.</dd>
<dt>action (string)</dt>
<dd>Indicates whether the user is approving, rejecting or just updating the request. Acceptable</dd>
<dd>values are <strong>approve</strong>, <strong>reject</strong>, or <strong>update</strong>. The default value is <strong>update</strong>.</dd>
<dt>approver-role (string)</dt>
<dd>Role for which the specified user is approving or rejecting the request. This parameter must be provided for <strong>approve</strong> or <strong>reject</strong> actions and must identify a currently pending role for the specified request.</dd>
</dl>


<h3>Request Body</h3>
<dl>
<dt>JSON</dt>
<dd>Request data in JSON format. File fields must be explicitly handled by client through File management API operations.</dd>
<dt>Multipart/form-data</dt>
<dd>Request and accompanying Files in multipart form style. Files will be implicitly created as File properties</dd>
</dl>


<h3>Response</h3>
<p>NONE</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h2 id="request_get_request">Get Request</h2>
<p>Retrieve the current data and format metadata for an existing request.</p>


<h3>HTTP Operation</h3>
<p class="httpverb">GET</p>



<h3>Path</h3>
<pre class="soaapidoc_endpoint">/requests/{request-id}</pre>


<h3>Parameters</h3>
<dl>
<dt>role (string[&#160;])</dt>
<dd>Roles the user possesses. These may optionally be used by the Lifecycle Manager configuration for filtering the fields presented on the request.</dd>
<dt>approver-role (string)</dt>
<dd>In the case where the request is being retrieved for approval or rejection, this specifies the role the request should be prepared for. This parameter must identify a currently pending role for the specified request. In the case where the request is being retrieved for display or update this parameter may be omitted.</dd>
</dl>


<h3>Response</h3>
<dl>
<dt>JSON</dt>
<dd>Request data and field metadata.</dd>
</dl>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h2 id="request_delete_request">Delete Request</h2>
<p>Delete an existing request.</p>


<h3>HTTP Operation</h3>
<p class="httpverb">DELETE</p>


<h3>Path</h3>
<pre class="soaapidoc_endpoint">/requests/{request-id}</pre>


<h3>Parameters</h3>
<p>NONE</p>


<h3>Response</h3>
<p>NONE</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h2 id="request_get_requests">Get Requests</h2>
<p>Query existing requests for those meeting the specified criteria. Data for specified fields is returned for each matching request.</p>


<h3>HTTP Operation</h3>
<p class="httpverb">GET</p>



<h3>Path</h3>
<pre class="soaapidoc_endpoint">/requests</pre>


<h3>Parameters</h3>
<dl>
<dt>requester-id (string)</dt>
<dd>User Id of the submitting user (optional).</dd>
<dt>asset-id (string)</dt>
<dd>Id of the asset the request is associated with (optional).</dd>
<dt>pending-role (string)</dt>
<dd>Name of a role the request is currently pending approval from (optional).</dd>
<dt>page (integer)</dt>
<dd>The number of the page of request results to retrieve, starting with 1. The default value is <strong>1</strong>.</dd>
<dt>page-size (integer)</dt>
<dd>The number of result requests to return per page. The default value is 500</dd>
<dt>include-field (string[&#160;])</dt>
<dd>Names of fields to be included for each request in the results</dd>
<dt>order-by-fields</dt>
<dd>Ordered list of field names to use in ordering results. Specified fields should be string or decimal type. Field names are separated using <strong>|</strong>. For example <strong>order-by-fields=field1|field2|field3</strong></dd>
<dt>filter-field (string[&#160;])</dt>
<dd>A list of required values for designated request fields names may be provided to filter the results of the query. Values are assumed to be in the form <strong>&lt;asset-field-name&gt;:&lt;asset-field-value&gt;</strong> and must specify valid asset fields for the request. For example, specifying a parameter of <strong>filter- field=color:blue</strong> indicates that only requests with a <strong>color</strong> field value of <strong>blue</strong> should be selected. Multiple values may be specified for a single field by specifying them in multiple parameters with the same field name. In this case the value will be logically OR'ed together.</dd>
<dd>For example, specifying <strong>&amp;filter-field=color:blue&amp; filter-field=color:green</strong> will match requests with either <strong>blue</strong> or <strong>green</strong> as a value for the <strong>color</strong> field.</dd>
</dl>


<h3>Response</h3>
<dl>
<dt>JSON</dt>
<dd>A JSON structure with an array of request data elements containing the fields specified in the include- field parameters.</dd>
</dl>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h2 id="request_create_request_file">Create Request File</h2>
<p>Create a <strong>by value</strong> File in Lifecycle Manager for the specified request field. Used by clients explicitly managing request File fields.</p>


<h3>HTTP Operation</h3>
<p class="httpverb">POST</p>



<h3>Path</h3>
<pre class="soaapidoc_endpoint">/requests/{request-id}/files/{field}</pre>


<h3>Parameters</h3>
<p>NONE</p>


<h3>Request Body</h3>
<dl>
<dt>Multipart/form-data</dt>
<dd>File contents</dd>
</dl>


<h3>Response</h3>
<p>NONE</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h2 id="request_update_request_file">Update Request File</h2>
<p>Update a <strong>by value</strong> File in Lifecycle Manager for the specified request field. Used by clients explicitly managing request File fields.</p>


<h3>HTTP Operation</h3>
<p class="httpverb">PUT</p>


<h3>Path</h3>
<pre class="soaapidoc_endpoint">/requests/{request-id}/files/{field}</pre>


<h3>Parameters</h3>
<p>NONE</p>


<h3>Request Body</h3>
<p>Multipart/form-data</p>
<p>File contents</p>


<h3>Response</h3>
<p>NONE</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h2 id="request_get_asset_file">Get Asset File</h2>
<p>Retrieve a <strong>by value</strong> File in Lifecycle Manager for the specified request field. Used by clients explicitly managing request File fields.</p>


<h3>HTTP Operation</h3>
<p class="httpverb">GET</p>



<h3>Path</h3>
<pre class="soaapidoc_endpoint">/requests/{request-id}/files/{field}</pre>


<h3>Parameters</h3>
<p>NONE</p>


<h3>Response</h3>
<dl>
<dt>Application/octet-stream</dt>
<dd>File contents.</dd>
</dl>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h2 id="request_delete_artifact">Delete Artifact</h2>
<p>Delete a <strong>by value</strong> File in Lifecycle Manager for the specified request field. Used by clients explicitly managing request File fields.</p>


<h3>HTTP Operation</h3>
<p class="httpverb">DELETE</p>


<h3>Path</h3>
<pre class="soaapidoc_endpoint">/assets/{asset-id}/files/{field}</pre>


<h3>Parameters</h3>
<p>NONE</p>


<h3>Response</h3>
<p>NONE</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



