---
layout: page
title: Lifecycle Manager | AnySource Asset Adapter User Guide | Overview
description: Contains information about the AnySource Asset Adapter toolkit, a framework for automatically assembling and loading assets into Lifecycle Manager.
product: lm
category: ref
weight: 05
type: page
nav-title: ASAA User Guide
---
<h2 id="top">AnySource Asset Adapter User Guide</h2>
<p>Contains information about the AnySource Asset Adapter toolkit, a framework for automatically assembling and loading assets into Lifecycle Manager.</p>
<p><a href="../install/install_lm_v80x.htm" class="button secondary">Installing Lifecycle Manager</a> 
<a href="../SysAdmin-OSGi.html" class="button secondary">System Administrator Guide</a>
</p>
<div class = "divider1"></div>



<h3 style="color: gray;">Table of Contents</h3>
<ol class="table_of_contents">
	<li><a href="#overview">Overview</a>
		<ol>
			<li><a href="#overview_func">Functional Overview</a></li>
			<li><a href="#xml_rules_file_sample">Sample XML Rules File</a></li>
			<li><a href="#sys_req">System Requirements</a></li>
			<li><a href="#install_instructions">Install Instructions</a></li>
			<li><a href="#sanity_test_running">Running the Sanity Test Sample</a></li>
			<li><a href="#xml_rules_file">The XML Rules File</a></li>
			<li><a href="#asset_adapter_invoke">Invoking the Asset Adapter</a></li>
			<li><a href="#passwords_encrypting">Encrypting Passwords</a></li>
		</ol>
	</li>
	<li><a href="#tasks_ant">Ant-specific Tasks</a></li>
	<li><a href="#tasks_asset_adapter">Asset Adapter Tasks</a>
		<ol>
			<li><a href="#s03_01">assetadapter</a></li>
			<li><a href="#s03_02">connection</a></li>
			<li><a href="#s03_03">assetfiles</a></li>
			<li><a href="#s03_04">assembly</a></li>
			<li><a href="#s03_05">uploadincompletepolicy</a></li>
			<li><a href="#s03_06">assembly</a></li>
			<li><a href="#s03_07">childassembly</a></li>
		</ol>
	</li>
	<li><a href="#tasks_asset_collab">Asset Collaboration Tasks</a></li>
	<li><a href="#tasks_retriever">Retriever Tasks</a>
		<ol>
			<li><a href="#s05_01">fsfileset</a></li>
			<li><a href="#s05_02">include</a></li>
			<li><a href="#s05_03">exclude</a></li>
			<li><a href="#s05_04">parserretriever</a></li>
		</ol>
	</li>
	<li><a href="#tasks_parser">Parser Tasks</a>
		<ol>
			<li><a href="#s06_01">textparser</a></li>
			<li><a href="#s06_02">key</a></li>
			<li><a href="#s06_03">expression</a></li>
			<li><a href="#s06_04">xmap (or any other Mapper task)</a></li>
			<li><a href="#s06_05">xmlparser</a></li>
			<li><a href="#s06_06">key</a></li>
			<li><a href="#s06_07">expression</a></li>
			<li><a href="#s06_08">xmap (or any other Mapper task)</a></li>
			<li><a href="#s06_09">javaxmlparser</a></li>
			<li><a href="#s06_10">ejbfunctionsparser</a></li>
			<li><a href="#s06_11">javafunctionsparser</a></li>
		</ol>
	</li>
	<li><a href="#tasks_value">Value Tasks</a>
		<ol>
			<li><a href="#s07_01">parservalue</a></li>
			<li><a href="#s07_02">parserkeys</a></li>
			<li><a href="#s07_03">parserevaluate</a></li>
			<li><a href="#s07_04">url</a></li>
			<li><a href="#s07_05">urlpath</a></li>
			<li><a href="#s07_06">urlparameter</a></li>
			<li><a href="#s07_07">latestversion</a></li>
			<li><a href="#s07_08">namevalueattribute</a></li>
		</ol>
	</li>
	<li><a href="#tasks_asset_modifier">Asset Modifier Tasks</a>
		<ol>
			<li><a href="#s08_01">assetattribute</a></li>
			<li><a href="#s08_02">parservalue</a></li>
			<li><a href="#s08_03">classifier</a></li>
			<li><a href="#s08_04">classifiername</a></li>
			<li><a href="#s08_05">classifiervalue</a></li>
			<li><a href="#s08_06">parservalue</a></li>
			<li><a href="#s08_07">parserkeys</a></li>
			<li><a href="#s08_08">artifact</a></li>
			<li><a href="#s08_09">artifactname</a></li>
			<li><a href="#s08_10">artifactcategory</a></li>
			<li><a href="#s08_11">artifactreference</a></li>
			<li><a href="#s08_12">artifacttype</a></li>
			<li><a href="#s08_13">artifactversion</a></li>
			<li><a href="#s08_14">artifactcontent</a></li>
			<li><a href="#s08_15">assetrelationship</a></li>
			<li><a href="#s08_16">relationshipname</a></li>
			<li><a href="#s08_17">assetname</a></li>
			<li><a href="#s08_18">assetversion</a></li>
			<li><a href="#s08_19">assetmerge</a></li>
			<li><a href="#s08_20">artifactinclude and artifactexclude</a></li>
			<li><a href="#s08_21">classifierinclude and classifierexclude</a></li>
			<li><a href="#s08_22">relatedassetinclude and relatedassetexclude</a></li>
		</ol>
	</li>
	<li><a href="#tasks_mapper">Mapper Tasks</a>
		<ol>
			<li><a href="#s09_01">encodeurl</a></li>
			<li><a href="#s09_02">prepend</a></li>
			<li><a href="#s09_03">substitute</a></li>
			<li><a href="#s09_04">substring</a></li>
			<li><a href="#s09_05">xmap</a></li>
			<li><a href="#s09_06">xsltmapper</a></li>
		</ol>
	</li>
	<li><a href="#tasks_misc">Miscellaneous Tasks</a>
		<ol>
			<li><a href="#s10_01">variable</a></li>
			<li><a href="#s10_02">assetsource</a></li>
			<li><a href="#s10_03">connection</a></li>
			<li><a href="#s10_04">cachetemplates</a></li>
			<li><a href="#s10_05">assetdiff</a></li>
			<li><a href="#s10_06">artifactinclude and artifactexclude</a></li>
			<li><a href="#s10_07">classifierinclude and classifierexclude</a></li>
			<li><a href="#s10_08">relatedassetinclude and relatedassetexclude</a></li>
			<li><a href="#s10_09">assetskip</a></li>
			<li><a href="#s10_10">if</a></li>
			<li><a href="#s10_11">Conditional</a></li>
			<li><a href="#s10_12">then</a></li>
			<li><a href="#s10_13">else</a></li>
			<li><a href="#s10_14">script</a></li>
			<li><a href="#s10_15">retrieverwriter</a></li>
		</ol>
	</li>
	<li><a href="#tasks_cvs">CVS Tasks (optional)</a>
		<ol>
			<li><a href="#s11_01">cvsfileset</a></li>
		</ol>
	</li>
	<li><a href="#tasks_clearcase">ClearCase Tasks (optional)</a>
		<ol>
			<li><a href="#s12_01">cc_attributevalues</a></li>
			<li><a href="#s12_02">cc_files</a></li>
			<li><a href="#s12_03">cc_files</a></li>
			<li><a href="#s12_04">cc_attribute</a></li>
			<li><a href="#s12_05">cc_fileattribute</a></li>
			<li><a href="#s12_06">cc_fileversion</a></li>
		</ol>
	</li>
	<li><a href="#tasks_github">GitHub Tasks (optional)</a>
		<ol>
			<li><a href="#s13_01">githubrepository</a></li>
			<li><a href="#s13_02">githubfileinfo</a></li>
			<li><a href="#s13_03">githubfileset</a></li>
		</ol>
	</li>
	<li><a href="#tasks_rtc">Rational Team Concert (RTC) Tasks (optional)</a>
		<ol>
			<li><a href="#s14_01">rtcconnection</a></li>
			<li><a href="#s14_02">rtcfileinfo</a></li>
			<li><a href="#s14_03">rtcfileset</a></li>
		</ol>
	</li>
	<li><a href="#tasks_tfs">Team Foundation Server (TFS) Tasks (optional)</a>
		<ol>
			<li><a href="#s15_01">tfsconnection</a></li>
			<li><a href="#s15_02">tfsfileinfo</a></li>
			<li><a href="#s15_03">tfsfileset</a></li>
		</ol>
	</li>
	<li><a href="#tasks_webdav">WebDAV Tasks (optional)</a>
		<ol>
			<li><a href="#s16_01">webdavfileset</a></li>
		</ol>
	</li>
</ol>
<div class = "divider1"></div>



<h3 id="overview">Overview</h3>
<p>The AnySource Asset Adapter toolkit is a framework for automatically assembling and loading assets into Lifecycle Manager. This toolkit provides a rich set of functions for loading common assets, as well as an extensible framework for creating customized solutions that fit your particular needs. This document will show you how to get started using the Asset Adapter from installation, to running a sample, to creating your own rules file for auto-loading assets. For information on extending the capabilities of the toolkit, see <strong>AnySource Asset Adapter Developer Guide</strong>.</p>
<p>Using the Asset Adapter to create assets is most useful when capturing large quantities of assets and automating asset updates based on changes to asset information and artifacts held by other third party tools. These external tools are referred to as Asset Sources, and may include source code control systems, document control systems, UDDI registries, etc.</p>
<p>The Asset Adapter provides an XML-driven framework that is used to define and automate the asset capture process. In addition, Asset Adapter capabilities can be directly accessed through programmatic (Java) and command line means if desired. Underlying these capabilities is a series of SOAP-based Web services that connect the underlying Automation Extensions client to a library.</p>
<p>The AnySource Asset Adapter framework uses AnySource parsers to extract and interpret information from the various files that make up the asset. Parsers are typically used to analyze and gather asset metadata for eventual inclusion into the asset being assembled, and are invoked by XML-driven tasks that define the asset capture process. The Asset Adapter then directly publishes the asset information to the Asset Library where it can be automatically made available to asset users or, optionally, it can be reviewed, corrected and augmented by ACEs and Asset Publishers as appropriate. Akana provides out- of-the-box parsers for open-ended text-based and XML-based processing, as well as specialized Java sources and WSDL parsers. In addition, custom AnySource parsers can be written in Java, optionally taking advantage of Java's ability to call out to other languages of choice, including scripting languages such as Perl, Python, etc.</p>
<p>The AnySource Asset Adapter has been integrated with leading SCM systems such as IBM ClearCase, CVS, WebDAV, and SVN, allowing asset artifacts to be loaded into and retrieved from the Library in conjunction with the associated SCM system.</p>
<p>Each integration is a separately licensed feature. Tasks related to each integration are documented here and are indicated as optional. Contact support for more information.</p>
<p>Documentation provided with the AnySource Asset Adapter includes:</p>
<ul>
	<li>This User Guide which describes how to install and use the AnySource Asset Adapter toolkit</li>
	<li>A Developer Guide which describes how to write AnySource Asset Adapter extensions</li>
	<li>Best Practices documents that provide SCM-specific guidance for usage and deployment of the AnySource Asset Adapter</li>
	</ul>
<p>This section includes:</p>
<ul>
	<li><a href="#overview_func">Functional Overview</a></li>
	<li><a href="#xml_rules_file_sample">Sample XML Rules File</a></li>
	<li><a href="#sys_req">System Requirements</a></li>
	<li><a href="#install_instructions">Install Instructions</a></li>
	<li><a href="#sanity_test_running">Running the Sanity Test Sample</a></li>
	<li><a href="#xml_rules_file">The XML Rules File</a></li>
	<li><a href="#asset_adapter_invoke">Invoking the Asset Adapter</a></li>
	<li><a href="#passwords_encrypting">Encrypting Passwords</a></li>
</ul>


<h4 id="overview_func">Functional Overview</h4>
<p><img src="assets/assetadapter_diagram.jpg" alt="Asset Adapter functional overview diagram" /></p>
<p>The AnySource Asset Adapter runs on a Windows workstation. It reads an XML rules file and executes tasks defined in the file as various Retrievers, Parsers, and Asset Modifiers. The Retrievers read from a file system, Web server, or Source Control Manager as appropriate. Parsers take the data from Retrievers and extract information. Asset Modifiers use Parsers and Retrievers to build up metadata values for an Asset. The Asset Adapter then publishes the assets via Automation Extensions. The Lifecycle Manager client may retrieve asset artifact files directly from Lifecycle Manager or from a Web server. The Web server may work in concert with a particular SCM, allowing files to reside in their natural system of record instead of Lifecycle Manager.</p>


<h4 id="xml_rules_file_sample">Sample XML Rules File</h4>
<p>To get an initial understanding of how the AnySource Asset Adapter works, an example may be helpful.</p>
<p>It consists of a sample XML rules file which shows the basic tasks required for assembling and publishing an asset. Following the sample is a short description of the different elements. This is intended to be an overview only. The details at this point are not important, and will be explained in more depth later.</p>
<pre>&lt;?xml version="1.0"?&gt;
&lt;project name="Asset Adapter 2.0" default="load"&gt;
  &lt;property name="default-overview-file" value="default-overview.txt" /&gt;
  &lt;property environment="env" /&gt;
  &lt;property name="connections-file" value="${env.ASSET_ADAPTER_AE_HOME}/data/connections.xml" /&gt;
  &lt;property name="connection-name" value="default" /&gt;
  &lt;property name="source-dir" value="${basedir}" /&gt;
  &lt;taskdef file="${env.ASSET_ADAPTER_HOME}/bin/assetadapter.properties" /&gt;
  &lt;target name="load"&gt;
    &lt;assetadapter action="publish" offline="false"&gt;
      &lt;connection file="${connections-file}" name="${connection-name}" /&gt;
      &lt;!-- Define primary asset files --&gt;
      &lt;assetfiles id="assetfiles" assemblyid="app1"&gt;
        &lt;!-- fileset used to locate primary asset files --&gt;
        &lt;fsfileset id="textfiles" dir="${source-dir}"&gt;
          &lt;include name="*.txt" /&gt;
        &lt;/fsfileset&gt;
      &lt;/assetfiles&gt;
      &lt;assembly id="app1" template="generic"&gt;
        &lt;!-- Set variables to use in metadata values --&gt;
        &lt;variable name="asset-dir" value="@asset-uri@"&gt;
          &lt;xmap from="^(.*)\\.*$$" to="\1" /&gt;
        &lt;/variable&gt;
        &lt;variable name="asset-file" value="@asset-uri@"&gt;
          &lt;xmap from="^.*\\(.*)$" to="\1" /&gt;
        &lt;/variable&gt;
        &lt;variable name="asset-name-no-ext" value="@asset-file@"&gt;
          &lt;xmap from="^(.*)\." to="\1" /&gt;
        &lt;/variable&gt;
        &lt;!-- Parse description file, set description to the first 240 characters --&gt;
        &lt;textparser id="description-parser" file="@asset-uri@"&gt;
          &lt;key name="description" multivalue="false" expression="^(.{0,240})" /&gt;
        &lt;/textparser&gt;
        &lt;assetattribute name="name" value="@asset-name-no-ext@" /&gt;
        &lt;assetattribute name="version" value="1.0" /&gt;
        &lt;assetattribute name="description"&gt;
          &lt;parservalue parserid="description-parser" parserkey="description" /&gt;
        &lt;/assetattribute&gt;
        &lt;classifier name="asset-type" value="Application" /&gt;
        &lt;classifier name="vendor" value="LLI" /&gt;
        &lt;classifier name="intended-domain-general" value="Education" /&gt;
        &lt;classifier name="autoload" value="current" /&gt;
        &lt;artifact category="overview" type="by-value" failonerror="true" maxoccurs="1" variable="overview-file-name" file="@asset-uri@" /&gt;
      &lt;/assembly&gt;
    &lt;/assetadapter&gt;
  &lt;/target&gt;
&lt;/project&gt;</pre>
<p>In the above:</p>
<ul>
	<li>When executed, the default task, named <strong>load</strong>, is run.</li>
	<li>This invokes the <strong>assetadapter</strong> task which defines a <strong>connection</strong> to a Library and one <strong>assembly</strong> for creating assets of type <strong>Application</strong> using the <strong>generic</strong> asset capture template.</li>
	<li>The <strong>assetfiles</strong> task defines the set of primary asset files ending in a <strong>.txt</strong> extension in the directory ${source.dir}, which is in the <strong>samples/sanity</strong> sub-directory of the Asset Adapter home (install) directory.</li>
	<li>The list of primary asset files is passed to the <strong>assembly</strong> task associated with the <strong>assemblyid</strong> attribute. For each file from the list, a set of tasks are invoked in sequence. First, the predefined variable <strong>asset-uri</strong> is implicitly set to the current primary asset filename. (Also, the predefined variable <strong>primary-retriever-id</strong> is set to the ID of the primary retriever, <strong>assetfiles</strong>, which is not used in this example).</li>
	<li>The first few tasks set up variables named <strong>asset-dir</strong>, <strong>asset-file</strong>, and <strong>asset-name-no-ext</strong>. They are derived from the <strong>asset-uri</strong> variable. The values for the variables are set using nested Mapper tasks, in this case <strong>xmap</strong>, which define regular expressions that remove portions of the filename.</li>
	<li>Next is a Parser for extracting the first 240 characters from the primary asset file.</li>
	<li>Then a set of Asset Modifiers which set the asset name, version and description, a few classifiers, and finally, an overview artifact which consists of the asset file itself.</li>
</ul>


<h4 id="sys_req">System Requirements</h4>
<ul>
	<li>Automation Extensions (from Support Center/Download Center).</li>
	<li>See the Download Center for a list of supported Windows versions and disk space requirements for Asset Adapter and Automation Extensions.</li>
</ul>


<h4 id="install_instructions">Install Instructions</h4>
<ul>
	<li>Install Automation Extensions.</li>
	<li>Create an install directory; for example, c:\Program Files\AnySource Asset Adapter.</li>
	<li>Unzip the contents of assetadapter.zip into this directory.</li>
</ul>
<h5>For J2EE</h5>
<p>From a command window:</p>
<ul>
	<li>cd the install directory</li>
	<li>cd to the bin directory</li>
	<li>copy setup.bat.tpl setup.bat</li>
	<li>Edit setup.bat with a text editor.</li>
	<li>Change @ASSET_ADAPTER_HOME@ to the install directory</li>
	<li>Save setup.bat</li>
	<li>Run setup.bat</li>
</ul>


<h4 id="sanity_test_running">Running the Sanity Test Sample</h4>
<p>Create a test library from the Admin Console of your installation.</p>
<p>Create a connection in your Automation Extensions <strong>connections.xml</strong> file:</p>
<ul>
	<li>cd %LLI_AUTOMATION%\data</li>
	<li>Edit <strong>connections.xml</strong> (if it does not exist, create it)</li>
</ul>
<p>Here is an sample <strong>connections.xml</strong> file:</p>
<pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;connections active="default"&gt;
  &lt;connection name="default" 
  library="mylibrary" 
  host="host" 
  user="support" 
  authenticator="LDAP_AUTHENTICATOR" 
  password="" /&gt;
&lt;/connections&gt;</pre>
<p>The file needs to contain an entry for a connection to the library you wish to publish to. Fill in the library name, the host of the installation, and the userid with ACE authority to the library. Note: make the password entry blank. You may have multiple connection entries. Connection names are arbitrary, but the sanity test uses a connection named <strong>default</strong>.</p>
<p>Cache the password in the connections file for the connection named <strong>default</strong>.</p>
<ul>
	<li>cd ..\bin</li>
	<li>LLICmd start</li>
	<li>LLICmd login <strong>..\data\connections.xml</strong> default</li>
	<li>Type in your password</li>
	<li>LLICmd stop</li>
</ul>
<p>Now check the <strong>connections.xml</strong> file. It should have an encrypted password for the connection entry.</p>
<p>The sanity test sample files are in the samples\sanity directory of the installation directory</p>
<ul>
	<li>cd %ASSET_ADAPTER_HOME%\samples\sanity</li>
	<li>run test.bat</li>
</ul>
<p>The results should be an asset created named <strong>TestAsset/1.0</strong>in your library.</p>


<h4 id="xml_rules_file">The XML Rules File</h4>
<p>The AnySource Asset Adapter is built on Jakarta Ant and uses an Ant build file to run. This file is referred to as the XML rules file because it will contain the instructions you set for assembling your assets. Since this file is an Ant build file, it may contain Ant-specific tasks as well as Asset Adapter-specific tasks. For more information on Ant, see <a href="http://jakarta.apache.org/ant" title="http://jakarta.apache.org/ant" target="_blank">http://jakarta.apache.org/ant</a>.</p>
<p>The main task for the Asset Adapter is the <strong>assetadapter</strong> task which must be contained within an Ant <strong>target</strong> element. A target can be executed by Ant by specifying the target name or names to run when invoked, or by specifying a default target for the entire file. Here is an example shell of an Asset Adapter rules file:</p>
<pre>&lt;?xml version="1.0"?&gt;
&lt;project name="Asset Adapter 2.0" default="load"&gt;
  &lt;property environment="env"/&gt;
    &lt;taskdef 
    file="${env.ASSET_ADAPTER_HOME}/bin/assetadapter.properties"/&gt;
    &lt;target name="load"&gt;
      &lt;assetadapter action="publish" ...&gt;
        ...
      &lt;/assetadapter&gt;
    &lt;/target&gt;
&lt;/project&gt;
</pre>
<p>Note the project <strong>name</strong> attribute, which is required, but arbitrary, and the <strong>default</strong> attribute which specifies the default target to execute. The only <strong>target</strong> listed is one named <strong>load</strong> and it contains the <strong>assetadapter</strong> task.</p>
<p>The property element creates property values in this case from all currently defined environment variables from the system and uses the prefix <strong>env</strong> followed by a period to name each variable.</p>
<p>The taskdef element reads in the assetadapter.properties file which provides mappings from XML element names to classes which provide the implementation for the element at runtime. Note the use of the property ${env.ASSET_ADAPTER_HOME} which substitutes the current value of the environment variable ASSET_ADAPTER_HOME into the pathname for the properties file.</p>
<p>It is also important to note that XML is case-sensitive, so element and attribute names must be of the proper case. For example, <span class="apidoc_code">&lt;assetadapter&gt;</span> is correct, while
	<span class="apidoc_code">&lt;AssetAdapter&gt;</span> is not.</p>


<h4 id="asset_adapter_invoke">Invoking the Asset Adapter</h4>
<p>The Asset Adapter is run via a command line invocation which can be executed from a script or batch file. The following is an example invocation from the samples\sanity directory:</p>
<pre>%ASSET_ADAPTER_ANT_HOME%\bin\startant.bat -buildfile test.xml -verbose –debug</pre>
<p>The ASSET_ADAPTER_ANT_HOME environment variable is set in the setup.bat file. The <strong>-buildfile</strong> argument points to the XML rules file to use. In this case, the default target is executed. Otherwise a target name would be specified on the command line. The <strong>–verbose</strong> and <strong>-debug</strong> arguments set the logging message level and are optional.</p>
<p>Output messages are printed to standard output. Output may be redirected to a file via the command line, or there are facilities in Ant for setting up output listeners to handle specialized logging functions. This is outside the scope of this document.</p>


<h4 id="passwords_encrypting">Encrypting Passwords</h4>
<p>Some Asset Adapter tasks will accept an encrypted password as an attribute. The password can be encrypted using the <strong>encryptpw</strong> command found in the Asset Adapter <strong>bin</strong> directory. It will prompt for a password (which will be hidden from view) and then display the encrypted version of the password which can then be copied and pasted into the appropriate <strong>encryptedpassword</strong> attribute of the given Asset Adapter task.</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="tasks_ant">Ant-specific Tasks</h3>
<p>The only Ant-specific tasks that are needed by the Asset Adapter are the <strong>taskdef</strong> element which defines the mappings between XML element names and their corresponding class implementations, and the <strong>property</strong> task which defines values that can be used throughout the file.</p>
<p>As we saw earlier, the <strong>taskdef</strong> element can take a file attribute which contains a list of XML element name to class name mappings in a properties file format. Another form of the <strong>taskdef</strong> element takes a <strong>name</strong> and a <strong>classname</strong> attribute to do a single mapping. See the documentation for Apache Ant at <a href="http://jakarta.apache.org/ant" title="http://jakarta.apache.org/ant" target="_blank">http://jakarta.apache.org/ant</a> for more information.</p>
<p>The <strong>property</strong> element in one form takes the two attributes <strong>name</strong> and <strong>value</strong>. This sets a property to the value specified which can be used throughout the rest of the file by using the ${propertyname} syntax. Note that once properties are set, they are immutable (they cannot be changed throughout the life of this invocation). Properties can also be passed in from the command line, which will override any settings in the XML rules file, or they can be loaded from a file. See the documentation for Apache Ant for more information.</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="tasks_asset_adapter">Asset Adapter Tasks</h3>
<p>In this section:</p>
<ul>
	<li><a href="#s03_01">assetadapter</a></li>
	<li><a href="#s03_02">connection</a></li>
	<li><a href="#s03_03">assetfiles</a></li>
	<li><a href="#s03_04">assembly</a></li>
	<li><a href="#s03_03">uploadincompletepolicy</a></li>
	<li><a href="#s03_06">assembly</a></li>
	<li><a href="#s03_07">childassembly</a></li>
</ul>


<h4 id="s03_01">assetadapter</h4>
<p>The <strong>assetadapter</strong> element is the primary task responsible for implementing the Asset Adapter. It takes a few attributes and a number of child elements which control the connection, policies and assembly of assets.</p>

<h5>Attributes of assetadapter</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>action</td>
		<td>Set to <strong>publish</strong> or <strong>dryrun</strong>. Default is <strong>publish</strong></td>
		<td>No.</td>
	</tr>
	<tr>
		<td>offline</td>
		<td>Set to <strong>true</strong> or <strong>false</strong>. Default is <strong>false</strong>. Work offline to create assets but not publish them. Offline means a connection will not be established with the library. This is helpful during development and debugging. It requires <strong>templatesdir</strong> to be set and the templates to be downloaded to this directory from a previous run or though the use of the <strong>cachetemplates</strong> task.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>assetcachedir</td>
		<td>The directory to cache the asset files that are generated by the tool. These files are used in subsequent runs for a three-way merge algorithm to preserve updates to assets made outside of the Asset Adapter (for example manual edits using the thin client, IDE extensions or Capture Tool products, or programmatic updates through Automation Extensions.)</td>
		<td>No. If not set, three-way merge will not be performed.</td>
	</tr>
	<tr>
		<td>templatesdir</td>
		<td>The directory to cache templates from the library. This is useful for offline work.</td>
		<td>Yes if offline is set to <strong>true</strong>.</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of assetadapter</h5>
<ul>
	<li><a href="#s03_02">connection</a></li>
	<li><a href="#s03_03">assetfiles</a></li>
	<li><a href="#s03_04">assembly</a></li>
	<li><a href="#s03_03">uploadincompletepolicy</a></li>
	<li><a href="#s03_06">assembly</a></li>
	<li><a href="#s03_07">childassembly</a></li>
</ul>


<h4 id="s03_02">connection</h4>
<p>Sets the library connection information. Only one <strong>connection</strong> task is allowed and it is required. A connection must be defined in a <strong>connections.xml</strong> file and the password cached. The <strong>connections.xml</strong> file is created using Automation Extensions. See the <a href="#install_instructions">Install Instructions</a> section for information on creating this file.</p>

<p><strong>Attributes of connection</strong></p>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>file</td>
		<td>The <strong>connections.xml</strong> file which stores the connection information.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>name</td>
		<td>The name of the connection to use.</td>
		<td>Yes.</td>
	</tr>
	</tbody>
</table>


<h4 id="s03_03">assetfiles</h4>
<p>The assetfiles task creates a list of primary asset files that will drive the assembly of each asset. This task will contain a Retriever like fsfileset for creating the file list. More than one task may be listed in fsfileset, but the last element must be a Retriever and must return the final list. This</p>
<p>allows for multiple tasks to collaborate in a special way to create the list of files, but for most cases, only one Retriever is necessary.</p>

<p><strong>Attributes of assetfiles</strong></p>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>assemblyid</td>
		<td>The assembly ID to be executed for each file URI returned by this assetfiles task.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>id</td>
		<td>A string to identify this assetfiles task. If specified, this ID may be used by a child of an assembly by referencing the variable @primary-retriever-id@, which is implicitly set before the assembly is executed.</td>
		<td>No.</td>
	</tr>
	</tbody>
</table>

<p><strong>Examples of assetfiles</strong></p>
<p>Create a list of files under the directory from the source.dir directory whose filenames end in <strong>.asset</strong>. For each entry in the list, the parent assembly task will assign the variable <strong>asset-uri</strong> to the filename of the current asset being assembled. Subsequent child elements of the assembly task can make use of this variable by using the <strong>@asset-uri@</strong> token filtering syntax.</p>
<pre>&lt;assetfiles variable="asset-uri"&gt;
  &lt;fsfileset dir="${source.dir}"&gt;
    &lt;include name="*.asset"/&gt;
  &lt;/fileset&gt;
&lt;/assetfiles&gt;
</pre>
<!--<p>{xxx the above XML fails validation.}</p>-->

<h4 id="s03_04">assembly</h4>
<p>The assembly task performs the assembly of assets. There may be multiple assembly tasks. The assembly task is defined below.</p>
<p><strong>Custom nested elements for assetadapter</strong></p>
<p>Since the AnySource Asset Adapter is an extensible framework, other nested elements may appear as children of the assetadapter task. If a task is implemented by a class that extends the IPublishPolicy or IMergePolicy interface, this class will be instantiated as the policy governing the publishing of assets and merging of asset changes, respectively. A default publishing policy and merge policy are automatically provided. See <strong>AnySource Asset Adapter Developer Guide</strong> for more information.</p>


<h4 id="xxx">Publish or Merge Policies:</h4>


<h4 id="s03_05">uploadincompletepolicy</h4>
<p>The uploadincomplete policy instructs the assetadapter to ignore any validation errors that may be encountered when creating the assets. Assets will be uploaded, but may not be published, regardless of missing or incomplete artifacts, classifiers, and relationships. Therefore, manual intervention in the catalog may be required to actually publish these assets.</p>

<h5>Attributes of uploadincompletepolicy</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>publish</td>
		<td>If set to true, the asset will be published if it passes validation. If it is set to false or the asset fails validation, it will be stored in the catalog, but it will not be published. The default is <strong>false</strong>.</td>
		<td>No</td>
	</tr>
	</tbody>
</table>

<h5>Example of uploadincompletepolicy</h5>
<pre>&lt;assetadapter action="publish" offline="false" 
  assetcachedir="${cache.dir}" templatesdir="${templates.dir}"&gt;
    &lt;connection file="${connection.file}" name="default"/&gt;
    &lt;uploadincompletepolicy publish="false"/&gt;
    &lt;assetfiles assemblyid="app1"&gt;
      ...
    &lt;/assetfiles&gt;
    &lt;assembly id="app1" template="default"&gt;
      ...
  &lt;/assembly&gt;
&lt;/assetadapter&gt;
</pre>

<h5>Example of assetadapter</h5>
<pre>&lt;assetadapter action="publish" offline="false" assetcachedir="${cache.dir}" templatesdir="${templates.dir}"&gt;
  &lt;connection file="${connection.file}" name="default"/&gt;
    &lt;assetfiles assemblyid="app1"&gt;
      ...
    &lt;/assetfiles&gt;
    &lt;assembly id="app1" template="default"&gt;
      ...
  &lt;/assembly&gt;
&lt;/assetadapter&gt;
</pre>


<h4 id="s03_06">assembly</h4>
<p>The <strong>assembly</strong> task defines a set of rules for assembling assets. The rules are a set of sub-task elements which identify the primary asset file for each asset and a series of tasks that collaborate to build up the asset metadata.  These tasks are called iteratively in sequence.  If there are, say, three primary asset files identified, all the tasks will be called in sequence for the first asset, then again for the second asset, and again for the third.</p>

<h5>Attributes of assembly</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>template</td>
		<td>The asset capture template name to use for validating the assets created by this assembly. This must correspond to the name attribute of the XML template. It is not the template filename.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>publishtemplate</td>
		<td>The filename of a publish template to use for setting publish information (like contacts, owning org group, etc.)</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>replace</td>
		<td>Set to <strong>true</strong> or <strong>false</strong>. Completely replace the contents of an existing asset with new contents, circumventing the merge policy. Default is <strong>false</strong>.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>failonerror</td>
		<td>Set to <strong>true</strong> or <strong>false</strong>. Stop processing of assets if an error occurs while assembling an asset. Default is <strong>false</strong>.</td>
		<td>No.</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of assembly:</h5>
<ul>
	<li><a href="#s03_07">childassembly</a></li>

</ul>


<h4 id="s03_07">childassembly</h4>
<p>The <strong>childassembly</strong> task defines a set of rules for assembling finer grained assets that are based in some way on the asset being assembled by the parent assembly task. This task can be used, for example, to create an asset for every method in a Java class for each Java file processed by the parent assembly task. The childassembly and its nested elements can refer to tasks in the parent assembly by their ID.</p>

<h5>Attributes of childassembly (in addition to the assembly task attributes)</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>primaryretrieverid</td>
		<td>The ID of a Retriever used to assemble assets for this childassembly. The @asset-uri@ variable is set to each file URI in turn from the Retriever.</td>
		<td>Yes.</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of childassembly</h5>
<p>See <a href="#s03_04">assembly</a>.</p>

<h5>Examples of childassembly</h5>
<p>Use a child assembly to create one asset per method name of a Java source file.</p>
<pre>&lt;parserretriever id="method-names" parserid="java-parser" parserkey="methodnames" /&gt;
&lt;!-- Service Operation assets --&gt;
&lt;childassembly id="method-assets" primaryretrieverid="method-names" template="Operation"&gt;
  &lt;variable name="class-name"&gt;
    &lt;parservalue parserid="java-parser" parserkey="classname" /&gt;
  &lt;/variable&gt;
  &lt;variable name="asset-version" value="1.0" /&gt;
  &lt;!-- Operation asset name: classname.operation --&gt;
  &lt;variable name="operation-asset-name" value="@class-name@.@asset-uri@" /&gt;
  &lt;assetattribute name="name" value="@operation-asset-name@" /&gt;
  &lt;assetattribute name="version" value="1.0" /&gt;
  &lt;assetattribute name="description" value="@operation-asset-name@" /&gt;
  &lt;artifact category="overview" type="by-value" failonerror="true" tempdir="${temp- artifact-dir}" name="overview"&gt;
    &lt;artifactcontent&gt;
      &lt;parserevaluate parserid="java-parser" parserexpression="//class/methods/method[@name='@asset-uri@']/comment/content/html" /&gt;
    &lt;/artifactcontent&gt;
  &lt;/artifact&gt;
  &lt;!-- Make a relationshp to the "outer" asset where asset-name and asset-version are defined outside this childassembly --&gt;
  &lt;assetrelationship name="containing-class" assetname="@asset-name@" assetversion="@asset-version@" /&gt;
&lt;/childassembly&gt;</pre>

<h5>Other nested elements of assembly</h5>
<p>The <strong>assembly</strong> task can take any number of other tasks which extend from the Task or TaskContainer classes and/or implement one of the Asset Collaboration Interfaces. These are described in Asset Collaboration Tasks and Miscellaneous Tasks below.</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="tasks_asset_collab">Asset Collaboration Tasks</h3>
<p>In order to build up metadata for an asset, many different types of tasks may need to be employed. Some metadata may come from a text file or an XML file. Artifacts for an asset may have certain file extensions and reside in a directory structure of some known format.</p>
<p>The Asset Adapter defines a set of components that can work together to pull this disparate information together into an asset ready to publish. These components are of three main types: Retrievers, Parsers, and Asset Modifiers. There are also miscellaneous tasks that work with filters which implement a variable passing mechanism that the other components can make use of. The components may specify an <strong>id</strong> attribute that can be referenced by other components to aid in the collaboration.</p>
<p>Retrievers produce a list of file URIs (filenames, URLs, etc.) and retrieve the content for a given file. Parsers parse the contents of a file or a collection of files and produce a set of key/value(s) which represent information of interest for an asset. Parsers use Retrievers to get the list of files and the file contents they are interested in.</p>
<p>Asset Modifiers update metadata for an asset. They can pull information from Retrievers and Parsers to update asset attributes (name, version, description), classifiers, artifacts and relationships.</p>
<p>An example of a miscellaneous task is the <strong>variable</strong> task which associates a value with a token to be replaced via the <strong>@variable@</strong> notation in other tasks. This mechanism was designed to overcome the restriction of Ant properties which act like variables, but are immutable, a restriction that did not allow for changing values on each iteration through the assembly loop.</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="tasks_retriever">Retriever Tasks</h3>
<p>In this section:</p>
<ol>
	<li><a href="#s05_01">fsfileset</a></li>
	<li><a href="#s05_02">include</a></li>
	<li><a href="#s05_03">exclude</a></li>
	<li><a href="#s05_04">parserretriever</a></li>
</ol>


<h4 id="s05_01">fsfileset</h4>
<p>The <strong>fsfileset</strong> task is a Retriever that works with a file system and produces a list of files and/or directories that match patterns specified in an include/exclude list. This mechanism is very similar to Ant's <strong>fileset</strong> task.</p>

<h5>Attributes of fsfileset</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>dir</td>
		<td>The starting directory.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>casesensitive</td>
		<td>Set to <strong>true</strong> or <strong>false</strong>. Determines if filenames should be matched with respect to case. Default is <strong>false</strong>.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>id</td>
		<td>A unique string to identify this Retriever. The string is arbitrary but must be unique against all other Retrievers in this assembly.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>type</td>
		<td>Return only files (<strong>file</strong>), only directories (<strong>dir</strong>), or all (<strong>all</strong>). Default is <strong>file</strong>.</td>
		<td>No.</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of fsfileset</h5>
<ul>
	<li><a href="#s05_02">include</a></li>
	<li><a href="#s05_03">exclude</a></li>
</ul>

<h4 id="s05_02">include</h4>
<p>The include element takes one required attribute <strong>name</strong> whose value is a pattern used to match a filename. The pattern may include <strong>*</strong> to match any string or <strong>**/</strong> which matches any number of subdirectories. Directory paths should be specified using forward slashes rather than backslashes. See the Apache Ant documentation <a href="http://jakarta.apache.org/ant" title="http://jakarta.apache.org/ant" target="_blank">http://jakarta.apache.org/ant</a> on fileset for more information.</p>


<h4 id="s05_03">exclude</h4>
<p>The exclude element takes one required attribute <strong>name</strong> whose values is a pattern used to match a filename. If a file name is matched by this pattern, it is excluded from the list. If the pattern matches a directory, all subdirectories are excluded. See the Apache Ant documentation <a href="http://jakarta.apache.org/ant" title="http://jakarta.apache.org/ant" target="_blank">http://jakarta.apache.org/ant</a> on fileset for more information.</p>
<h5>Examples</h5>
<pre>&lt;fsfileset dir="/my/source/dir"&gt;
  &lt;include name="*.java"/&gt;
  &lt;exclude name="Test*"/&gt;
&lt;/fsfileset&gt;</pre>
<p>Matches all files that end in .java in /my/source/dir and all subdirectories except those that are in a directory or subdirectory named <strong>test</strong>.</p>
<pre>&lt;fsfileset dir="/my/source/dir"&gt;
  &lt;include name="**/*.java"/&gt;
&lt;/fsfileset&gt;</pre>
<p>Matches all files that end in .java in /my/source/dir and all subdirectories.</p>
<pre>&lt;fsfileset dir="/my/source/dir"&gt;
  &lt;include name="**/*.java"/&gt;
  &lt;exclude name="**/test/"/&gt;
&lt;/fsfileset&gt;</pre>
<p>Matches all files that end in .java in /my/source/dir and all subdirectories except those that are in a directory or subdirectory named <strong>test</strong>.</p>


<h4 id="s05_04">parserretriever</h4>
<p>The <strong>parserretriever</strong> task turns the values from a Parser key into a Retriever that can be processed by other tasks that work with Retrievers. It is useful for processing child assembly tasks (see <a href="#s03_07">childassembly</a>).</p>

<h5>Attributes of parserretriever</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>id</td>
		<td>A unique string to identify this Retriever. The string is arbitrary but must be unique against all other Retrievers in this assembly.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>parserid</td>
		<td>ID of the Parser to retrieve a value from.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>parserkey</td>
		<td>The Parser lookup key for the value of interest.</td>
		<td>Yes.</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of parserretriever</h5>
<p>None.</p>

<h5>Examples</h5>
<p>Return the values from the "methodnames" key of the Parser "java-parser" with a Retriever interface.</p>
<pre>&lt;parserretriever id="method-names" parserid="java-parser" parserkey="methodnames"/&gt;</pre>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="tasks_parser">Parser Tasks</h3>
<p>In this section:</p>
<ul>
	<li><a href="#s06_01">textparser</a></li>
	<li><a href="#s06_02">key</a></li>
	<li><a href="#s06_03">expression</a></li>
	<li><a href="#s06_04">xmap (or any other Mapper task)</a></li>
	<li><a href="#s06_05">xmlparser</a></li>
	<li><a href="#s06_06">key</a></li>
	<li><a href="#s06_07">expression</a></li>
	<li><a href="#s06_08">xmap (or any other Mapper task)</a></li>
	<li><a href="#s06_09">javaxmlparser</a></li>
	<li><a href="#s06_10">ejbfunctionsparser</a></li>
	<li><a href="#s06_11">javafunctionsparser</a></li>
</ul>

<h4 id="s06_01">textparser</h4>
<p>The <strong>textparser</strong> task is a Parser for parsing out information from a regular text file. It takes information from a Retriever and applies expressions defined in nested elements to pull out data from the text file and associate them with key names. The expressions are Perl regular expressions for pattern matching and replacement. See <a href="http://www.perl.org" title="www.perl.org" target="_blank">www.perl.org</a> for information on Perl.</p>

<h5>Attributes of textparser</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>file</td>
		<td>The file to parse.</td>
		<td>Either file or retrieverid is required, and file overrides retrieverid.</td>
	</tr>
	<tr>
		<td>retrieverid</td>
		<td>The ID of a Retriever to retrieve the file contents to be parsed.</td>
		<td>Yes, unless file is specified.</td>
	</tr>
	<tr>
		<td>retrieveruri</td>
		<td>A URI of the file to be processed from the Retriever. If not specified, the first file is retrieved.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>id</td>
		<td>A unique string to identify this Parser. The string is arbitrary but must be unique against all other Parsers in this assembly.</td>
		<td>No.</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of textparser</h5>
<ul>
	<li><a href="#s06_02">key</a></li>
	<li><a href="#s06_03">expression</a></li>
	<li><a href="#s06_04">xmap (or any other Mapper task)</a></li>
</ul>


<h4 id="s06_02">key</h4>
<p>The <strong>key</strong> element is used to define a key name and an expression or expressions for retrieving one or more values from the text being parsed by this Parser. There may be multiple key elements nested under textparser.</p>

<h5>Attributes of key</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>name</td>
		<td>The key name.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>multivalue</td>
		<td>Set to <strong>true</strong> or <strong>false</strong>. Determines if multiple matches may be performed to produce more than one value for this key. Default is <strong>false</strong>.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>expression</td>
		<td>A Perl regular expression. This expression is used to match a string from the text being parsed by this Parser. If this attribute is used, the replacement expression is assumed to be <strong>\1</strong> and nested expression elements may not be used. If expression is <strong>*</strong> the entire file contents are matched. If expression is an empty string, or not specified and no nested expression elements are specified, the entire file contents are matched.</td>
		<td>No.</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of key</h5>
<ul>
	<li><a href="#s06_03">expression</a></li>
	<li><a href="#s06_04">xmap (or any other Mapper task)</a></li>
</ul>


<h4 id="s06_03">expression</h4>
<p>If the expression attribute is not specified, the key element accepts one or two nested expression elements. The first expression will define the Perl regular expression pattern used to match text. The second expression, if specified, determines the replacement pattern for the value. The replacement pattern may include \1, \2, etc., which indicate the parentheses matched in the first expression. A default replacement expression of <strong>\1</strong> is assumed if a second expression is not given.</p>


<h4 id="s06_04">xmap (or any other Mapper task)</h4>
<p>Multiple Mapper elements may be used to serially transform the expression. See <a href="#tasks_mapper">Mapper Tasks</a>. The result of the last Mapper is used as the value for the key. Note to developers: any task which implements the IMapper interface may be used in place of this Mapper.</p>
<h5>Examples of textparser</h5>
<p>A simple property file parser which Parses text from the <strong>property-fileset</strong> Retriever and produces two keys: <strong>version</strong> and <strong>description</strong>. The former is set to the text after the string <strong>com.myproject.version=</strong> and the latter is set to the text after the string <strong>com.myproject.description=</strong>.</p>
<p>The first key uses two expression elements, although the second one is not needed because the default is <strong>\1</strong>. The second key uses a single expression attribute with the implied <strong>\1</strong> replacement expression.</p>
<pre>&lt;textparser id="property-parser" retrieverid="property-files"&gt;
  &lt;key name="version" multivalue="false"&gt;
    &lt;expression value="^com.myproject.version=(.*)$$"/&gt;&lt;expression value="\1"/&gt;
  &lt;/key&gt;
  &lt;key name="description" 
  expression="^com.myproject.description=(.*)$$" 
  multivalue="false"/&gt;
&lt;/textparser&gt;</pre>
<p>Take the contents of a file from the <strong>description-fileset</strong> Retriever, match the entire contents, then take the first 240 characters and assign that to the key <strong><strong>description</strong></strong>.</p>
<pre>&lt;textparser id="description-parser" retrieverid="description-files"&gt;
  &lt;key name="description" expression="*" multivalue="false"&gt;
    &lt;xmap from="^(.{240})" to="\1"/&gt;
  &lt;/key&gt;
&lt;/textparser&gt;
</pre>
<p>Retrieve the current file from the primary asset files retriever based on the <strong>@asset-uri@</strong> variable.</p>
<pre>&lt;textparser id="current-file" retrieverid="asset-files" retrieveruri="@asset-uri@"&gt;
  &lt;key name="whole-file" expression="*"/&gt;
&lt;/textparser&gt;
</pre>


<h4 id="s06_05">xmlparser</h4>
<p>The <strong>xmlparser</strong> task is a Parser for parsing out information from an XML file. It takes information from a Retriever and applies expressions defined in nested elements to pull out data from the file and associate them with key names. The expressions are XPath expressions (see <a href="http://www.w3.org/TR/xpath" title="http://www.w3.org/TR/xpath" target="_blank">http://www.w3.org/TR/xpath</a>).</p>

<h5>Attributes of xmlparser</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>file</td>
		<td>The file to parse.</td>
		<td>Either file or retrieverid is required, and file overrides retrieverid.</td>
	</tr>
	<tr>
		<td>retrieverid</td>
		<td>The ID of a Retriever to retrieve the file contents to be parsed.</td>
		<td>Yes, unless file is specified.</td>
	</tr>
	<tr>
		<td>retrieveruri</td>
		<td>A URI of the file to be processed from the Retriever. If not specified, the first file is retrieved.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>id</td>
		<td>A unique string to identify this Parser. The string is arbitrary but must be unique against all other Parsers in this assembly.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>namespaceaware</td>
		<td>Set to <strong>true</strong> or <strong>false</strong>. Determines if parsing should acknowledge XML namespaces in XPath expressions. Default is <strong>false</strong>.</td>
		<td>No.</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of xmlparser</h5>
<ul>
	<li><a href="#s06_02">key</a></li>
	<li><a href="#s06_03">expression</a></li>
	<li><a href="#s06_04">xmap (or any other Mapper task)</a></li>
</ul>


<h4 id="s06_06">key</h4>
<p>The <strong>key</strong> element is used to define a key name and an expression or expressions for retrieving one or more values from the text being parsed by this Parser. There may be multiple key elements nested under xmlparser.</p>

<h5>Attributes of key</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>name</td>
		<td>The key name.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>multivalue</td>
		<td>Set to <strong>true</strong> or <strong>false</strong>. Determines if multiple matches may be performed to produce more than one value for this key. Default is <strong>false</strong>.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>expression</td>
		<td>An XPath expression. This expression is used to match a string from the text being parsed by this Parser.</td>
		<td>No.</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of key</h5>
<ul>
	<li><a href="#s06_03">expression</a></li>
	<li><a href="#s06_04">xmap (or any other Mapper task)</a></li>
</ul>


<h4 id="s06_07">expression</h4>
<p>If the expression attribute is not specified, the key element accepts a nested expression element which defines the XPath pattern used to match the content of the XML file.</p>


<h4 id="s06_08">xmap (or any other Mapper task)</h4>
<p>Multiple Mapper elements may be used to serially transform the expression. See <a href="#tasks_mapper">Mapper Tasks</a>. The result of the last Mapper is used as the value for the key. Note to developers: any task which implements the IMapper interface may be used in place of this Mapper.</p>
<h5>Examples of xmlparser</h5>
<p>Parse the contents of an XML file with elements which include <span class="apidoc_code">&lt;version&gt;</span> and <span class="apidoc_code">&lt;description&gt;</span>&nbsp;elements and store the values in the parser's key/value list.</p>
<pre>&lt;xmlparser id="property-parser" retrieverid="xml-files"&gt;
  &lt;key name="version" 
    expression="//version/text()"
    multivalue="false" /&gt;
  &lt;key name="description" 
    expression="//description/text()" 
    multivalue="false" /&gt;
&lt;/xmlparser&gt;
</pre>
<p>Parse the contents of an XML file which includes namespaces and set the <strong>asset-name</strong> key to the value of the <strong>name</strong> attribute of the <span class="apidoc_code">wsdl:service</span> element.</p>
<pre>&lt;xmlparser id="wsdl-parser" namespaceaware="true" retrieverid="xml-files"&gt;
  &lt;key name="asset-name" 
    expression="//*[name()='wsdl:service']/@name" 
    multivalue="false"/&gt;
&lt;/xmlparser&gt;
</pre>


<h4 id="s06_09">javaxmlparser</h4>
<p>The <strong>javaxmlparser</strong> task is a Parser for parsing out information from a Java source file using XPath expressions. It takes information from a Retriever and applies expressions defined in nested elements to pull out data from an XML representation of the file and associate them with key names. The expressions are XPath expressions (see http://www.w3.org/TR/xpath). Javadoc comments and javadoc</p>
<p>tags are converted to XML representation and any HTML tags are converted to XHTML format. This XML</p>
<p>content can be run through an XSLT stylesheet to format the content as desired. See the <a href="#s09_06">xsltmapper</a> task.</p>

<h5>Attributes of javaxmlparser</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>file</td>
		<td>The Java file to parse.</td>
		<td>Either file or retrieverid is required, and file overrides retrieverid.</td>
	</tr>
	<tr>
		<td>retrieverid</td>
		<td>The ID of a Retriever to retrieve the file contents to be parsed.</td>
		<td>Yes, unless file is specified.</td>
	</tr>
	<tr>
		<td>retrieveruri</td>
		<td>A URI of the file to be processed from the Retriever. If not specified, the first file is retrieved.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>id</td>
		<td>A unique string to identify this Parser. The string is arbitrary but must be unique against all other Parsers in this assembly.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>namespaceaware</td>
		<td>Set to <strong>true</strong> or <strong>false</strong>. Determines if parsing should acknowledge XML namespaces in XPath expressions. Default is <strong>false</strong>.</td>
		<td>No.</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of javaxmlparser</h5>
<p>See <a href="#s06_05">xmlparser</a>.</p>

<h5>Example XML file</h5>
<p>The following Java source file will produce an internal XML representation that the <strong>javaxmlparser</strong> task will parse.</p>
<p><strong>SampleService.java:</strong></p>
<pre>/*
* Copyright (c) 2006 Akana, Inc. All rights Reserved.
*/

package com.logiclibrary.service.sample;

import com.logiclibrary.common.*;

/**
* Sample service to demo AnySource Asset Adapter's
* Java parsing capability.
*
* @author dgross
*/

public interface SampleService
{
/**
* Creates an instance of a sample service.
*
* @return SampleService object
* @throws LLException - if error creating service
*/
public SampleService createSampleService() throws LLException;

/**
* Method to test the service
*/
public void test() throws RemoteException;

/**
* Configure this class with the supplied string.
* @param str configuration string
* @throws LLException - if error configuring service
*/
public void configure(String str) throws LLException;

/**
* Execute this class.
* @param arg1 first String argument
* @param arg2 second String argument
* @return int return value, 0=no error
* @throws LLException - if error configuring service
*/
public int execute(String arg1, String arg2) throws LLException;

/**
* Private method
*/
private void internal();
}</pre>

<p><strong>Resulting XML:</strong></p>
<pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;java&gt;
  &lt;class qname="com.logiclibrary.service.sample.SampleService" name="SampleService"&gt;
    &lt;comment&gt;
      &lt;content&gt;
        &lt;html&gt;
          &lt;head&gt;
            &lt;title /&gt;
          &lt;/head&gt;
          &lt;body&gt;Sample service to demo AnySource Asset Adapter's Java parsing capability.&lt;/body&gt;
        &lt;/html&gt;
      &lt;/content&gt;
      &lt;tags&gt;
        &lt;tag&gt;
          &lt;name&gt;author&lt;/name&gt;
          &lt;value&gt;dgross&lt;/value&gt;
        &lt;/tag&gt;
      &lt;/tags&gt;
    &lt;/comment&gt;
    &lt;methods&gt;
      &lt;method name="createSampleService" signature="com.logiclibrary.service.sample.SampleService createSampleService()" returns="com.logiclibrary.ser vice.sample.SampleService"&gt;
        &lt;comment&gt;
          &lt;content&gt;
            &lt;html&gt;
              &lt;head&gt;
                &lt;title /&gt;
              &lt;/head&gt;
              &lt;body&gt;Creates an instance of a sample service.&lt;/body&gt;
            &lt;/html&gt;
          &lt;/content&gt;
          &lt;tags&gt;
            &lt;tag&gt;
              &lt;name&gt;return&lt;/name&gt;
              &lt;value&gt;SampleService object&lt;/value&gt;
            &lt;/tag&gt;
            &lt;tag&gt;
              &lt;name&gt;throws&lt;/name&gt;
              &lt;value&gt;LLException - if error creating service&lt;/value&gt;
            &lt;/tag&gt;
          &lt;/tags&gt;
        &lt;/comment&gt;
      &lt;/method&gt;
      &lt;method name="test" signature="void test()" returns="void"&gt;
        &lt;comment&gt;
          &lt;content&gt;
            &lt;html&gt;
              &lt;head&gt;
                &lt;title /&gt;
              &lt;/head&gt;
              &lt;body&gt;Method to test the service&lt;/body&gt;
            &lt;/html&gt;
          &lt;/content&gt;
          &lt;tags /&gt;
        &lt;/comment&gt;
      &lt;/method&gt;
      &lt;method name="configure" signature="void configure(java.lang.String str)" returns="void"&gt;
        &lt;comment&gt;
          &lt;content&gt;
            &lt;html&gt;
              &lt;head&gt;
                &lt;title /&gt;
              &lt;/head&gt;
              &lt;body&gt;Configure this class with the supplied string.&lt;/body&gt;
            &lt;/html&gt;
          &lt;/content&gt;
          &lt;tags&gt;
            &lt;tag&gt;
              &lt;name&gt;param&lt;/name&gt;
              &lt;value&gt;str configuration string&lt;/value&gt;
            &lt;/tag&gt;
            &lt;tag&gt;
              &lt;name&gt;throws&lt;/name&gt;
              &lt;value&gt;LLException - if error configuring service&lt;/value&gt;
            &lt;/tag&gt;
          &lt;/tags&gt;
        &lt;/comment&gt;
      &lt;/method&gt;
      &lt;method name="execute" signature="int execute(java.lang.String arg1, java.lang.String arg2)" returns="int"&gt;
        &lt;comment&gt;
          &lt;content&gt;
            &lt;html&gt;
              &lt;head&gt;
                &lt;title /&gt;
              &lt;/head&gt;
              &lt;body&gt;Execute this class.&lt;/body&gt;
            &lt;/html&gt;
          &lt;/content&gt;
          &lt;tags&gt;
            &lt;tag&gt;
              &lt;name&gt;param&lt;/name&gt;
              &lt;value&gt;arg1 first String argument&lt;/value&gt;
            &lt;/tag&gt;
            &lt;tag&gt;
              &lt;name&gt;param&lt;/name&gt;
              &lt;value&gt;arg2 second String argument&lt;/value&gt;
            &lt;/tag&gt;
            &lt;tag&gt;
              &lt;name&gt;return&lt;/name&gt;
              &lt;value&gt;int return value, 0=no error&lt;/value&gt;
            &lt;/tag&gt;
            &lt;tag&gt;
              &lt;name&gt;throws&lt;/name&gt;
              &lt;value&gt;LLException - if error configuring service&lt;/value&gt;
            &lt;/tag&gt;
          &lt;/tags&gt;
        &lt;/comment&gt;
      &lt;/method&gt;
      &lt;method name="internal" signature="void internal()" returns="void"&gt;
        &lt;comment&gt;
          &lt;content&gt;
            &lt;html&gt;
              &lt;head&gt;
                &lt;title /&gt;
              &lt;/head&gt;
              &lt;body&gt;Private method&lt;/body&gt;
            &lt;/html&gt;
          &lt;/content&gt;
          &lt;tags /&gt;
        &lt;/comment&gt;
      &lt;/method&gt;
    &lt;/methods&gt;
  &lt;/class&gt;
&lt;/java&gt;</pre>


<h5>Examples of javaxmlparser</h5>
<p>Parse the contents of the current Java file setting the classname key to the name of the Java class and the method names key to the list of method names. The all key will return the contents of the XML file produced from the Java file.</p>
<pre>&lt;javaxmlparser file="@asset-uri@" id="java-parser" validate="false"&gt;
  &lt;key name="all" expression="*" /&gt;
  &lt;key name="classname" expression="//class/@name" /&gt;
  &lt;key name="methodnames" expression="//class/methods/method/@name" multivalue="true" /&gt;
&lt;/javaxmlparser&gt;</pre>


<h4 id="s06_10">ejbfunctionsparser</h4>
<p>The <strong>ejbfunctionsparser</strong> task is a Parser for parsing out information from an Enterprise Java Bean source file and creating a Functions XML file representation of the methods defined on the interface. This content can be added to the asset as a standard interface-functions artifact or run through an XSLT stylesheet to format the content as desired. See the <a href="#s09_06">xsltmapper</a> task.</p>

<h5>Attributes of ejbfunctionsparser</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>file</td>
		<td>The Java file to parse.</td>
		<td>Either file or retrieverid is required, and file overrides retrieverid.</td>
	</tr>
	<tr>
		<td>retrieverid</td>
		<td>The ID of a Retriever to retrieve the file contents to be parsed.</td>
		<td>Yes, unless file is specified.</td>
	</tr>
	<tr>
		<td>retrieveruri</td>
		<td>A URI of the file to be processed from the Retriever. If not specified, the first file is retrieved.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>id</td>
		<td>A unique string to identify this Parser. The string is arbitrary but must be unique against all other Parsers in this assembly.</td>
		<td>No.</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of ejbfunctionsparser</h5>
<p>See <a href="#s06_01">textparser</a>. Note: this parser will return the whole contents of the Functions XML file regardless of what key expression is passed to it.</p>
<p><strong>Examples of ejbfunctionsparser</strong></p>
<p>Parse an EJB file and add an interface-functions artifact with the resulting Functions XML produced.</p>
<pre>&lt;ejbfunctionsparser file="@ejb-file@" id="ejb-parser"&gt;
  &lt;key name="all" expression="*" /&gt;
&lt;/ejbfunctionsparser&gt;
&lt;artifact category="interface-functions" type="by-value" failonerror="true" tempdir="${temp-artifact-dir}"&gt;
  &lt;artifactcontent parserid="ejb-parser" parserkey="all" /&gt;
&lt;/artifact&gt;</pre>


<h4 id="s06_11">javafunctionsparser</h4>
<p>The <strong>javafunctionsparser</strong> task is a Parser for parsing out method information from a Java source file and creating a Functions XML file representation of the methods defined on the class. This content can be added to the asset as a standard interface-functions artifact or run through an XSLT stylesheet to format the content as desired. See the <a href="#s09_06">xsltmapper</a> task.</p>

<h5>Attributes of javafunctionsparser</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>file</td>
		<td>The Java file to parse.</td>
		<td>Either file or retrieverid is required, and file overrides retrieverid.</td>
	</tr>
	<tr>
		<td>retrieverid</td>
		<td>The ID of a Retriever to retrieve the file contents to be parsed.</td>
		<td>Yes, unless file is specified.</td>
	</tr>
	<tr>
		<td>retrieveruri</td>
		<td>A URI of the file to be processed from the Retriever. If not specified, the first file is retrieved.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>id</td>
		<td>A unique string to identify this Parser. The string is arbitrary but must be unique against all other Parsers in this assembly.</td>
		<td>No.</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of javafunctionsparser</h5>
<p>See <a href="#s06_01">textparser</a>. Note: this parser will return the whole contents of the Functions XML file regardless of what key expression is passed to it.</p>
<h5>Examples of javafunctionsparser</h5>
<p>Parse a Java file and add an interface-functions artifact with the resulting Functions XML produced.</p>
<pre>&lt;javafunctionsparser file="@java-file@" id="java-parser"&gt;
  &lt;key name="all" expression="*" /&gt;
&lt;/javafunctionsparser&gt;
&lt;artifact category="interface-functions" type="by-value" failonerror="true" tempdir="${temp-artifact-dir}"&gt;
  &lt;artifactcontent parserid="java-parser" parserkey="all" /&gt;
&lt;/artifact&gt;</pre>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="tasks_value">Value Tasks</h3>
<p>The following tasks are used to retrieve values from a parser or a retriever or used to construct a value from a variable:</p>
		<ol>
	<li><a href="#s07_01">parservalue</a></li>
	<li><a href="#s07_02">parserkeys</a></li>
	<li><a href="#s07_03">parserevaluate</a></li>
	<li><a href="#s07_04">url</a></li>
	<li><a href="#s07_05">urlpath</a></li>
	<li><a href="#s07_06">urlparameter</a></li>
	<li><a href="#s07_07">latestversion</a></li>
	<li><a href="#s07_08">namevalueattribute</a></li>
</ol>


<h4 id="s07_01">parservalue</h4>
<p>The <strong>parservalue</strong> task is used to retrieve a value from a Parser by specifying the parser ID and key. The value retrieved will override the <strong>value</strong> attribute of the parent element. A given parser key may return multiple values, in which case it is up to the parent element on how it handles multiple values.</p>
<p>This element may contain nested tasks such as Mappers to construct/modify the value.</p>

<h5>Attributes of parservalue</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>parserid</td>
		<td>ID of the Parser to retrieve a value from.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>parserkey</td>
		<td>The Parser lookup key for the value of interest.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>defaultvalue</td>
		<td>Return this value if no values are retrieved from the parser for the given key.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>failonerror</td>
		<td>Set to <strong>true</strong> or <strong>false</strong>. Fail if no value is found for the given key. Ignored if defaultvalue attribute is specified. Default is <strong>false</strong>.</td>
		<td>No.</td>
	</tr>
	</tbody>
</table>

<h5>Examples of parservalue</h5>
<p>Set the asset version to the value from a parser.</p>
<pre>&lt;assetattribute name="version"&gt;
  &lt;parservalue parserid="xml-parser" parserkey="version" /&gt;
&lt;/assetattribute&gt;
</pre>


<h4 id="s07_02">parserkeys</h4>
<p>The <strong>parserkeys</strong> task is used to iterate over multiple parser keys that match a given key and/or value expression. The iteration is used by its parent task to iterate over the individual key/values matched. This is useful for creating multiple items (classifiers, artifacts, or relationships) where the parser key name encodes information about the type of item to be added.</p>

<h5>Attributes of parserkeys</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>keyexpression</td>
		<td>A regular expression used to match keys of interest from the associated Parser. See <a href="#perl_regex_syntax">Perl Regular Expression Syntax</a>.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>parserid</td>
		<td>ID of the Parser to retrieve the keys from.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>valueexpression</td>
		<td>A regular expression used to match values of interest that are associated with the keys matched by the keyexpression. See <a href="#perl_regex_syntax">Perl Regular Expression Syntax</a>.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>keyvar</td>
		<td>A variable to set the current key to while iterating over the list of keys returned.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>valuevar</td>
		<td>A variable to set the current value of the current key to while iterating over the list of keys and values returned.</td>
		<td>No.</td>
	</tr>
	</tbody>
</table>

<h5>Examples of parserkeys</h5>
<p>Using the parserkeys task to create asset relationships based on keys from a Parser of the form <strong>relatedasset.xxx</strong> where <strong>xxx</strong> is the relationship name:</p>
<pre>&lt;assetrelationship&gt;
  &lt;parserkeys keyexpression="^relatedasset\..*" parserid="textparser" keyvar="key" valueexpression=".*" valuevar="value" /&gt;
  &lt;relationshipname value="@key@"&gt;
    &lt;xmap from="relatedasset\.(.*)" to="\1" /&gt;
  &lt;/relationshipname&gt;
  &lt;assetname value="@value@" /&gt;
  &lt;assetversion value="1.0" /&gt;
&lt;/assetrelationship&gt;</pre>


<h4 id="s07_03">parserevaluate</h4>
<p>The <strong>parserevaluate</strong> task uses a Parser to evaluate an expression. It can be used to evaluate an expression that is based on a variable that may not be known to the Parser at the time, such as in a child assembly. See <a href="#s03_07">childassembly</a>.</p>
<p>This element may contain nested tasks such as Mappers to construct/modify the value.</p>
<h5>Attributes of parserevaluate</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>parserid</td>
		<td>ID of the Parser to retrieve a value from.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>parserexpression</td>
		<td>The Parser expression to evaluate. It must match the expression syntax for the given Parser.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>defaultvalue</td>
		<td>Return this value if no values are retrieved from the parser for the given expression.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>failonerror</td>
		<td>Set to <strong>true</strong> or <strong>false</strong>. Fail if no value is found for the given key. Ignored if the defaultvalue attribute is specified. Default is <strong>false</strong>.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>maxoccurs</td>
		<td>A positive integer. This will limit the maximum number of values returned by this task.</td>
		<td>No.</td>
	</tr>
	</tbody>
</table>

<h5>Examples of parserevaluate</h5>
<p>Evaluate an XPath expression from a javaxmlparser based on the current value of @asset-uri@ (which may be in a childassembly task) and create an overview artifact.</p>
<pre>&lt;artifact category="overview" type="by-value" failonerror="true" tempdir="${temp-artifact-dir}" name="overview"&gt;
  &lt;artifactcontent&gt;
    &lt;parserevaluate parserid="java-parser" maxoccurs="1" 
    parserexpression="//class/methods/method[@name='@asset-uri@']/comment/content/html" /&gt;
  &lt;/artifactcontent&gt;
&lt;/artifact&gt;</pre>


<h4 id="s07_04">url</h4>
<p>The <strong>url</strong> task is used to simplify the creation of a URL (for by-reference purposes). It can be used wherever a parser value is required. It handles encoding and specifying url parameters. The URL constructed will be of the following form:</p>
<pre>protocol://host:port/path?param1name=param1value&amp;amp;param2name=param2value...</pre>
<h5>Attributes of url</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>protocol</td>
		<td>The protocol of the URL. For example: <strong>http</strong>.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>host</td>
		<td>The hostname of the server to use in the URL.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>port</td>
		<td>The port of the URL. If the port is not specified, then the default port will be used depending on the protocol.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>path</td>
		<td>The path to the resource.</td>
		<td>Yes, if nested urlpath element is not specified.</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of url</h5>
<ul>
	<li><a href="#s07_05">urlpath</a></li>
	<li><a href="#s07_06">urlparameter</a></li>
</ul>


<h4 id="s07_05">urlpath</h4>
<p>The <strong>urlpath</strong> task represents the path portion of a URL. It can be specified in the url task, but the main purpose of using the urlpath nested task is to allow Mappers to operate on its contents. This element inherits attributes and behavior from the namevalueattribute task.</p>


<h4 id="s07_06">urlparameter</h4>
<p>The <strong>urlparameter</strong> task is used to set a parameter in a URL. The url task will manage encoding the name and value of the parameter correctly. This element inherits attributes and behavior from the namevalueattribute task.</p>

<h5>Attributes of urlpath (in addition to namevalueattribute attributes)</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>name</td>
		<td>The name of the URL parameter</td>
		<td>Yes.</td>
	</tr>
	</tbody>
</table>
<h5>Examples of url</h5>
<p>This example can be used, inside a artifactreference task in a by-reference artifact to create a url that performs a search in Google. It depends on a variable called query being set and will replace any <strong>hello</strong> occurrences in that query to <strong>goodbye</strong>.</p>
<pre>&lt;url protocol="http" host="www.google.com" port="80"&gt;
  &lt;urlpath value="/search" /&gt;
  &lt;urlparameter name="q" value="@query@"&gt;
    &lt;xmap from="hello" to="goodbye" /&gt;
  &lt;/urlparameter&gt;
&lt;/url&gt;</pre>


<h4 id="s07_07">latestversion</h4>
<p>The <strong>latestversion</strong> task is used anywhere a parservalue is expected, but most likely in the case of a relatedasset modifier. The latestversion task enumerates the versions of an asset and will return the most recent one alphanumerically. For example if you have an asset in Lifecycle Manager with version</p>
<p>1.0, 2.0, and ABC. The text <strong>ABC</strong> asset will be returned.</p>
<h5>Attributes of latestversion</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>assetname</td>
		<td>The name of the asset for which the latest version will be returned.</td>
		<td>Yes.</td>
	</tr>
	</tbody>
</table>

<h5>Examples of latestversion</h5>
<p>This example creates a related predecessor relationship to the latest version of asset <strong>Base</strong></p>
<pre>&lt;assetrelationship name="predecessor" assetname="Base"/&gt;
  &lt;assetversion&gt;
    &lt;latestversion assetname="Base"/&gt;
  &lt;/assetversion&gt;
&lt;/assetrelationship&gt;</pre>
<!--<p>{xxx the above XML fails validation.}</p>-->


<h4 id="s07_08">namevalueattribute</h4>
<p>The <strong>namevalueattribute</strong> element is not used directly, but is used by other tasks that inherit from its implementation to hold a name/value pair. The value can be from a Retriever or a Parser, or may be specified directly with the <strong>value</strong> attribute. This element may contain nested tasks such as Mappers to construct/modify the value. Token filtering may be used in the value attribute using the <span class="apidoc_code">@variable@</span> token filtering syntax.</p>
<p>Tasks that inherit the behavior and attributes from this task are <strong>artifactcategory</strong>, <strong>artifactcontent</strong>, <strong>artifactname</strong>, <strong>artifactreference</strong>, <strong>artifacttype</strong>, <strong>artifactversion</strong>, <strong>relationshipname</strong>, <strong>assetname</strong>, <strong>assetversion</strong>, <strong>cc_attribute</strong>, <strong>classifiername</strong>, <strong>classifiervalue</strong>, <strong>urlparameter</strong>, and <strong>urlpath</strong>.</p>

<h5>Attributes of namevalueattribute</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>value</td>
		<td>The value of the attribute.</td>
		<td>Yes, unless nested elements are used to set the value.</td>
	</tr>
	</tbody>
</table>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="tasks_asset_modifier">Asset Modifier Tasks</h3>
<p>In this section:</p>
<ul>
	<li><a href="#s08_01">assetattribute</a></li>
	<li><a href="#s08_02">parservalue</a></li>
	<li><a href="#s08_03">classifier</a></li>
	<li><a href="#s08_04">classifiername</a></li>
	<li><a href="#s08_05">classifiervalue</a></li>
	<li><a href="#s08_06">parservalue</a></li>
	<li><a href="#s08_07">parserkeys</a></li>
	<li><a href="#s08_08">artifact</a></li>
	<li><a href="#s08_09">artifactname</a></li>
	<li><a href="#s08_10">artifactcategory</a></li>
	<li><a href="#s08_11">artifactreference</a></li>
	<li><a href="#s08_12">artifacttype</a></li>
	<li><a href="#s08_13">artifactversion</a></li>
	<li><a href="#s08_14">artifactcontent</a></li>
	<li><a href="#s08_15">assetrelationship</a></li>
	<li><a href="#s08_16">relationshipname</a></li>
	<li><a href="#s08_17">assetname</a></li>
	<li><a href="#s08_18">assetversion</a></li>
	<li><a href="#s08_19">assetmerge</a></li>
	<li><a href="#s08_20">artifactinclude and artifactexclude</a></li>
	<li><a href="#s08_21">classifierinclude and classifierexclude</a></li>
	<li><a href="#s08_22">relatedassetinclude and relatedassetexclude</a></li>
</ul>


<h4 id="s08_01">assetattribute</h4>
<p>The <strong>assetattribute</strong> task is used to set the asset name, asset version or asset description of an asset. It takes a name/value pair where the name is one of <strong>name</strong>, <strong>version</strong> or <strong>description</strong>. This element may contain nested tasks such as Mappers to construct/modify the value. Token filtering may be used in the value attribute using the <strong>@variable@</strong> token filtering syntax.</p>

<h5>Attributes of assetattribute</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>name</td>
		<td>One of <strong>name</strong>, <strong>version</strong>, <strong>description</strong>, <strong>date</strong>, or <strong>owning-group</strong>.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>value</td>
		<td>The value of the asset attribute.</td>
		<td>Yes, unless nested elements are used to set the value.</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of assetattribute</h5>
<ul>
	<li><a href="#s08_06">parservalue</a></li>
</ul>


<h4 id="s08_02">parservalue</h4>
<p>The <strong>parservalue</strong> task may be used to set the value for an asset attribute. If parservalue returns multiple values, only the first value will be used. See <a href="#s08_06">parservalue</a> above.</p>
<h5>Examples of assetattribute</h5>
<p>Set the name, version and description of an asset using variable substitution and Parser values.</p>
<pre>&lt;assetattribute name="name" value="@asset-name-no-ext@" /&gt;
&lt;assetattribute name="version"&gt;
  &lt;parservalue parserid="xml-parser" parserkey="version" /&gt;
&lt;/assetattribute&gt;
&lt;assetattribute name="description"&gt;
  &lt;parservalue parserid="description-parser" parserkey="description" /&gt;
&lt;/assetattribute&gt;</pre>


<h4 id="s08_03">classifier</h4>
<p>The <strong>classifier</strong> task is a Modifier for adding or replacing an asset classifier. A classifier has a name and a value. Valid classifiers are defined in the Global Definition Template of the library. A classifier value may be set based on the value of a variable, or the results of a Parser.</p>

<h5>Attributes of classifier</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>name</td>
		<td>The name of the classifier.</td>
		<td>Yes, unless nested elements are used to set the name.</td>
	</tr>
	<tr>
		<td>value</td>
		<td>The value of the classifier.</td>
		<td>Yes, unless nested elements or parserid/parserkey are used to set the value.</td>
	</tr>
	<tr>
		<td>maxoccurs</td>
		<td>A positive integer. This will be the maximum number of classifiers added by this task.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>failonerror</td>
		<td>Set to <strong>true</strong> or <strong>false</strong>. Should this task fail if there is an error processing this classifier? Default is <strong>false</strong>.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>parserid</td>
		<td>ID of the Parser to retrieve value(s) from.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>parserkey</td>
		<td>The Parser lookup key for the value(s) of interest.</td>
		<td>No.</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of classifier</h5>
<ul>
	<li><a href="#s08_04">classifiername</a></li>
	<li><a href="#s08_05">classifiervalue</a></li>
	<li><a href="#s08_06">parservalue</a></li>
	<li><a href="#s08_07">parserkeys</a></li>
</ul>


<h4 id="s08_04">classifiername</h4>
<p>The optional <strong>classifiername</strong> element is used to set the name for this classifier. It overrides the <strong>name</strong> attribute of the parent classifier element. This element inherits attributes and behavior from the namevalueattribute task.</p>


<h4 id="s08_05">classifiervalue</h4>
<p>The optional <strong>classifiervalue</strong> element is used to set the value for this classifier. It overrides the <strong>value</strong> attribute of the parent classifier element. This element inherits attributes and behavior from the namevalueattribute task.</p>


<h4 id="s08_06">parservalue</h4>
<p>The <strong>parservalue</strong> task may be used to set the value for a classifier. If parservalue returns multiple values, multiple classifiers will be created, up to the value of maxoccurs. See <a href="#s08_06">parservalue</a> above.</p>


<h4 id="s08_07">parserkeys</h4>
<p>The <strong>parserkeys</strong> task may be used to iterate over a number of parser keys/values in order to create multiple classifiers. See <a href="#s07_02">parserkeys</a> above.</p>

<h5>Examples of classifier</h5>
<p>Set the asset-type classifier:</p>
<pre>&lt;classifier name=&quot;asset-type&quot; value=&quot;Application&quot;/&gt;</pre>
<p>Create author classifiers with values from a parser:</p>
<pre>&lt;classifier name="author"&gt;
  &lt;parservalue parserid="xml-parser" parserkey="author" /&gt;
&lt;/classifier&gt;</pre>
<p>Use the parserkeys task to create classifiers based on keys from a Parser of the form <strong>classifier.xxx</strong> where <strong><strong>xxx</strong></strong> is the classifier name:</p>
<pre>&lt;classifier&gt;
  &lt;parserkeys keyexpression="^classifier\..*" parserid="textparser" keyvar="key" valueexpression=".*" valuevar="value" /&gt;
  &lt;classifiername value="@key@"&gt;
    &lt;xmap from="classifier\.(.*)" to="\1" /&gt;
  &lt;/classifiername&gt;
  &lt;classifiervalue value="@value@" /&gt;
&lt;/classifier&gt;</pre>


<h4 id="s08_08">artifact</h4>
<p>The <strong>artifact</strong> task is a Modifier for adding or replacing an asset artifact. The reference to the actual artifact may be a physical filename or a URI. This reference can be specified with the <strong>file</strong> attribute or by using a Retriever which allows multiple artifacts to be added to the asset. An artifact also has a name, a category and a type (by-value or by-reference), all of which may be set with a corresponding attribute or a nested element. Normally, an artifact that is referenced by URI will be of type by- reference, but there is a special case of the asset overview artifact which is required to be by-value. In this case, the file must be written to a temporary file and the physical filename added as the reference to the artifact. The <strong>tempdir</strong> attribute is used for this purpose and should point to a directory for the task to write the temporary file to.</p>

<h5>Attributes of artifact</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>retrieverid</td>
		<td>The ID of a Retriever to retrieve the artifact references and/or file contents.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>file</td>
		<td>A filename of the asset artifact. Overrides the retrieverid.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>variable</td>
		<td>The variable name to set to the filename/URI of the current artifact being processed. This variable can be used by child tasks via the <strong>@variablename@</strong> token filtering syntax, where variablename is the value of this variable attribute.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>maxoccurs</td>
		<td>A positive integer. This will be the maximum number of artifacts added by this task.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>replace</td>
		<td>Set to <strong>true</strong> or <strong>false</strong>. If an artifact of this category already exists, it will be replaced. Default is <strong>false</strong>.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>failonerror</td>
		<td>Set to <strong>true</strong> or <strong>false</strong>. Should this task fail if there is an error processing this artifact (say the file doesn't exist or the Retriever returned an empty list)? Default is <strong>true</strong>.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>category</td>
		<td>The category of this artifact. The list of artifact categories is defined in the Global Definition Template of the library.</td>
		<td>Yes, unless artifactcategory nested element is used.</td>
	</tr>
	<tr>
		<td>name</td>
		<td>The artifact name. Default will be the artifact category. Allows a different name to be displayed for this particular artifact.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>type</td>
		<td>Either <strong>by-reference</strong>, <strong>by-value</strong>, or by-<strong>description</strong>.</td>
		<td>Yes, unless artifacttype nested element is used.</td>
	</tr>
	<tr>
		<td>version</td>
		<td>The version info for this artifact. Default is the timestamp of the file. When an asset is republished, a change notification is generated based on the difference between the current and previous version. If the contents of an artifact alone changes, a notification is not generated. By specifying a different artifact version, a change notification will be generated. Normally, the default behavior is adequate.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>tempdir</td>
		<td>The directory to store a temporary file. Used if the artifact type is <strong>by-value</strong> and the reference is a URI/URL from a Retriever. The file will be retrieved and stored in this directory before being loaded into the repository. The file is not deleted.</td>
		<td>No.</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of artifact:</h5>
<ul>
	<li><a href="#s08_09">artifactname</a></li>
	<li><a href="#s08_10">artifactcategory</a></li>
	<li><a href="#s08_11">artifactreference</a></li>
	<li><a href="#s08_12">artifacttype</a></li>
	<li><a href="#s08_13">artifactversion</a></li>
	<li><a href="#s08_14">artifactcontent</a></li>
</ul>


<h4 id="s08_09">artifactname</h4>
<p>The optional <strong>artifactname</strong> element is used to set the name for this artifact. It overrides the <strong>name</strong> attribute of the parent artifact element. This element inherits attributes and behavior from the namevalueattribute task.</p>


<h4 id="s08_10">artifactcategory</h4>
<p>The optional <strong>artifactcategory</strong> element is used to set the category for this artifact. It overrides the <strong>category</strong> attribute of the parent artifact element. This element inherits attributes and behavior from the namevalueattribute task.</p>


<h4 id="s08_11">artifactreference</h4>
<p>The optional <strong>artifactreference</strong> element is used to set the reference for this artifact. By default, the artifact reference is the filename or URI/URL from a Retriever (or a temporary filename – see the <strong>tempdir</strong> attribute). This value can be overridden, say, to modify a URL or change a directory prefix. This element inherits attributes and behavior from the namevalueattribute task.</p>


<h4 id="s08_12">artifacttype</h4>
<p>The optional <strong>artifacttype</strong> element is used to set the type for this artifact. It overrides the <strong>type</strong> attribute of the parent artifact element. The type must be one of <strong>by-reference</strong> or <strong>by- value</strong>. This element inherits attributes and behavior from the namevalueattribute task.</p>


<h4 id="s08_13">artifactversion</h4>
<p>The optional <strong>artifactversion</strong> element is used to set the version information for this artifact. It overrides the <strong>version</strong> attribute of the parent artifact element. This element inherits attributes and behavior from the namevalueattribute task.</p>


<h4 id="s08_14">artifactcontent</h4>
<p>The optional <strong>artifactcontent</strong> element is used to set the contents of a by-value artifact. This element inherits attributes and behavior from the namevalueattribute task.</p>
<h5>Examples of artifact</h5>
<p>Set the overview artifact to the contents from a Retriever.</p>
<pre>&lt;artifact category="overview" type="by-value" 
  retrieverid="overview-fileset" 
  failonerror="true" maxoccurs="1" 
  variable="overview-file-name"&gt;
  &lt;artifactreference value="@overview-file-name@" /&gt;
&lt;/artifact&gt;</pre>


<h4 id="s08_15">assetrelationship</h4>
<p>The <strong>assetrelationship</strong> task is used to specify an asset that is related to the current asset. This relationship is held by the asset and does not exist on its own (meaning if the asset was removed, the relationship would be removed also).</p>

<h5>Attributes of assetrelationship</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>name</td>
		<td>The name of the relationship.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>assetname</td>
		<td>The name of the asset this relationship points to.</td>
		<td>No. Unless assetid is not specified and assetname child element is not specified.</td>
	</tr>
	<tr>
		<td>assetversion</td>
		<td>The version of the asset this relationship points to.</td>
		<td>No. Unless assetname is used.</td>
	</tr>
	<tr>
		<td>failonerror</td>
		<td>Set to <strong>true</strong> or <strong>false</strong>. Should this task fail if there is an error processing this assetrelationship? Default is <strong>true</strong>.</td>
		<td>No.</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of assetrelationship</h5>
<ul>
	<li><a href="#s08_16">relationshipname</a></li>
	<li><a href="#s08_17">assetname</a></li>
	<li><a href="#s08_18">assetversion</a></li>
</ul>


<h4 id="s08_16">relationshipname</h4>
<p>The optional <strong>relationshipname</strong> element is used to set the name for this relationship. It overrides the <strong>name</strong> attribute of the parent assetrelationship element. This element inherits attributes and behavior from the namevalueattribute task.</p>


<h4 id="s08_17">assetname</h4>
<p>The optional <strong>assetname</strong> element is used to set the name for this relationship. It overrides the <strong>assetname</strong> attribute of the parent relationship element. This element inherits attributes and behavior from the namevalueattribute task.</p>


<h4 id="s08_18">assetversion</h4>
<p>The optional <strong>assetversion</strong> element is used to set the name for this relationship. It overrides the <strong>assetversion</strong> attribute of the parent relationship element. This element inherits attributes and behavior from the namevalueattribute task.</p>
<h5>Examples of assetrelationship</h5>
<pre>&lt;assetrelationship name=&quot;uses&quot; assetname=&quot;otherasset&quot; assetversion=&quot;1.0&quot;/&gt;</pre>


<h4 id="s08_19">assetmerge</h4>
<p>The <strong>assetmerge</strong> task is used to merge information from another asset into this one. The nested elements of assetmerge allow you to include or exclude certain artifacts, classifiers, and relationships. By default, all artifacts are included if no artifactinclude or artifactexclude statements are given. If any artifactinclude or artifactexclude statements are given, then the artifact must match at least one include and no excludes. The same applies for classifiers and relationships. Each of the nested elements may take use an asterisk (<strong>*</strong>) wildcard to match multiple values. For example <strong>support-*</strong> will match support-level or support-person.</p>
<table class="doctable">
	<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>assetname</td>
		<td>The name of the asset to merge.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>assetversion</td>
		<td>The version of the asset to merge.</td>
		<td>Yes.</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of assetmerge</h5>
<ul>
	<li><a href="#s08_20">artifactinclude and artifactexclude</a></li>
	<li><a href="#s08_21">classifierinclude and classifierexclude</a></li>
	<li><a href="#s08_22">relatedassetinclude and relatedassetexclude</a></li>
</ul>


<h4 id="s08_20">artifactinclude and artifactexclude</h4>
<p>The <strong>artifactinclude</strong> task and artifactexclude tasks can be used to limit the artifacts that are merged with the asset.</p>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>category</td>
		<td>The category name of the artifact the existing asset must match to be included or excluded.</td>
		<td>Yes.</td>
	</tr>
	</tbody>
</table>


<h4 id="s08_21">classifierinclude and classifierexclude</h4>
<p>The <strong>classifierinclude</strong> task and classifierexclude tasks can be used to limit the classifiers that are merged with the asset.</p>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>name</td>
		<td>The name of the classifier the existing asset must match to be included or excluded.</td>
		<td>Yes.</td>
	</tr>
	</tbody>
</table>


<h4 id="s08_22">relatedassetinclude and relatedassetexclude</h4>
<p>The <strong>relatedassetinclude</strong> task and relatedassetexclude tasks can be used to limit the related assets that are merged with the asset.</p>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>Name</td>
		<td>The relationship name of the related asset the existing asset must match to be included or excluded.</td>
		<td>Yes.</td>
	</tr>
	</tbody>
</table>

<h5>Examples of assetmerge</h5>
<pre>&lt;assetmerge assetname="@asset-name@" assetversion="@latest-version@"&gt;
  &lt;artifactinclude category="overview " /&gt;
  &lt;classifierinclude name="*" /&gt;
  &lt;classifierexclude name="internal-*" /&gt;
  &lt;relatedassetexclude name="*" /&gt;
&lt;/assetmerge&gt;</pre>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="tasks_mapper">Mapper Tasks</h3>
<p>Mapper tasks are used as child elements of other tasks. They are passed a value from their parent and modify it in some way.</p>
<p>In this section:</p>
<ul>
	<li><a href="#s09_01">encodeurl</a></li>
	<li><a href="#s09_02">prepend</a></li>
	<li><a href="#s09_03">substitute</a></li>
	<li><a href="#s09_04">substring</a></li>
	<li><a href="#s09_05">xmap</a></li>
	<li><a href="#s09_06">xsltmapper</a></li>
</ul>


<h4 id="s09_01">encodeurl</h4>
<p>The <strong>encodeurl</strong> task is a Mapper that retrieves the URL form of a file from a Retriever. The Retriever is entrusted with creating a URL that can be used by the browser or IDE to retrieve the file. This is useful for by-reference artifacts in the <strong>artifactreference</strong> task. The <strong>encodeurl</strong> task does not support any child elements. The value passed to this Mapper from its parent is the file name returned from a Retriever.</p>

<h5>Attributes of encodeurl</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>retrieverid</td>
		<td>The ID of a Retriever.</td>
		<td>Yes.</td>
	</tr>
	</tbody>
</table>

<h5>Examples of encodeurl</h5>
<pre>&lt;artifact category="usage-guide" type="by-reference" 
  retrieverid="usage-guide-retriever" 
  maxoccurs="1" 
  variable="usage-guide-file-name"&gt;
  &lt;artifactreference value="@usage-guide-file-name@"&gt;
    &lt;encodeurl retrieverid="usage-guide-retriever" /&gt;
  &lt;/artifactreference&gt;
&lt;/artifact&gt;</pre>


<h4 id="s09_02">prepend</h4>
<p>The <strong>prepend</strong> Mapper adds a given string to the beginning of its input string.</p>
<h5>Attributes of prepend</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>value</td>
		<td>The string to prepend.</td>
		<td>Yes.</td>
	</tr>
	</tbody>
</table>

<h5>Examples of prepend</h5>
<p>Prepend the text <strong>http://myserver</strong> to the beginning of the input string:</p>
<pre>&lt;prepend value=&quot;http://myserver&quot;/&gt;</pre>


<h4 id="s09_03">substitute</h4>
<p>The <strong>substitute</strong> task transforms its input by substituting text.</p>

<h5>Attributes of substitute</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>from</td>
		<td>The string to match.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>to</td>
		<td>The value to be assigned.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>replaceall</td>
		<td>Set to <strong>true</strong> or <strong>false</strong>. Should all occurrences be replaced? Default is <strong>true</strong>.</td>
		<td>No.</td>
	</tr>
	</tbody>
</table>

<h5>Examples of substitute</h5>
<p>A transformation from backslash to forward slash would look like this:</p>
<pre>&lt;substitute from=&quot;\&quot; to=&quot;/&quot;/&gt;</pre>


<h4 id="s09_04">substring</h4>
<p>The <strong>substring</strong> task returns a portion of its input.</p>

<h5>Attributes of substring</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>startindex</td>
		<td>The integer index of the first character to keep. The index value must be an integer from 0 to the length of the input string minus 1. Default is <strong>0</strong>.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>length</td>
		<td>The number of characters to keep including the starting character. Must be greater than zero. If the number of characters from the start index to the end of the input string are less than the value for length, the rest of the input string is returned.</td>
		<td>Yes.</td>
	</tr>
	</tbody>
</table>

<h5>Examples of substring</h5>
<p>Return the first 200 characters of the input string:</p>
<pre>&lt;substring startindex=&quot;0&quot; length=&quot;200&quot;/&gt;</pre>


<h4 id="s09_05">xmap</h4>
<p>The <strong>xmap</strong> task is a Mapper which takes a <strong>from</strong> regular expression and a <strong>to</strong> replacement expression to transform its input. Token filtering may be used in the <strong>from</strong> or <strong>to</strong> attribute using the <span class="apidoc_code">@variable@</span> token filtering syntax.</p>

<h5>Attributes of xmap</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>from</td>
		<td>The regular expression to match the input. See <a href="#perl_regex_syntax">Perl Regular Expression Syntax</a> below.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>to</td>
		<td>The replacement expression. This may include replacement tokens of the form \n where n is a positive number and represents an expression matched in the from attribute. See syntax description of () below.</td>
		<td>Yes.</td>
	</tr>
	</tbody>
</table>

<h5 id="perl_regex_syntax">Perl Regular Expression Syntax</h5>
<p>The following is a brief overview of Perl regular expressions. For more information, consult the Perl documentation.</p>
<p>^	matches beginning of line</p>
<p>$$	matches end of line (note a double dollar sign must be used since $ is a special character in Ant)</p>
<p>.	matches an arbitrary character</p>
<p>*	matches zero or more of the previous character or expression</p>
<p>+	matches one or more of the previous character or expression</p>
<p>()	groups portions of an expression and are associated with \1, \2, etc. as numbered from left to right and outermost to innermost grouping.</p>
<p>{n}	matches the previous character or expression n times.</p>
<p>[abc] matches one of the characters <strong>a</strong>, <strong>b</strong> or <strong>c</strong>.</p>
<p>\s	matches a space character</p>
<p>\S	matches a non-space character</p>
<p>\d	matches a digit</p>
<p>\D	matches a non-digit</p>
<p>\.	matches a period</p>
<p>\\	matches a single backslash</p>
<h5>Examples of xmap</h5>
<p>Transform a filename that has and optional <strong>Chess</strong> or <strong>chess</strong> in its name and ends in <strong>.jpr</strong> to a string which will start with <strong>Sample Chess</strong> and end with the rest of the original name:</p>
<pre>&lt;xmap from=&quot;^.*/([Cc]hess)?(.+)\.jpr$$&quot; to=&quot;Sample Chess \2&quot;/&gt;</pre>
<p>Transform an asset URI to a directory pathname by removing everything after the last backslash:</p>
<pre>&lt;variable name="asset-dir" value="@asset-uri@"&gt;
  &lt;xmap from="^(.*)\\.*$$" to="\1"/&gt;
&lt;/variable&gt;</pre>


<h4 id="s09_06">xsltmapper</h4>
<p>The <strong>xsltmapper</strong> task is a Mapper which takes performs an XSLT translation of its XML input using an XSLT stylesheet.</p>

<h5>Attributes of xsltmapper</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>style</td>
		<td>The filename of an XSLT stylesheet.</td>
		<td>Yes.</td>
	</tr>
	</tbody>
</table>

<h5>Examples of xsltmapper</h5>
<p>Run the results of a javaxmlparser through an XSLT stylesheet to produce an overview artifact.</p>
<pre>&lt;artifact category="overview" type="by-value" failonerror="true" tempdir="${temp- artifact-dir}" name="overview"&gt;
  &lt;artifactcontent parserid="java-parser" parserkey="all"&gt;
    &lt;xsltmapper style="overview.xsl" /&gt;
  &lt;/artifactcontent&gt;
&lt;/artifact&gt;</pre>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>

uptohere


<h3 id="tasks_misc">Miscellaneous Tasks</h3>
<p>In this section:</p>
<ul>
	<li><a href="#s10_01">variable</a></li>
	<li><a href="#s10_02">assetsource</a></li>
	<li><a href="#s10_03">connection</a></li>
	<li><a href="#s10_04">cachetemplates</a></li>
	<li><a href="#s10_05">assetdiff</a></li>
	<li><a href="#s10_06">artifactinclude and artifactexclude</a></li>
	<li><a href="#s10_07">classifierinclude and classifierexclude</a></li>
	<li><a href="#s10_08">relatedassetinclude and relatedassetexclude</a></li>
	<li><a href="#s10_09">assetskip</a></li>
	<li><a href="#s10_10">if</a></li>
	<li><a href="#s10_11">Conditional</a></li>
	<li><a href="#s10_12">then</a></li>
	<li><a href="#s10_13">else</a></li>
	<li><a href="#s10_14">script</a></li>
	<li><a href="#s10_15">retrieverwriter</a></li>
</ul>


<h4 id="s10_01">variable</h4>
<p>The <strong>variable</strong> task implements a simple name/value pair association. The name and value can be set directly or can be a result of a filtering transformation and/or one or more mapping transformations or a parservalue. Token filtering may be used in the value attribute using the <strong>@variable@</strong> token filtering syntax.</p>

<h5>Attributes of variable</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>name</td>
		<td>The name to be given to the variable.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>value</td>
		<td>The value to be assigned.</td>
		<td>Yes, unless child mapping transformation is specified.</td>
	</tr>
	</tbody>
</table>

<h5>Examples of variable</h5>
<p>A simple filtering transformation would look like this:</p>
<pre>&lt;variable name=&quot;foo&quot; value=&quot;@token@&quot;/&gt;</pre>
<p>A more complex mapping transformation requires child elements that implement the IMapper interface:</p>
<pre>&lt;variable name="foo" value="@token@"&gt;
  &lt;map from="^(.*)/" to="\1" /&gt;
&lt;/variable&gt;</pre>
<p>Setting a variable to a value returned from a parser:</p>
<pre>&lt;variable name="asset-name" value="@token@"&gt;
  &lt;parservalue parserid="my-parser" parserkey="name" /&gt;
&lt;/variable&gt;</pre>


<h4 id="s10_02">assetsource</h4>
<p>The <strong>assetsource</strong> task can be used to cache capture templates locally. This would normally be used for</p>
<p>debugging in conjunction with the <strong>offline</strong> attribute of the <strong>assetadapter</strong> task.</p>

<h5>Nested elements of assetsource</h5>
<ul>
	<li><a href="#s10_03">connection</a></li>
	<li><a href="#s10_04">cachetemplates</a></li>
</ul>


<h4 id="s10_03">connection</h4>
<p>See <a href="#s03_02">connection</a> above.</p>


<h4 id="s10_04">cachetemplates</h4>
<p>The optional <strong>cachetemplates</strong> task is used as a child of the <strong>assetsource</strong> task. It is used to copy capture templates (XML files) to a local directory for use with the <strong>offline</strong> attribute of <strong>assetadapter</strong>.</p>

<h5>Attributes of parservalue</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>dir</td>
		<td>Directory to store the templates in.</td>
		<td>Yes.</td>
	</tr>
	</tbody>
</table>

<h5>Example of artifact</h5>
<pre>&lt;target name="offline-setup"&gt;
  &lt;mkdir dir="${templates-dir}" /&gt;
  &lt;assetsource&gt;
    &lt;connection file="${connections-file}" name="${connection-name}" /&gt;
    &lt;cachetemplates dir="${templates-dir}" /&gt;
  &lt;/assetsource&gt;
&lt;/target&gt;</pre>


<h4 id="s10_05">assetdiff</h4>
<p>The <strong>assetdiff</strong> task can be used to determine if the current asset is different from another. The method of comparing this asset with the one specified is quite simple. For artifacts, the artifact in this asset</p>
<p>must exist in the specified asset with the same category, name, and version. For classifiers, each must exist in the specified asset with the same name and value. And for related assets, each must exist in the specified asset with the same relationship name, asset name, and asset version. If there is an artifact, classifier, or related asset that is processed in this asset that doesn't exist in the asset specified, then the resultvariable is set to <strong>true</strong>. Otherwise it is not set. The elements to compare can be limited using the nested elements. By default all artifacts, classifiers, and related assets are compared in the diff.</p>

<h5>Attributes of assetdiff</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>assetname</td>
		<td>The name of the asset to compare this one to.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>assetversion</td>
		<td>The version of the asset to compare this one to.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>resultvariable</td>
		<td>The variable to set to <strong>true</strong> if the assets differ. Otherwise it is not set</td>
		<td>Yes.</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of assetdiff</h5>
<ul>
	<li><a href="#s08_20">artifactinclude and artifactexclude</a></li>
	<li><a href="#s08_21">classifierinclude and classifierexclude</a></li>
	<li><a href="#s08_22">relatedassetinclude and relatedassetexclude</a></li>
</ul>


<h4 id="s10_06">artifactinclude and artifactexclude</h4>
<p>The <strong>artifactinclude</strong> task and artifactexclude tasks can be used to limit the artifacts that are diff'ed with the specified asset.</p>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>category</td>
		<td>The category name of the artifact the existing asset must match to be included or excluded in the diff comparison.</td>
		<td>Yes.</td>
	</tr>
	</tbody>
</table>


<h4 id="s10_07">classifierinclude and classifierexclude</h4>
<p>The <strong>classifierinclude</strong> task and classifierexclude tasks can be used to limit the classifiers that are diff'ed with the specified asset.</p>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>name</td>
		<td>The name of the classifier the existing asset must match to be included or excluded in the diff comparison.</td>
		<td>Yes.</td>
	</tr>
	</tbody>
</table>


<h4 id="s10_08">relatedassetinclude and relatedassetexclude</h4>
<p>The <strong>relatedassetinclude</strong> task and relatedassetexclude tasks can be used to limit the related assets that are diff'ed with the specified asset.</p>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>Name</td>
		<td>The relationship name of the related asset the existing asset must match to be included or excluded in the diff comparison.</td>
		<td>Yes.</td>
	</tr>
	</tbody>
</table>

<h5>Examples of assetdiff</h5>
<p>An example that compares this asset with asset A/1.1. If the artifacts of asset A/1.1 differ, then the assets-differ variable will be set to <strong>true</strong>.</p>
<pre>&lt;assetdiff assetname="@asset-name@" assetversion="@latest-version@" resultvariable="assets-differ"&gt;
  &lt;artifactinclude category="*" /&gt;
&lt;/assetdiff&gt;</pre>


<h4 id="s10_09">assetskip</h4>
<p>The <strong>assetskip</strong> task can be used to skip processing of the current asset. Most likely this would be the result of some conditional.</p>

<h5>Examples of assetskip</h5>
<p>This example skips processing of the current asset if the variable skip is set to <strong>true</strong>.</p>
<pre>&lt;if&gt;
  &lt;istrue value="@skip@" /&gt;
  &lt;then&gt;
    &lt;assetskip /&gt;
  &lt;/then&gt;
&lt;/if&gt;</pre>


<h4 id="s10_10">if</h4>
<p>The <strong>if</strong> task is very powerful and allows the Asset Adapter to perform actions depending on the content of certain variables. The <strong>if</strong> task has 3 sections: a condition, a <strong>then</strong> clause, and an <strong>else</strong> clause. If the condition evaluates to true, the <strong>then</strong> clause is executed. Otherwise the <strong>else</strong> clause is executed. The condition clause can only have one element, and must appear as the first subelement in the if task, though it can contain nested elements. The <strong>then</strong> and <strong>else</strong> clauses can have multiple clauses.</p>

<h5>Nested elements of if</h5>
<ul>
	<li><a href="#s10_11">Conditional</a></li>
	<li><a href="#s10_12">then</a></li>
	<li><a href="#s10_13">else</a></li>
</ul>


<h4 id="s10_11">Conditional</h4>
<p>The condition portion of the if task can include a variety of test conditions. There can only be</p>
<p><strong>and</strong></p>
<p>The <strong>and</strong> task groups other conditions, which are logically and'ed together to arrive at the result. For example:</p>
<pre>&lt;and&gt;
  &lt;equals arg1="@test1@ " arg2="testval" /&gt;
  &lt;equals arg1="@test2@ " arg2="testval " /&gt;
&lt;/and&gt;</pre>
<p><strong>equals</strong></p>
<p>The equal task returns true if both its arguments (arg1, and arg2) are equal. For example:</p>
<pre>&lt;equals arg1= &quot;@test1@ &quot; arg2= &quot;testval &quot;/&gt;</pre>
<p><strong>isfalse</strong></p>
<p>This task return true if its argument is <strong>false</strong>. For example:</p>
<pre>&lt;isfalse value= &quot;@testval@ &quot;/&gt;</pre>
<p><strong>isset</strong></p>
<p>The task returns true if its argument, which is a variable name is set. For example:</p>
<pre>&lt;isset variable= &quot;variable-name &quot;/&gt;</pre>
<p><strong>istrue</strong></p>
<p>This task return true if its argument is "true ". For example:</p>
<pre>&lt;istrue value= &quot;@testval@ &quot;/&gt;</pre>
<p><strong>not</strong></p>
<p>The not task inverts the meaning of the nested task. It can only contain one direct subtask. For example:</p>
<pre>&lt;not&gt;
  &lt;equals arg1="1" arg2="2"/&gt;
&lt;/not&gt;
</pre>
<p><strong>or</strong></p>
<p>The <strong>or</strong> task groups other conditions, which are logically or'ed together to arrive at the result. For example:</p>
<pre>&lt;or&gt;
  &lt;equals arg1="@test@" arg2="testval1" /&gt;
  &lt;equals arg1="@test@" arg2="testval2" /&gt;
&lt;/or&gt;</pre>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>category</td>
		<td>The category name of the artifact the existing asset must match to be included or excluded in the diff comparison.</td>
		<td>Yes.</td>
	</tr>
	</tbody>
</table>


<h4 id="s10_12">then</h4>
<p>The <strong>else</strong> clause doesn't have a fixed set of tasks that may be specified within it. It should accept any other valid asset adapter task, as long as it makes sense in the context. For example <strong>assembly</strong> would not be a nested task.</p>


<h4 id="s10_13">else</h4>
<p>The <strong>else</strong> clause doesn't have a fixed set of tasks that may be specified within it. It should accept any other valid asset adapter task, as long as it makes sense in the context. For example <strong>assembly</strong> would not be a nested task.</p>

<h5>Examples of if</h5>
<p>If an <strong>old-version</strong> variable is set, set a variable called asset-version and append <strong>.0</strong>, otherwise set the asset-version variable to <strong>1.0</strong>.</p>
<pre>&lt;if&gt;
  &lt;asset variable="old-version" /&gt;
  &lt;then&gt;
    &lt;variable name="asset-version" value="@old-version@.0" /&gt;
  &lt;/then&gt;
  &lt;else&gt;
    &lt;variable name="asset-version" value="1.0" /&gt;
  &lt;/else&gt;
&lt;/if&gt;</pre>


<h4 id="s10_14">script</h4>
<p>The <strong>script</strong> task allows the asset adapter to perform some work that does not fit into the confines of the other Asset Adapter tasks. The only supported scripting language currently is JavaScript. This is not meant to be a complete JavaScript reference, see more definitive sources for that. Instead it is meant to be a guide on how to integrate JavaScript with the Asset Adapter tasks</p>
<p>When the Asset Adapter encounters a script task, there must be some way for JavaScript to be able to process the content of Lifecycle Manager variables. In the future this may be extended to other Asset Adapter concepts, such as Mappers, and Parsers, but for now it is limited to variables.</p>
<p>To retrieve an Asset Adapter variable from the script task, where app1 is the assembly id:</p>
<pre>filters = app1.getLocalFilters();
testvalue = filters.replaceTokens("@testvariablename@");</pre>
<p>To set an Asset Adapter variable, where app1 is the assemblyid:</p>
<pre>prop = project.createTask("variable"); prop.setFilters(app1.getLocalFilters());
prop.setName("newvariable");
prop.setValue("variablevalue");
prop.perform();</pre>

<h5>Attributes of script</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>language</td>
		<td>The scripting language to use. Currently only javascript is supported.</td>
		<td>Yes.</td>
	</tr>
	</tbody>
</table>

<h5>Examples of script</h5>
<p>The following example assumes the <strong>version</strong> variable is set to an integer (<strong>5</strong>) for example and increments it.</p>
<pre>&lt;script language="javascript"&gt;&lt;![CDATA[
// Get the version variable
filters = app1.getLocalFilters();
ver = filters.replaceTokens("@version@");

// Parse and increment the variable 
jsversion = parseInt(ver);
jsversion = jsversion + 1;

// Set the version variable
task = project.createTask("variable"); 
  task.setFilters(app1.getLocalFilters()); 
  task.setName("version"); 
  task.setValue(jsversion);
task.perform();
]]&gt;&lt;/script&gt;</pre>


<h4 id="s10_15">retrieverwriter</h4>
<p>The <strong>retrieverwriter</strong> task will create a file from the contents of a retriever.</p>

<h5>Attributes of retrieverwriter</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>file</td>
		<td>The output filename.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>retrieverid</td>
		<td>The ID of a Retriever to retrieve the file contents.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>retrieveruri</td>
		<td>A URI of the file to be retrieved from the Retriever. If not specified, the first file is retrieved.</td>
		<td>No.</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of retrieverwriter</h5>
<p>None.</p>

<h5>Examples of retrieverwriter</h5>
<p>Save the contents of a file retrieved from the primary asset retriever and saving it in a temporary file.</p>
<pre>&lt;retrieverwriter file=&quot;${temp-file}&quot; retrieverid=&quot;asset-files&quot; retrieveruri=&quot;@asset- uri@&quot;/&gt;</pre>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="tasks_cvs">CVS Tasks (optional)</h3>
<p>In this section:</p>
<ul>
	<li><a href="#s11_01">cvsfileset</a></li>
</ul>


<h4 id="s11_01">cvsfileset</h4>
<p>The <strong>cvsfileset</strong> task is a Retriever that works with a CVS repository and produces a list of files and/or directories that match patterns specified in an include/exclude list. It requires use of a Web interface to CVS such as CVS Web in order to allow retrieving of files via URL. It returns pathnames in URL form relative to the provided <strong>weburl</strong> attribute. This task makes use of Ant's <strong>cvs</strong> task.</p>

<h5>Attributes of cvsfileset</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>weburl</td>
		<td>The URL to the CVS web server used to retrieve the contents of a given file from the server.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>cvsroot</td>
		<td>The CVS root specification. E.g., :pserver:user@host:rootdir.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>dest</td>
		<td>the directory where the checked out files should be placed.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>package</td>
		<td>CVS package/model name.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>casesensitive</td>
		<td>Set to <strong>true</strong> or <strong>false</strong>. Determines if filenames should be matched with respect to case. Default is <strong>false</strong>.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>passwordfile</td>
		<td>Path to CVS password file. E.g., .cvspass.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>command</td>
		<td>CVS command to execute. Default is <strong>checkout</strong>.</td>
		<td>&nbsp;</td>
	</tr>
	<tr>
		<td>id</td>
		<td>A unique string to identify this Retriever. The string is arbitrary but must be unique against all other Retrievers in this assembly.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>type</td>
		<td>Return only files (<strong>file</strong>), only directories (<strong>dir</strong>), or all (<strong>all</strong>). Default is <strong>file</strong>.</td>
		<td>No.</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of cvsfileset</h5>
<p>See <a href="#s05_01">fsfileset</a>.</p>
<h5>Example</h5>
<pre>&lt;cvsfileset cvsroot=":pserver:bsmith@cvshost:/usr/local/cvsroot" 
  package="componentx" dest="/cvs/client/dir" 
  weburl="http://cvshost/cvs/bin/cvsweb.cgi/~checkout~" id="xmlfiles"&gt;
  &lt;include name="**/*.xml" /&gt;
&lt;/cvsfileset&gt;</pre>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="tasks_clearcase">ClearCase Tasks (optional)</h3>
<p>In this section:</p>
<ul>
	<li><a href="#s12_01">cc_attributevalues</a></li>
	<li><a href="#s12_02">cc_files</a></li>
	<li><a href="#s12_03">cc_files</a></li>
	<li><a href="#s12_04">cc_attribute</a></li>
	<li><a href="#s12_05">cc_fileattribute</a></li>
	<li><a href="#s12_06">cc_fileversion</a></li>
</ul>


<h4 id="s12_01">cc_attributevalues</h4>
<p>The <strong>cc_attributevalues</strong> is a retriever that enumerates ClearCase attribute values on elements or versions. The main purpose of this task is to enumerate a list of values for an assetfiles task to process. For example, if ClearCase elements contain asset_name attributes, then the cc_attributevalues task (nested in an assetfiles task) can be used to enumerate these values and process an asset for each one. Since this task is a retriever, but does not return file references, the results are undefined if you try to use this retriever where files are expected to be returned. For that instance, see the cc_files ClearCase task.</p>

<h5>Attributes of cc_attributevalues</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>attribute</td>
		<td>The attribute value name in ClearCase to enumerate.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>path</td>
		<td>The path to the ClearCase view that contains the elements/versions to search.</td>
		<td>Yes</td>
	</tr>
	<tr>
		<td>onelement</td>
		<td>If set to true, the ClearCase attributes to search will be on the element. Otherwise, if onelement is not set or set to false the attributes to search will be attached to the ClearCase version.</td>
		<td>No</td>
	</tr>
	<tr>
		<td>delimiter</td>
		<td>A delimiter to use that separates distinct values in the ClearCase attribute. For example, if an ClearCase attribute contains the value <strong>asset1, asset2</strong> and delimiter is set to <strong>,</strong>then this task will return 2 results: <strong>asset1</strong>, <strong>asset2</strong>. If delimiter is not set, then only one result will be returned: <strong>asset1, asset2</strong></td>
		<td>No</td>
	</tr>
	</tbody>
</table>

<h5>Examples of cc_attributevalues</h5>
<pre>&lt;assetfiles id="assettypes" assemblyid="app1"&gt;
  &lt;cc_attributevalues attribute="asset_name" 
    path="m:\viewdirectory" 
    onelement="true" 
    delimiter="," /&gt;
&lt;/assetfiles&gt;</pre>
<p>The previous example searches the ClearCase view directory m:\viewdirectory for any elements which have an attribute set to asset_name. The assetfiles task will then execute the assembly named app1 once for every distinct value found in the asset_name attribute. It will interpret comma separated values in the attribute as distinct values.</p>


<h4 id="s12_02">cc_files</h4>
<p>The <strong>cc_files</strong> is a retriever that finds all ClearCase files within a view that match a set of configured attributes.</p>

<h5>Attributes of cc_files</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>id</td>
		<td>The retriever id. This can be referred to in artifact tasks to create artifacts that reference these ClearCase files.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>path</td>
		<td>The path to the ClearCase view that contains the elements/versions to search attributes on the</td>
		<td>Yes</td>
	</tr>
	<tr>
		<td>onelement</td>
		<td>If set to true, the ClearCase attributes to search will be on the element. Otherwise, if onelement is not set or set to false the attributes to search will be on the ClearCase version.</td>
		<td>No</td>
	</tr>
	</tbody>
</table>

<h5>Examples of cc_files</h5>
<pre>&lt;cc_files id="ccfiles" path="m:\viewdirectory" onelement="true"&gt;
  &lt;cc_attribute name="asset_name" value="@asset-name@" delimiter="," /&gt;
  &lt;cc_attribute name="artifact_type" /&gt;
&lt;/cc_files&gt;</pre>
<p>The previous example searches for elements within the ClearCase view directory m:\viewdirectory for any elements which have an asset_name set to the value of the @asset- name@ variable and have an artifact_type attribute set. See the nested task</p>


<h4 id="s12_03">cc_files</h4>
<p>The <strong>cc_files</strong> is a retriever that finds all ClearCase files within a view that match a set of configured attributes.</p>

<h5>Attributes of cc_files</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>id</td>
		<td>The retriever id. This can be referred to in artifact tasks to create artifacts that reference these ClearCase files.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>path</td>
		<td>The path to the ClearCase view that contains the elements/versions to search attributes on the</td>
		<td>Yes</td>
	</tr>
	<tr>
		<td>onelement</td>
		<td>If set to true, the ClearCase attributes to search will be on the element. Otherwise, if onelement is not set or set to false the attributes to search will be on the ClearCase version.</td>
		<td>No</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of cc_files</h5>
<ul>
	<li><a href="#s12_04">cc_attribute</a></li>
</ul>


<h4 id="s12_04">cc_attribute</h4>
<p>The <strong>cc_attribute</strong> will restrict the types of files that the cc_files task retrieves. Multiple cc_attribute elements can be specified and the cc_files task will only retrieve those elements/version which match all specified cc_attribute nested tasks. The filter criteria can be either just a name, or both a name and value. A delimiter can also be specified if the ClearCase attribute is set to, say, a comma delimited list of attribute values. For example &lt;cc_attribute name="asset_name" value="asset1" delimiter=","/&gt; will match a ClearCase element that contains attribute asset_name="asset1, asset2". If delimiter was not set, then this element would not be returned.</p>

<h5>Attributes of cc_attribute</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>name</td>
		<td>The name of the attribute in the ClearCase element/version that must be set for the file to be retrieved by cc_files.</td>
		<td>Yes</td>
	</tr>
	<tr>
		<td>value</td>
		<td>The value for the corresponding name attribute in ClearCase that will be matched. If value is not set then the cc_files task will return all files that have the attribute set regardless of what value they contain.</td>
		<td>No</td>
	</tr>
	<tr>
		<td>delimiter</td>
		<td>If delimiter is set then the file will be retrieved by the cc_files task if any of the delimiter separated values are matched.</td>
		<td>No</td>
	</tr>
	</tbody>
</table>

<h5>Examples of cc_files</h5>
<pre>&lt;cc_files id="ccfiles" path="m:\viewdirectory" onelement="true"&gt;
  &lt;cc_attribute name="asset_name" value="@asset-name@" delimiter="," /&gt;
  &lt;cc_attribute name="artifact_type" /&gt;
&lt;/cc_files&gt;</pre>
<p>The previous example searches for elements within the ClearCase view directory m:\viewdirectory for any elements which have any value in the comma delimited set of ClearCase asset_name values set to the value of the @asset-name@ variable and have an artifact_type ClearCase attribute set.</p>


<h4 id="s12_05">cc_fileattribute</h4>
<p>The <strong>cc_fileattribute</strong> task is a simple task that can be used wherever a parservalue is required, a classifier value for example. The task returns the ClearCase attribute value attached to an element/version.</p>

<h5>Attributes of cc_fileattribute</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>file</td>
		<td>The ClearCase file (in a view) to that contains the attribute value.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>attribute</td>
		<td>The name of the attribute whose value will be returned</td>
		<td>Yes</td>
	</tr>
	<tr>
		<td>onelement</td>
		<td>If set to true, the ClearCase attribute used will be on the element. Otherwise, if onelement is not set or set to false the attribute used will be on the ClearCase version.</td>
		<td>No</td>
	</tr>
	</tbody>
</table>

<h5>Examples of cc_fileattribute</h5>
<pre>&lt;artifact variable="file-uri" 
    retrieverid="ccfiles" 
    type="by-value" 
    failonerror="false" 
    maxoccurs="1" 
    reference="m:\viewdirectory\vob\src\Main.java" 
    version="1.0"&gt;
  &lt;artifactcategory&gt;
    &lt;cc_fileattribute file="m:\viewdirectory\vob\src\Main.java" attribute="artifact_type" onelement="true" /&gt;
  &lt;/artifactcategory&gt;
&lt;/artifact&gt;</pre>
<p>This example creates a by-value artifact based on the contents of the ClearCase file m:\viewdirectory\vob\src\Main.java. The artifact's category will be set to the value of the ClearCase artifact_type attribute attached to the element.</p>


<h4 id="s12_06">cc_fileversion</h4>
<p>The <strong>cc_fileversion</strong> task is a simple task that can be used wherever a parservalue is required, a classifier value for example. The task returns the version of a ClearCase file, in a view.</p>

<h5>Attributes of cc_fileversion</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>file</td>
		<td>The ClearCase file (in a view). The version of the visible file will be returned.</td>
		<td>Yes.</td>
	</tr>
	</tbody>
</table>

<h5>Examples of cc_fileattribute</h5>
<pre>&lt;artifact variable="file-uri" 
    retrieverid="ccfiles" 
    type="by-value" 
    category="Component" 
    failonerror="false" 
    maxoccurs="1" 
    reference="m:\viewdirectory\vob\src\Main.java"&gt;
  &lt;artifactversion&gt;
    &lt;cc_fileversion file="m:\viewdirectory\vob\src\Main.java" /&gt;
  &lt;/artifactversion&gt;
&lt;/artifact&gt;</pre>
<p>This example creates a by-value artifact based on the contents of the ClearCase file m:\viewdirectory\vob\src\Main.java. The artifact's version will be set to the version of the ClearCase file.</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="tasks_github">GitHub Tasks (optional)</h3>
<p>Integration with GitHub version 3 APIs. It can enumerate the GitHub source code system to create</p>
<p>assets based on files identified within it. To use the GitHub tasks, the bin/github.properties file needs to be added to the list of tasks in the XML rules file, e.g.	&lt;taskdef file=&quot;ASSET_ADAPTER_HOME\bin\github.properties&quot;/&gt;</p>
<p>In this section:</p>
<ul>
	<li><a href="#s13_01">githubrepository</a></li>
	<li><a href="#s13_02">githubfileinfo</a></li>
	<li><a href="#s13_03">githubfileset</a></li>
</ul>


<h4 id="s13_01">githubrepository</h4>
<p>The <strong>githubrepository</strong> task defines a connection to a GitHub repository. The repository can be referred to in other GitHub related tasks, otherwise the most currently run githubrepository information is used for other GitHub tasks (e.g. githubfileset).</p>

<h5>Attributes of githubrepository</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>server</td>
		<td>The URL to the GitHub server. This should be: <strong>https://api.github.com/</strong></td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>id</td>
		<td>In id for the repository task used in other related tasks to refer to the connection that is use by that task.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>owner</td>
		<td>The owner of the repository on GitHub to connect to. For example, in the <strong>apache / httpd</strong> project the owner is apache.</td>
		<td>Yes</td>
	</tr>
	<tr>
		<td>repository</td>
		<td>The name of the repository on GitHub to connect to. For example, in the <strong>apache / httpd</strong> project the repository is httpd.</td>
		<td>Yes</td>
	</tr>
	<tr>
		<td>version</td>
		<td>The branch or tag to use for the content</td>
		<td>No</td>
	</tr>
	<tr>
		<td>username</td>
		<td>The user to connect to the server. If a user is not specified, the connection will be rate limited.</td>
		<td>No</td>
	</tr>
	<tr>
		<td>password</td>
		<td>The password of the user to connect to the server</td>
		<td>No</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of githubrepository</h5>
<p>None.</p>

<h5>Example</h5>
<p>Defines a connection to an RTC server located at example.com:9443/ccm/&nbsp;(line breaks added for display purposes).</p>
<pre>&lt;githubrepository server=&quot;https://api.github.com/&quot; owner=&quot;jquery&quot; repository=&quot;jquery&quot; 
version=&quot;1.9-stable&quot; id=&quot;github1&quot; username=&quot;${github-user}&quot; password=&quot;${github- password}&quot;/&gt;</pre>


<h4 id="s13_02">githubfileinfo</h4>
<p>The <strong>githubfileinfo</strong> task is a parser that predefines a set of parserkeys that can be used to retrieve version information about a GitHub file.</p>

<h5>Attributes of githubfileinfo</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>item</td>
		<td>The reference to the file in the GitHub repository that is queried for information. The item should be set to a GitHub reference in the following format: <strong>/directory/path.txt</strong></td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>id</td>
		<td>In id for the parser used in other related tasks.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>repositoryid</td>
		<td>The id of the githubrepository to use when retrieving files. If this attribute is not specified, it defaults to the last executed githubrepository task.</td>
		<td>No.</td>
	</tr>
	</tbody>
</table>
<p>Defined parserkeys of githubfileinfo</p>
<p>The following parser keys are available in parser related tasks.</p>
<table class="doctable">
<thead>
	<tr>
		<td>Parser key</td>
		<td>Parser value / description</td>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>Parser key</td>
		<td>Parser value / description</td>
	</tr>
	<tr>
		<td>name</td>
		<td>The name of the file.</td>
	</tr>
	<tr>
		<td>sha</td>
		<td>The Git sha hash.</td>
	</tr>
	<tr>
		<td>size</td>
		<td>The size of the file</td>
	</tr>
	<tr>
		<td>type</td>
		<td>The type of the resource (<strong>file</strong> or <strong>dir</strong>)</td>
	</tr>
	<tr>
		<td>url</td>
		<td>A URL representing file information in JSON format</td>
	</tr>
	<tr>
		<td>html-url</td>
		<td>A GitHub UI URL. This URL can be used to link to the content in a user-friendly format.</td>
	</tr>
	<tr>
		<td>git-url</td>
		<td>The Git URL. This is specified here for completeness or deep integration with Git.</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of githubfileset</h5>
<p>None.</p>

<h5>Example</h5>
<p>This example pulls information from an item and creates an artifact from it.</p>
<pre>&lt;githubfileinfo id="githubitem" item="@asset-uri@" repositoryid="github1" /&gt;
&lt;variable name="artifactreference"&gt;
  &lt;parservalue parserid="githubitem" parserkey="html-url" /&gt;
&lt;/variable&gt;
&lt;variable name="artifactname"&gt;
  &lt;parservalue parserid="githubitem" parserkey="name" /&gt;
&lt;/variable&gt;</pre>


<h4 id="s13_03">githubfileset</h4>
<p>The <strong>githubfileset</strong> task extends the fsfileset task enumerate files and directories stored in GitHub as well as retrieve content from those files. See <a href="#s05_01">fsfileset</a> for basic information on how filesets work. This githubfileset task works with the version of files specified by the corresponding githubrepository.</p>
<p>See the <a href="#s13_02">githubfileinfo</a> task for information on how to retrieve other information of the enumerated files.</p>
<p>The retrieved file references (possibly used in an asset-files task) contain GitHub server references in the format <strong>/directory/file.txt</strong></p>

<h5>Attributes of githubfileset</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>dir</td>
		<td>The directory in GitHub used as a base reference to include or exclude content. It should follow the standard server syntax for naming locations in GitHub, e.g. /directory/path</td>
		<td>One of file or dir is required</td>
	</tr>
	<tr>
		<td>file</td>
		<td>This can be specified to retrieve contents of one specific file. In this case the full path to the file should be specified and the dir attribute should not be specified.</td>
		<td>One of file or dir is required</td>
	</tr>
	<tr>
		<td>id</td>
		<td>In id for the fileset used in other related tasks.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>repositoryid</td>
		<td>The id of the githubrepository to use when retrieving files. If this attribute is not specified, it defaults to the last executed githubrepository task.</td>
		<td>No.</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of githubfileset</h5>
<p>See <a href="#s05_01">fsfileset</a>.</p>

<h5>Examples</h5>
<p>This example executes an assembly named <strong>xsds</strong> once for each XSD found in the GitHub system, setup by a githubrepository task (not shown).</p>
<pre>&lt;assetfiles id="xsds" assemblyid="xsds"&gt;
  &lt;githubfileset id="xsdfiles" dir="${source-dir}"&gt;
    &lt;include name="*.xsd" /&gt;
  &lt;/githubfileset&gt;
&lt;/assetfiles&gt;</pre>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="tasks_rtc">Rational Team Concert (RTC) Tasks (optional)</h3>
<p>Integration with Rational Team Concert 3.0. It can enumerate the RTC source code system to create assets based on files identified within RTC. To use the RTC tasks, the bin/rtc.properties file needs to be added to the list of tasks in the XML rules file, e.g.</p>
<pre>&lt;taskdef file=&quot;ASSET_ADAPTER_HOME\bin\rtc.properties&quot;/&gt;</pre>
<p>In this section:</p>
<ul>
	<li><a href="#s14_01">rtcconnection</a></li>
	<li><a href="#s14_02">rtcfileinfo</a></li>
	<li><a href="#s14_03">rtcfileset</a></li>
</ul>


<h4 id="s14_01">rtcconnection</h4>
<p>The <strong>rtcconnection</strong> task defines a connection to the server used to retrieve RTC content. The connection can be referred to in other RTC related tasks, otherwise the most currently run rtcconnection information is used for other RTC tasks (e.g. rtcfileset).</p>

<h5>Attributes of rtcconnection</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>server</td>
		<td>The URL to the RTC server. This must be a URL already defined in the Visual Studio client.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>id</td>
		<td>In id for the connection task used in other related tasks to refer to the connection that is use by that task.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>username</td>
		<td>The user to connect to the server</td>
		<td>Yes</td>
	</tr>
	<tr>
		<td>password</td>
		<td>The password of the user to connect to the server</td>
		<td>Yes</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of rtcconnection</h5>
<p>None.</p>

<h5>Examples</h5>
<p>Defines a connection to an RTC server located at example.com:9443/ccm/.</p>
<pre>&lt;rtcconnection id=&quot;rtcconn&quot; server=&quot;https://example.com:9443/ccm/&quot; username=&quot;user&quot; password=&quot;secret&quot;/&gt;</pre>


<h4 id="s14_02">rtcfileinfo</h4>
<p>The <strong>rtcfileinfo</strong> task is a parser that predefines a set of parserkeys that can be used to retrieve version information about a RTC file.</p>

<h5>Attributes of rtcfileinfo</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>item</td>
		<td>The reference to the file in RTC that is queried for information. The item should be set to a RTC reference in the following format: <strong>/directory/path.txt</strong></td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>id</td>
		<td>In id for the parser used in other related tasks.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>connectionid</td>
		<td>The id of the rtcconnection to use when retrieving files. If this attribute is not specified, it defaults to the last executed rtcconnection task.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>filesetid</td>
		<td>An RTC fileset id that contains the item being referenced. It uses this fileset to identify the version of the file that is being used.</td>
		<td>Yes.</td>
	</tr>
	</tbody>
</table>
<p>Defined parserkeys of rtcfileinfo</p>
<p>The following parser keys are available in parser related tasks.</p>
<table class="doctable">
<thead>
	<tr>
		<td>Parser key</td>
		<td>Parser value / description</td>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>Parser key</td>
		<td>Parser value / description</td>
	</tr>
	<tr>
		<td>timestamp</td>
		<td>The timestamp of the file.</td>
	</tr>
	<tr>
		<td>content-type</td>
		<td>The content type of the file</td>
	</tr>
	<tr>
		<td>type</td>
		<td>The type of the resource (<strong>file</strong> or <strong>directory</strong>).</td>
	</tr>
	<tr>
		<td>url</td>
		<td>A URL representing the version of the file that was found when this asset adapter task was executed. It is used alongside the RTC Artifact Source (see the Library Process Configuration Guide) to refer to files within a library. Depending on the rtcfileset this file was retrieved from, the URL will contain workspace, component, baseline, or snapshot parameters.</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of rtcfileset</h5>
<p>None.</p>

<h5>Examples</h5>
<p>This example pulls information from an item and creates an artifact from it.</p>
<pre>&lt;rtcfileinfo id="rtcitem" item="@asset-uri@" filesetid="rtcxsds" /&gt;
&lt;variable name="artifactreference"&gt;
  &lt;parservalue parserid="rtcitem" parserkey="url" /&gt;
&lt;/variable&gt;
&lt;artifact name="@filename@" category="schema-definition" type="by-reference" 
  failonerror="false" 
  reference="${rtc-artifactprefix}/@artifactreference@" 
  file="" version="@artifactversion@" /&gt;</pre>


<h4 id="s14_03">rtcfileset</h4>
<p>The <strong>rtcfileset</strong> task extends the fsfileset task enumerate files and directories stored in RTC as well as retrieve content from those files. See <a href="#s05_01">fsfileset</a> for basic information on how filesets work. This RTC task works with the version of files based on a specified baseline or snapshot. See the <a href="#s14_02">rtcfileinfo</a> task for information on how to retrieve other information of the enumerated files.</p>
<p>The retrieved file references (possibly used in an asset-files task) contain RTC server references in the</p>
<p>format <strong>/directory/file.txt</strong></p>

<h5>Attributes of rtcfileset</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>dir</td>
		<td>The directory in RTC used as a base reference to include or content. It should follow the standard server syntax for naming locations in RTC, e.g. /directory/path</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>id</td>
		<td>In id for the fileset used in other related tasks.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>connectionid</td>
		<td>The id of the rtcconnection to use when retrieving files. If this attribute is not specified, it defaults to the last executed rtcconnection task.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>workspace</td>
		<td>The workspace to use for enumerating and retrieving files.</td>
		<td>One of workspace, baseline, or snapshot is required.</td>
	</tr>
	<tr>
		<td>component</td>
		<td>The component the files reside in.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>baseline</td>
		<td>A baseline to use for enumerating and retrieving files.</td>
		<td>One of workspace, baseline, or snapshot is required.</td>
	</tr>
	<tr>
		<td>snapshot</td>
		<td>A snapshot to use for enumerating and retrieving files.</td>
		<td>One of workspace, baseline, or snapshot is required.</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of rtcfileset</h5>
<p>See <a href="#s05_01">fsfileset</a>.</p>

<h5>Examples</h5>
<p>This example executes an assembly named <strong>xsds</strong> once for each XSD found in the RTC system, setup by a rtcconnection task (not shown).</p>
<pre>&lt;assetfiles id="xsds" assemblyid="xsds"&gt;
  &lt;rtcfileset component="WebServices" id="rtcxsds" dir="${rtc-folder}" workspace="TestProject Stream"&gt;
    &lt;include name="**/*.xsd" /&gt;
  &lt;/rtcfileset&gt;
&lt;/assetfiles&gt;</pre>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="tasks_tfs">Team Foundation Server (TFS) Tasks (optional)</h3>
<p>The ASAA tasks require assemblies and connection information provided by the Visual Studio TFS client. Therefore the TFS client will need to be available on the system hosting TFS.</p>
<p>Depending on which version of TFS you are using, you may need to instruct the Asset Adapter to use the version of assemblies for the version of TFS you have installed. Edit the ASAA_HOME/bin/ant153cmd.exe.config file and insert this section after the <span class="apidoc_code">&lt;/startup&gt;</span> tag. Modify the newVersion attributes and set them as follows. If using TFS 2005, use version <strong>8.0.0.0</strong>. If using TFS 2008, use version <strong>9.0.0.0</strong>. If using TFS 2010, use version <strong>10.0.0.0</strong>.</p>
<pre>&lt;runtime&gt;
  &lt;assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1"&gt;
    &lt;dependentAssembly&gt;
      &lt;assemblyIdentity name="Microsoft.TeamFoundation.Client" publicKeyToken="b03f5f7f11d50a3a" /&gt;
      &lt;bindingRedirect oldVersion="8.0.0.0-10.0.0.0" newVersion="10.0.0.0" /&gt;
    &lt;/dependentAssembly&gt;
    &lt;dependentAssembly&gt;
      &lt;assemblyIdentity name="Microsoft.TeamFoundation.VersionControl.Client" publicKeyToken="b03f5f7f11d50a3a" /&gt;
      &lt;bindingRedirect oldVersion="8.0.0.0-10.0.0.0" newVersion="10.0.0.0" /&gt;
    &lt;/dependentAssembly&gt;
  &lt;/assemblyBinding&gt;
&lt;/runtime&gt;</pre>
<p>In this section:</p>
<ul>
	<li><a href="#s15_01">tfsconnection</a></li>
	<li><a href="#s15_02">tfsfileinfo</a></li>
	<li><a href="#s15_03">tfsfileset</a></li>
</ul>


<h4 id="s15_01">tfsconnection</h4>
<p>The <strong>tfsconnection</strong> task defines a connection to the server used to retrieve TFS content. The connection can be referred to in other TFS related tasks, otherwise the most currently run tfsconnection information is used for other TFS tasks (e.g. tfsfileset).</p>

<h5>Attributes of tfsconnection</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>Server</td>
		<td>The URL to the TFS server. This must be a URL already defined in the Visual Studio client.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>Id</td>
		<td>In id for the connection task used in other related tasks to refer to the connection that is use by that task.</td>
		<td>Yes.</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of tfsconnection</h5>
<p>None.</p>

<h5>Examples</h5>
<p>Defines a connection to a TFS server located at example.com\FirstCollection.</p>
<pre>&lt;tfsconnection id=&quot;tfsconn&quot; server=&quot;example.com\FirstCollection&quot;/&gt;</pre>


<h4 id="s15_02">tfsfileinfo</h4>
<p>The <strong>tfsfileinfo</strong> task is a parser that predefines a set of parserkeys that can be used to retrieve version information about a TFS file.</p>

<h5>Attributes of tfsfileinfo</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>item</td>
		<td>The reference to the file in TFS that is queried for information. The item should be set to a TFS item server reference in the following format: <strong>$/directory/path.txt</strong></td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>id</td>
		<td>In id for the parser used in other related tasks.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>connectionid</td>
		<td>The id of the tfsconnection to use when retrieving files. If this attribute is not specified, it defaults to the last executed tfsconnection task.</td>
		<td>No.</td>
	</tr>
	</tbody>
</table>

<h5>Defined parserkeys of tfsfileinfo</h5>
<p>The following parser keys are available in parser-related tasks.</p>
<table class="doctable">
<thead>
	<tr>
		<td>Parser key</td>
		<td>Parser value / description</td>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>Parser key</td>
		<td>Parser value / description</td>
	</tr>
	<tr>
		<td>changeset-id</td>
		<td>The changeset ID of the file.</td>
	</tr>
	<tr>
		<td>checkin-date</td>
		<td>The date the file was checked in.</td>
	</tr>
	<tr>
		<td>size</td>
		<td>The size of the file.</td>
	</tr>
	<tr>
		<td>deletion-id</td>
		<td>The deletion identifier of the file, probably 0.</td>
	</tr>
	<tr>
		<td>encoding</td>
		<td>An number that represents the encoding (code page/code set) of the file.</td>
	</tr>
	<tr>
		<td>id</td>
		<td>The item's id.</td>
	</tr>
	<tr>
		<td>type</td>
		<td><strong>file</strong> or <strong>dir</strong> depending on what type of item is referred to.</td>
	</tr>
	<tr>
		<td>path</td>
		<td>The path of the file</td>
	</tr>
	<tr>
		<td>version-url</td>
		<td>A URL representing the version of the file that was found when this asset adapter task was executed. It is used alongside the TFS Artifact Source to refer to files within a library. This does not include the <strong>$/</strong> prefix and is escaped for use in a URL.</td>
	</tr>
	<tr>
		<td>latest-url</td>
		<td>A URL representing the latest version of the file. It is used alongside the TFS Artifact Source to refer to files within a library. This does not include the <strong>$/</strong> prefix and is escaped for use in a URL. When used with the TFS artifact source this parser key will always refer to the same version of the file, regardless of whether newer files have been checked in to TFS.</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of tfsfileset</h5>
<p>None.</p>

<h5>Examples</h5>
<p>This example pulls information from an item and creates an artifact from it&nbsp;(line breaks added for display purposes).</p>
<pre>&lt;tfsfileinfo id="tfsitem" item="@asset-uri@" /&gt;
&lt;variable name="artifactreference"&gt;
  &lt;parservalue parserid="tfsitem" parserkey="latest-url" /&gt;
&lt;/variable&gt;
&lt;variable name="artifactversion"&gt;
  &lt;parservalue parserid="tfsitem" parserkey="changeset-id" /&gt;
&lt;/variable&gt;
&lt;artifact name="@filename@" 
category="message-definition" 
type="by-reference" 
failonerror="false" 
reference="${tfs-artifactprefix}/@artifactreference@" 
file="" 
version="@artifactversion@" /&gt;</pre>

<h4 id="s15_03">tfsfileset</h4>
<p>The <strong>tfsfileset</strong> task extends the fsfileset task enumerate files and directories stored in TFS as well as retrieve content from those files. See <a href="#s05_01">fsfileset</a> for basic information on how filesets work. This TFS</p>
<p>task always works with the latest version of files in TFS. See the <a href="#s15_02">tfsfileinfo</a> task for information on how to retrieve version information of the enumerated files.</p>
<p>The retrieved file references (possibly used in an asset-files task) contain TFS server references in the format <strong>$/directory/file.txt</strong>.</p>

<h5>Attributes of tfsfileset</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>dir</td>
		<td>The directory in TFS used as a base reference to include or content. It should follow the standard server syntax for naming locations in TFS, e.g. $/directory/path</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>id</td>
		<td>In id for the fileset used in other related tasks.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>connectionid</td>
		<td>The id of the tfsconnection to use when retrieving files. If this attribute is not specified, it defaults to the last executed tfsconnection task.</td>
		<td>No.</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of tfsfileset</h5>
<p>See <a href="#s05_01">fsfileset</a>.</p>

<h5>Examples</h5>
<p>This example executes an assembly named <strong>wsdls</strong> once for each wsdl found in the TFS system, setup by a tfsconnection task (not shown).</p>
<pre>&lt;assetfiles id="assetfiles" assemblyid="wsdls"&gt;
  &lt;tfsfileset id="tfscodefiles" dir="$/WebServices "&gt;
    &lt;include name="**/*.wsdl" /&gt;
  &lt;/tfsfileset&gt;
&lt;/assetfiles&gt;</pre>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="tasks_webdav">WebDAV Tasks (optional)</h3>
<p>In this section:</p>
<ul>
	<li><a href="#s16_01">webdavfileset</a></li>
</ul>


<h4 id="s16_01">webdavfileset</h4>
<p>The <strong>webdavfileset</strong> task is a Retriever that works with a repository that supports the WebDAV protocol and produces a list of files and/or directories that match patterns specified in an include/exclude list. This mechanism is very similar to Ant's <strong>fileset</strong> task.</p>

<h5>Attributes of webdavfileset</h5>
<table class="doctable">
<thead>
	<tr>
		<th>Attribute</th>
		<th>Description</th>
		<th>Required</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>serverurl</td>
		<td>The URL to the WebDAV server.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>dir</td>
		<td>The starting directory.</td>
		<td>Yes.</td>
	</tr>
	<tr>
		<td>casesensitive</td>
		<td>Set to <strong>true</strong> or <strong>false</strong>. Determines if filenames should be matched with respect to case. Default is <strong>false</strong>.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>id</td>
		<td>A unique string to identify this Retriever. The string is arbitrary but must be unique against all other Retrievers in this assembly.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>type</td>
		<td>Return only files (<strong>file</strong>), only directories (<strong>dir</strong>), or all (<strong>all</strong>). Default is <strong>file</strong>.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>user</td>
		<td>WebDAV user.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>password</td>
		<td>Clear text user password. Deprecated. Use encryptedpassword attribute.</td>
		<td>No.</td>
	</tr>
	<tr>
		<td>encryptedpassword</td>
		<td>Encrypted user password created using the encryptpassword script. See <a href="#passwords_encrypting">Encrypting Passwords</a>.</td>
		<td>No.</td>
	</tr>
	</tbody>
</table>

<h5>Nested elements of webdavfileset</h5>
<p>See <a href="#s05_01">fsfileset</a>.</p>

<h5>Examples</h5>
<p>Retrieve all Java files from a WebDAV server using user credentials with an encrypted password&nbsp;(line breaks added for display purposes).</p>
<pre>&lt;webdavfileset serverurl="http://mywebdav:8088/dav" 
    user="rsmith" 
    encryptedpassword="yPR2NO7Caj4=" 
    dir="/project/source/dir" 
    id="sourcefiles"&gt;
  &lt;include name="**/*.java" /&gt;
&lt;/webdavfileset&gt;</pre>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>