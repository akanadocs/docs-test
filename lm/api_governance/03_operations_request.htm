---
layout: page
title: Lifecycle Manager | Governance API | Overview
description: Information about the operations in the Lifecycle Manager Governance API, Request service.
product: lm
category: ref
sub-nav-class: Governance API
weight: 07
type: page
nav-title: Governance API, Request service
---
<h2 id="top">Lifecycle Manager Governance API: Request Operations</h2>
<p>Contains information about all operations in the Governance API relating to requests.</p>
<p><a href="../install/install_lm_v80x.htm" class="button secondary">Installing Lifecycle Manager</a> 
<a href="01_overview.htm" class="button secondary">Governance API: Overview</a> 
<a href="02_operations_asset.htm" class="button secondary">Asset Operations</a> 
<a href="../SysAdmin-OSGi.html" class="button secondary">System Administrator Guide</a>
</p>



<p>The base URI for all operations in the Governance API is:</p>
<p><span class="apidoc_code">http://&lt;host:port&gt;/lm/rest/governance/&lt;libraryname&gt;</span></p>
<div class = "divider1"></div>



<h3 style="color: gray;">Table of Contents</h3>
<ol class="table_of_contents">
	<li><a href="#request_submit_request">Submit Request</a></li>
	<li><a href="#request_update_request">Update Request</a></li>
	<li><a href="#request_get_request">Get Request</a></li>
	<li><a href="#request_delete_request">Delete Request</a></li>
	<li><a href="#request_get_requests">Get Requests</a></li>
	<li><a href="#request_create_request_file">Create Request File</a></li>
	<li><a href="#request_update_request_file">Update Request File</a></li>
	<li><a href="#request_get_asset_file">Get Asset File</a></li>
	<li><a href="#request_delete_artifact">Delete Artifact</a></li>
</ol>
<div class = "divider1"></div>



<h3 id="request_submit_request">Submit Request</h3>
<p>Clients should use this operation to submit a request completed by the submitting user of an asset.</p>


<h4>HTTP Operation</h4>
<p class="httpverb">POST</p>


<h4>Path</h4>
<pre class="soaapidoc_endpoint">/requests</pre>


<h4>Parameters</h4>
<dl>
<dt>user-id (string)</dt>
<dd>The submitting user. User id will be used in the request history. This parameter is optional and is defaulted to the LM application user.</dd>
</dl>


<h4>Request Body</h4>
<dl>
<dt>JSON</dt>
<dd>Request data in JSON format. File fields must be explicitly handled by client through File management API operations.</dd>
<dt>Multipart/form-data</dt>
<dd>Request and accompanying Files in multipart form style. Files will be implicitly created as File properties.</dd>
</dl>


<h4>Response</h4>
<p>NONE</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="request_update_request">Update Request</h3>
<p>Update, approve or reject an existing request. The type of action performed is determined by the</p>
<p><strong>action</strong> parameter.</p>


<h4>HTTP Operation</h4>
<p class="httpverb">POST</p>


<h4>Path</h4>
<pre class="soaapidoc_endpoint">/requests/{request-id}</pre>


<h4>Parameters</h4>
<dl>
<dt>user-id (string)</dt>
<dd>The user performing the action. User id will be used in the request history. This parameter is optional and is defaulted to the LM application user.</dd>
<dt>action (string)</dt>
<dd>Indicates whether the user is approving, rejecting or just updating the request. Acceptable</dd>
<dd>values are <strong>approve</strong>, <strong>reject</strong> or <strong>update</strong>. The default value is <strong>update</strong>.</dd>
<dt>approver-role (string)</dt>
<dd>Role for which the specified user is approving or rejecting the request. This parameter must be provided for <strong>approve</strong> or <strong>reject</strong> actions and must identify a currently pending role for the specified request.</dd>
</dl>


<h4>Request Body</h4>
<dl>
<dt>JSON</dt>
<dd>Request data in JSON format. File fields must be explicitly handled by client through File management API operations.</dd>
<dt>Multipart/form-data</dt>
<dd>Request and accompanying Files in multipart form style. Files will be implicitly created as File properties</dd>
</dl>


<h4>Response</h4>
<p>NONE</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="request_get_request">Get Request</h3>
<p>Retrieve the current data and format metadata for an existing request.</p>


<h4>HTTP Operation</h4>
<p class="httpverb">GET</p>



<h4>Path</h4>
<pre class="soaapidoc_endpoint">/requests/{request-id}</pre>


<h4>Parameters</h4>
<dl>
<dt>role (string[&nbsp;])</dt>
<dd>Roles the user possesses. These may optionally be used by the LM configuration for filtering the fields presented on the request.</dd>
<dt>approver-role (string)</dt>
<dd>In the case where the request is being retrieved for approval or rejection, this specifies the role the request should be prepared for. This parameter must identify a currently pending role for the specified request. In the case where the request is being retrieved for display or update this parameter may be omitted.</dd>
</dl>


<h4>Response</h4>
<dl>
<dt>JSON</dt>
<dd>Request data and field metadata.</dd>
</dl>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="request_delete_request">Delete Request</h3>
<p>Delete an existing request.</p>


<h4>HTTP Operation</h4>
<p class="httpverb">DELETE</p>


<h4>Path</h4>
<pre class="soaapidoc_endpoint">/requests/{request-id}</pre>


<h4>Parameters</h4>
<p>NONE</p>


<h4>Response</h4>
<p>NONE</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="request_get_requests">Get Requests</h3>
<p>Query existing requests for those meeting the specified criteria. Data for specified fields is returned for each matching request.</p>


<h4>HTTP Operation</h4>
<p class="httpverb">GET</p>



<h4>Path</h4>
<pre class="soaapidoc_endpoint">/requests</pre>


<h4>Parameters</h4>
<dl>
<dt>requester-id (string)</dt>
<dd>User Id of the submitting user (optional).</dd>
<dt>asset-id (string)</dt>
<dd>Id of the asset the request is associated with (optional).</dd>
<dt>pending-role (string)</dt>
<dd>Name of a role the request is currently pending approval from (optional).</dd>
<dt>page (integer)</dt>
<dd>The number of the page of request results to retrieve, starting with 1. The default value is <strong>1</strong>.</dd>
<dt>page-size (integer)</dt>
<dd>The number of result requests to return per page. The default value is 500</dd>
<dt>include-field (string[&nbsp;])</dt>
<dd>Names of fields to be included for each request in the results</dd>
<dt>order-by-fields</dt>
<dd>Ordered list of field names to use in ordering results. Specified fields should be string or decimal type. Field names are separated using <strong>|</strong>. For example <strong>order-by-fields=field1|field2|field3</strong></dd>
<dt>filter-field (string[&nbsp;])</dt>
<dd>A list of required values for designated request fields names may be provided to filter the results of the query. Values are assumed to be in the form <strong>&lt;asset-field-name&gt;:&lt;asset-field-value&gt;</strong> and must specify valid asset fields for the request. For example, specifying a parameter of <strong>filter- field=color:blue</strong> indicates that only requests with a <strong>color</strong> field value of <strong>blue</strong> should be selected. Multiple values may be specified for a single field by specifying them in multiple parameters with the same field name. In this case the value will be logically ORâ€™ed together.</dd>
<dd>For example, specifying <strong>&amp;filter-field=color:blue&amp; filter-field=color:green</strong> will match requests with either <strong>blue</strong> or <strong>green</strong> as a value for the <strong>color</strong> field.</dd>
</dl>


<h4>Response</h4>
<dl>
<dt>JSON</dt>
<dd>A JSON structure with an array of request data elements containing the fields specified in the include- field parameters.</dd>
</dl>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="request_create_request_file">Create Request File</h3>
<p>Create a <strong>by value</strong> File in LM for the specified request field. Used by clients explicitly managing request File fields.</p>


<h4>HTTP Operation</h4>
<p class="httpverb">POST</p>



<h4>Path</h4>
<pre class="soaapidoc_endpoint">/requests/{request-id}/files/{field}</pre>


<h4>Parameters</h4>
<p>NONE</p>


<h4>Request Body</h4>
<dl>
<dt>Multipart/form-data</dt>
<dd>File contents</dd>
</dl>


<h4>Response</h4>
<p>NONE</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="request_update_request_file">Update Request File</h3>
<p>Update a <strong>by value</strong> File in LM for the specified request field. Used by clients explicitly managing request File fields.</p>


<h4>HTTP Operation</h4>
<p class="httpverb">PUT</p>


<h4>Path</h4>
<pre class="soaapidoc_endpoint">/requests/{request-id}/files/{field}</pre>


<h4>Parameters</h4>
<p>NONE</p>


<h4>Request Body</h4>
<p>Multipart/form-data</p>
<p>File contents</p>


<h4>Response</h4>
<p>NONE</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="request_get_asset_file">Get Asset File</h3>
<p>Retrieve a <strong>by value</strong> File in LM for the specified request field. Used by clients explicitly managing request File fields.</p>


<h4>HTTP Operation</h4>
<p class="httpverb">GET</p>



<h4>Path</h4>
<pre class="soaapidoc_endpoint">/requests/{request-id}/files/{field}</pre>


<h4>Parameters</h4>
<p>NONE</p>


<h4>Response</h4>
<p>Application/octet-stream</p>
<p>File contents.</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="request_delete_artifact">Delete Artifact</h3>
<p>Delete a <strong>by value</strong> File in LM for the specified request field. Used by clients explicitly managing request File fields.</p>


<h4>HTTP Operation</h4>
<p class="httpverb">DELETE</p>


<h4>Path</h4>
<pre class="soaapidoc_endpoint">/assets/{asset-id}/files/{field}</pre>


<h4>Parameters</h4>
<p>NONE</p>


<h4>Response</h4>
<p>NONE</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>