<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

<title>Akana API Platform Help</title>
<link href="../../style/reset.css" rel="stylesheet" type="text/css" />
<link href="../../style/base.css" rel="stylesheet" type="text/css" />
<link href="../../style/document.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div class="documentation">
<!-----
layout: page
title: Lifecycle Manager | Governance API | Overview
description: Information about the operations in the Lifecycle Manager Governance API, Asset service.
product: lm
category: ref
sub-nav-class: Governance API
weight: 06
type: page
nav-title: Governance API, Asset service
----->
<h2 id="top">Lifecycle Manager Governance API: Asset Operations</h2>
<p>Contains information about all operations in the Governance API relating to assets.</p>
<p>
<a href="../install/install_lm_v80x.htm" class="button secondary">Installing Lifecycle Manager</a> 
<a href="01_overview.htm" class="button secondary">Governance API: Overview</a> 
<a href="02_operations_request.htm" class="button secondary">Request Operations</a> 
<a href="../SysAdmin-OSGi.html" class="button secondary">System Administrator Guide</a>
</p>


<p>The base URI for all operations in the Governance API is:</p>
<p><span class="apidoc_code">http://&lt;host:port&gt;/lm/rest/governance/&lt;libraryname&gt;</span></p>
<div class = "divider1"></div>



<h3 style="color: gray;">Table of Contents</h3>
<ol class="table_of_contents">
	<li><a href="#asset_get_initial_asset">Get Initial Asset</a></li>
	<li><a href="#asset_create_asset">Create Asset</a></li>
	<li><a href="#asset_update_asset">Update Asset</a></li>
	<li><a href="#asset_get_asset">Get Asset</a></li>
	<li><a href="#asset_delete_asset">Delete Asset</a></li>
	<li><a href="#asset_lock_asset">Lock Asset</a></li>
	<li><a href="#asset_unlock_asset">Unlock Asset</a></li>
	<li><a href="#asset_get_assets">Get Assets</a></li>
	<li><a href="#asset_create_asset_file">Create Asset File</a></li>
	<li><a href="#asset_get_asset_file">Get Asset File</a></li>
	<li><a href="#asset_update_asset_file">Update Asset File</a></li>
	<li><a href="#asset_delete_artifact">Delete Artifact</a></li>
</ol>
<div class = "divider1"></div>



<h3 id="asset_get_initial_asset">Get Initial Asset</h3>
<p>This method is used to get the initial format information as well as any default data for the specified asset-type. Typically an application would call this method to produce the initial form to present to a user. While the asset in the response will have a unique id, the asset has not yet been created persistently within LM.</p>


<h4>HTTP Operation</h4>
<p class="httpverb">GET</p>


<h4>Path</h4>
<pre class="soaapidoc_endpoint">/assets/new</pre>


<h4>Parameters</h4>
<dl>
<dt>asset-type (string)</dt>
<dd>Type of the asset to create. Corresponds to an asset-type configured within LM.</dd>
<dt>user-id (string)</dt>
<dd>The user requesting the asset. User id is optional and used only to allow customizations e.g. validators within LM access to the user.</dd>
<dt>role (string[&nbsp;])</dt>
<dd>Roles the user possesses. These may optionally be used by the LM configuration for filtering the fields presented on the asset.</dd>
<dt>set-field (string[&nbsp;])</dt>
<dd>Used to prime fields within the asset for the sake of tailoring the initial asset representation. For example, these field values may activate conditional fields within the LM configuration allowing different initial asset formats. Values are assumed to be in the form <strong>&lt;asset-field-name&gt;:&lt;asset- field-value&gt;</strong> and must specify valid asset fields for the asset-type. For example, specifying a parameter of <strong>set-field=subtype:Accounting</strong> will prime the asset field <strong>subtype</strong> with the value <strong>Accounting</strong>.</dd>
</dl>



<h4>Response</h4>
<dl>
<dt>JSON</dt>
<dd>Initial asset data with asset-id, defaulted fields and field metadata.</dd>
</dl>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="asset_create_asset">Create Asset</h3>
<p>Create a new asset within LM. By default the submission process for the initial state is triggered. If the submission process requires request input from the user the request data and format metadata prepared for the submitting user will be returned. If user input is not required on the request, only the request-id will be returned.</p>


<h4>HTTP Operation</h4>
<p class="httpverb">POST</p>


<h4>Path</h4>
<pre class="soaapidoc_endpoint">/assets</pre>


<h4>Parameters</h4>
<dl>
<dt>user-id (string)</dt>
<dd>The user submitting the asset. User id will be used to implicitly lock the asset and track asset change history. This parameter is optional and is defaulted to the LM application user.</dd>
<dt>submit (boolean)</dt>
<dd>Indicates whether the asset should be submitted for the initial approval process. Default is <strong>true</strong>.</dd>
</dl>


<h4>Request Body</h4>
<dl>
<dt>JSON</dt>
<dd>Asset data in JSON format. File fields must be explicitly handled by client through artifact management API operations.</dd>
<dt>Multipart/form-data</dt>
<dd>Asset and accompanying Files in multipart form style. Files will be implicitly created as artifacts</dd>
</dl>


<h4>Response</h4>
<dl>
<dt>JSON</dt>
<dd>If submit is <strong>true</strong> and submitter request input is required, the request id along with the request data and format metadata prepared for the submitter will be returned in a single JSON structure.</dd>
<dd>If submit is <strong>true</strong> and submitter request input is not required, the returned JSON structure will contain only the request-id.</dd>
<dd>If submit is <strong>false</strong>, no data is returned.</dd>
</dl>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="asset_update_asset">Update Asset</h3>
<p>Update an existing asset. By default the submission process for next approval process in the assetâ€™s lifecyle is triggered. If the submission process requires request input from the user the request data and format metadata prepared for the submitting user will be returned. If user input is not required on the request, only the request-id will be returned.</p>


<h4>HTTP Operation</h4>
<p class="httpverb">POST</p>


<h4>Path</h4>
<pre class="soaapidoc_endpoint">/assets/{asset-id}</pre>


<h4>Parameters</h4>
<dl>
<dt>user-id (string)</dt>
<dd>The user submitting the asset. User id will be used to implicitly lock the asset and track asset change history. This parameter is optional and is defaulted to the LM application user.</dd>
<dt>submit (boolean)</dt>
<dd>Indicates whether the asset should be submitted for the next approval process. Default is <strong>true</strong>.</dd>
<dt>overwrite (Boolean)</dt>
<dd>Indicates that any changes to the asset since the asset was fetched by the client are overwritten. If <strong>false</strong> a locking error will be thrown if the asset is out-of-sync and asset will not be updated. The default value is <strong>true</strong>.</dd>
</dl>


<h4>Request Body</h4>
<dl>
<dt>JSON</dt>
<dd>Asset data in JSON format. File fields must be explicitly handled by client through artifact management API operations.</dd>
<dt>Multipart/form-data</dt>
<dd>Asset and accompanying Files in multipart form style. Updated File fields (those with a value set) will be implicitly be created as artifacts or replace existing artifacts</dd>
</dl>


<h4>Response</h4>
<dl>
<dt>JSON</dt>
<dd>If submit is <strong>true</strong> and submitter request input is required, the request id along with the request data and format metadata prepared for the submitter will be returned in a single JSON structure.</dd>
<dd>If submit is <strong>true</strong> and submitter request input is not required, the returned JSON structure will contain only the request-id.</dd>
<dd>If submit is <strong>false</strong>, no data is returned.</dd>
</dl>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="asset_get_asset">Get Asset</h3>
<p>Retrieve the current asset data and format metadata for an existing asset. By default this will be the data of the latest <strong>in-progress</strong> version of the asset in LM, but it is also possible to specify that the latest <strong>approved</strong> version of the asset be returned.</p>


<h4>HTTP Operation</h4>
<p class="httpverb">GET</p>


<h4>Path</h4>
<pre class="soaapidoc_endpoint">/assets/{asset-id}</pre>


<h4>Parameters</h4>
<dl>
<dt>role (string[&nbsp;])</dt>
<dd>Roles the user possesses. These may optionally be used by the LM configuration for filtering the fields presented on the asset.</dd>
<dt>approved-version (Boolean)</dt>
<dd>A value of <strong>true</strong> indicates that the latest approved version of the asset in LM be returned (the <strong>published</strong> asset in LM terms). A value of <strong>false</strong> indicates that the latest <strong>in-progress</strong> version of the asset in LM be returned even if the approval of that version is not completed. The default value is <strong>false</strong>.</dd>
</dl>


<h4>Response</h4>
<p>JSON</p>
<p>Asset data and field metadata.</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="asset_delete_asset">Delete Asset</h3>
<p>Delete an existing asset.</p>


<h4>HTTP Operation</h4>
<p class="httpverb">DELETE</p>


<h4>Path</h4>
<pre class="soaapidoc_endpoint">/assets/{asset-id}</pre>


<h4>Parameters</h4>
<dl>
<dt>user-id (string)</dt>
<dd>The user deleting the asset. User id will be used to implicitly lock the asset prior to deletion and track asset change history.</dd>
</dl>


<h4>Response</h4>
<p>NONE</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="asset_lock_asset">Lock Asset</h3>
<p>Explicitly lock an existing asset. If already locked by the specified user the operation has no effect. If the asset is locked by a different user the operation will fail.</p>


<h4>HTTP Operation</h4>
<p class="httpverb">POST</p>


<h4>Path</h4>
<pre class="soaapidoc_endpoint">/assets/locks/{asset-id}</pre>


<h4>Parameters</h4>
<dl>
	<dt>user-id (string)</dt>
	<dd>The user locking the asset. This parameter is optional and is defaulted to the LM application user.</dd>
</dl>


<h4>Response</h4>
<p>NONE</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="asset_unlock_asset">Unlock Asset</h3>
<p>Explicitly unlock an existing asset. If the asset is already locked by the specified user the operation has no effect. If the asset is locked by a different user the operation will fail.</p>


<h4>HTTP Operation</h4>
<p class="httpverb">DELETE</p>


<h4>Path</h4>
<pre class="soaapidoc_endpoint">/assets/locks/{asset-id}</pre>


<h4>Parameters</h4>
<dl>
	<dt>user-id (string)</dt>
	<dd>The user unlocking the asset. This must match the user-id the asset is currently locked under. This parameter is optional and is defaulted to the LM application user.</dd>
</dl>


<h4>Response</h4>
<p>NONE</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="asset_get_assets">Get Assets</h3>
<p>Query existing assets for those meeting the specified criteria. Data for specified fields is returned for each matching asset. The query may be specified to consider either in-progress or approved versions of assets based on <strong>approved-version</strong> parameter.</p>


<h4>HTTP Operation</h4>
<p class="httpverb">GET</p>


<h4>Path</h4>
<pre class="soaapidoc_endpoint">/assets</pre>


<h4>Parameters</h4>
<dl>
<dt>approved-version (Boolean)</dt>
<dd>A value of <strong>true</strong> indicates that only the latest approved versions of the assets in LM be queried.</dd>
<dd>A value of <strong>false</strong> indicates that the latest <strong>in-progress</strong> versions of the assets in LM are queried. The default value is <strong>false</strong>.</dd>
<dt>page (integer)</dt>
<dd>The number of the page of asset results to retrieve, starting with 1. The default value is <strong>1</strong>.</dd>
<dt>page-size (integer)</dt>
<dd>The number of result assets to return per page. The default value is 500</dd>
<dt>include-field (string[&nbsp;])</dt>
<dd>Names of fields to be included for each asset in the results</dd>
<dt>order-by-fields</dt>
<dd>Ordered list of field names to use in ordering results. Specified fields should be string or decimal type. Field names are separated using <strong>|</strong>. For example <strong>order-by-fields=field1|field2|field3</strong></dd>
<dt>filter-field (string[&nbsp;])</dt>
<dd>A list of required values for designated asset fields names may be provided to filter the results of the query. Values are assumed to be in the form <strong>&lt;asset-field-name&gt;:&lt;asset-field-value&gt;</strong> and must specify valid asset fields for the asset-type. For example, specifying a parameter of <strong>filter- field=color:blue</strong> indicates that only assets with a <strong>color</strong> field value of <strong>blue</strong> should be selected. Multiple values may be specified for a single field by specifying them in multiple parameters with the same field name. In this case the value will be logically ORâ€™ed together.</dd>
<dd>For example, specifying <strong>&amp;filter-field=color:blue&amp; filter-field=color:green</strong> will match assets with either <strong>blue</strong> or <strong>green</strong> as a value for the <strong>color</strong> field.</dd>
</dl>


<h4>Response</h4>
<dl>
<dt>JSON</dt>
<dd>A JSON structure with an array of asset data elements containing the fields specified in the include-field parameters.</dd>
</dl>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="asset_create_asset_file">Create Asset File</h3>
<p>Create a <strong>by value</strong> File in LM for the specified asset field. Used by clients explicitly managing asset File fields.</p>


<h4>HTTP Operation</h4>
<p class="httpverb">POST</p>


<h4>Path</h4>
<pre class="soaapidoc_endpoint">/assets/{asset-id}/files/{field}</pre>


<h4>Parameters</h4>
<p>NONE</p>


<h4>Request Body</h4>
<dl>
<dt>Multipart/form-data</dt>
<dd>File contents</dd>
</dl>

<h4>Response</h4>
<p>NONE</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="asset_update_asset_file">Update Asset File</h3>
<p>Update a <strong>by value</strong> File in LM for the specified asset field. Used by clients explicitly managing asset File fields.</p>


<h4>HTTP Operation</h4>
<p class="httpverb">PUT</p>


<h4>Path</h4>
<pre class="soaapidoc_endpoint">/assets/{asset-id}/files/{field}</pre>


<h4>Parameters</h4>
<p>NONE</p>


<h4>Request Body</h4>
<dl>
	<dt>Multipart/form-data</dt>
	<dd>File contents</dd>
</dl>


<h4>Response</h4>
<p>NONE</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="asset_get_asset_file">Get Asset File</h3>
<p>Retrieve a <strong>by value</strong> File in LM for the specified asset field. Used by clients explicitly managing asset File fields.</p>


<h4>HTTP Operation</h4>
<p class="httpverb">GET</p>



<h4>Path</h4>
<pre class="soaapidoc_endpoint">/assets/{asset-id}/files/{field}</pre>


<h4>Parameters</h4>
<p>NONE</p>


<h4>Response</h4>
<dl>
	<dt>Application/octet-stream</dt>
	<dd>File contents.</dd>
</dl>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3 id="asset_delete_artifact">Delete Artifact</h3>
<p>Delete a <strong>by value</strong> File in LM for the specified asset field. Used by clients explicitly managing asset File fields.</p>


<h4>HTTP Operation</h4>
<p class="httpverb">DELETE</p>


<h4>Path</h4>
<pre class="soaapidoc_endpoint">/assets/{asset-id}/files/{field}</pre>


<h4>Parameters</h4>
<p>NONE</p>


<h4>Response</h4>
<p>NONE</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>




</div>
</body>
</html>