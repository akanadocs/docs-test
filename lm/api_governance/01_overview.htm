---
layout: page
title: Lifecycle Manager | Governance API | Overview
description: Overview of the Lifecycle Manager Governance API.
product: lm
category: ref
sub-nav-class: Governance API
weight: 05
type: page
nav-title: Governance API, Overview
---
<h2 id="top">Lifecycle Manager Governance API: Overview</h2>
<p>
<a href="../install/install_lm_v80x.htm" class="button secondary">Installing Lifecycle Manager</a> 
<a href="02_operations_asset.htm" class="button secondary">Asset Operations</a> 
<a href="02_operations_request.htm" class="button secondary">Request Operations</a> 
<a href="../SysAdmin-OSGi.html" class="button secondary">System Administrator Guide</a>
</p>



<h3>Overview</h3>
<p>LM governance APIs are separated into operations on <strong>assets</strong> and <strong>requests</strong>. Assets are the entities being governed and support custom lifecycles. Requests represent a user’s <strong>request</strong> to promote the asset to its next lifecycle state. Requests are submitted then approved or rejected and may follow their own micro-lifecycle on the way to final approval of an asset transition.</p>
<p>The governance API attempts to simplify the client’s interaction with LM relative to LM’s own native clients. Some aspects of this simplification are:</p>
<ul>
	<li><a href="#s_01">Asset Structure</a></li>
	<li><a href="#s_02">Locking</a></li>
	<li><a href="#s_03">Role Management</a></li>
	<li><a href="#s_04">Notification</a></li>
	<li><a href="#s_05">By-value Artifacts</a></li>
</ul>


<h4 id="s_01">Asset Structure</h4>
<p>Assets are represented in HTTP form style as a set of fields. These fields may be of simple types such as string, Boolean or decimal or may be of type File. The RAS-based classifier/artifact/relationship structure is hidden from the API client.</p>
<p>Operations retrieving individual assets or requests will return the field data of the request entity along with field metadata in Alpaca format consisting of a JSON schema structure and an additional JSON <strong>options</strong> structure.</p>
<p>When passing in an asset or request, clients need only provide the entity data.</p>


<h4 id="s_02">Locking</h4>
<p>The governance API uses an optimistic implicit locking model which assumes that it's not common that another user is concurrently updating assets maintained through the API. However, the API does expose explicit locking methods for a client that wants to manage locking.</p>


<h4 id="s_03">Role Management</h4>
<p>The governance API assumes that the management of user’s and associated roles is the responsibility of the client application. While some API operations require user ids and role names, LM does not retain knowledge of the assignment of roles to users.</p>


<h4 id="s_04">Notification</h4>
<p>In the initial release of the APIs there is no formal callback subscription model. Client applications can poll the <strong>GET</strong> operations or install custom listeners within the LM configuration to manage callbacks.</p>


<h4 id="s_05">By-value Artifacts</h4>
<p>Client applications may allow LM to implicitly manage File fields as <strong>by-value</strong> artifacts through use of the multi-part API operations or may choose to explicitly manage artifact using artifact operations. In either case the artifact-id is assumed to be the File field name. This implies that file fields must be single-valued.</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>