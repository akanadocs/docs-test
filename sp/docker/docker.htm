---
layout: page
title: Using Docker with the Akana Platform
description: Provides information about using Docker with the Akana Platform.
product: sp
category: gs
weight: 05
sub-nav-class: Docker
type: page
nav-title: Docker
---
<h1 id="top">Using Docker with the Akana Platform</h1>
<p>Provides information about using Docker with the Akana Platform.</p>
<h4 class="stamp">Valid in Version: 2020.2.0 and later</h4>
<hr class="divide_hr" />



<h2 style="color: gray;">Table of Contents</h2>


<h4 style="color: gray;"><a href="#h_overview_ref">Overview and Reference Information</a></h4>
<ol class="table_of_contents">
	<li><a href="#docker_why">Why Docker?</a></li>
	<li><a href="#docker_images">Available Docker Images</a></li>
	<li><a href="#docker_security_def">Security by Default</a></li>
	<li><a href="#docker_img_inspect">Inspecting Images</a></li>
	<li><a href="#docker_gs">Getting Started</a></li>
</ol>




<h4 style="color: gray;"><a href="#h_config">Configuring and Customizing Akana within Docker</a></h4>
<ol class="table_of_contents">
	<li><a href="#config_ov">Configuration Overview</a></li>
	<li><a href="#config_images">Configuring Akana Docker Images</a></li>
	<li><a href="#config_rapid_startup">Rapid Startup Configuration</a></li>
	<li><a href="#container_identity">Container Identity and External Keystore</a></li>
	<li><a href="#recipe_config">Recipe Configuration</a></li>
	<li><a href="#persisting_config">Persisting Container Configuration</a></li>
	<li><a href="#customizing_images">Customizing Akana Docker Images</a></li>
	<li><a href="#docker_eg_modify_features">Example: Modifying Installed Features</a></li>
</ol>




<h4 style="color: gray;"><a href="#h_appendix">Appendix</a></h4>
<ol class="table_of_contents">
	<li><a href="#docker_external_pki_setup_eg">Simple external PKI setup for Akana</a></li>
</ol>




<hr class="divide_hr" />
<h2 id="h_overview_ref">Overview and Reference Information</h2>




<h2 id="docker_why">Why Docker?</h2>
<p>Akana promotes deployments utilizing Docker technology to enable rapid standup of an environments that utilize resources efficiently and integrate seamlessly into popular cloud infrastructure and management tools. Akana publishes a set of base images that can support several deployment types out of the box while allowing layers to be built upon them for customized deployments.</p>
<p>Deploying Akana with Docker makes some tasks much easier to automate. It can also simplify getting started because most of the environment needed to run the application is packaged together in the Docker container. For more information on how using containers can help with your organizations processes checkout: https://www.docker.com/why-docker</p>
<p><a href="#top">Back to top</a></p>



<h2 id="docker_images">Available Docker Images</h2>
<p>Published images correlate with common deployment segmentation of functionality. Most features can easily be combined or separated further as needed. The following Docker images are available:</p>
<ul>
	<li>API Gateway</li>
	<li>Community Manager (Portal)</li>
	<li>OAuth</li>
	<li>Policy Manager </li>
	<li>Envision</li>
	<li>Lifecycle Manager</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="docker_security_def">Security by Default</h2>
<p>Our images are built with security enabled by default when possible. It is important to maintain these security features if customizing images for your organization.</p>
<ul>
	<li>Common hardening configurations are enabled by default. See <a href="../platform_management/platform-hardening.htm" title="Link to Hardening Guide">Akana Platform Hardening Guide</a>.</li>
	<li>Docker image best practices: see <a href="https://www.cisecurity.org/benchmark/docker/" title="Link to Docker doc" target="_blank">https://www.cisecurity.org/benchmark/docker/</a>.</li>
	<li>The Akana Administration Console is deployed on a separate port (9901), this allows network rules to block access to the Akana Administration Console.</li>
	<li>TLS is enabled by default on standard port 9900 with external keystore feature installed by default (ref: configuring container identity/external keystore)</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="docker_img_inspect">Inspecting Images</h2>
<p>Our containers include metadata that define useful details about how the container runs and what you should consider configuring via environment variables and file volume mounts. You can easily inspect this information from the command line with the command shown below.</p>
<p><strong>Code example: Inspect Akana Docker container</strong></p>
<pre>$> docker inspect {repository}/portal:&lt;version&gt;
[
  {
    "Id": "sha256:6d9d8e6....",
    "RepoTags": [
      "localhost/akana/docker/portal:2020.2.0.0"
    ],
...
"Env": [
        "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
        "CONTAINER_NAME=portal",
        "CONTAINER_KEY=portal",
        "CONTAINER_KEYSTORE_LOCATION=file:///opt/akana/etc/keystore",
        "CONTAINER_KEYSTORE_PASSWORD=",
        "CONTAINER_KEYSTORE_TYPE=jks",
        "CONTAINER_KEYSTORE_PROVIDER="
      ]
...
"Volumes": {
        "/opt/akana/etc/keystore": {},
        "/var/log/akana": {}
      },</pre>
<p>There is a lot of useful output, some of which is omitted. The "Env" and "Volumes" sections are important to take note of as well as the "Entrypoint" and "Healthcheck" depending on your use cases. Additionally, there may be some labels that will provide useful metadata about the image, like when it was built. It is wise to inspect the images you're using as they're they'll have the most up to date information about that image.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="docker_gs">Getting Started</h2>
<p>Docker is freely available making it easy to get started anywhere it can run. These steps will setup a local Community Manager and API Gateway to get familiar with running Akana with Docker as well as basic concepts for proxying services.</p>
<p>There are three basic steps:</p>
<ol>
	<li><a href="#proc_docker_env_get_ready">Get your system environment ready</a></li>
	<li><a href="#proc_docker_define_deployment">Define and run your Akana test deployment</a></li>
	<li><a href="#proc_docker_proxied_api_create">Create your first proxied API</a></li>
</ol>

<h4 id="proc_docker_env_get_ready">Get your system environment ready</h4>
<ol>
	<li>Install the Docker engine: see <a href="https://docs.docker.com/get-docker/" title="Link to Docker doc" target="_blank">https://docs.docker.com/get-docker/</a>.</li>
	<li>Obtain access to the Akana Docker registry or image downloads.
		<ol>
			<li>Load images from file using: docker load -i 
				{path-to-download}.</li>
			<li>Pull images from repository using: docker pull 
				{repo}/{image-name}:{version-tag}.</li>
		</ol>
	</li>
	<li>Install Docker Compose: see <a href="https://docs.docker.com/compose/install/" title="Link to Docker installation doc" target="_blank">https://docs.docker.com/compose/install/</a>.</li>
	<li>Make sure your current user has id 1000, or create a user with this id and give permissions to your working directory. For example, ./akana
		We make use of Docker volumes to unburden the filesystem driver as well as separate the non-ephemeral data from the ephemeral container. This comes with the need to link the base operating system's access control with the Docker container's access control. By using a common user identifier in both Linux operating systems, they look like the same user and the docker container can access the files.
	</li>
</ol>
<h4 id="proc_docker_define_deployment">Define and run your Akana test deployment</h4>
<ol>
	<li>Define your environment in a local file: ./akana/.env.
	<p><strong>Code example: Basic Akana Configuration</strong></p>
		<pre>COMPOSE_PROJECT_NAME=akana-docker

# Docker images to use
AKANA_VERSION=2020.2.0
AKANA_IMAGE_HOST=localhost
# If you have a local cache for Docker images to avoid rate limit of docker hub.
THIRDPARTY_IMAGE_REGISTRY=

# Host Config, where you are running docker compose. Use Public IP, or DNS name to autoconfigure TLS.
HOST=localhost

# Akana Administration Console User
CONTAINER_ADMIN_NEW=admin
CONTAINER_ADMIN_PASSWORD_NEW=Passw0rd!

# Policy Manager Admin User
PM_ADMIN=admin
PM_PASSWORD=Passw0rd!

#
# Community Manager Tenant
#
TENANT_EMAIL=administrator@localhost
TENANT_PASSWORD=Passw0rd!
TENANT_THEME=hermosa
TENANT_THEME_IMPL=hermosa
TENANT_ID=t1
TENANT_NAME=t1
TENANT_HOST=localhost
TENANT_CONSOLE_HOST=localhost
TENANT_VHOSTS=localhost</pre></li>
	<li><span class="apidoc_red">Use this <a href="images/docker-compose.yml">sample compose script for a simple local deployment</a></span> to define your Akana containers, and save it to a local file named ./akana/docker-compose.yml 
version: '3.8'.</li>
	<li>Run docker-compose <span class="apidoc_red">-d</span> up from command-line in the ./akana directory. <span class="apidoc_red">{PR: Does "up from command line" make sense to you in this context? If it just means run it from the command line I would like to reword this as follows "In the ./akana directory, from the command line, run </span><span class="apidoc_code">docker-compose -d</span><span class="apidoc_red">". Does that work for you? I need to be sure I'm not changing the meaning. Let me know what you think.}</span> </li>
	<li>In your browser, verify that Community Manager is running and you can log in using the credentials defined in your ./akana/.env file:
		<pre>https://localhost:9901/atmosphere</pre></li>
</ol>

<h4 id="proc_docker_proxied_api_create">Create your first proxied API</h4>
<p>Review how to create an API. See <a href="../../cm/learnmore/apiadmin_api_add.htm">Adding an API</a>.</p>
<p><strong>Localhost Services</strong>: If you are proxying a service running on the same host, take notice of how Docker networking will affect your configuration. You will find that the common hostname (localhost) and loopback address (127.0.0.1) will not reference your service. This is because within the context of the Akana Docker images, your service does not exist at the network's loopback address. Instead you must use the external IP address for your host to allow the network traffic from Akana out of the Docker network and back to the host machine.</p>
<p><span class="apidoc_red"><strong>SSH Tunneling</strong>: If you have firewall security, you can use SSH tunneling to circumvent the firewall. {PR: just adding "the firewall" here, let me know if you're OK with that.}</span></p>
<p><a href="#top">Back to top</a></p>




<hr class="divide_hr" />
<h2 id="h_config">Configuring and Customizing Akana within Docker</h2>




<h2 id="config_ov">Configuration Overview</h2>
<p>As you start getting deeper into your deployment plan, you'll want to understand the Akana configuration core concepts and automation framework. Resources:</p>
<ul>
	<li>The general platform getting started guide: <a href="../getting-started.html">Getting Started with the Platform</a>.</li>
	<li>The Akana platform automation guide: <a href="../automation/automation_ref.htm">Automation Reference Guide</a>.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="config_images">Configuring Akana Docker Images</h2>
<p>Some common configurations can be done via Environment variables at the creation time of the container, more complex configuration can be done via the Akana Administration Console browser-based user interface (UI) or via recipes at the command line. Recipes are recommended to provide a consistent deployment experience. See <a href="../automation/automation_ref.htm">Automation Reference Guide</a>.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="config_rapid_startup">Rapid Startup Configuration</h2>
<p>The fastest path to getting containers started is to use the Rapid Startup Environment Variable configuration to define everything that Akana needs to function. This way, as soon as you run the image, the container is ready to go. You can easily see what can be configured by these rapid startup configuration environment variables by inspecting the docker image. The 'docker inspect &lt;image&gt;' command outputs metadata about the image including pre-defined environment variables that Akana will observe at startup.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="container_identity">Container Identity and External Keystore</h2>
<p>Each Akana container must have a unique identity and should use a unique key pair. Akana images define environment variables and a volume for the keystore file that should be defined during container creation that will give the Akana instance an identity and trust with other Akana instances in the deployment. Notes:</p>
<ul>
	<li>Whether you're using JCEKS/PKCS12 or an HSM as a keystore, make sure you have keys defined for each container. See <a href="#docker_external_pki_setup_eg">Simple external PKI setup for Akana</a>.</li>
	<li>Use the volume /opt/akana/etc/keystore to mount your keystore file (you can override the location using environment variable CONTAINER_KEYSTORE_LOCATION if necessary)</li>
	<li>Specify the password to access the keystore CONATINER_KEYSTORE_PASSWORD as well as your container's CONTAINER_NAME and CONTAINER_ID as environment variables</li>
	<li>Run the container-identity-task.json recipe to select the key to be used for this container via its alias in the keystore (or HSM).</li>
</ul>
<p><strong>Specifying rapid startup configuration in Akana docker container creation</strong></p>
<pre>$} docker run -d --name gateway \
  -p 9900:9900 \
  -e CONTAINER_NAME=gw1 \
  -e CONTAINER_ID=gw1 \
  -e CONTAINER_KEYSTORE_PASSWORD=changeit \
  -v ./<span class="apidoc_red">&lt;keystore-file&gt;</span>:/opt/akana/etc/keystore \
  {registry}/gateway:{version}
efa10..
$} docker exec -w /opt/akana/bin \
  gateway \
  CONTAINER_IDENTITY_ACTION=assign.alias \
  CONTAINERALIAS=gateway-key \
  CONTAINERALIASPASSWORD=changeit \
  ./jython.sh -m akana.container --props container.properties --recipe ../recipes/tasks/container-identity-task.json</pre>
<p>You can verify your changes by logging into the Akana Administration Console web UI and launching the <strong>Manage PKI</strong> task from the <strong>Configuration</strong> Tab. You should see your certificate details in the popup.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="recipe_config">Recipe Configuration</h2>
<p>In some cases it is not possible to use Rapid Startup Configuration exclusively, due to the type or complexity of a configuration. In these cases we recommend using the standard Akana automation framework. See <a href="../automation/automation_ref.htm">Automation Reference Guide</a>.</p>
<ul>
	<li>Akana Docker Containers come with a 'container.properties' file in the /opt/akana/bin folder that can be used for recipe execution</li>
	<li>As with other deployment models, there are useful recipes pre-defined in the /opt/akana/recipes folder</li>
	<li>You must set the working directory to /opt/akana/bin to run the jython scripts.</li>
</ul>
<p><strong>Running a recipe on an Akana Docker container</strong></p>
<pre>$> docker exec -w /opt/akana/bin &lt;docker-container-name-or-id&gt; ./jython.sh -m akana.container --props container.properties --recipe ../recipes/&lt;name-of-recipe&gt;.json</pre>
<p>This method can be used to install a RDBMS driver on the fly using the db-driver.json recipe.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="persisting_config">Persisting Container Configuration</h2>
<p>Once you've configured your image ad hoc, you can persist that to a new image to allow you to redeploy without running all the configuration again. If you are looking to create pre-configured images, you may benefit more from reading <a href="#config_images">Customizing Akana Docker Images</a>.</p>
<pre>$> docker container commit -m "What you changed" {container-id} {repo}/{new-image-name}:{version-tag}</pre>
<p><a href="#top">Back to top</a></p>



<h2 id="customizing_images">Customizing Akana Docker Images</h2>
<p>Often times the base images will need to be customized to meet your exact needs, especially in production. This can be to install addon features, remove unnecessary plugins, add your own agents, or to bake in your organization's/environment's configurations. Docker makes it easy to build upon existing images and there are a plethora of tools available to integrate a DevOps CI/CD pipeline to rapidly deliver your customized application based on Akana.</p>

<h4 id="proc_customizing_images">General Steps</h4>
<ol>
	<li>(Recommended) Set up version control (VCS) and a build tool project to consistently build your target image</li>
	<li>Define a new multi-stage Dockerfile. See <a href="https://docs.docker.com/develop/develop-images/multistage-build/" title="Link to https://docs.docker.com/develop/develop-images/multistage-build/" target="_blank">https://docs.docker.com/develop/develop-images/multistage-build/</a>.
		<ol>
			<li>FROM Akana image as stage1-image</li>
			<li>COPY any files needed to customize the image</li>
			<li>RUN any automation recipes (see <a href="../automation/automation_examples.htm">Automation Examples</a>)</li>
			<li>RUN any cleanup of unnecessary files after install</li>
			<li>FROM your base image</li>
			<li>COPY --from=stage1-image /opt/akana/ /opt/akana/</li>
			<li>Redefine any ENV, VOLUME, EXPOSE, and/or ENTRYPOINT properties</li>
		</ol>
	</li>
	<li>Automate the 'docker build' and 'docker push' commands to integrate the new image in your pipeline</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="docker_eg_modify_features">Example: Modifying Installed Features</h2>
<p>Akana container images come with the most common features installed, but many are omitted to keep the size small and reduce the threat surface for most customers. You may need to add or remove features or individual OSGi bundles to meet your organization's individual needs. For example, most customers will need to install a proprietary database driver to be able to connect to their RDBMS. You can customize the Akana Docker Images to "bake" this into your organization's images.</p>
<h4>Dockerfile : Adding JDBC Driver</h4>
<pre>FROM {repo}/portal:{version} AS build-instance
 
# Recopy recipes incase they've changed and we're doing an expidited build of just one image, without rebuilding the akana-base image
COPY ./my-jdbc-driver.jar /opt/akana/lib
WORKDIR /opt/akana/bin
# Start the Akana container instance
RUN CONTAINER_NAME=akana ./docker-start.sh akana -bg
# Install your JDBC Driver
RUN DB_DRIVER_LOCATION=file:///opt/akana/lib/my-jdbc-driver.jar \
    ./jython.sh -Dorg.slf4j.simplelogger.logFile=System.out \
    -Dorg.slf4j.simpleLogger.defaultLogLevel=info \
    -m akana.container \
    --recipe ../recipes/db-driver.json \
    --props container.properties \
    --name akana \
    --key akana \
    --home /opt/akana
 
# Clean up filesystem so downstream image is smaller
RUN rm /opt/akana/my-jdbc-driver.jar
 
#
# Step 2:
# - Use your organization's docker base image, make sure JDK 1.8 is installed
FROM {repo}/{my-orgs-base-image}:latest
 
# Define environment variables so they can be seen by `docker inspect {image}`
ENV CONTAINER_NAME=
ENV CONTAINER_KEY=
ENV CONTAINER_KEYSTORE_LOCATION=file:///opt/akana/etc/keystore
ENV CONTAINER_KEYSTORE_PASSWORD=
ENV CONTAINER_KEYSTORE_TYPE=jks
ENV CONTAINER_KEYSTORE_PROVIDER=
 
COPY --from=build-instance /opt/akana/ /opt/akana/
# Do some security hardening
RUN adduser -D -u 1001 akana && \
    chown akana:akana -R /opt/akana && \
    find / -perm +6000 -type f -exec chmod a-s {} \;
USER akana
 
HEALTHCHECK CMD bash /opt/akana/bin/admin-healthcheck.sh
 
# Redefine volumes
VOLUME /opt/akana/etc/keystore
VOLUME /var/log/akana
 
# Redefine ports
EXPOSE 9900
EXPOSE 9901
 
# Redefine entrypoint
ENTRYPOINT ["/bin/bash", "/opt/akana/bin/akana-entrypoint.sh", "akana"]</pre>
<p>You can expand upon a multi-stage docker build like this to modify just about anything, including:</p>
<ul>
	<li>Linux monitoring tools</li>
	<li>Adding 3rd party agent software</li>
	<li>Running any customization recipe
		When adding open source software it is recommended to use a component scanning tool to identify known vulnerabilities so you can make an educated risk assessment and upgrade as appropriate. 
	</li>
</ul>
<p><strong>Container Security Scanning</strong>: When adding open source software it is recommended to use a component scanning tool to identify known vulnerabilities so that you can make an educated risk assessment and upgrade as appropriate.</p>
<p><a href="#top">Back to top</a></p>




<hr class="divide_hr" />
<h2 id="h_appendix">Appendix</h2>




<h2 id="docker_external_pki_setup_eg">Simple external PKI setup for Akana</h2>
<p>It may be helpful to learn more about PKI and/or provide a more realistic deployment environment using software based cryptography. You can leverage the external keystore feature in Akana by using the keytool command provided with the Java JDK. This setup can be replaced with a hardware security module (HSM) in the future if needed using the same configurations.</p>
<p>The steps involved are:</p>
<ol>
	<li>Create a private certificate authority (CA).</li>
	<li>Create keys for each of your Akana containers.</li>
	<li>Sign your container key's certificates with your private CA.</li>
	<li>(Optional) Install your private CA's public certificate's into your operating system's truststore.</li>
</ol>
<p>Below is a script that performs steps 1-3 as an example. Just run <span class="apidoc_code">./gen-pki.sh &lt;hostname&gt; &lt;keystorePassword&gt;</span>.</p>

<h4>Generate private PKI</h4>
<pre>#!/bin/bash
 
# Clean
rm *.pem
rm *.jks
rm *.jceks
 
PWD=$2
 
# Create personal Certificate Authority
keytool -genkeypair -keystore root.jks -alias root -keyalg rsa -keysize 8192 -validity 1825 -storepass $PWD -keypass $PWD -dname "CN=Akana Root,OU=Akana,O=Perforce,L=Minneapolis,ST=Minnesota,C=US" -ext bc:c
keytool -genkeypair -keystore ca.jks -alias ca -keyalg rsa -keysize 4096 -storepass $PWD -keypass $PWD -dname "CN=Akana CA,OU=Akana,O=Perforce,L=Minneapolis,ST=Minnesota,C=US" -ext bc:c
 
keytool -keystore root.jks -alias root -storepass $PWD -keypass $PWD -exportcert -rfc > root.pem
keytool -storepass $PWD -keypass $PWD -keystore ca.jks -certreq -alias ca | keytool -storepass $PWD -keypass $PWD -keystore root.jks -gencert -validity 1825 -alias root -ext BC=0 -rfc > ca.pem
cat root.pem > cachain.pem
cat ca.pem >> cachain.pem
keytool -noprompt -importcert -keystore ca.jks -trustcacerts -storepass $PWD -keypass $PWD -file root.pem
keytool -noprompt -keystore ca.jks -storepass $PWD -keypass $PWD -importcert -alias ca -file cachain.pem
 
# Create Application Certificates Keystores
for containerName in "portal" "gateway" "policy-manager" "oauth" "envision" "lifecycle-manager"
do
    keytool -noprompt -importcert -trustcacerts -keystore $containerName.jceks -storetype jceks -storepass $PWD -alias "Akana Root" -file root.pem
    keytool -noprompt -importcert -trustcacerts -keystore $containerName.jceks -storetype jceks -storepass $PWD -alias "Akana CA" -file ca.pem
    keytool -genkeypair -keyalg rsa -keysize 2048 -keystore $containerName.jceks -storetype jceks -storepass $PWD -keypass $PWD -alias $containerName -dname "CN=$containerName,OU=Akana,O=Perforce,L=Minneapolis,ST=Minnesota,C=US"
    # Build Subject Alternative Names extensions
    SAN="dns:$containerName,dns:localhost,ip:127.0.0.1"
    if [[ "$1" != "" ]] ; then
        SAN="$SAN,dns:$1,dns:$containerName.$1"
    fi
    keytool -storepass $PWD -keypass $PWD -keystore $containerName.jceks -storetype jceks -certreq -alias $containerName | keytool -storepass $PWD -keypass $PWD -keystore ca.jks -gencert -validity 365 -alias ca -ext ku:c=dig,keyEncipherment -ext eku=serverAuth -ext san=$SAN -rfc > $containerName.pem
    cat root.pem ca.pem $containerName.pem > ${containerName}chain.pem
    keytool -noprompt -keystore $containerName.jceks -storetype jceks -storepass $PWD -keypass $PWD -importcert -alias $containerName -file ${containerName}chain.pem
done</pre>
<p><a href="#top">Back to top</a></p>




<hr class="divide_hr" />



<h2 id="related_topics">Related Topics</h2>
<div class="relatedlinks" id="install"><!-- #BeginLibraryItem "/Library/relatedtopics_install.lbi" -->
<ul>
	<li><a href="../upgrade/upgrading_akana_api_platform_all.htm">Upgrading the Akana API Platform (all versions)</a></li>
	<li><a href="../upgrade/upgrading_min_downtime.htm">Use Case: Upgrading with Minimum Downtime</a></li>
	<li><a href="../upgrade/upgrading_micro.htm">Minor-Version Update Notes</a></li>
</ul>
<ul>
	<li><a href="../platform_install/installing_akana_api_platform_all.htm">Installing the Akana API Platform (all versions)</a></li>
	<li><a href="../platform_install/implementation_planning.htm">Planning Your Implementation</a></li>
	<li><a href="../platform_install/install_cm_jython_script.htm">Installation Jython Script</a></li>
	<li><a href="../elasticsearch/install_es_config.htm">Installing and Configuring Elasticsearch</a></li>
	<li><a href="../elasticsearch/install_es_secure_tc.htm">Configuring Elasticsearch with Security</a></li>
</ul><!-- #EndLibraryItem --></div>