---
layout: page
title: Sample Deployment Scenario
description: Illustration and overview for a sample deployment scenario.
product: sp
category: gs
weight: 05
sub-nav-class: Deployment
type: page
nav-title: Sample Deployment Scenario
---
<h2 id="top">Sample Deployment Scenario</h2>
<p>Illustration and overview for a sample deployment scenario.</p>



<p>
<a href="../platform_install/installing_akana_api_platform.htm" class="button secondary">Installing the Akana API Platform 2018.0.x</a>
<a href="../admin_console/using_admin_console.htm" class="button secondary">Using the Admin Console</a>
<a href="../admin_console/installing_tools.htm" class="button secondary">Installing Tools</a>
<a href="../admin_console/installing_plugins.htm" class="button secondary">Installing Plug-ins</a>
</p>

<div class = "divider1"></div>
<h3 style="color: gray;">Table of Contents</h3>
<ul>
	<li><a href="#overview">Introduction</a></li>
	<li><a href="#deployment_secure">Sample deployment: clustered environment</a></li>
	<li><a href="#components">Components</a>
		<ul>
			<li><a href="#components_pm">Policy Manager (PM)</a></li>
			<li><a href="#components_cm">Community Manager (CM)</a></li>
			<li><a href="#components_scheduler">Job Scheduler</a></li>
			<li><a href="#components_oauth">OAuth</a></li>
			<li><a href="#components_reverseproxy">Reverse Proxies</a></li>
			<li><a href="#components_nd">API Gateway/Internal Gateway (Network Director)</a></li>
			<li><a href="#components_app_dev">External App Developer</a></li>
			<li><a href="#components_es">Elasticsearch</a></li>
			<li><a href="#components_mongodb">MongoDB</a></li>
		</ul>
		</li>
	<li><a href="#container_features">Container features</a>
		<ul>
			<li><a href="#features_cm_pm">Community Manager/Policy Manager container features with access to MongoDB</a></li>
			<li><a href="#features_nd_oauth">Standalone API Gateway (Network Director) with OAuth</a></li>
			<li><a href="#features_sched_jobs">Scheduled Jobs container features</a></li>
			<li><a href="#features_oauth_alone">Standalone OAuth container features</a></li>
		</ul>
		</li>
	<li><a href="#container_features_other">Container features: additional information</a>
		<ul>
			<li><a href="#features_pm_alone">Container features for standalone Policy Manager container</a></li>
			<li><a href="#features_pm_cm_oauth">Community Manager with Policy Manager and OAuth</a></li>
			<li><a href="#features_pm_remote_cm">Policy Manager with remote Community Manager</a></li>
			<li><a href="#features_cm_alone">Standalone Community Manager (developer portal)</a></li>
			<li><a href="#features_cm_oauth">Standalone Community Manager with OAuth</a></li>
			<li><a href="#features_nd_alone">Standalone Internal/External Gateway (Network Director) container features (without OAuth</a></li>
		</ul>
		</li>
</ul>
<div class = "divider1"></div>



<h3 id="overview">Introduction</h3>
<p>There are many ways you can configure your implementation. This document provides an illustration of a simple clustered environment with various key components. It offers some high availability since there are multiple nodes for each key component.</p>
<p>This is not a requirement, and might not be the best choice depending on the factors associated with your own unique scenario. However, it's a good baseline.</p>
<p>There is a legend for the diagram, and a brief explanation of the various components that make up the diagram.</p>
<p>The choices you make for your own implementation will vary depending on many factors, including:</p>
<ul class="apidoc_red">
	<li>The database connectivity from the containers</li>
	<li>Load balancing and failover</li>
	<li>Security restrictions that your organization might have.</li>
</ul>
<p><strong>Note</strong>: Although this document presents a typical scenario, it's best to consult with a member of the Professional Services team to get recommendations on the ideal configuration for your deployment.</p>



<h3 id="deployment_secure">Sample deployment: clustered environment</h3>
<p>The illustration below shows an example of a typical customer deployment with a single geographical data center (one physical location). For more information, see:</p>
<ul>
	<li><a href="#legend">Legend</a></li>
	<li><a href="#components">Components</a></li>
</ul>
<p><img src="assets/deploy_clustered.png" alt="Sample deployment: clustered environment" /></p>

<h4 id="legend">Legend</h4>
<p>The numbers in the diagram above correspond to the sequence of actions below:</p>
<ol>
	<li>The consuming app invokes the OAuth server to receive the access token. See <a href="#components_oauth">OAuth</a> below.</li>
	<li>Authentication is validated, and then the access token is returned to the consuming app.</li>
	<li>The consuming app invokes an API hosted in the Akana API Gateway, accessing the external API Gateway (Network Director, ND).</li>
	<li>The external API Gateway, acting as the Policy Enforcement Point, reaches out to Policy Manager (PM), which is acting as the Policy Decision Point, to authorize and authenticate the consuming application. See <a href="#components_pm">Policy Manager (PM)</a> and <a href="#components_nd">API Gateway/Internal Gateway (Network Director)</a> below (#4 and #7 show the same activity).</li>
	<li>The containers with Policy Manager/Community Manager installed send and/or receive data to/from the RDBMS.</li>
	<li>The external API Gateway calls the internal API Gateway.</li>
	<li>The internal API Gateway, acting as the Policy Enforcement Point, reaches out to Policy Manager (PM), which is acting as the Policy Decision Point, to authorize and authenticate the consuming application. See <a href="#components_pm">Policy Manager (PM)</a> and <a href="#components_nd">API Gateway/Internal Gateway (Network Director)</a> below (#4 and #7 show the same activity).</li>
	<li>The internal API Gateway invokes the downstream API, physical service.</li>
	<li>The internal API Gateway saves analytic information about the request/response, to MongoDB.</li>
	<li>Policy Manager stores the analytic information in MongoDB. See <a href="#components_mongodb"> MongoDB</a> below.</li>
	</ol>
<p>The response is returned to the consuming application.</p>
<p><strong>Notes:</strong></p>
<ul>
	<li>For this scenario to work well, the database and the PM/CM containers must be in the same physical location.</li>
	<li>The above diagram includes an external consumer, accessing the deployment from outside the firewall, and an internal consumer such as a company employee.</li>
</ul>



<h3 id="components">Components</h3>
<p>The example deployment above includes the following components:</p>
<ul>
	<li><a href="#components_pm">Policy Manager (PM)</a></li>
	<li><a href="#components_cm">Community Manager (CM)</a></li>
	<li><a href="#components_scheduler">Job Scheduler</a></li>
	<li><a href="#components_oauth">OAuth</a></li>
	<li><a href="#components_reverseproxy">Reverse Proxies</a></li>
	<li><a href="#components_nd">API Gateway/Internal Gateway (Network Director)</a></li>
	<li><a href="#components_app_dev">External App Developer</a></li>
	<li><a href="#components_es">Elasticsearch</a></li>
	<li><a href="#components_mongodb">MongoDB</a></li>
</ul>


<h4 id="components_pm">Policy Manager (PM)</h4>
<p>This sample clustered deployment environment includes two dedicated Policy Manager containers, each of which should be on a different machine.</p>
<p>Two containers are of course the minimum for a clustered environment, providing some redundancy.</p>
<p>This configuration provides dedicated Policy Manager instances that are just for the Network Directors.</p>
<p>For information on the features you'll need to install on Policy Manager containers, see <a href="#features_cm_pm">Community Manager with Policy Manager</a>.</p>
<p>If you're installing Policy Manager in a standalone container, see <a href="#features_pm_alone">Container features for standalone Policy Manager container</a>.</p>


<h4 id="components_cm">Community Manager (CM)</h4>
<p>This sample clustered environment includes two Community Manager containers, each of which should be on a different machine. Depending on the size of your implementation, you could have one PM container and one CM container on each of two machines, or have each container on a separate JVM.</p>
<p>When we deploy Community Manager, it still does have Policy Manager under that, because that is a requirement for Community Manager. However, again, keeping Policy Manager separate is a good configuration, although it's not necessary.</p>
<p>For information on the features you'll need to install on the combined Community Manager/Policy Manager containers in this sample deployment scenario, see <a href="#features_cm_pm">Community Manager/Policy Manager container features with access to MongoDB</a>.</p>


<h4 id="components_scheduler">Job Scheduler</h4>
<p>This sample clustered deployment environment includes a dedicated container for the background job scheduler (Quartz scheduler). This container can run all of the PM and CM scheduled jobs.</p>
<p>The job scheduler cannot be clustered; it runs on only one container.</p>
<p>It's not necessary to have the job scheduler in its own container, completely separate from other components. However, by separating it out, you can help ensure that the scheduled jobs, which can include a lot of data processing, can run without affecting other containers.</p>
<p>Whether the container that's running the job scheduler is on a separate machine or not, we recommend allocating plenty of memory for the scheduled jobs. For example, 2 GB of memory, 2 CPU, should be fine.</p>
<p>For information on the features you'll need to install on this standalone container, to add jobs to the Quartz scheduler, see <a href="#features_sched_jobs">Scheduled Jobs container features</a>.</p>
<p><strong>Note</strong>: There are other scheduled jobs that are run on each container. For example, Network Director has a job scheduler that is responsible for reaching out to Policy Manager to get updated information on which APIs to load. These scheduled jobs are not separate installation features, they are built in to each container.</p>


<h4 id="components_oauth">OAuth</h4>
<p>OAuth provides the framework for authentication and authorization, whether the OAuth platform's inbuilt OAuth Provider is used, or an external OAuth Provider such as OpenID Connect, SAML, CA SiteMinder, or another.</p>
<p>If the platform's inbuilt OAuth Provider is used, it connects directly to the database.</p>
<p>The platform's OAuth feature requires that Community Manager is part of the deployment; however, it doesn't need to be installed in the same container as Community Manager. OAuth can be in its own container.</p>
<p><strong>Note</strong>: If you're using PingFederate or the platform's inbuilt OAuth Provider, you could use bearer tokens. All other OAuth Providers use JWT.</p>
<p>For information on the features you'll need to install on the standalone OAuth container, or the container where you want the OAuth component to reside, see <a href="#features_oauth_alone">Standalone OAuth container features</a>.</p>


<h4 id="components_reverseproxy">Reverse Proxies</h4>
<p>The reverse proxies provide a way for users to access the containers that are behind the firewall. In this example, the reverse proxies perform two functions:</p>
<ul>
	<li>Allowing apps and external consumers external access into the CM containers.</li>
	<li>Allowing apps and external consumers to reverse proxy into the OAuth provider.</li>
</ul>
<p>The platform doesn't provide reverse proxy functionality. You can use a third-party product such as  HAProxy, F5, or NGINX.</p>


<h4 id="components_nd">API Gateway/Internal Gateway (Network Director)</h4>
<p>This sample clustered deployment environment includes four Network Director containers:</p>
<ul>
	<li>External Gateways: an external cluster of two, outside the firewall</li>
	<li>Internal Gateways: an internal cluster of two, inside the firewall.</li>
</ul>
<p>In this sample scenario, the external Network Director instances call the internal Network Director instances before calling the API. It's not necessary to configure your deployment that way, but it's a clean approach.</p>
<p>The Network Director communicates with Policy Manager and relays the messages downstream to the API.</p>
<p><strong>Note</strong>: At runtime, Network Director reaches out to Policy Manager. It is not asynchronous. It first sends an authorization (<strong>auz</strong>) call to Policy Manager to authenticate the consumer of an API. It then caches the authentication/authorization, and uses the cached values until they expire. If values don't exist in the cache, it reaches out to Policy Manager in a synchronous call.</p>
<p>For information on the features you'll need to install on Network Director containers, see <a href="#features_nd_oauth">Standalone API Gateway (Network Director) with OAuth</a>.</p>
<p>If you're installing in a deployment where you're not using OAuth, see <a href="#features_nd_alone">Standalone Internal/External Gateway (Network Director) container features (without OAuth</a>.</p>


<h4 id="components_app_dev">External App Developer</h4>
<p>The external app developer accesses the Community Manager developer portal via the reverse proxy. Community Manager offers design-time features to allow the app developer to manage the app and get access to APIs.</p>


<h4 id="components_es">Elasticsearch</h4>
<p>This sample clustered deployment environment includes two Elasticsearch nodes, the minimum for redundancy.</p>
<p>The two Elasticsearch nodes should be on separate machines, for failsafe purposes. However, they needn't be dedicated machines.</p>
<p>For example, you could run Elasticsearch along with each of your Policy Manager containers.</p>
<p>For Elasticsearch you'll need to:</p>
<ul>
	<li>Install Elasticsearch on each CM container. For instructions, see <a href="../platform_install/install_es_config.htm">Installing and Configuring Elasticsearch</a>.</li>
</ul>


<h4 id="components_mongodb">MongoDB</h4>
<p>This sample clustered deployment environment includes three MongoDB instances, the minimum for sharding. It's a good idea to do sharding if you have multiple data centers. For more information, see <a href="../../ag/assets/api_gateway_multi_regional_deployment_v80.pdf" target="_blank">API Gateway 8.0 Multi-Regional Deployment</a> (PDF document).</p>
<p>To run MongoDB, you'll need to install:</p>
<ul>
	<li><strong>Akana MongoDB Support</strong> (Plug-In). Must be installed on the Policy Manager and Community Manager containers.</li>
	</ul>
<p><strong>Note</strong>: In addition, if you're using MongoDB, the Network Director should be configured to use a remote writer. In the Akana Administration Console, <strong>Configuration</strong> &gt; <strong>com.soa.monitor.usage</strong>:</p>
<ul>
	<li><strong>usage.local.writer.enabled</strong> is true by default. Set it  to <strong>false</strong>.</li>
	<li><strong>usage.remote.writer.enabled</strong> is false by default. Set it to <strong>true</strong>.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h3 id="container_features">Container features for this sample deployment</h3>
<p>To create the above deployment, you'd need to install the features below in the various containers.</p>
<ul>
	<li><a href="#features_cm_pm">Community Manager/Policy Manager container features with access to MongoDB</a></li>
	<li><a href="#features_nd_alone">Standalone Internal/External Gateway (Network Director) container features (without OAuth</a></li>
	<li><a href="#features_sched_jobs">Scheduled Jobs container features</a></li>
	<li><a href="#features_oauth_alone">Standalone OAuth container features</a></li>
</ul>


<h4 id="features_cm_pm">Community Manager/Policy Manager container features with access to MongoDB</h4>
<p>In each CM/PM combo container shown in this sample deployment, install the following features:</p>
<ul>
	<li>Standalone Policy Manager features:
		<ul>
			<li>Akana Policy Manager Console (policy.manager.console)</li>
			<li>Akana Policy Manager Services (policy.manager.services)</li>
			<li>Akana Security Services (security.services)</li>
		</ul>
	</li>
	<li>Akana Community Manager (community.manager)	</li>
	<li>Akana Community Manager Scheduled Jobs (community.manager.scheduled.jobs)</li>
</ul>
<p>Install the following plug-ins for Community Manager:</p>
<ul>
	<li>Akana MongoDB Support (Plug-In) (mongo.db) (if using MongoDB for analytics)</li>
	<li>Akana Community Manager Policy Console (community.manager.plugin)</li>
	<li>One or more of the following (at least one theme is required for Community Manager):
		<ul>
			<li>Akana Community Manager Default Theme (community.manager.default.theme)</li>
			<li>Akana Community Manager Hermosa Theme (community.manager.hermosa.theme)</li>
			<li>Akana Community Manager Simple Developer Theme (community.manager.simple.developer.theme)</li>
		</ul>
	</li>
</ul>


<h4 id="features_nd_oauth">Standalone API Gateway (Network Director) with OAuth</h4>
<p>If your deployment will include OAuth, you'll need to install the following features on each container running Network Director:</p>
<p>For Network Director:</p>
<ul>
	<li>Akana Network Director  (network.director)</li>
	<li>Akana API Platform ND Extensions Feature (api.security.policy.handler)</li>
</ul>
<p>Additional for OAuth:</p>
<ul>
	<li>Akana OAuth Provider Agent (oauth.provider.agent) (deployed only if the implementation is using Akana as the OAuth Provider, and only on the Network Director)</li>
	<li>Akana Community Manager OAuth Provider Agent (community.manager.oauth.provider.agent)</li>
</ul>


<h4 id="features_oauth_alone">Standalone OAuth container features</h4>
<p>On the standalone OAuth container, or the container where you want the OAuth component to reside, install the following:</p>
<ul>
	<li>Akana OAuth Provider (oauth.provider)</li>
	<li>Akana Community Manager OAuth Provider (community.manager.oauth.provider)</li>
</ul>
<h4 id="features_sched_jobs">Scheduled Jobs container features</h4>
<p>The installation features that are installed on this standalone container, that add jobs to the Quartz scheduler, are:</p>
<ul>
	<li>Akana Scheduled Jobs&#8212;bundled with the Akana Policy Manager Services feature</li>
	<li>Akana Community Manager Scheduled Jobs (community.manager.scheduled.jobs)</li>
</ul>
<p><strong>Note</strong>: There are other scheduled jobs that are run on each container. For example, Network Director has a job scheduler that is responsible for reaching out to Policy Manager to get updated information on which APIs to load. These scheduled jobs are not separate installation features, they are built in to each container.</p>
<p><a href="#top">Back to top</a></p>



<h3 id="container_features_other">Container features: additional information</h3>
<p>This section lists the features you'd need to install for some other common container configurations. The&nbsp;configurations below are not part of this example deployment, but are common configurations for various scenarios.</p>


<h4 id="features_pm_alone">Container features for standalone Policy Manager container</h4>
<p>Install the following features:</p>
<ul>
	<li>Akana Policy Manager Console (policy.manager.console)</li>
	<li>Akana Policy Manager Services (policy.manager.services)</li>
	<li>Akana Security Services (security.services)</li>
	<li>Akana MongoDB Support (Plug-In) (mongo.db) (if using MongoDB for analytics)</li>
</ul>


<h4 id="features_pm_cm_oauth">Community Manager with Policy Manager and OAuth</h4>
<p>Install the following features:</p>
<ul>
	<li>All features listed in <a href="#features_cm_pm">Community Manager/Policy Manager container features with access to MongoDB</a> above.</li>
	<li>Akana Community Manager OAuth Provider (community.manager.oauth.provider)</li>
	<li>Akana OAuth Provider (oauth.provider)</li>
</ul>


<h4 id="features_pm_remote_cm">Policy Manager with remote Community Manager</h4>
<p>Install the following features:</p>
<ul>
	<li>All features listed in <a href="#features_pm_alone">Container features for standalone Policy Manager container</a> above.</li>
	<li>Akana Community Manager Scheduled Jobs (community.manager.scheduled.jobs)</li>
	<li>Akana API Platform Plug-In (community.manager.plugin)</li>
	<li>Akana Community Manager Policy Console (community.manager.policy.console)</li>
</ul>


<h4 id="features_cm_alone">Standalone Community Manager (developer portal)</h4>
<p><strong>Note</strong>: The developer portal would be for app developers only.</p>
<p>Install the following features:</p>
<ul>
	<li>Akana Community Manager APIs (community.manager.apis)</li>
</ul>
<p>Install the following plug-ins for Community Manager:</p>
<ul>
	<li>One or more of the following (at least one theme is required for Community Manager):
		<ul>
			<li>Akana Community Manager Default Theme (community.manager.default.theme)</li>
			<li>Akana Community Manager Hermosa Theme (community.manager.hermosa.theme)</li>
			<li>Akana Community Manager Simple Developer Theme (community.manager.simple.developer.theme)</li>
		</ul>
	</li>
</ul>


<h4 id="features_cm_oauth">Standalone Community Manager with OAuth</h4>
<p>Install the following features:</p>
<ul>
	<li>All features listed in <a href="#features_cm_alone">Standalone Community Manager</a> above.</li>
	<li>Akana Community Manager OAuth Provider (community.manager.oauth.provider)</li>
	<li>Akana OAuth Provider (oauth.provider)</li>
</ul>


<h4 id="features_nd_alone">Standalone Internal/External Gateway (Network Director) container features (without OAuth)</h4>
<p>Install the following features:</p>
<ul>
	
	<li>Akana Network Director (network.director)</li>
	<li>Akana API Platform ND Extensions Feature (api.security.policy.handler)</li>
</ul>
<p><a href="#top">Back to top</a></p>




<div class = "divider1"></div>



<h3 id="related_topics">Related Topics</h3>
<div class="relatedlinks" id="install">
<ul>
	<li><a href="../upgrade/upgrading_akana_api_platform_84_2018.htm">Upgrading Akana API Platform from Version 8.4x to Version 2018.0.x</a></li>
	<li><a href="../upgrade/upgrading_akana_api_platform_82_84.htm">Upgrading Akana API Platform from Version 8.2 to Version 8.4x</a></li>
	<li><a href="../upgrade/upgrading_min_downtime.htm">Use Case: Upgrading with Minimum Downtime</a></li>
	<li><a href="../upgrade/upgrading_micro.htm">Micro-Version Upgrade Notes: 2018.0.0</a></li>
	<li><a href="../upgrade/upgrading_micro_84x.htm">Micro-Version Upgrade Notes: 8.4x</a></li>
</ul>
<ul>
	<li><a href="../platform_install/installing_akana_api_platform.htm">Installing the Akana API Platform 2018.0.0</a></li>
	<li><a href="../platform_install/installing_akana_api_platform_v84.htm">Installing the Akana API Platform 8.4x</a></li>
	<li><a href="../platform_install/installing_akana_api_platform_v82.htm">Installing the Akana API Platform 8.2x</a></li>
	<li><a href="../platform_install/implementation_planning.htm">Planning Your Implementation</a></li>
	<li><a href="../platform_install/install_cm_jython_script.htm">Installation Jython Script</a></li>
	<li><a href="../platform_install/install_es_config.htm">Installing and Configuring Elasticsearch</a></li>
	<li><a href="../platform_install/install_es_secure_tc.htm">Configuring Elasticsearch with security</a></li>
</ul>
</div>




</div>
</body>
</html>