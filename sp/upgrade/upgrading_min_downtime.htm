---
layout: page
title: Use Case - Upgrading with Minimum Downtime
description: Outlines a scenario for achieving a minimum-downtime upgrade in a production implementation spanning multiple data centers.
product: sp
category: ref
sub-nav-class: Upgrade - Akana API Platform
weight: 8
type: page
nav-title: Use Case - Minimum Downtime Upgrade
---
<h2 id="top">Use Case: Upgrading with Minimum Downtime</h2>
<p>This use case outlines a scenario for achieving a minimum-downtime upgrade in an implementation of the Akana API Platform spanning multiple data centers.</p>
<p>This example includes two data centers, but the approach would work in exactly the same way for any number of data centers. In this example, the upgrade is from version 8.2 to 8.4.</p>
<p>Note that in this example, the term <strong>minimum-downtime</strong> is used to mean that the API Gateway has zero or minimal downtime. It's possible that during the upgrade process either Policy Manager or Community Manager, or both, might experience some downtime. This might be necessary if the upgrade includes database schema changes.</p>
<p>Essentially, you are removing a specific container from normal traffic, upgrading it, and then adding it back into the cluster.</p>
<p><strong>Note</strong>: This use case provides an approach for manual upgrade across multiple data centers. However, the best, and recommended, approach for upgrade in a production environment is via automation, which is available as a service from the Akana Professional Services department. For details about automation options, contact your Akana representative.</p>
<p>Some points to bear in mind when considering a minimum-downtime upgrade:</p>
<ul>
	<li>The Network Director uses caching, which is very important during any upgrade.</li>
	<li>If authorizations for policies have been approved within the last four hours, these will be used during the upgrade of the Policy Manager containers.</li>
	<li>Analytics are cached during the small time that Policy Manager containers are being upgraded. This is only important if writes are being done remotely via Policy Manager.</li>
	<li>The approach of taking data centers offline and upgrading them one at a time, or doing the same with nodes in a cluster, makes it possible to complete an upgrade with zero or minimum downtime.</li>
	<li>A previous-version Network Director container can communicate with an upgraded Policy Manager container. For example, Version 8.2 Network Director containers can communicate with upgraded version 8.4 Policy Manager containers.</li>
	<li>In the approach taken in this use case, the first Policy Manager upgrade is responsible for upgrading the database. While Policy Manager is down for this upgrade, the Network Director instances are using cache for any runtime calls.</li>
</ul>
<p><a href="upgrading_akana_api_platform_82_84.htm" class="button secondary">Upgrading Akana API Platform from Version 8.2 to Version 8.4x</a></p>

<h5 class="stamp">Supported Platforms: 8.4x</h5>
<div class = "divider1"></div>
<h3 style="color: gray;">Table of Contents</h3>



<ol class="table_of_contents">
	<li><a href="#mindowntime_01">Multiple data center scenario</a>
		<ul>
			<li><a href="#mindowntime_01_00">Initial (Pre-Upgrade) State</a></li>
			<li><a href="#mindowntime_01_01">Step 1: Upgrade Data Center B</a></li>
			<li><a href="#mindowntime_01_02">Step 2: Upgrade Data Center A</a></li>
			<li><a href="#mindowntime_01_04">Final state after upgrade</a></li>
		</ul>
	</li>
	<li><a href="#mindowntime_02">Single data center scenario</a></li>
</ol>
<div class = "divider1"></div>



<a name="mindowntime_01"></a><h3>Multiple data center scenario</h3>
<p>This approach upgrades data centers one by one. While one data center is being upgraded, the remaining data centers (one or more) service all traffic.</p>
<p>Key point relating to this use case:</p>
<p>Only Policy Manager and Community Manager have direct access to the MongoDB database. This assumes that the Network Director is pushing all its writes to MongoDB via the Policy Manager server.</p>


<a name="mindowntime_01_00"></a><h4>Initial (Pre-Upgrade) State</h4>
<p>The diagram below shows the environment before upgrade. Active-Active MongoDB infrastructure has been implemented.</p>
<p><img src="images_min/uc_01_01.jpg" alt="Upgrading with minimum downtime: pre-upgrade" /></p>
<p><a href="#top">back to top</a></p>



<a name="mindowntime_01_01"></a><h4>Step 1: Upgrade Data Center B</h4>
<p>In this step, we first move all traffic to data center A, so that traffic is uninterrupted while data center B is being upgraded. We then perform the upgrade.</p>
<h5>High-level summary of steps</h5>
<p>For this scenario, you'll need to complete these steps:</p>
<p>Change the databases: define the writable database and change the direction of the replication.</p>
<p>We flip the databases and make data center B the writable database, and change the direction of the replication. This allows you to move the <strong>Master</strong> data center back and forth. If you prefer a different sequence, you can start with upgrading data center A, and its database will always stay active.</p>
<p>Update the scheduled jobs.
</p>
<p>Changing the <strong>Master</strong>/writable data center also requires an update to the scheduled jobs. When building the new <strong>Master</strong> Policy Manager, the scheduled jobs must be running from this container. To do this, set the property <strong>org.quartz.scheduler.enabled</strong> to <strong>true</strong>. For all other containers that have scheduled jobs installed, set the property to <strong>false</strong>. For instructions, see <a href="upgrading_akana_api_platform_82_84.htm#s02_01">Step 2-1: Turn off scheduled jobs</a>. Remember to restore the setting afterwards.</p>
<p>Upgrade the data center B environment.</p>

<h5>Upgrading the data center B environment</h5>
<p>The order of execution for upgrading data center B is:</p>
<p>Upgrade a Policy Manager container first. As part of the upgrade process for this Policy Manager container, the database is upgraded with any required schema changes.</p>
<p>After upgrade of the initial Policy Manager container is complete, upgrade all other containers. Order doesn't matter; you could even upgrade additional containers concurrently.</p>
<p>The diagram below shows the upgrade from 8.2 to 8.4 being done for data center B. Traffic is processed via data center A.</p>
<p><img src="images_min/uc_01_02.jpg" alt="Upgrading with minimum downtime: upgrading data center B" /></p>
<p><a href="#top">Back to top</a></p>



<a name="mindowntime_01_02"></a>
<h4>Step 2: Upgrade Data Center A</h4>
<p>Once you're sure everything is working perfectly with data center B, it's time to upgrade data center A.</p>
<p>To do this, first direct all traffic from the global router to data center B. The <strong>Master</strong> Policy Manager is now the Policy Manager, or bank of Policy Managers, that are running in data center B.</p>
<p>After upgrading each container, you'll need to register it in the Master Policy Manager. Depending on your scenario:</p>
<p><strong>If the Master Policy Manager has access to the new containers that are being created or upgraded</strong>: Add the container directly to the Policy Manager Workbench.</p>
<p><strong>If the Master Policy Manager doesn't have access to the new containers</strong>: Export the XML in the /metadata call. You can then add a container in the Policy Manager Workbench, and at the <strong>Add Container</strong> step, upload the <strong>metadata.xml</strong> file.</p>
<p>The diagram below shows the upgrade being done for data center A. Traffic is processed via data center B.</p>
<p><img src="images_min/uc_01_04.jpg" alt="Upgrading with minimum downtime: upgrading data center A" /></p>
<p><a href="#top">back to top</a></p>



<a name="mindowntime_01_04"></a><h4>Final state after upgrade</h4>
<p>The final state would be back to both data centers upgraded, active, and accepting traffic, as shown below.</p>
<p><img src="images_min/uc_01_05.jpg" alt="Upgrading with minimum downtime: final state after upgrade" /></p>

<p>Now, when it's time to do the next upgrade setup, follow the same steps, but change the sequence of the data centers. In the diagram above, notice that the writable database goes back to data center A. Also, remember that the <strong>Master</strong> Policy Manager always follows the writable database.</p>
<p>The diagram below shows the upgrade being done for data center B. Traffic is processed via data center A.</p>
<p><img src="images_min/uc_01_06.jpg" alt="Upgrading with minimum downtime: subsequent upgrade" /></p>
<p><a href="#top">back to top</a></p>



<a name="mindowntime_02"></a><h3>Single data center scenario</h3>
<p>Even if you only have a single data center, you can still achieve a minimum-downtime deployment. The approach is very similar to the approach for multiple data centers; the only difference is that rather than a single data center remaining active, one side of the node remains active.</p>
<p>The database is never moved; you will always have a single database instance that is always the active database.</p>
<p>You don't have to worry about using a <strong>Master</strong> Policy Manager instance, since there will never be a read-only database in the model.</p>
<p>The connections that are important in this model are the links into the Policy Manager cluster first. The steps are:</p>
<ol>
	<li>First, remove 1 and direct all traffic to a single Policy Manager.</li>
	<li>Upgrade the Policy Manager that is out of the cluster.</li>
	<li>Once you've upgraded that Policy Manager, add it back into the cluster.</li>
	<li>Now upgrade the other node.</li>
	<li>Follow the same steps for upgrading one or more Network Director containers, one at a time.</li>
</ol>
<p>Note that this is only viable for data centers that have multiple nodes deployed; at minimum, the gateways must have multiple nodes. Minimum-downtime upgrades can still be achieved with single Policy Manager node clusters.</p>
<p>The diagram below shows minimum-downtime upgrade for a single data center.</p>
<p><img src="images_min/uc_01_07.jpg" alt="Upgrading with minimum downtime: single data center model" /></p>
<p><a href="#top">Back to top</a></p>




<div class = "divider1"></div>




<h3 id="related_topics">Related Topics</h3>
<div class="relatedlinks" id="install"><!-- #BeginLibraryItem "/Library/relatedtopics_install.lbi" -->
<ul>
	<li><a href="upgrading_akana_api_platform_all.htm">Upgrading the Akana API Platform (all versions)</a></li>
	<li><a href="upgrading_min_downtime.htm">Use Case: Upgrading with Minimum Downtime</a></li>
	<li><a href="upgrading_micro.htm">Minor-Version Update Notes</a></li>
</ul>
<ul>
	<li><a href="../platform_install/installing_akana_api_platform_all.htm">Installing the Akana API Platform (all versions)</a></li>
	<li><a href="../platform_install/implementation_planning.htm">Planning Your Implementation</a></li>
	<li><a href="../platform_install/install_cm_jython_script.htm">Installation Jython Script</a></li>
	<li><a href="../platform_install/install_es_config.htm">Installing and Configuring Elasticsearch</a></li>
	<li><a href="../platform_install/install_es_secure_tc.htm">Configuring Elasticsearch with Security</a></li>
</ul><!-- #EndLibraryItem --></div>