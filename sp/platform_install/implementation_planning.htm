---
layout: page
title: Planning Your Implementation
description: Key factors to consider in planning your Akana API Platform implementation.
product: sp
category: ref
weight: 04
sub-nav-class: Installation - Akana API Platform
type: page
nav-title: Planning Your Implementation
---
<h2 id="top">Planning Your Implementation</h2>
<p>Before you start installing the Akana API Platform, there are some key factors to consider that will affect how you go about the implementation. For example, consider:</p>
<ul>
  <li>How many containers do you want to configure?</li>
  <li>Are you using load balancing, and if so, where?</li>
  <li>Do you want to create dedicated containers for certain features, or do you want to put all features into one container? You might want to install Community Manager in the same container where Policy Manager is already installed, or in a separate container that you create. This will affect the installation features you choose and the installation steps.</li>
  <li>Will the containers be installed in the DMZ or inside the network?</li>
  <li>Which containers will have a direct database connection, and which will not?</li>
</ul>
<p>Your decisions on these points, and other considerations such as unique security requirements or architectural features of your implementation, will affect how you structure your implementation. Based on the unique requirements of your installation, you can plan your containers for deployment and determine which features will be installed on which containers.</p>
<p>Review all the information below, and make sure that you take these factors into consideration in planning your implementation.</p>
<p>This document includes:</p>
<ul>
  <li><a href="#features_required">Required Akana API Platform Features</a></li>
  <li><a href="#general_config_factors">General Configuration Factors</a></li>
  <li><a href="#features_optional">Optional Features</a></li>
  <li><a href="#install_planning">Installation Planning</a></li>
</ul>



<h3 id="features_required">Required Akana API Platform Features</h3>
<p>The core installation features required for the Akana API Platform to work are:</p>
<ul>
<li><strong>Akana Community Manager APIs</strong>
<p>This feature includes all the REST APIs offered by the API Platform. These APIs are the backbone for the Community Manager back end and are needed for the developer UI portal.</p>
<p>This feature does not require any other feature to be installed in the same container.</p></li>
<li><strong>Akana Community Manager Scheduled Jobs</strong>
  <p>This feature includes the scheduled jobs to support API Platform features. It could be running on the same container as the APIs or in a different container. If you are running Community Manager, this feature must be installed in all the containers on which the <strong>Akana Scheduled Jobs</strong> feature is installed. All features related to scheduled jobs should run in the same container—<strong>Akana Scheduled Jobs</strong> and <strong>Akana Community Manager Scheduled Jobs</strong>.</p>
<p>The Scheduled jobs feature has been packaged separately so that it can run on a separate, probably non-critical container, maybe without clustering. This allows you to set up dedicated containers for scheduled jobs without using the resources from containers that are serving external/public UI requests.</p></li>
  <li><strong>Akana Community Manager Default Theme or Hermosa Theme</strong> (plug-ins)
  <p>Either of these themes provides the full functionality of the developer user portal, each with a different look and feel. The app developer's browser connects to the Akana Community Manager theme.</p>
<p><strong>Note</strong>: The <strong>Akana Community Manager APIs</strong> feature must be installed in the same container as the theme.</p></li>
</ul>
<p><a href="#top">Back to top</a></p>



<h3 id="general_config_factors">General Configuration Factors</h3>
<p>In addition to the requirements of Akana API Platform installation, take into consideration general factors that will affect your implementation, such as:</p>
<ul>
  <li>The database connectivity from the containers</li>
  <li>Load balancing and failover</li>
  <li>Security restrictions that your organization might have. For example, perhaps:
  <ul>
    <li>The DMZ cannot connect to the database server</li>
    <li>Requests cannot go directly to the internal network without having a hop in the DMZ</li>
    <li>The developer user sessions and the API request traffic must be kept separate on different machines</li>
  </ul></li>
</ul>
<p>If any such organizational requirements are a factor in your implementation, keep these in mind when planning your installation and determining which features you will install on which containers.</p>
<p><a href="#top">Back to top</a></p>



<h3 id="features_optional">Optional Features</h3>
<p>The Akana API Platform includes several key optional features. A very brief summary is included here so that you can include any relevant features in your planning.</p>
<p>Optional features include:</p>
<ul>
  <li><a href="#features_security_providers">Security Providers</a></li>
  <li><a href="#features_oauth">OAuth</a></li>
</ul>


<h4 id="features_security_providers">Security Providers</h4>
<p>The Akana API Platform supports several key security providers. If you are using one of these security providers, you will need to install the applicable plug-in feature to support it.</p>
<p>Supported security providers include:</p>
<ul>
  <li>CA SiteMinder: install the API Gateway Option Pack (separate ZIP file; on the Akana Library site, choose API Gateway &gt; {version} &gt; Option Packs)</li>
  <li>PingFederate: install the <strong>Akana PingFederate Integration Add-On Feature</strong> plug-in</li>
</ul>
<p>When you're planning your implementation, and determining how many containers you will have and which features you'll install on which containers, you'll also need to determine which add-on features you'll need to install in your containers to support one or more of the above.</p>
<p>For example, if you are installing the PingFederate add-on, the PingFederate plug-in must be installed in the same container where the Akana Community Manager APIs feature is installed, and also where the Network Director is installed.</p>


<h4 id="features_oauth">OAuth</h4>
<p>The OAuth Provider feature allows you to support OAuth for platform APIs.</p>
<p><a href="#top">Back to top</a></p>



<h3 id="install_planning">Installation Planning</h3>
<p>This section includes additional information to help you plan your installation, including:</p>
<ul>
  <li><a href="#plan01_checklist">Installation Planning Checklist</a></li>
  <li><a href="#plan02_container_config">Scenarios: Container Configuration</a></li>
  <li><a href="#plan03_breakout">Scenarios: Feature Breakout</a></li>
</ul>


<h4 id="plan01_checklist">Installation Planning Checklist</h4>
<p>Answer the questions below to help you plan your implementation.</p>
<ol>
  <li>What features do you need/want?</li>
  <li>What are the different categories of the containers you want to configure?</li>
  <li>How many containers do you want to configure?</li>
  <li>How many containers do you want to have for each feature?</li>
  <li>Do you want everything in one container, or do you need to separate:
  <ul>
    <li>Policy Manager console from Policy Manager services?</li>
    <li>Policy Manager services from Community Manager services?</li>
    <li>Network Director?</li>
    <li>Scheduled jobs?</li>
</ul></li>
  <li>How do you want to group features to configure specific containers?</li>
</ol>


<h4 id="plan02_container_config">Scenarios: Container Configuration</h4>
<p>Below are some theoretical scenarios that might influence your implementation planning.</p>
<ul>
  <li>Joe wants a separate container for the Policy Manager console, because he doesn't want to use the path for the Community Manager console.</li>
  <li>Mary wants a separate container for the Network Director dependencies, because she doesn't want to combine API traffic with user traffic.</li>
  <li>Tom wants to add a separate container for Community Manager because it's an external-facing site; he doesn't want to combine that with the administration functionality of the Policy Manager console.</li>
  <li>Jack wants the Community Manager user interface, but his company wants one instance for developers and another for administrators, so he will need to configure at least two Community Manager containers.</li>
  <li>Stephen wants to make sure Admin users are kept in a user store separate from developer users.</li>
  <li>Susan doesn't want scheduled jobs to add a lot of overhead to the same container that's serving the user traffic or API traffic, so she wants to configure a separate, dedicated container for scheduled jobs.</li>
  <li>Maria needs to make sure that transaction traffic/usage/load is kept separate from web-based interactive messaging. For example, calls from a Network Director must not be impacted by the web-based interactive load.</li>
  <li>Kanchana needs to make sure that failover strategies are in place.</li>
  <li>Abhishek needs to design an implementation to support a multi-site scenario.</li>
  <li>Jennifer needs to include the PingFederate add-on, so she will need to install the PingFederate plug-in in the same container where the Community Manager APIs feature is installed, and also in the container where the Network Director is installed.</li>
  <li>Matt wants to make sure "User" traffic is separated from "Admin" traffic—admin traffic must be restricted to a secure network.</li>
</ul>


<h4 id="plan03_breakout">Scenarios: Feature Breakout</h4>
<p>Once you've decided on your container configuration, you'll need to determine which containers will include which features. Then you can determine how many containers you want to configure for each of those container categories, and which features go into which container configurations. Below are some theoretical scenarios:</p>
<ul>
<li>You have a container category that has Network Director dependencies, and you want a lot of load balancing there because the API traffic is of critical importance in your company.</li>
  <li>You don't want load balancing on scheduled jobs. One dedicated container is enough.</li>
  <li>You don't need a separate container for the Administrator; Administrator work is minimal and can be performed at quiet times.</li>
  <li>The DMZ cannot connect to the database server.</li>
</ul>
<p>Using information relating to your unique scenario, plan your installation.</p>
<p>For information on how to install the latest version, see <a href="installing_akana_api_platform_v84.htm">Installing the Akana API Platform 8.4x</a></p>
<p><a href="#top">back to top</a></p>



<div class = "divider1"></div>



<h3 id="related_topics">Related Topics</h3>
<div class="relatedlinks">
<ul>
	<li><a href="installing_akana_api_platform_v84.htm">Installing the Akana API Platform 8.4x</a></li>
	<li><a href="installing_akana_api_platform_v82.htm">Installing the Akana API Platform 8.2x</a></li>
</ul>
<ul>
	<li><a href="install_cm_jython_script.htm">Installation Jython Script</a></li>
<!--	<li><a href="implementation_planning.htm">Planning Your Implementation</a></li>-->
	<li><a href="install_es_config.htm">Installing and Configuring Elasticsearch</a></li>
	<li><a href="install_es_secure_tc.htm">Configuring Elasticsearch with Transport Client security</a></li>
	<li><a href="install_mysql_dbsettings.htm">MySQL Database Property Settings</a></li>
</ul>
</div>