---
layout: page
title: Automation Examples
description: Simple examples of using automation to install the platform.
product: sp
category: ref
weight: 10
sub-nav-class: Automation
type: page
nav-title: Automation Examples
---
<h1 id="top">Automation Examples</h1>
<p>Simple examples of using automation to install the platform.</p>
<p><strong>Note</strong>: Certain automation processes are limited to Linux only, though most are valid for both Windows and Linux. See <a href="automation_ref.htm#ov_automation_windows">Running automation recipes on Windows</a>.</p>
<h4 class="stamp">Supported Platforms: 2018.0.x and later</h4>
<hr class="divide_hr" />



<h2 style="color: gray;">Table of Contents</h2>

<h4 style="color: gray;"><a href="#h_overview">Overview</a></h4>
<ol class="table_of_contents">
	<li><a href="#overview_e2e">Automation recipe examples: overview</a></li>
</ol>

<h4 style="color: gray;"><a href="#h_container_basic">Creating a basic container:</a></h4>
<ol class="table_of_contents">
	<li><a href="#bootstrap_overview">Creating a basic container: overview</a></li>
	<li><a href="#resource_download_short">Download and extract the installation files</a></li>
	<li><a href="#logging_file_place">Put the logging file in place to enable logging</a></li>
	<li><a href="#properties_file_set_up">Set up the properties file</a></li>
	<li><a href="#recipe_run">Run the recipe using the automation script</a></li>
	<li><a href="#run_in_browser">Run the Akana Administration Console in the browser</a></li>
</ol>

<h4 style="color: gray;"><a href="#h_container_pm_cm_all">Creating a PM/CM container:</a></h4>
<ol class="table_of_contents">
	<li><a href="#pm_cm_all_overview">PM/CM container: overview</a></li>
	<li><a href="#pm_cm_steps">Steps for setting up a PM/CM container</a></li>
	<li><a href="#pm_cm_properties">Properties file for PM/CM container</a></li>
	<li><a href="#pm_cm_script">PM/CM container: automation script</a></li>
	<li><a href="#pm_cm_results">PM/CM container: results</a></li>
</ol>

<h4 style="color: gray;"><a href="#h_container_nd_cm_all">Creating an ND container:</a></h4>
<ol class="table_of_contents">
	<li><a href="#nd_cm_all_overview">ND container: overview</a><a href="#nd_cm_all_overview"></a></li>
	<li><a href="#nd_cm_steps">Steps for setting up an ND container</a></li>
	<li><a href="#nd_cm_properties">Properties file for ND container</a></li>
	<li><a href="#nd_cm_script">ND container: automation script</a></li>
	<li><a href="#nd_cm_results">ND container: results</a></li>
</ol>

<h4 style="color: gray;"><a href="#h_container_nd_register">Registering the ND container:</a></h4>
<ol class="table_of_contents">
	<li><a href="#nd_register_overview">Registering the ND container: overview</a><a href="#nd_cm_all_overview"></a></li>
	<li><a href="#nd_register_steps">Steps for registering the ND container</a></li>
	<li><a href="#nd_register_properties">Properties file for registering the ND container</a></li>
	<li><a href="#nd_register_script">Registering the ND container: automation script</a></li>
	<li><a href="#nd_register_results">Registering the ND container: results</a></li>
</ol>

<h4 style="color: gray;"><a href="#h_resource_info">Additional resource information:</a></h4>
<ol class="table_of_contents">
	<li><a href="#ts_properties_commandline">Providing property values at the command line</a></li>
	<li><a href="#resource_download_extract">Downloading and extracting the installation files</a></li>
	<li><a href="#cluster_support">Cluster support</a></li>
	<li><a href="#recipe_create_smtp">Setting up an SMTP email host using an automation recipe</a></li>
</ol>
<hr class="divide_hr" />



<h2 id="h_overview">Overview:</h2>



<h2 id="overview_e2e">Automation recipe examples: overview</h2>
<p>General notes about the examples included in this document:</p>
<ul>
	<li>In these examples, the user home directory is /home/user. Substitute your own directory.</li>
	<li>In this example, the value for the install directory (INSTALL_DIR property) is /home/user/akana. Substitute your own install directory.</li>
	<li>You can encrypt passwords. This example does not use encryption.</li>
</ul>
<p><a href="#top">back to top</a></p>



<hr class="divide_hr" />
<h2 id="h_container_basic">Creating a basic container:</h2>



<h2 id="bootstrap_overview">Creating a basic container: overview</h2>
<p>In this example we will create a basic container using automation, at the Linux command line. This example uses a core automation recipe, <strong>bootstrap.json</strong>. This recipe is also part of many other recipes that perform more complex actions, so it's a good exercise to run it on its own.</p>
<p>The scenario includes:</p>
<ol>
	<li>Downloading and unzipping the installation files</li>
	<li>Setting up specific files and properties so that the script will work correctly. This includes:
		<ul>
			<li>Putting the logging file in place to enable logging.</li>
			<li>Writing the properties file.</li>
		</ul>
	</li>
	<li>Using the automation script to run a basic recipe to create the container.</li>
	<li>Opening the Akana Administration Console user interface for the container in the browser.</li>
</ol>
<p><a href="#top">back to top</a></p>



<h2 id="resource_download_short">Download and extract the installation files</h2>
<p>As with any installation, you'll need to download the correct files and unzip them in the correct sequence in your installation directory.</p>
<p>For detailed instructions on downloading and extracting the files, refer to the sections in the installation documentation:</p>
<ul>
	<li><a href="../platform_install/installing_akana_api_platform_v2018.htm#gather_zip_files">Step 1: Gather ZIP file or files and download to a temporary folder</a></li>
	<li><a href="../platform_install/installing_akana_api_platform_v2018.htm#unzip_files">Step 2: Extract installation files</a></li>
</ul>
<p>For abbreviated instructions for the specific files used in these examples, see <a href="#resource_download_extract">Downloading and extracting the installation files</a>.</p>
<p>The illustration below shows copying the files from another location so that the four files are in the <strong>akana</strong> directory.</p>
<p><img src="assets/automation01_basic_01.jpg" alt="Setting up the files" /></p>
<p><a href="#top">back to top</a></p>



<h2 id="logging_file_place">Put the logging file in place to enable logging</h2>
<p>When running a recipe, logging is very helpful to track down problems or monitor the progress of a recipe. The recipe scripts use <a href="../../ag/glossary_pm_nd.htm#gl_pm_slf4j">SLF4J</a> logging, and since no default implementation is shipped with the scripts, it is sometimes necessary to provide one. To deploy a logger implementation, you'd need to copy the file to a location accessible to the automation script.</p>
<p>So, the next step is to copy the <strong>slf4j-simple-1.7.19.jar</strong> logger file, which is part of the installation, to the $INSTALL_DIR/lib/script folder.</p>
<p>For this example, from the/home/user/akana folder, run the following:</p>
<pre>cp lib/ext/slf4j-simple-1.7.19.jar lib/script/</pre>
<p><a href="#top">back to top</a></p>



<h2 id="properties_file_set_up">Set up the properties file</h2>
<p>For this example, we're going to define a few key properties via a properties file, which the automation script will reference.</p>
<p>The filename and location don't matter as long as you reference the file correctly in the automation script. In this example, we're creating a file named <strong>bootstrap.properties</strong> in the /bin directory.</p>
<p>First, in the /home/user/akana/bin folder, create the properties file. For example:</p>
<pre>vi bootstrap.properties</pre>
<p>Add the below contents to the file:</p>
<pre>INSTALL_DIR=/home/user/akana
CONTAINER_NAME=pm01
DEFAULT_PORT=9900</pre>
<p>Save the file.</p>
<p><strong>Note</strong>: For information about how you could provide these properties at the command line, see <a href="#ts_properties_commandline">Providing property values at the command line</a> below.</p>

<h4 id="proc_properties_values">Determining values for properties used in the recipe</h4>
<p>The recipes needs certain values, such as the name of your installation directory and the name of the container you're creating.</p>
<p>In a manual installation, you provide these values in the installation wizard user interface. When using a recipe you can provide them:</p>
<ol>
	<li>In a properties file. See the example above.</li>
	<li>System properties. Usually passed in at the command line using <strong>-D</strong>. See <a href="#ts_properties_commandline">Providing property values at the command line</a>.</li>
	<li>As environment variables.</li>
</ol>
<p>In this example of creating a basic container, the values are defined in a properties file.</p>
<p>There are two scenarios for property values:</p>
<ul>
	<li>Variables that have no default: if the value is not provided the recipe will fail.
	<p>Examples: INSTALL_DIR, CONTAINER_NAME.</p></li>
	<li>Variables that have default values defined in the recipe. If you want to use a different value you'll have to provide it. If not, the default value is used.
	<p>Example: In the <a href="assets/bootstrap.json" target="_blank">bootstrap.json</a> recipe, the default port is defined as 9900 (line 16). In this example of creating a basic container, we explicitly specify port 9900 in the properties file; however, since port 9900 is the default, it isn't really necessary to specify a port.</p></li>
</ul>
<p><a href="#top">back to top</a></p>



<h2 id="recipe_run">Run the recipe using the automation script</h2>
<p>In this example, the properties file is <strong>bootstrap.properties</strong>.</p>
<p>Therefore, the script command to run from the /akana/bin folder is:</p>
<pre>
./jython.sh -Dorg.slf4j.simpleLogger.logFile=System.out -m akana.container --recipe ../recipes/bootstrap.json --props bootstrap.properties</pre>
<p>The result of running the automation script is shown below.</p>
<p><img src="assets/automation01_basic_02.jpg" alt="Running the script" /></p>
<p>You can see that the container was successfully created and started, as indicated above.</p>
<p><a href="#top">back to top</a></p>



<h2 id="run_in_browser">Run the Akana Administration Console in the browser</h2>
<p>You can now access the Akana Administration Console via the browser: <strong>{hostname}:{port}/admin/login.html</strong>.</p>
<p>Log in, using the default username and password (administrator/password) unless you specified a different username and password.</p>
<p>To verify the container name, after login, go to the System tab. The container name is displayed in the panel header, as shown below. In this example the container name is pm01 (see <a href="#properties_file_set_up">Set up the properties file</a> above).</p>
<p><img src="assets/automation01_basic_03_admin_console.jpg" alt="Running the Akana Administration Console for the container" /></p>
<p>You've now created a basic container using automation. This is the equivalent of completing Step 3 in the manual installation instructions (see <a href="../platform_install/installing_akana_api_platform_v2018.htm#run_configurator_pm">Step 3: Run Configurator to create the first container</a>).</p>
<p><a href="#top">back to top</a></p>



<hr class="divide_hr" />
<h2 id="h_container_pm_cm_all">Creating a PM/CM container:</h2>



<h2 id="pm_cm_all_overview">PM/CM container: overview</h2>
<p>By following the steps in <a href="#h_container_basic">Creating a basic container</a> above, you'll get some practical experience of running an automation recipe. However, there are no features installed in the basic container.</p>
<p>Now it's time to take it a step further, creating a container with multiple features installed and multiple properties set.</p>
<p>There are these differences in the procedure:</p>
<ul>
	<li>You're running a different automation recipe, <strong>pm-cm-all.json</strong>.</li>
	<li>Because it's a more complex recipe, you'll need to provide a lot more properties.</li>
</ul>
<p>You'll also need to have your database set up. Depending on the database type and version you're using, you might also need to put a driver in place and/or modify some database settings first. Refer to these sections of the <strong>Installing the Akana API Platform 2018.0.x</strong> doc:</p>
<ul>
	<li><a href="../platform_install/installing_akana_api_platform_v2018.htm#database_notes">Database notes</a></li>
	<li><a href="../platform_install/installing_akana_api_platform_v2018.htm#database_drivers">Database drivers</a></li>
</ul>
<p><a href="#top">back to top</a></p>



<h2 id="pm_cm_steps">Steps for setting up a PM/CM container</h2>
<p>The sequence of steps is the same for running any recipe, as described in detail in <a href="#h_container_basic">Creating a basic container</a> above:</p>
<ol>
	<li><a href="#resource_download_short">Download and extract the installation files</a> (once per installation).</li>
	<li><a href="#logging_file_place">Put the logging file in place to enable logging</a> (once per installation).</li>
	<li><a href="#properties_file_set_up">Set up the properties file</a> (per recipe). For this example, define the properties listed in <a href="#pm_cm_properties">Properties file for PM/CM container</a> below.</li>
	<li><a href="#recipe_run">Run the recipe using the automation script</a> (per recipe). For this example, use the script shown in <a href="#pm_cm_script">PM/CM container: automation script</a> below.</li>
</ol>
<p><a href="#top">back to top</a></p>



<h2 id="pm_cm_properties">Properties file for PM/CM container</h2>
<p>In your installation folder, look in the /recipes subfolder at the <strong>pm-cm-all.json</strong> recipe.</p>
<p>For this example, because the recipe is doing a lot more, you must provide additional properties. To see which properties you need to define for a recipe, just look through the recipe, and any other recipes that it might be referencing.</p>
<p>Because we're going to run several recipes, these examples use the recipe name for the properties file. For the PM container, the recipe is <strong>pm-cm-all.json</strong>, so the properties file is <strong>pm-cm-all.properties</strong>. The filename doesn't matter as long as it's correct in the script.</p>
<p>In the /home/user/akana/bin folder, create the properties file. For example:</p>
<pre>vi pm-cm-all.properties</pre>
<p>In the file, provide values for all the properties referenced by the recipe. An example is shown below.</p>
<pre>INSTALL_DIR=/home/user/akana
PRODUCT_HOME=/home/user/akana
CONTAINER_NAME=pmcm01
TENANT_ID=atmosphere
TENANT_NAME=atmosphere
TENANT_HOST=ubu1664qa-17.akana.roguewave.com
TENANT_CONSOLE_HOST=ubu1664qa-17.akana.roguewave.com
TENANT_VHOSTS=ubu1664qa-17.akana.roguewave.com
TENANT_EMAIL=administrator@atmosphere
TENANT_PASSWORD=password
TENANT_THEME=hermosa
TENANT_THEME_IMPL=default
DB_NAME=UBU1664QA17
DB_TYPE=oracle
DB_INSTANCE=db1
DB_PORT=1521
DB_ADMIN_USERNAME=SYSTEM
DB_ADMIN_PASSWORD=rd57chv
DB_USERNAME=UBU1664QA17
DB_PASSWORD=password
DB_SERVER=akanaeng-oracle12cr2-1.aws.akana.roguewave.com
DB_DRIVER_LOCATION=file:///home/user/ojdbc8.jar
DB_SCHEMA_TIMEOUT=4000000000</pre>
<p><strong>Note</strong>: The example above references the location for the <strong>ojdbc8.jar</strong> file, needed for an Oracle database. If you're using Oracle, you'd have to have the driver in place and update the path appropriately. If you're using another type of database, you may or may not need to provide a driver. Refer to the <a href="../platform_install/installing_akana_api_platform_v2018.htm#database_drivers">Database drivers</a> section of the installation documentation. There might be other steps you need to have in place for your database. Check the information in the links provided in <a href="#pm_cm_all_overview">PM/CM container: overview</a> above.</p>
<p><a href="#top">back to top</a></p>



<h2 id="pm_cm_script">PM/CM container: automation script</h2>
<p>In this example, the recipe is <strong>pm-cm-all.json</strong> and the properties file is <strong>pm-cm-all.properties</strong>.</p>
<p>Therefore, the script command to run from the /akana/bin folder is:</p>
<pre>./jython.sh -Dorg.slf4j.simpleLogger.logFile=System.out -m akana.container --recipe ../recipes/pm-cm-all.json --props pm-cm-all.properties</pre>
<p>When the recipe has successfully completed, you'll see a message such as the below:</p>
<p><img src="assets/automation03_pm_cm_all_script.jpg" alt="pm-cm-all.json, successful completion" /></p>
<p><a href="#top">back to top</a></p>



<h2 id="pm_cm_results">PM/CM container: results</h2>
<p>You can now access the Akana Administration Console for the container: <strong>{hostname}:{port}/admin/login.html</strong>, as shown below.</p>
<p>You can see from the <strong>Installed Features</strong> page that Community Manager is installed and all pending tasks are complete.</p>
<p><img src="assets/automation03_pm_cm_all_admin_console.jpg" alt="Running the Akana Administration Console for the pm-cm-all container" /></p>
<p>In this example, you can also access the Policy Manager and Community Manager via the browser, as shown below.</p>
<p>Policy Manager:<strong> {hostname}:{port}</strong> (default credentials, used in this example, are administrator/password).</p>
<p><img src="assets/automation03_pm_cm_all_pm.jpg" alt="Running Community Manager for the pm-cm-all container" /></p>
<p>Community Manager: <strong>{hostname}:{port}/atmosphere/#/home/login</strong> (default credentials, used in this example, are administrator@atmosphere/password).</p>
<p><img src="assets/automation03_cm.jpg" alt="Running the developer portal" /></p>
<p><a href="#top">back to top</a></p>



<hr class="divide_hr" />
<h2 id="h_container_nd_cm_all">Creating an ND container:</h2>



<h2 id="nd_cm_all_overview">ND container: overview</h2>
<p>Next, we're going to create the Network Director container. We can then register the ND container so that it can communicate with the PM/CM container.</p>
<ul>
	<li>Recipe: <strong>nd-cm-all.json</strong></li>
	<li>Properties file in this example: <strong>nd-cm-all.properties</strong></li>
</ul>
<p><a href="#top">back to top</a></p>



<h2 id="nd_cm_steps">Steps for setting up an ND container</h2>
<p>The sequence of steps is the same for running any recipe, as described in detail in <a href="#h_container_basic">Creating a basic container</a> above:</p>
<ol>
	<li><a href="#resource_download_short">Download and extract the installation files</a> (once per installation).</li>
	<li><a href="#logging_file_place">Put the logging file in place to enable logging</a> (once per installation).</li>
	<li><a href="#properties_file_set_up">Set up the properties file</a> (per recipe). For this example, define the properties listed in <a href="#nd_cm_properties">Properties file for ND container</a> below.</li>
	<li><a href="#recipe_run">Run the recipe using the automation script</a> (per recipe). For this example, use the script shown in <a href="#nd_cm_script">ND container: automation script</a> below.</li>
</ol>
<p><a href="#top">back to top</a></p>



<h2 id="nd_cm_properties">Properties file for ND container</h2>
<p>Properties file (<strong>nd-cm-all.properties</strong>):</p>
<pre>INSTALL_DIR=/home/user/akana
DEFAULT_PORT=9905
CONTAINER_NAME=nd01
PM_PORT=9900
PM_HOST=ubu1664qa-17.akana.roguewave.com</pre>
<p><a href="#top">back to top</a></p>



<h2 id="nd_cm_script">ND container: automation script</h2>
<p>In this example, the recipe is <strong>nd-cm-all.json</strong> and the properties file is <strong>nd-cm-all.properties</strong>.</p>
<p>Therefore, the script command to run from the /akana/bin folder is:</p>
<pre>./jython.sh -Dorg.slf4j.simpleLogger.logFile=System.out -m akana.container --recipe ../recipes/nd-cm-all.json --props nd-cm-all.properties</pre>
<p>When the recipe has successfully completed, you'll see a message such as the below:</p>
<p><img src="assets/automation03_pm_cm_all_script.jpg" alt="pm-cm-all.json, successful completion" /></p>
<p><a href="#top">back to top</a></p>



<h2 id="nd_cm_results">ND container: results</h2>
<p>You can now access the Akana Administration Console for the ND container. In this example: <strong>{hostname}:9905/admin/login.html</strong>.</p>
<p>You can see from the <strong>Installed Features</strong> page that Network Director is installed and all pending tasks are complete.</p>
<p><img src="assets/automation03_nd_cm_all_admin_console.jpg" alt="Running the Akana Administration Console for the ND container" /></p>
<p>The next step is to register the ND container with PM.</p>
<p><a href="#top">back to top</a></p>



<hr class="divide_hr" />
<h2 id="h_container_nd_register">Registering the ND container:</h2>



<h2 id="nd_register_overview">Registering the ND container: overview</h2>
<p>Next, we're going to run another automation recipe to register the ND container with the PM/CM container.</p>
<ul>
	<li>Recipe: <strong>register-container.json</strong></li>
	<li>Properties file in this example: <strong>register-container.properties</strong></li>
</ul>
<p><a href="#top">back to top</a></p>



<h2 id="nd_register_steps">Steps for registering the ND container</h2>
<p>The sequence of steps is the same for running any recipe, as described in detail in <a href="#h_container_basic">Creating a basic container</a> above:</p>
<ol>
	<li><a href="#resource_download_short">Download and extract the installation files</a> (once per installation).</li>
	<li><a href="#logging_file_place">Put the logging file in place to enable logging</a> (once per installation).</li>
	<li><a href="#properties_file_set_up">Set up the properties file</a> (per recipe). For this example, define the properties listed in <a href="#nd_register_properties">Properties file for registering the ND container</a> below.</li>
	<li><a href="#recipe_run">Run the recipe using the automation script</a> (per recipe). For this example, use the script shown in <a href="#nd_register_script">Registering the ND container: automation script</a> below.</li>
</ol>
<p><a href="#top">back to top</a></p>



<h2 id="nd_register_properties">Properties file for registering the ND container</h2>
<p>Properties file (<strong>register-container.properties</strong>):</p>
<pre>TENANT_ID=atmosphere
ORG_KEY=uddi:soa.com:registryorganization
PM_PORT=9900
CONTAINER_NAME=nd01
INSTALL_DIR=/home/user/akana</pre>
<p>In the above, TENANT_ID and ORG_KEY are both provided. You must provide one of these two, but to provide both is optional. The <strong>ORG_KEY</strong> value can be specific to the tenant.</p>
<p><a href="#top">back to top</a></p>



<h2 id="nd_register_script">Registering the ND container: automation script</h2>
<pre>./jython.sh -Dorg.slf4j.simpleLogger.logFile=System.out -m akana.container --recipe ../recipes/register-container.json --props register-container.properties</pre>
<p><a href="#top">back to top</a></p>



<h2 id="nd_register_results">Registering the ND container: results</h2>
<p>When the recipe has successfully completed, you'll see a message such as the below.</p>
<p><img src="assets/automation03_register_container_success.jpg" alt="Register Container recipe successful" /></p>
<p>Now, log in to Policy Manager on the PM/CM container (in this example, <strong>{hostname}:9900</strong>).</p>
<p>You'll see that the ND container is now registered, as shown below.</p>
<p><img src="assets/automation03_register_container_started.jpg" alt="ND container is registered" /></p>
<p><a href="#top">back to top</a></p>



<hr class="divide_hr" />
<h2 id="h_resource_info">Additional resource information:</h2>


<h2 id="ts_properties_commandline">Providing property values at the command line</h2>
<p>For consistency, it's a good idea to provide properties in a properties file (see <a href="#properties_file_set_up">Set up the properties file</a>).</p>
<p>However, you could also provide properties at the command line when running the script.</p>
<p>Let's say you want to provide two basic properties, INSTALL_DIR and CONTAINER_NAME, which we used to create the basic container in the first example above. Your <strong>recipe.properties</strong> file would look like this:</p>
<pre>INSTALL_DIR=/home/user/akana
CONTAINER_NAME=pm01</pre>
<p>Your command line instruction for running the script would look something like this:</p>
<pre>./jython.sh -Dorg.slf4j.simpleLogger.logFile=System.out -m akana.container 
--recipe ../recipes/bootstrap.json --props bootstrap.properties</pre>
<p>However, you could instead provide the above two properties at the command line. In this example, from the /home/user/akana/bin folder, you'd provide the following at the command line:</p>
<pre>./jython.sh -Dorg.slf4j.simpleLogger.logFile=System.out -DINSTALL_DIR=.. -m akana.container --name pm01 --home .. --recipe ../recipes/bootstrap.json</pre>
<p>In the above:</p>
<ul>
	<li><strong>./jython.sh</strong>
<p>Calls the jython script</p></li>
	<li><strong>-Dorg.slf4j.simpleLogger.logFile=System.out</strong>
		<p>Sets the logging. See <a href="automation_ref.htm#simple_logger">Simple Logger</a>.</p>
	</li>
	<li><strong>-DINSTALL_DIR=..</strong>
		<p>Sets the INSTALL_DIR property value to one folder up (the /home/user/akana folder in this example)</p></li>
	<li><strong>-m akana.container</strong>
<p>Specifies the module being run</p></li>
	<li><strong>--name pm01</strong>
		<p>Specifies that the script should create a container named <strong>pm01</strong></p></li>
	<li><strong>--home ..</strong>
<p>Sets the home directory</p></li>
	<li><strong>--recipe ../recipes/bootstrap.json</strong>
<p>Specifies the recipe to run</p></li>
</ul>
<p><a href="#top">back to top</a></p>



<h2 id="resource_download_extract">Downloading and extracting the installation files</h2>
<p>Instructions for downloading and extracting the files are in the installation documentation: for example, for 2018.0.x, see <a href="../platform_install/installing_akana_api_platform_v2018.htm">Installing the Akana API Platform 2018.0.x</a> (<a href="../platform_install/installing_akana_api_platform_v2018.htm#gather_zip_files">Step 1</a> and <a href="../platform_install/installing_akana_api_platform_v2018.htm#unzip_files">Step 2</a>). Abbreviated instructions are below.</p>
<h4 id="files_download">The download files</h4>
<p>The examples in this document create containers for version 2018.0.7. The files for this example are listed below.</p>
<table class="doctable">
	<thead>
		<tr>
			<th>This file...</th>
			<th>Installs...</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>akana-platform-linux-jre-2018.0.0.19.zip</td>
			<td>The base files for the major version of the Akana Platform, the underlying infrastructure to all Akana products.</td>
		</tr>
		<tr>
			<td>akana-platform-update-cumulative-2018.0.6.zip</td>
			<td>The latest update to the Akana Platform, including all previous updates since the release of the major version above.</td>
		</tr>
		<tr>
			<td>akana-api-platform-2018.0.0.396.zip</td>
			<td>The base files for the major version of the Akana API Platform, the API management product, which runs on the underlying Akana Platform.</td>
			</tr>
		<tr>
			<td>akana-api-platform-update-cumulative-2018.0.7.zip</td>
			<td>The latest update to the Akana API Platform, including all previous updates since the release of the major version above.</td>
			</tr>
	</tbody>
</table>
<p>The illustration below shows copying the files from another location so that the four files are in the <strong>akana</strong> directory.</p>

<h4 id="files_extract">Extracting the files</h4>
<p>In the /home/user/akana folder, unzip the files in this sequence, always choosing to overwrite existing files if they already exist:</p>
<ul>
	<li>
		<pre>unzip -o akana-platform-linux-jre-2018.0.0.19.zip</pre>
	</li>
	<li>
		<pre>unzip -o akana-platform-update-cumulative-2018.0.6.zip</pre>
	</li>
	<li>
		<pre>unzip -o akana-api-platform-2018.0.0.396.zip</pre>
	</li>
	<li>
		<pre>unzip -o akana-api-platform-update-cumulative-2018.0.7.zip</pre>
	</li>
</ul>
<p><a href="#top">back to top</a></p>



<h2 id="cluster_support">Cluster support</h2>
<p>To define your cluster, you can use automation recipes to capture the configuration of an existing container, as covered in <a href="automation_ref.htm#running_recipes_remotely">Running Recipes Remotely</a> and <a href="automation_ref.htm#recipes_extracting_properties">Extracting and Analyzing Recipes</a>. Then, you can run an automation recipe against each member of the cluster.</p>
<p>The approach is the same as running a recipe remotely against any container, whether the container is clustered or not.</p>
<p>Some advantages of using automation for managing clusters:</p>
<ul>
	<li>This approach  supports the trend towards &quot;configuration as code&quot;&#8212;recipes and configuration can be managed as first-class artifacts.</li>
	<li>Recipes can be executed remotely, allowing for fine-grained control of cluster members.</li>
	<li>The use of recipes allows configuration tasks to be automated across the cluster, in addition to remote management of container configuration properties.</li>
</ul>
<p><a href="#top">back to top</a></p>



<h2 id="recipe_create_smtp">Setting up an SMTP email host using an automation recipe</h2>
<h4 class="stamp">Valid in Version: 2020.2.0 and later.</h4>
<p>The example below shows how you can configure an SMTP email host by using an automation recipe rather than using the Policy Manager user interface.</p>
<p>Navigation to complete this task in Policy Manager: <strong>Configure</strong> &gt; <strong>Email</strong> &gt; <strong>Modify SMTP Email Host</strong>. For more information, see <a href="../../ag/notifications/notifications.htm#proc_smtp_set_up">To set up the SMTP Email Host</a>.</p>
<p>To configure an SMTP email host, via the user interface or via a recipe, you'll need the values shown below.</p>
<table class="doctable">
	<thead>
		<tr>
			<th>In the user interface...</th>
			<th>In the recipe...</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>Host name or IP address</td>
			<td>SMTP_HOST</td>
		</tr>
		<tr>
			<td>Port</td>
			<td>SMTP_PORT</td>
		</tr>
		<tr>
			<td>SSL Required (yes/no)</td>
			<td>SMTP_SSL (true/false, default is false)</td>
		</tr>
		<tr>
			<td>Use STARTTLS (yes/no)</td>
			<td>SMTP_TLS (true/false, default is false)</td>
		</tr>
		<tr>
			<td>From Address</td>
			<td>SMTP_FROM</td>
		</tr>
		<tr>
			<td>Authenticated (yes/no)</td>
			<td>SMTP_AUTH</td>
		</tr>
		<tr>
			<td><p>If Authenticated=yes:</p>
<p>			Username and Password</p></td>
			<td><p>SMTP_USERNAME</p>
			<p>SMTP_PASSWORD</p></td>
		</tr>
	</tbody>
</table>
<p>To do this via a recipe you'll need the following assets:</p>
<ul>
	<li>The recipe: <strong>smtp-settings.json</strong>, located in the /recipes/tasks folder in your installation files.</li>
	<li>A properties file with the properties and values set up. See the example <strong>smtp.properties</strong> file below.</li>
</ul>
<p>Follow these basic steps:</p>
<ol>
	<li>Create the properties file. For an example, see <a href="#recipe_smtp_properties">Creating an SMTP server: sample properties file</a> below. If needed, add additional values from the table above (for example, port number).</li>
	<li>Run the recipe at the command line. See <a href="#recipe_smtp_running">Creating an SMTP server: running the recipe</a> below.</li>
	<li>Review the results in Policy Manager. See <a href="#recipe_smtp_result">Creating an SMTP server: viewing the result in Policy Manager</a> below.</li>
</ol>

<h4 id="recipe_smtp_properties">Creating an SMTP server: sample properties file</h4>
<p>The content of the <strong>smtp.properties</strong> file used in this example is shown below.</p>
<pre>SMTP_HOST=akana-qa-25.aws.akana.roguewave.com
SMTP_FROM=recipetest@automation.com
SMTP_AUTH=true
SMTP_USERNAME=smtp-user
SMTP_PASSWORD=mypassword</pre>

<h4 id="recipe_smtp_running">Creating an SMTP server: running the recipe</h4>
<p>The command to run this recipe is shown below.</p>
<pre>./jython.sh -m akana.recipe --recipe ../recipes/tasks/smtp-settings.json --url http://akana-qa-41.aws.akana.roguewave.com:7900 --user administrator --password mypassword --props ./smtp.properties</pre>

<h4 id="recipe_smtp_result">Creating an SMTP server: viewing the result in Policy Manager</h4>
<p>Log in to Policy Manager and go to <strong>Configure</strong> &gt; <strong>Email</strong> &gt; <strong>Modify SMTP Email Host</strong>. The result of running the example in this use case is shown below.</p>
<p><img src="assets/automation_result_smtp_server.png" alt="Setting up an SMTP server via automation -- viewing the results in Policy Manager."/></p>
<p><a href="#top">back to top</a></p>



<!--<p>{<span class="apidoc_red">Note GW 10/4/19 ATMO-29930: GW says we could add examples to this automation doc page, set of smaller tasks: how do I turn on scheduler, turn off scheduler, turn on scheduled job, how do I add a health check, how do I register a Gateway. The example below, to register an ND container, is moved from the upgrade doc to here and we will add the other tasks to this section in the future.</span></p>-->



<hr class="divide_hr" />



<h2 id="related_topics">Related Topics</h2>
<div class="relatedlinks" id="install"><!-- #BeginLibraryItem "/Library/relatedtopics_install.lbi" -->
<ul>
	<li><a href="../upgrade/upgrading_akana_api_platform_all.htm">Upgrading the Akana API Platform (all versions)</a></li>
	<li><a href="../upgrade/upgrading_min_downtime.htm">Use Case: Upgrading with Minimum Downtime</a></li>
	<li><a href="../upgrade/upgrading_micro.htm">Minor-Version Update Notes</a></li>
</ul>
<ul>
	<li><a href="../platform_install/installing_akana_api_platform_all.htm">Installing the Akana API Platform (all versions)</a></li>
	<li><a href="../platform_install/implementation_planning.htm">Planning Your Implementation</a></li>
	<li><a href="../platform_install/install_cm_jython_script.htm">Installation Jython Script</a></li>
	<li><a href="../elasticsearch/install_es_config.htm">Installing and Configuring Elasticsearch</a></li>
	<li><a href="../elasticsearch/install_es_secure_tc.htm">Configuring Elasticsearch with Security</a></li>
</ul><!-- #EndLibraryItem --></div>