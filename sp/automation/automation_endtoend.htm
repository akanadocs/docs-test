---
layout: page
title: Automation End-to-End Example
description: A simple end-to-end example of using automation to install the platform.
product: sp
category: ref
weight: 05
sub-nav-class: Automation
type: page
nav-title: Automation End to End
---
<h2 id="top">Automation End-to-End Example</h2>
<p>A simple end-to-end example of using automation to install the platform.</p>
<p><a href="automation_ref.htm" class="button secondary">Automation Reference</a> 
<a href="../platform_install/installing_akana_api_platform.htm" class="button secondary">Installing the Akana API Platform 2018.0.x</a></p>

<h5 class="stamp">Supported Platforms: 2018.0.x</h5>
<div class = "divider1"></div>



<h3 style="color: gray;">Table of Contents</h3>

<h5 style="color: gray;"><a href="#h_overview">Overview</a></h5>
<ol class="table_of_contents">
	<li><a href="#overview_e2e">Overview of end-to-end scenario</a></li>
</ol>

<h5 style="color: gray;"><a href="#h_container_basic">Adding a basic PM container</a></h5>
<ol class="table_of_contents">
	<li><a href="#download_extract">Download and extract the installation files</a></li>
	<li><a href="#logging_file_place">Put the logging file in place to enable logging</a></li>
	<li><a href="#properties_file_set_up">Set up the properties file</a></li>
	<li><a href="#variables_export">Export JYTHONPATH and JAVA_HOME variables</a></li>
	<li><a href="#recipe_run">Run the recipe using the automation script</a></li>
	<li><a href="#run_in_browser">Run the Akana Administration Console in the browser</a></li>
	<li><a href="#s01_container_basic">Creating a basic container using recipes</a></li>
	<li><a href="#s02_container_gateway">Adding a Gateway to the basic container</a></li>
	<li><a href="#s03_container_cm">Adding Community Manager to create a full deployment</a></li>
</ol>

<h5 style="color: gray;"><a href="#h_resource_info">Additional Resource Information:</a></h5>
<ol class="table_of_contents">
	<li><a href="#ts_properties_commandline">Providing property values at the command line</a></li>
	<li><a href="#ts_automation">Running automation recipes: troubleshooting</a></li>
</ol>
<div class = "divider1"></div>



<h3 id="h_resource_info">Overview:</h3>



<h3 id="overview_e2e">Overview of end-to-end scenario</h3>
<p>In this end-to-end scenario we will create a basic container using automation, at the Linux command line. The scenario includes:</p>
<ol>
	<li>Downloading and unzipping the installation files</li>
	<li>Setting up specific files, variables, and properties so that the script will work correctly. This includes:
		<ul>
			<li>Putting the logging file in place to enable logging.</li>
			<li>Writing the properties file.</li>
		</ul>
		</li>
	
	<li>Using the automation script to run a basic recipe to create the container.</li>
	<li>Opening the Akana Administration Console user interface for the container in the browser.</li>
</ol>
<p>Notes about this scenario:</p>
<ul>
	<li>This example uses MobaXTerm to install remotely on a Linux machine. There are two sessions going: SSH and SFTP.</li>
	<li>In this example, the user home directory is /user/home.</li>
	<li>In this example, the install dir is /user/home/akana.</li>
	<li>You can encrypt passwords. This example does not use encryption.</li>
</ul>
<p><a href="#top">back to top</a></p>



<div class = "divider1"></div>
<h3 id="h_container_basic">Adding a basic container:</h3>



<h3 id="download_extract">Download and extract the installation files</h3>
<p>Brief instructions are below:</p>
<ol>
	<li><a href="#files_download">Download files</a></li>
	<li><a href="#files_extract">Extract files</a></li>
</ol>
<p>For detailed instructions on downloading and extracting the files, refer to the sections in the installation documentation:</p>
<ul>
	<li><a href="../platform_install/installing_akana_api_platform.htm#gather_zip_files">Step 1: Gather ZIP file or files and download to a temporary folder</a></li>
	<li><a href="../platform_install/installing_akana_api_platform.htm#unzip_files">Step 2: Extract installation files in the correct sequence</a></li>
</ul>

<h5 id="files_download">Download files</h5>
<p>For this example, we're going to create a 2018.0.7 basic container. As the starting point, download the four files listed below.</p>
<table class="doctable">
	<thead>
		<tr>
			<th>This file...</th>
			<th>Installs...</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>akana-platform-linux-jre-2018.0.0.19.zip</td>
			<td>The base files for the major version of the Akana Platform, the underlying infrastructure to all Akana products.<a href="site_admin_config.htm#how_do_i_enable_markdown_for_board_items"></a></td>
		</tr>
		<tr>
			<td>akana-platform-update-cumulative-2018.0.6.zip</td>
			<td>The latest update to the Akana Platform, including all previous updates since the release of the major version above.<a href="site_admin_config.htm#how_do_i_enable_markdown_for_board_items"></a></td>
		</tr>
		<tr>
			<td>akana-api-platform-2018.0.0.396.zip</td>
			<td>The base files for the major version of the Akana API Platform, the API management product, which runs on the underlying Akana Platform.<a href="site_admin_config.htm#how_do_i_enable_markdown_for_board_items"></a></td>
			</tr>
		<tr>
			<td>akana-api-platform-update-cumulative-2018.0.7.zip</td>
			<td>The latest update to the Akana API Platform, including all previous updates since the release of the major version above.<a href="site_admin_config.htm#how_do_i_enable_markdown_for_board_items"></a></td>
			</tr>
	</tbody>
</table>
<p>The illustration below shows copying the files from another location so that the four files are in the <strong>akana</strong> directory.</p>
<p><img src="assets/automation01_basic_01.jpg" alt="Setting up the files" /></p>

<h5 id="files_extract">Extract files</h5>
<p>In the /home/user/akana folder, unzip the files in this sequence, always choosing to overwrite existing files if they already exist:</p>
<ul>
	<li>
		<pre>unzip -o akana-platform-linux-jre-2018.0.0.19.zip</pre>
	</li>
	<li>
		<pre>unzip -o akana-platform-update-cumulative-2018.0.6.zip</pre>
	</li>
	<li>
		<pre>unzip -o akana-api-platform-2018.0.0.396.zip</pre>
	</li>
	<li>
		<pre>unzip -o akana-api-platform-update-cumulative-2018.0.7.zip</pre>
	</li>
</ul>
<p><a href="#top">back to top</a></p>



<h3 id="logging_file_place">Put the logging file in place to enable logging</h3>
<p>When running a recipe, logging is very helpful to track down problems or monitor the progress of a recipe. The recipe scripts use <a href="http://docs.akana.com/docs-test/ag/glossary_pm_nd.htm#gl_pm_slf4j">SLF4J</a> logging, and since no default implementation is shipped with the scripts, it is sometimes necessary to provide one. To deploy a logger implementation, you'd need to copy the file to a location accessible to the automation script.</p>
<p>So, the next step is to copy the <strong>slf4j-simple-1.7.19.jar</strong> logger file, which is part of the installation, to the $INSTALL_DIR/lib/script folder.</p>
<p>For this example, from the/home/akana folder, run the following:</p>
<pre>cp lib/ext/slf4j-simple-1.7.19.jar lib/script/</pre>
<p><a href="#top">back to top</a></p>



<h3 id="properties_file_set_up">Set up the properties file</h3>
<p>For this example, we're going to define a few key properties via a properties file, which the automation script will reference.</p>
<p>The filename and location don't matter as long as you reference the file correctly in the automation script. In this example, we're creating a file named <strong>recipe.properties</strong> in the \bin directory.</p>
<p>First, in the /home/user/akana/bin folder, create the properties file. For example:</p>
<pre>vi recipe.properties</pre>
<p>Add the below contents to the file:</p>
<pre>INSTALL_DIR=/home/user/akana
CONTAINER_NAME=pm01
DEFAULT_PORT=9900</pre>
<p>Save the file.</p>
<p><strong>Note</strong>: For information about how you could provide these properties at the command line, see <a href="#ts_properties_commandline">Providing property values at the command line</a> below.</p>

<h5 id="proc_properties_values">Determining values for properties used in the recipe</h5>
<p>The recipes needs certain values, such as the name of your installation directory and the name of the container you're creating.</p>
<p>In a manual installation, you provide these values in the installation wizard user interface. When using a recipe you can provide them:</p>
<ol>
	<li>In a properties file</li>
	<li>System properties -- usually passed in at the command line using <strong>-D</strong>.</li>
	<li>As environment variables</li>
</ol>
<p>In this example of creating a basic container, the values are defined in a properties file.</p>
<p>There are two scenarios for property values:</p>
<ul>
	<li>Variables that have no default: if the value is not provided the recipe will fail.
	<p>Examples: INSTALL_DIR, CONTAINER_NAME.</p></li>
	<li>Variables that have default values defined in the recipe. If you want to use a different value you'll have to provide it. If not, the default value is used.
	<p>Example: In the <a href="assets/bootstrap.json" target="_blank">bootstrap.json</a> recipe, the default port is defined as 9900 (line 16). In this example of creating a basic container, we explicitly specify port 9900 in the properties file; however, since port 9900 is the default, it isn't really necessary to specify a port.</p></li>
</ul>
<p><a href="#top">back to top</a></p>


<h3 id="variables_export">Export JYTHONPATH and JAVA_HOME variables</h3>
<p>You must set these variables so that the script finds the files it needs to run correctly.</p>
<p>From the /akana/user/bin folder, run these two commands:</p>
<ul>
	<li><pre>export JYTHONPATH=../scripts/Lib</pre></li>
	<li><pre>export JAVA_HOME=../jre</pre></li>
</ul>
<p><a href="#top">back to top</a></p>



<h3 id="recipe_run">Run the recipe using the automation script</h3>
<p>In this example, the properties file is <strong>recipe.properties</strong>.</p>
<p>Therefore, the script command is (line break added for display purposes):</p>
<pre>./jython.sh -Dorg.slf4j.simpleLogger.logFile=System.out -m akana.container 
--recipe ../recipes/bootstrap.json --props recipe.properties</pre>
<p>In the above:</p>
<ul>
	<li><strong>./jython.sh</strong>
<p>Calls the jython script</p></li>
	<li><strong>-Dorg.slf4j.simpleLogger.logFile=System.out</strong>
		<p>Sets the logging</p></li>
	<li><strong>-m akana.container</strong>
<p>Specifies the module being run</p></li>
	<li><strong>--home ..</strong>
<p>Sets the home directory</p></li>
	<li><strong>--recipe ../recipes/bootstrap.json</strong>
<p>Specifies the recipe to run</p></li>
	<li><strong>--props recipe.properties</strong>
<p>Tells the script to use a properties file and specifies the filename and location</p></li>
</ul>
<p>The result of running the automation script is shown below.</p>
<p><img src="assets/automation01_basic_02.jpg" alt="Running the script" /></p>
<p>You can see that the container was successfully created and started, as indicated above.</p>
<p><a href="#top">back to top</a></p>



<h3 id="run_in_browser">Run the Akana Administration Console in the browser</h3>
<p>You can now access the Akana Administration Console via the browser. In this example, the URL is:</p>
<pre>ubu1664qa-17.akana.roguewave.com:9900/admin/login.html</pre>
<p>Log in, using the default username and password (administrator/password) unless you specified a different username and password.</p>
<p>To verify the container name, after login, go to the System tab. The container name is displayed in the panel header, as shown below. In this example the container name is pm01 (see <a href="#properties_file_set_up">Set up the properties file</a> above).</p>
<p><img src="assets/automation01_basic_03_admin_console.jpg" alt="Running the Akana Administration Console for the container" /></p>
<p>You've now created a basic container using automation. This is the equivalent of completing Step 3 in the manual installation instructions (see <a href="../platform_install/installing_akana_api_platform.htm#run_configurator_pm">Step 3: Run Configurator to create the first container</a>).</p>
<p><a href="#top">back to top</a></p>



<!--<div class = "divider1"></div>
<h3 id="xxx">xxx:</h3>-->




<h3 id="s02_container_gateway">Adding a Gateway to the basic container</h3>
<p>xxx</p>
<p>Properties file:</p>
<pre>INSTALL_DIR=/home/user/akana
PRODUCT_HOME=/home/user/akana
CONTAINER_NAME=pm01
TENANT_ID=atmosphere
TENANT_NAME=atmosphere
TENANT_HOST=ubu1664qa-17.akana.roguewave.com
TENANT_CONSOLE_HOST=ubu1664qa-17.akana.roguewave.com
TENANT_VHOSTS=ubu1664qa-17.akana.roguewave.com
TENANT_EMAIL=administrator@atmosphere
TENANT_PASSWORD=password
TENANT_THEME=hermosa
TENANT_THEME_IMPL=default
DB_NAME=UBU1664QA17
DB_TYPE=oracle
DB_INSTANCE=db1
DB_PORT=1521
DB_ADMIN_USERNAME=SYSTEM
DB_ADMIN_PASSWORD=rd57chv
DB_USERNAME=UBU1664QA17
DB_PASSWORD=password
DB_SERVER=akanaeng-oracle12cr2-1.aws.akana.roguewave.com
DB_DRIVER_LOCATION=file:///home/user/ojdbc8.jar
DB_SCHEMA_TIMEOUT=3000000000</pre>
<p>Your command line instruction for running the script would look something like this:</p>
<pre>./jython.sh Dorg.slf4j.simpleLogger.logFile=System.out -m akana.container --recipe ../recipes/pm-cm-all.json --props recipe.properties</pre>
<p><a href="#top">back to top</a></p>



<h3 id="s03_container_cm">Adding Community Manager to create a full deployment</h3>
<p>For later: pm-cm-all.json.</p>
<p><a href="#top">back to top</a></p>



<!--<h3 id="recipes_common_scenarios">Common recipe scenarios</h3>
<p>Use the table below to determine which recipes to use for common installation and configuration scenarios.</p>
<table class="doctable">
	<thead>
		<tr>
			<th>To do this...</th>
			<th>Use these recipes...</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>xxx</td>
			<td>xxx</td>
		</tr>
		<tr>
			<td>xxx</td>
			<td>xxx</td>
		</tr>
	</tbody>
</table>
<p><a href="#top">back to top</a></p>-->



<div class = "divider1"></div>
<h3 id="h_overview">Additional Resource Information:</h3>


<h3 id="ts_properties_commandline">Providing property values at the command line</h3>
<p>For consistency, it's a good idea to provide properties in a properties file (see <a href="#properties_file_set_up">Set up the properties file</a>).</p>
<p>However, you could also provide properties at the command line when running the script.</p>
<p>Let's say you want to provide two basic properties, INSTALL_DIR and CONTAINER_NAME, which we used to create the basic container in the first example above. Your <strong>recipe.properties</strong> file would look like this:</p>
<pre>INSTALL_DIR=/home/user/akana
CONTAINER_NAME=pm01</pre>
<p>Your command line instruction for running the script would look something like this:</p>
<pre>./jython.sh -Dorg.slf4j.simpleLogger.logFile=System.out -m akana.container 
--recipe ../recipes/bootstrap.json --props recipe.properties</pre>
<p>However, you could instead provide the above two properties at the command line. In this example, from the /home/user/akana/bin folder, you'd provide the following at the command line:</p>
<pre>./jython.sh -Dorg.slf4j.simpleLogger.logFile=System.out -m akana.container --name pm01 --home .. --recipe ../recipes/bootstrap.json</pre>
<p>In the above:</p>
<ul>
	<li><strong>./jython.sh</strong>
<p>Calls the jython script</p></li>
	<li><strong>-Dorg.slf4j.simpleLogger.logFile=System.out</strong>
		<p>Sets the logging</p></li>
	<li><strong>-m akana.container</strong>
<p>Specifies the module being run</p></li>
	<li><strong>--name pm01</strong>
		<p>Specifies that the script should create a container named <strong>pm01</strong></p></li>
	<li><strong>--home ..</strong>
<p>Sets the home directory</p></li>
	<li><strong>--recipe ../recipes/bootstrap.json</strong>
<p>Specifies the recipe to run</p></li>
</ul>
<p><a href="#top">back to top</a></p>



<h3 id="ts_automation">Running automation recipes: troubleshooting</h3>
<p>This section provides information about errors you might run into when running automation, and possible reasons/resolution.</p>
<ul>
	<li><a href="#ts_auto_typeerror">Problem: TypeError</a></li>
</ul>

<h5 id="ts_auto_typeerror">Problem: TypeError</h5>
<p>You might encounter a TypeError such as the example shown below if you create the properties file on Windows. When running automation on Linux, it's best to create the properties file on Linux.</p>
<pre>TypeError: cannot concatenate 'unicode' and 'NoneType' objects</pre>
<p><a href="#top">back to top</a></p>

<div class = "divider1"></div>



<h3 id="related_topics">Related Topics</h3>
<div class="relatedlinks" id="install">
<ul>
	<li><a href="../upgrade/upgrading_akana_api_platform_84_2018.htm">Upgrading Akana API Platform from Version 8.4x to Version 2018.0.x</a></li>
	<li><a href="../upgrade/upgrading_akana_api_platform_82_84.htm">Upgrading Akana API Platform from Version 8.2 to Version 8.4x</a></li>
	<li><a href="../upgrade/upgrading_min_downtime.htm">Use Case: Upgrading with Minimum Downtime</a></li>
	<li><a href="../upgrade/upgrading_micro.htm">Minor-Version Update Notes</a></li>
</ul>
<ul>
	<li><a href="../platform_install/installing_akana_api_platform.htm">Installing the Akana API Platform 2018.0.0</a></li>
	<li><a href="../platform_install/installing_akana_api_platform_v84.htm">Installing the Akana API Platform 8.4x</a></li>
	<li><a href="../platform_install/installing_akana_api_platform_v82.htm">Installing the Akana API Platform 8.2x</a></li>
	<li><a href="../platform_install/implementation_planning.htm">Planning Your Implementation</a></li>
	<li><a href="../platform_install/install_cm_jython_script.htm">Installation Jython Script</a></li>
	<li><a href="../platform_install/install_es_config.htm">Installing and Configuring Elasticsearch</a></li>
	<li><a href="../platform_install/install_es_secure_tc.htm">Configuring Elasticsearch with security</a></li>
</ul>
</div>