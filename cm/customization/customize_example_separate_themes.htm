---
layout: page
title: Customization Use Case
description: Community Manager Customization Use Case: Separating the Developer Portal and Admin Portal Themes.
product: cm
category: ref
sub-nav-class: Customization
weight: 10
type: page
nav-title: Customization Example - Separate Themes
---
<h1 id="top">Community Manager Customization Use Case: Separating the Developer Portal and Admin Portal Themes </h1>
<p>Use case describing the steps required to separate a customized Developer theme from the theme being used on the Admin Portal.</p>
<hr class="divide_hr" />
	
	
	
<h2 style="color: gray;">Table of Contents</h2>
<ol class="table_of_contents">
	<li><a href="#overview">Overview</a></li>
	<li><a href="#backup_prep">Backup and Preparation</a></li>
	<li><a href="#changethemes">Change the Themes</a></li>
	<li><a href="#custom_updates">Customization Updates</a></li>
	<li><a href="#email_templates">Email Templates</a></li>
</ol>
<hr class="divide_hr" />



<h2 id="overview">Overview</h2>
<p>The following instructions describe the steps to take in a sample use case where:</p>
<ul>
	<li>There are two themes, one for developers (Developer) and one for admins (Admin Portal).</li>
	<li>Customization is in place.</li>
	<li>You want to separate out the Developer theme, which is customized, and the Admin Portal theme, which will now use the Hermosa Theme template without customization.</li>
</ul>
<p>These instructions apply to the Akana developer portal, 2019.1.x release.</p>
<p><strong>Note</strong>: It's important that the Admin Portal is accessible at all times. If possible, assign the IP address for the Admin Portal to the default theme, so that if there are any issues when modifying the theme, the Admin Portal will be accessible.</p>
<p>If the developer portal is accessible using the IP address, modify the virtual host for the Admin portal on the default theme.</p>
<p>{<span class="apidoc_red">CR01: don't understand the above. We said we're using Hermosa Theme. By Default Theme, does this mean Hermosa here?</span>}</p>
<p>The steps below describe how to separate out the two themes for each of the portals.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="backup_prep">Backup and Preparation</h2>
<p>The first step is preparation so that if anything goes wrong you can revert to the previous state. Follow the steps below.</p>
<ol>
	<li>Log in to the Admin Portal.</li>
	<li>Go to <strong>Admin</strong> &gt; <strong>Config</strong> &gt; <strong>Resources</strong>.</li>
	<li>In the <strong>Resources</strong> section, click <strong>File Manager</strong>. Download the customization files to a safe location.	</li>
	<li>In <strong>Admin</strong> &gt; <strong>Site</strong>:
<ul>
			<li>Do <strong>not</strong> delete the existing Default and Hermosa themes.</li>
			<li>For the Default Theme that's used for the Admin Portal, change the name in the <strong>Virtual Host/Vanity Hostnames column</strong>.</li>
		</ul>
		</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="changethemes">Change the Themes</h2>
<p>When changing themes, do one theme at a time. Make sure you always have access to the Developer theme. {<span class="apidoc_red">CR 02: in the first section we said make sure they always have access to the Admin Portal. Which is more important?</span>}</p>
<ol>
	
	<li>Log in to the Admin Portal.</li>
	<li>Go to the <strong>Admin</strong> > <strong>Site</strong> page.</li>
	<li>Add a new custom theme for the Developer Portal:
		<ul>
			<li>Enter a Custom Theme Name: <strong>developer</strong> (all lower case is the naming convention).</li>
			<li>Select the Theme Name: hermosa.</li>
			<li>Enter all the virtual host details for the Developer Portal.</li>
			<li>Enter the Console Address for the Developer Portal.</li>
			<li>Enter a Site Title and Description.</li>
			</ul>
		<p>An example of the configuration for the Developer Portal is shown below: {<span class="apidoc_red">CR03. In the  Add Theme overlay, the helper text and the tooltip both say to include the  trailing backslash at the end. But your examples don&rsquo;t include that. Does it  matter?</span>} </p>
		<p><img src="uc_separate_themes/custom_eg_create_theme_developer.png"alt="adding the Developer theme"/></p>
	</ul></li>
	<li>Add a theme for the Admin Portal:
	<ul>
	<ul>
		<li>Enter a Custom Theme Name: <strong>admin</strong> (all lower case is the naming convention).</li>
		<li>Select the Theme Name: hermosa.</li>
		<li>Enter all the virtual host details for the Admin Portal.</li>
		<li>Enter the Console Address for the Admin Portal.</li>
		<li>Enter a Site Title and Description.</li>
	</ul>
	<p>An example of the configuration for the Admin Portal is shown below:</p>
	<p><img src="uc_separate_themes/custom_eg_create_theme_admin.png"alt="adding the Admin theme"/></p></ul></li>
	<li>For the Admin Portal, add the directories for the customization files:
		<ul>
			<li>Go to <strong>Admin</strong> &gt; <strong>Config</strong> &gt; <strong>Resources</strong>.</li>
			<li>In the <strong>Resources</strong> section, click <strong>File Manager</strong>. Navigate to the <strong>theme</strong> directory.</li>
			<li>If the hermosa folder exists, rename this folder to <strong>developer</strong> (the same as the theme created above).</li>
			<li>If the hermosa folder does not exist, create a theme/developer folder structure and upload the customization zip file that you downloaded in <a href="#backup_prep">Backup and Preparation</a> above.</li>
			<li>If the hermosa folder did not exist, rebuild styles for the developer theme only.</li>
			</ul>
	<p>After creating the additional themes, the Site Themes should look similar to the below:</p>
	<p><img src="uc_separate_themes/custom_eg_themes_list.png"alt="themes list"/></p>
	</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="custom_updates">Customization Updates</h2>
<p>If there is any new customization to be uploaded to the portal, add the updates to the folders for the <strong>developer</strong> and <strong>admin</strong> themes only. Then, rebuild styles only for the theme that has been customized. For example, if you add new files to the developer folder, rebuild styles only for the developer theme, as shown below.</p>
<p><img src="uc_separate_themes/custom_eg_rebuild_styles.png"alt="rebuilding the styles for a theme"/></p>
<p>In this use case, since the Admin Portal is using the Akana Hermosa theme, customization is not required.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="email_templates">Email Templates</h2>
<p>In this use case, since both the Developer and the Admin portals are using the Hermosa theme, not Default theme, you will also need to add the email template variables, to the THEME_IMPL_PROPERTIES table. Each of the templates that exist should be inserted for a THEMEIMPL set to hermosa.</p>
<p>{<span class="apidoc_red">CR04: is this only because this customer has customized email templates? Or is this general to setting up custom themes?</span>}</p>
<p>An example query is shown below. Run this query to insert all the values for the hermosa theme.</p>
<pre>insert into THEME_IMPL_PROPERTIES (THEMEIMPL,PROPERTY_NAME,PROPERTY_VALUE) VALUES ('hermosa','home.login.registration.path','home/login/{registration.code}');</pre>
<p>An example of the variables to update, in the database, is shown below.</p>
<p><img src="uc_separate_themes/custom_eg_update_email_templates.png" alt="adding the email template variables"/></p>
<p><a href="#top">Back to top</a></p>