---
layout: page
title: Customization Reference Guide
description: A reference guide for customizing Akana Community Manager.
product: cm
category: ref
sub-nav-class: Customization
weight: 02
type: page
nav-title: Detailed Customization Document
---
<h1 id="top">Detailed Customization Document</h1>
<p>A reference guide for customizing Akana Community Manager.</p>
<h4 class="stamp">Valid in Version: 2020.2.0 and later</h4>
<hr class="divide_hr" />



<h2 style="color: gray;">Table of Contents</h2>
<ol class="table_of_contents">
	<li><a href="#s01">Tenants</a></li>
	<li><a href="#s02">Themes</a>
	<ol>
		<li><a href="#s02_01">What is a platform theme?</a></li>
		<li><a href="#s02_02">What themes are available?</a></li>
		<li><a href="#s02_03">How do I add a theme?</a></li>
		<li><a href="#s02_04">How do I extend (clone) a platform theme?</a></li>
		<li><a href="#s02_05">How do I configure values for a theme?</a></li>
	</ol>
	</li>
	<li><a href="#s03">Customization Basics</a>
	<ol>
		<li><a href="#s03_01">Starter Files</a></li>
		<li><a href="#s03_02">Uploading Content</a></li>
		<li><a href="#s03_03">Uploading Resources</a></li>
	</ol>
	</li>
	<li><a href="#s04">Customizing Site Pages</a>
	<ol>
		<li><a href="#s04_01">Landing Page</a></li>
		<li><a href="#s04_02">Login Entry Page</a>
		<ol>
			<li><a href="#s04_02_01">Step 1: Determine the page you want users to be taken to</a></li>
			<li><a href="#s04_02_02">Step 2: Generate the starter customization files and download the customization ZIP file</a></li>
			<li><a href="#s04_02_03">Step 3: Set up a custom_en-us.json file</a></li>
			<li><a href="#s04_02_04">Step 4: Upload the custom_en-us.json file to the developer portal</a></li>
			<li><a href="#s04_02_05">Step 5: Test</a></li>
		</ol>
		</li>
		<li><a href="#s04_03">Support Page</a></li>
		<li><a href="#s04_04">API Documentation</a></li>
		<li><a href="#s04_05">Agreements</a>
		<ol>
			<li><a href="#s04_05_01">Signup Agreement</a></li>
			<li><a href="#s04_05_02">API Agreement</a></li>
			<li><a href="#s04_05_03">License Agreement</a></li>
		</ol>
		</li>
	</ol>
	</li>
	<li><a href="#s05">Customizing Page Content</a>
	<ol>
		<li><a href="#s05_01">Logo</a></li>
		<li><a href="#s05_02">Favicon</a></li>
		<li><a href="#s05_03">Left Menu</a>
		<ol>
			<li><a href="#s05_03_01">Adding a link to the left menu in Hermosa theme</a></li>
			<li><a href="#s05_03_02">Removing a link from the left menu in Hermosa theme</a></li>
			<li><a href="#s05_03_03">Adding a link to the left menu in Bonita theme</a></li>
			<li><a href="#s05_03_04">Removing a link from the left menu in Bonita theme</a></li>
		</ol>
	</li>
	<li><a href="#s05_04">Header</a>
	<ol>
		<li><a href="#s05_04_01">Adding a link to the header in Hermosa theme</a></li>
		<li><a href="#s05_04_02">Removing a link from the header in Hermosa theme</a></li>
		<li><a href="#s05_04_03">Adding a link to the header in Bonita theme</a></li>
		<li><a href="#s05_04_04">Removing a link from the header in Bonita theme</a></li>
	</ol>
	</li>
	<li><a href="#s05_05">Footer</a>
	<ol>
		<li><a href="#s05_05_01">Creating a custom footer file</a></li>
		<li><a href="#s05_05_02">Creating a custom properties file</a></li>
		<li><a href="#s05_05_03">Examples</a></li>
	</ol>
	</li>
	<li><a href="#s05_06">Default Icons</a></li>
	<li><a href="#s05_07">Internationalization</a>
	<ol>
		<li><a href="#s05_07_01">CustomApplicationResources.properties</a></li>
		<li><a href="#s05_07_02">Custom.json</a></li>
		<li><a href="#s05_07_03">Using Internationalization</a></li>
	</ol>
	</li>
	</ol>
	</li>
	<li><a href="#s06">Customizing Page Styles</a>
	<ol>
		<li><a href="#s06_01">Examples</a>
	<ol>
			<li><a href="#s06_01_01">Example 1: Change text color</a></li>
			<li><a href="#s06_01_02">Example 2: Create extended theme (inherits text color from Example 1)</a></li>
			<li><a href="#s06_01_03">Example 3: Change link color of extended theme (does NOT inherit text color from Example 1)</a></li>
		</ol>
		</li>
	</ol>
	</li>
	<li><a href="#s07">Resource API</a></li>
	<li><a href="#s08">Content API</a></li>
	<li><a href="#s09">Adding New Views or Widgets</a></li>
	<li><a href="#s10">Replacing Existing Widgets</a></li>
	<li><a href="#s101">Authorization</a></li>
	<li><a href="#s11">Hermosa Custom File Structure</a>
	<ol>
		<li><a href="#s11_01">Creating New Pages in Hermosa Theme</a>
	<ol>
			<li><a href="#s11_01_01">Example 1: Creating a New Static View in Hermosa Theme</a></li>
			<li><a href="#s11_01_02">Example 2: Creating a New Dynamic View with a Controller in Hermosa Theme</a></li>
		</ol>
		</li>
	</ol>
	</li>
	<li><a href="#s12">Bonita Custom File Structure</a>
	<ol>
		<li><a href="#s12_01">Creating New Pages in Bonita Theme</a>
		<ol>
			<li><a href="#s12_01_01">Example 1: Creating a New Static View in Bonita Theme</a></li>
			<li><a href="#s12_01_02">Example 2: Creating a New Dynamic View with a Controller in Bonita Theme</a></li>
		</ol>
	</li>
	</ol>
	</li>
</ol>



<hr class="divide_hr" />



<h2 id="s01">Tenants</h2>
<p>When you log in to an instance of the developer portal user interface, you are logging in to a specific tenant. In the context of the developer portal, each tenant has its own URL and its own set of apps, APIs, businesses, and groups. Configuration settings in the developer portal apply to the current tenant. The tenant is a distinct developer portal and community that has a logical separation from any other communities that might be hosted in the same product instance. A tenant might be a customer that is hosted within a shared system, such as the Akana SaaS platform, but has separation from other customers/ tenants.</p>
<p>The Tenant is managed by the Site Administrator. Each tenant generally has its own look and feel, controlled by one or more themes on the tenant.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="s02">Themes</h2>


<h3 id="s02_01">What is a platform theme?</h3>
<p>One theme is one instance of the developer portal user interface, with a unique URL and a specific look and feel. As part of site configuration, the Site Admin has the option to configure more than one theme, all using the same data, available from multiple out-of-the-box themes.</p>
<p>You can define a separate instance for each theme; in addition, you can extend (clone) a theme, to create one or more custom themes that are based on the same standard theme. Each custom theme can then be modified independently of the others, so that there can be multiple instances of the same theme with different sets of customization applied to each.</p>
<p>When creating the tenant, it's best to choose one theme, such as Hermosa, as a starting point. The Site Admin can create additional themes later, in the developer portal: <strong>More</strong> &gt; <strong>Admin</strong> &gt;<strong> Site</strong> and then choose <strong>Add Theme</strong>.</p>
<p><a href="#top">Back to top</a></p>


<h3 id="s02_02">What themes are available?</h3>
<p>Available themes are displayed in <strong>More</strong> &gt; <strong>Admin</strong> &gt; <strong>Site</strong> &gt; <strong>Add Theme</strong>, in the <strong>Theme Name</strong> drop-down list:</p>
<p><img src="customization_202020/image001.png" alt="Theme Name drop-down list."/></p>
<p>The following themes are available:</p>
<ul>
	<li><a href="../learnmore/basics_glossary.htm#gl_theme_simpledev">Simple Dev</a>&#8212;A simplified, streamlined user interface for developers, without Site Admin or Business Admin functionality.
	<p><strong>Note</strong>: Simple Dev theme is deprecated in version 2020.2.0, and will be removed in a future release.</p></li>
	<li><a href="../learnmore/basics_glossary.htm#gl_theme_hermosa">Hermosa</a>&#8212;Offers access to all features, including Site Admin and Business Admin functionality. In most cases, this help documentation shows dialog boxes and navigation from Hermosa Theme.</li>
	<li><a href="../learnmore/basics_glossary.htm#gl_theme_bonita">Bonita</a>&#8212;A simplified, streamlined user interface, based on Simple Dev theme and very similar to it, but with added functionality relating to APIs.</li>
	<li><a href="../learnmore/basics_glossary.htm#gl_devops">DevOps</a>&#8212;Used with the Lifecycle Coordinator product.</li>
	<li><a href="../learnmore/basics_glossary.htm#gl_devops">Default</a> (deprecated in Version: 2020.1.0)&#8212;The original user interface, with full functionality. Replaced by Hermosa theme.</li>
</ul>
<p><a href="#top">Back to top</a></p>


<h3 id="s02_03">How do I add a theme?</h3>
<p>You can add one or more themes in the Site Settings page.</p>
<p>When you add or modify a theme, and save the updates in the Site Settings page, the platform generates default customization files for all current themes. If you have customization files already in place, those files are not affected. The default customization files, sometimes called scaffolding, are generated to help support any customization you might want to do in the future.</p>

<h4>To add a theme</h4>
<ol>
<li>Log in as a Site Admin and go to the Admin section.</li>
<li>Go to <strong>Site</strong>.</li>
	<li>At the bottom, in the Themes section, click <strong>Add Theme</strong>.</li>
	<li>Specify settings:
	<ul>
		<li>Choose Standard Theme or Custom Theme (specify a custom theme name, and then specify the standard theme that it's based on).</li>
		<li>Specify one or more comma-delimited virtual hosts for the theme.</li>
		<li>Specify the full console address for the theme, including trailing backslash.</li>
		<li>Specify the site title. This is important for SEO rankings.</li>
		<li>Specify the site meta description.</li>
	</ul>
	</li>
	<li>Click <strong>Finish</strong>.</li>
	<li>On the <strong>Site Settings</strong> page, click <strong>Save</strong> to confirm.</li>
</ol>
<p><a href="#top">Back to top</a></p>


<h3 id="s02_04">How do I extend (clone) a platform theme?</h3>
<p>The developer portal includes several out-of-the-box standard themes.</p>
<p>You can extend a standard theme by defining one or more custom themes based on the same standard theme. By doing this, you can have two or more instances of the same platform theme, each with its own URL and potentially each with a different set of user-defined customizations. Each instance uses the same database.</p>
<p>You can use this to define multiple access points into the platform, each with its own set of customizations applied.</p>
<p>Sample scenario illustrating multiple customizations of look and feel:</p>
<p>Tenant ACMEPayments Corp has 10 partners; each partner has a different API on the platform, and each has an API admin who accesses the platform and exports metric information for the API.</p>
<p>When installing, the Site Admin defines ten custom themes, each based on Hermosa theme, each named for one of the 10 partners, and each with a different URL that includes the tenant name and partner name.</p>
<p>After defining one or more custom themes, the Site Admin applies the customization by uploading a <strong>custom.less</strong> file for each partner with the partner's company colors and logo.</p>
<p>When each API Admin logs in via the URL for his company, he sees the colors and logo for his company.</p>
<p>Notes:</p>
<ul>
	<li>You'll need to have a unique URL for each theme.</li>
	<li>Each instance with a separate theme value can be customized later with a <strong>custom.less</strong> file. See <a href="#s06">Customizing Page Styles</a>.</li>
</ul>
<p><a href="#top">Back to top</a></p>


<h3 id="s02_05">How do I configure values for a theme?</h3>
<p>In Site Settings, you can add, edit, or delete a theme.</p>
<p>The values in the Add/Edit Theme overlay are explained below.</p>
<table class="doctable">
	<thead>
		<tr>
			<th>Field</th>
			<th>Description</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>Theme: Standard</td>
			<td>Standard themes are out-of-the-box themes that ship with the product; however, they must be specifically installed.</td>
			</tr>
		<tr>
			<td>Theme Name</td>
			<td><p>If you choose Standard Theme, choose a name out of the list of out-of-the-box themes available: <strong>hermosa</strong>, <strong>devops</strong>, <strong>bonita</strong>, or <strong>simpledev</strong>.</p>
				<p><strong>Note</strong>: If the theme you want is not available for selection, ask the System Administrator to install it.</p></td>
			</tr>
		<tr>
			<td>Theme: Custom</td>
			<td><p>Naming a custom theme allows you to define a new theme, based on an out-of-the box theme. You can then apply customization to the custom theme without affecting the out-of-the-box theme itself. Choose a simple theme name without spaces or special characters.</p></td>
			</tr>
		<tr>
			<td>Theme Name</td>
			<td><p>Custom themes allow you to have a different branding on a different virtual host for the same theme. The custom theme name is used in the path of the uploaded resources for the theme. If you choose Custom Theme, specify the out-of-the-box theme it will be based on.</p></td>
			</tr>
		<tr>
			<td>Virtual Hosts / Vanity Hostnames</td>
			<td>A comma-delimited list of all hostnames that will be used to access the site (for example, <strong>vanity.example.com,other.example.com</strong>). The system uses these hostnames to determine which theme to present. In your DNS system, make sure there is an <a href="../learnmore/basics_glossary.htm#gl_a_record">A record</a> or <a href="../learnmore/basics_glossary.htm#gl_cname">CNAME</a> record for each virtual hostname, and that it points to your system.</td>
			</tr>
		<tr>
			<td>Console Address</td>
			<td>The full URL for the site. As well as browser access, the console address is used in links to the site in various emails and notifications. Must be a full URL, including scheme, hostname, context path, and trailing forward slash; for example, https://vanity.example.com/site/.</td>
			</tr>
		<tr>
			<td>Site Title</td>
			<td>The page title for the site. This is the most important on-page SEO element, and typically appears in the browser tab and search engine results. Place relevant keywords first in the title, with branded information at the end. Keywords earlier in the title are given greater importance and will positively impact your organic rankings and traffic. Page titles should ideally be no more than 60 characters long to ensure they're not truncated on desktop, mobile, and tablet searches.</td>
			</tr>
		<tr>
			<td>Site Meta Description</td>
			<td>The meta description for the site. This is used by search engines. The description should lead with an explanation of what the site is about, followed by a call to action. It should be no more than 155 characters so that it isn't truncated in search results.</td>
			</tr>
	</tbody>
</table>
<p><a href="#top">Back to top</a></p>


<h2 id="s03">Customization Basics</h2>


<h3 id="s03_01">Starter Files</h3>
<p>You can provision your developer portal instance with a theme-specific set of starter files for customization in the <strong>More</strong> &gt; <strong>Admin</strong> &gt; <strong>Customization</strong> page, via these two options:</p>
<ul>
	<li><strong>Generate customization files</strong>&#8212;Generates a set of files for the selected theme.</li>
	<li><strong>Download customization files</strong>&#8212;Downloads a ZIP file of the default customization files for the selected theme. Users can then customize the files offline and upload the updated files.</li>
</ul>
<p><strong>Note</strong>: If customization files are already in place, they are not overwritten. For a listing of the starter files and a brief description of each, see <a href="#s11">Hermosa Custom File Structure</a> or <a href="#s12">Bonita Custom File Structure</a>.</p>


<h3 id="s03_02">Uploading Content</h3>

<h4>To upload content to the platform</h4>
<ol>
	<li>Log in as a Site Admin and go to the Admin section.</li>
	<li>Go to <strong>File Manager</strong>.</li>
	<li>In the <strong>Content</strong> section, click <strong>File Manager</strong>.</li>
	<li>Go to the folder to which you want to upload resources. Follow the instructions for the type of custom content you're uploading, making sure you follow the exact naming for the folder structure. Use the buttons at the top of File Manager to go up or down a level in the folder structure, and to upload a file or a ZIP archive.
	<p><strong>Note</strong>: You might get a message that the file exists, even though you just created the folder. This is expected if you are replacing a default platform file. Click <strong>OK</strong>.</p></li>
</ol>


<h3 id="s03_03">Uploading Resources</h3>
<p>You can upload platform resources, such as avatars and other images, stylesheets, and custom pages, in the same way that you upload platform content. There is a different button to access the file structure for platform resources.</p>

<h4>To upload resources to the platform</h4>
<ol>
	<li>Log in as a Site Admin and go to the Admin section.</li>
	<li>Go to <strong>Customization</strong> or <strong>File Manager</strong>.</li>
	<li>In the <strong>Resources</strong> section, click <strong>File Manager</strong> (or just <strong>File Manager</strong> on the <strong>Customization</strong> page).</li>
	<li>Go to the folder to which you want to upload resources. If you are modifying default platform files for the first time, you will need to generate the customization files. This action creates the file and folder structure. For instructions, see <a href="#s03_01">Starter files</a>.
	<p>Use the buttons at the top of File Manager to go up or down a level in the folder structure, and to upload a file or a ZIP archive.</p>
	<p><strong>Note</strong>: You might get a message that the file exists, even though you just created the folder. This is expected if you are replacing a default platform file. Click <strong>OK</strong>.</p></li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="s04">Customizing Site Pages</h2>


<h3 id="s04_01">Landing Page</h3>
<p>To modify the landing page, you must download it, modify it offline, and then upload it to the same location.</p>

<h4>To modify the landing page:</h4>
<ol>
	<li>Log in as a Site Admin and go to the Admin section.</li>
	<li>Go to <strong>File Manager</strong>.</li>
	<li>In the <strong>Content</strong> section, click <strong>File Manager</strong>.</li>
	<li>Click into the content/home/landing directory.</li>
	<li>Locate the index.htm file and download it.</li>
	<li>Modify the file offline, and then upload the modified file using File Manager.</li>
</ol>
<p><a href="#top">Back to top</a></p>


<h3 id="s04_02">Login Entry Page</h3>
<p>You can customize the API Platform user interface so that after logging in, rather than being taken to the Action Dashboard <strong>(home/dashboard)</strong>, which is the usual behavior, users are taken to a different page that you specify.</p>
<p>To set this up, you'll need to perform these high-level tasks (see procedures below):</p>
<ol>
	<li><a href="#s04_02_01">Step 1: Determine the page you want users to be taken to</a></li>
	<li><a href="#s04_02_03">Step 3: Set up a custom_en-us.json file</a></li>
	<li><a href="#s04_02_04">Step 4: Upload the custom_en-us.json file to the developer portal</a></li>
	<li><a href="#s04_02_05">Step 5: Test</a></li>
</ol>

<h4 id="s04_02_01">Step 1: Determine the page you want users to be taken to</h4>
<p>You might decide that you want users to be taken to the <strong>Apps</strong> &gt; <strong>My Apps</strong> page, or the <strong>APIs</strong> &gt; <strong>My APIs</strong> page, or the Help page.</p>
<p>Decide which page you want users to be taken to and note the URL.</p>
<p>The example below takes users to the <strong>Apps</strong> &gt; <strong>My Apps</strong> page after login.</p>


<h4 id="s04_02_02">Step 2: Generate the starter customization files and download the customization ZIP file</h4>
<P>As a starting point, complete these two basic steps in the developer portal user interface (unless already done):</p>
<ul>
	<li>Generate a set of customization files. This creates the folder structure for the customization files, and puts placeholder files in place. </li>
	<li>Download the customization ZIP file, which contains the customization starter files. You will customize those files in the next few steps.</li>
</ul>
<p>For instructions, see <a href="#s03_01">Starter files</a>.</p>



<h4 id="s04_02_03">Step 3: Set up a custom_en-us.json file</h4>
<p>You will need to create a <strong>custom_en-us.json</strong> file; if this file exists, it overrides platform defaults.</p>
<p>In this file, you can set up some custom code so that users are taken to a different page after login, rather than the default <strong>/home/dashboard</strong> page.</p>
<p>As an example, let's say you want users to be directed to the <strong>Apps</strong> &gt; <strong>My Apps</strong> page. The example below modifies the platform to direct users to this page after login.</p>
<pre>{
"errors": {},
"labels":
{ "customLoginPage": "/home/myapps" }
,
"messages": {},
"validator": {
"errors": {}
}
}</pre>
<p>Save the file, which you will upload to the platform in Step 3.</p>
<p>Platform location for this file: <strong>/resources/theme/{theme_name}/locales/custom_en-us.json</strong>.</p>
<p><strong>Additional examples</strong></p>
<p>Some other examples of how the login page entry could look are shown below.</p>
<pre>//"labels": { }, -&gt; No custom login
//"labels": {"customLoginPage": "/home/customdashboard" }, -&gt; Login takes user to a custom page (requires adding new page)
//"labels": {"customLoginPage": "/home/landing" }, -&gt; Login takes user to landing page
//"labels": {"customLoginPage": "/home/apis" }, -&gt; Login takes user to My APIs
</pre>

<h4 id="s04_02_04">Step 4: Upload the custom_en-us.json file to the developer portal</h4>
<p>In the developer portal user interface, go to <strong>More</strong> &gt; <strong>Admin</strong> &gt; <strong>File Manager</strong>. In the <strong>Resources</strong> section, click <strong>File Manager</strong>. The File Manager window opens at the <strong>resources</strong> folder.</p>
<p>Make sure you know the name of the theme you are customizing. If your platform version doesn't have customized theme names, the main developer portal theme name is <strong>default</strong>. If you're not sure of the theme name, see <a href="../learnmore/site_admin_customization.htm#determine_theme_name">How can I determine the theme name?</a></p>
<p>Upload the <strong>custom_en-us.json</strong> file to /resources/theme/{theme_name}/locales.</p>


<h4 id="s04_02_05">Step 5: Test</h4>
<p>Once you've uploaded the files, it's time to test.</p>

<h4>To test the custom login:</h4>
<ol>
	<li>Log out.</li>
	<li>Clear the browser cache.</li>
	<li>Refresh the browser page.</li>
	<li>Log in. Upon login, you are taken to the new page.</li>
</ol>
<p><a href="#top">Back to top</a></p>


<h3 id="s04_03">Support Page</h3>
<p>In the developer portal user interface, the help link to the right of the top navigation bar leads to the Support page. Here, you can add content that's specific to your version of the developer portal. You can also include a link to the main help page to the developer portal (<a href="../learning.html" title="Learning about Community Manager" target="_blank">Learning about Community Manager</a>).</p>
<p>The URL for the Support page is:</p>
<pre>{hostname}/#/{tenantid}/home/support</pre>

<h4>To customize the Support page for the developer portal:</h4>
<ol>
	<li>Outside the platform, prepare an HTML file for the Support page, and name it <strong>index.htm</strong>.</li>
	<li>Login as a Site Admin and go to the Admin section.</li>
	<li>Go to <strong>File Manager</strong>.</li>
	<li>In the <strong>Content</strong> section, click <strong>File Manager</strong>. The File Manager window opens at the content folder.</li>
	<li>Click into the <strong>home</strong> directory and then the <strong>support</strong> directory. You will see the existing <strong>index.htm</strong> file in the folder.</li>
	<li><strong>Optional</strong>: If you want to, you can rename the existing file so that you'd be able to restore it if needed. Click the <strong>Rename</strong> icon and change the name of the file, as shown below.
<p><img src="customization_202020/image002.jpg" alt="File Manager: Renaming a file."/></p>
	</li>
	<li>Click <strong>Upload a File</strong>, navigate to the location of your new file, and upload it.</li>
	<li>Click outside the File Manager.</li>
	<li>Test:
	<ul>
		<li>Go to the Support page.</li>
		<li>If you do not immediately see the new page, clear the cache and refresh the page.</li>
		<li>Verify that the page looks as expected and that any links work.</li>
</ul>
</li>
</ol>
<p><a href="#top">Back to top</a></p>


<h3 id="s04_04">API Documentation</h3>
<p>You can upload HTML files and associated images, PDF files, or other content to the API &gt; Documentation section of the platform using the File Manager.</p>
<p>At minimum, you should provide the following files that are the entry point to your API documentation:</p>
<ul>
	<li><strong>Hermosa Theme</strong>: index page in the /documents folder.</li>
	<li><strong>Bonita Theme</strong>: main documentation page accessed via Documentation link at top of Bonita main page.</li>
</ul>
<p>There are two approaches to file upload:</p>
<ul>
	<li>ZIP file:
	<ul>
		<li><strong>Hermosa Theme</strong>: Zip all the documentation files and upload them following the instructions in <a href="#proc_filemanager_upload_api_doc_hermosa">To upload API documentation files via the File Manager</a> below.</li>
		<li><strong>Bonita Theme</strong>: Zip all the documentation files into one zip file named <strong>documentation.zip</strong>, and upload it from the Content folder using the <strong>Upload a File</strong> option which uploads and unzips the file (not the <strong>Upload a Zip Archive</strong> option, which uploads without unzipping). The documentation folder is created automatically, and the files are placed in that folder. If you use a ZIP file, make sure that you are in the right folder when you upload it, and that it doesn't include extra folders that you don't want. When you upload, the file is unzipped as part of the upload process, using the paths, if any, specified within the ZIP file.</li>
	</ul>
	</li>
	<li>Individual file uploads:
	<ul>
		<li><strong>Hermosa Theme</strong>: Follow the instructions in <a href="#proc_filemanager_upload_api_doc_hermosa">To upload API documentation files via the File Manager</a> below.</li>
		<li><strong>Bonita Theme</strong>: Get the Site Admin to create a documentation folder if there isn't one (exact name and case as given here), change directory into the documentation folder, and then upload the files individually.</li>
	</ul>
	</li>
</ul>
<p>For Hermosa Theme, the API Admin can upload the files following the procedure below.</p>
<p>For Bonita theme, the Site Admin must upload the files in Hermosa Theme: <strong>More</strong> &gt; <strong>Admin</strong> &gt; <strong>File Manager</strong> and then choose <strong>Content File Manager</strong>, in a folder below the content folder. The Site Admin must use or create a folder named documentation (so the path is content/documentation). As soon as the files are uploaded in Hermosa Theme, they are immediately visible in Bonita theme. Just log in and click the Documentation page to view the API documentation.</p>

<h4 id="proc_filemanager_upload_api_doc_hermosa">To upload API documentation files via the File Manager (Hermosa Theme):</h4>
<ol>
	<li>Go to <strong>API</strong> &gt; <strong>Documentation</strong>.</li>
	<li>Click the File Manager icon in the upper-left corner of the documentation panel. The File Manager appears.</li>
	<li>Click <strong>Upload a File</strong> (to upload and unzip your documentation) or <strong>Upload a Zip Archive</strong> (to upload a static ZIP file, such as an SDK file that users might want to download).</li>
	<li>In the File Upload box, navigate to the location of the individual file or ZIP file you want to upload. Choose the file, and then click <strong>Open</strong>.</li>
	<li>Click <strong>Upload</strong>.</li>
</ol>
<p><a href="#top">Back to top</a></p>


<h3 id="s04_05">Agreements</h3>

<h4 id="s04_05_01">Signup Agreement</h4>
<p>To add a legal (signup) agreement, there are two steps:</p>
<ol>
	<li>First, upload the legal agreement file to the <strong>content/system/agreements</strong> folder.</li>
	<li>Then, add the new agreement as a legal agreement for user signup on the platform.</li>
</ol>
<p><strong>Step 1: To upload a new legal agreement to the Akana API platform:</strong></p>
<p><strong>Note</strong>: Follow the procedure below to upload a legal agreement directly to the correct folder. This is the fastest way to do it. However, you can also upload via <strong>More</strong> &gt; <strong>Admin</strong> &gt; <strong>File Manager</strong>. In the <strong>Content</strong> section, click <strong>File Manager</strong>. You would then need to create the rest of the folder structure before uploading the file. It doesn't matter how the legal agreement is uploaded, but it must be in the <strong>content/system/agreements</strong> folder.</p>
<ol>
	<li>Log in as a Site Admin and go to the Admin section.</li>
	<li>Go to <strong>Agreements</strong>.</li>
	<li>Click <strong>Upload Agreement</strong>.
<p><strong>Note</strong>: this functionality is only available to the Site Admin. If you do not see the <strong>Upload Agreement</strong> button on the right, you don't have the appropriate permissions.</p>
	</li>
	<li>In File Manager, click <strong>Upload a File</strong>, then navigate to the location of the new developer agreement and upload it. The content is uploaded automatically to the content/system/agreements folder.</li>
	<li>The supported file types are Text (.txt, .text), HTML (.htm, .html), and PDF (.pdf)</li>
</ol>
<p>Once you have uploaded the legal agreement, the next step is to make it a legal agreement for the platform.</p>
<p><strong>Step 2: To use a specific legal agreement as an agreement used on user signup for the platform</strong></p>
<p>Before setting up the signup agreement for the platform, you must upload it. See Step 1 above.</p>
<ol>
<li>Log in as a Site Admin and go to the Admin section.</li>
<li>Go to <strong>Agreements</strong>.</li>
	<li>Click <strong>Add Agreement</strong>.
	<p><strong>Note</strong>: this functionality is only available to the Site Admin. If you do not see the <strong>Add Agreement</strong> button on the right, you don't have the appropriate permissions.</p>
	</li>
	<li>Specify values (all fields are required):
	<ul>
		<li><strong>Name</strong>: Used internally.</li>
		<li><strong>Description</strong>: Displayed to users above the legal agreement when the user is logging in for the first time, or at the next login if the legal agreement changes.</li>
		<li><strong>Content Path</strong>: Browse for the agreement users must accept. You can only choose a file previously uploaded to the content/system/agreements folder as per Step 1 above.</li>
		<li><strong>Printable Content Path</strong>: Browse for the agreement users can print. You can only choose a file previously uploaded to the content/system/agreements folder as per Step 1 above. It can be the same file that you used in the Content Path field, or a more print-friendly file format such as PDF.</li>
	</ul>
	</li>
	<li>Click <strong>Finish</strong>. The legal agreement immediately becomes the default for the platform, and new or existing users will need to accept it to log in.</li>
</ol>
<p><strong>Note</strong>: You can upload more than one legal agreement. If you have more than one, they display in a list view in the Legal Agreements page.</p>
<p><a href="#top">Back to top</a></p>

<h4 id="s04_05_02">API Agreement</h4>
<p>There are two steps to setting up an API legal agreement: first, uploading the file to the developer portal, and then, activating it as your current API legal agreement.</p>

<h4>To add an API legal agreement</h4>
<ol>
	<li>Go to <strong>APIs</strong> &gt; <strong>My APIs</strong> &gt; choose API &gt; <strong>Agreements</strong>.</li>
	<li>Click <strong>Upload Agreement</strong>.</li>
	<li>In File Manager, click <strong>Upload a File</strong>.</li>
	<li>Upload the file.</li>
	<li>In the File Manager window, click the <strong>Publish</strong> box so that the legal agreement can be assigned to the API.</li>
	<li>When done, click outside the File Manager window.</li>
</ol>
<p>After legal agreements have been uploaded and the name and description have been assigned, the agreements must be activated. An activated legal agreement displays in the platform <strong>API Access Wizard</strong> where it can be reviewed and accepted as part of the API access request process, when a developer requests access to your API.</p>

<h4>To activate a legal agreement</h4>
<ol>
	<li>Go to <strong>APIs</strong> &gt; <strong>My APIs</strong> &gt; choose API &gt; <strong>Agreements</strong>.</li>
	<li>Click <strong>Manage Agreements</strong>.</li>
	<li>Choose the legal agreement that you want to activate. In the Status column, click <strong>Activate</strong>. The legal agreement is activated and will be displayed to users requesting access to your API, as part of the API Access Wizard.</li>
</ol>

<h4 id="s04_05_03">License Agreement</h4>
<p>License agreements can be added as a step in the Add License wizard. On the Legal Agreements step, choose one or more legal agreements that will apply to the license. If needed, you can add or upload a new legal agreement:</p>
<ul>
	<li>If necessary, first upload the file: click <strong>Upload Legal</strong>.</li>
	<li>Add the legal document to the license: click Add Legal, define the display name and description, and click Save.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="s05">Customizing Page Content</h2>

<h3 id="s05_01">Logo</h3>
<p>The process of adding a custom logo to the platform includes configuring your logo to comply with the logo file requirements (listed below), specifying the logo filename in the template and uploading it to the platform.</p>
<p><strong>Logo File Requirements</strong></p>
<p>Your logo must comply with the following requirements:</p>
<ul>
	<li>Width should be no more than 295px.</li>
	<li>Height should be 46px.</li>
	<li>Background must be transparent.</li>
	<li>File format should be PNG.</li>
	<li>Specify the logo filename in the <strong>custom.less</strong> style sheet.</li>
</ul>

<h4>To specify your logo filename in the template</h4>
<ol>
	<li>Log in as a Site Admin and go to the Admin section.</li>
	<li> Go to <strong>Customization</strong>.</li>
	<li>If you want to work with the template for the Simple Developer Theme (Simple Dev) rather than the full user interface (Hermosa Theme), choose it from the drop-down list at the top (theme names might be different depending on your implementation). Styles for all themes are managed in the same place.</li>
	<li>To download a new custom_template.less file, click Download Custom Style Template.</li>
	<li>Rename it to custom.less.</li>
	<li>Load the custom .less file into an HTML editor and change the filename for this entry: @logo-img: url("images/{image_name}.png"); to the new logo filename.</li>
	<li>In the Custom Styles section, click Upload to upload the updated <strong>custom.less</strong> file. The upload process automatically executes the Rebuild Styles function, which rebuilds the style sheets.</li>
</ol>

<h4>To upload your logo file</h4>
<ol>
	<li> Log in as a Site Admin and go to the Admin section.</li>
	<li> Go to <strong>Customization</strong>.</li>
	<li> If you want to work with the template for the Simple Developer Theme (Simple Dev) rather than the full user interface (Hermosa Theme), choose it from the drop-down list at the top (theme names might be different depending on your implementation). Styles for all themes are managed in the same place.</li>
	<li> Click <strong>Rebuild Styles</strong> to ensure that all the proper style folders are generated.
		<p><strong>Note</strong>: If you specified a custom logo name in <strong>custom.less</strong> and already uploaded the style sheet, the rebuild step is not required.</p>
	</li>
	<li> Go to <strong>More</strong> &gt; <strong>Admin</strong> &gt; File Manager. In the <strong>Resources</strong> section, click <strong>File Manager</strong>. The File Manager window opens at the <strong>resources</strong> folder. Navigate to the resources/theme/default/style folder:
	<p><img src="customization_202020/image003.jpg" alt="File Manager navigation."/></p>
	</li>
	<li> Click <strong>New Directory</strong> and name it <strong>images</strong>.</li>
	<li> Click into the /images folder and upload your logo file.</li>
	<li> If for some reason the new logo does not display, try refreshing your browser cache and/or go to <strong>More</strong> &gt; <strong>Admin</strong> &gt; <strong>Customization</strong>, choose the theme, and click <strong>Rebuild Styles</strong>.</li>
</ol>
<p><a href="#top">Back to top</a></p>

<h3 id="s05_02">Favicon</h3>
<p>The <a href="../learnmore/basics_glossary.htm#gl_favicon">favicon</a> is the small icon displayed on the browser tab and possibly in other parts of the browser. You can customize the icon that displays for your installation of the developer platform.</p>

<h4>To modify the favicon for the developer portal user interface</h4>
<p><strong>Note</strong>: If you haven't already done so, generate the customization files and also download the customization ZIP. For instructions, see <a href="#s03_01">Starter Files</a>.</p>
<ol>
	<li>Log in as a Site Admin and go to the Admin section.</li>
	<li>Go to <strong>File Manager</strong>.</li>
	<li>In the <strong>Resources</strong> section, click <strong>File Manager</strong>. The File Manager window opens at the <strong>resources</strong> folder.</li>
	<li>Navigate down to <strong>resources/theme/{theme_name}/style/images</strong>.</li>
	<li>From the <strong>images</strong> folder, click <strong>Upload a File</strong>.</li>
	<li>Go to the location of the favicon image and upload it. It should be an image file, 15 x 15 pixels in size, saved in the Windows favicon format with the name <strong>favicon.ico</strong>.</li>
	<li>To update the browser, clear cache and refresh the page. You might even need to close the browser and re-open to see the new favicon on the browser tab.</li>
</ol>
<p><a href="#top">Back to top</a></p>

<h3 id="s05_03">Left Menu</h3>
<p>The left menu bar for all default pages in the API Platform user interface is controlled by the <strong>left_nav.json</strong> file.</p>
<p>This file includes definitions for all the left navigation menus in the Akana API platform user interface. Below are the top-level navigation pages:</p>
<ul>
	<li>home</li>
	<li>api</li>
	<li>apiversion</li>
	<li>app</li>
	<li>group</li>
	<li>board (for Forum)</li>
	<li>system</li>
	<li>license</li>
	<li>user</li>
</ul>
<p>You can customize any of the left menus to add, change, or delete entries.</p>
<p><strong>Note</strong>: once you have a customized file in place, the platform always refers to your custom file. If you upgrade to a new version of the platform that itself includes new left menu items, or includes any other changes, you won't get the benefit of the updates. To keep up with the latest version, you'd need to get the updated <strong>left_nav.json</strong> file from the new version, merge your changes, and upload again.</p>
<p>Remember that once you customize a user interface component, you have to manually manage those changes from release to release.</p>

<h4>To customize a specific left menu bar</h4>
<p><strong>Note</strong>: If you haven't already done so, generate the customization files and also download the customization ZIP. For instructions, see <a href="#s03_01">Starter Files</a>.</p>
<ol>
	<li>In the downloaded ZIP file for the current theme, identify the <strong>left_nav.json</strong> and <strong>left_nav_original.json</strong> files.</li>
	<li>Identify which section of the file to edit, depending on which left menu bar you want to customize.</li>
	<li>Edit the <strong>left_nav.json</strong> file, making sure that you preserve the JSON structure. For the original structure of the left menu, refer to the <strong>left_nav_original.json</strong> file, included in the starter files.</li>
	<li>Upload the modified <strong>left_nav.json</strong> file: <strong>More</strong> &gt; <strong>Admin</strong> &gt; File Manager. In the <strong>Resources</strong> section, click <strong>File Manager</strong>. The File Manager window opens at the <strong>resources</strong> folder. Create the path (if necessary) and upload the file. See <a href="#s03_03">Uploading Resources</a> for more information.</li>
	<li>Test.</li>
</ol>

<p>This article gives examples of the changes you will need to make to achieve different results. It includes illustrations of several different scenarios, including the file changes and the results in the user interface.</p>
<p>This article includes:</p>
<ul>
	<li><a href="#s05_03_01">Adding a link to the left menu in Hermosa theme</a></li>
	<li><a href="#s05_03_02">Removing a link from the left menu in Hermosa theme</a></li>
	<li><a href="#s05_03_03">Adding a link to the left menu in Bonita theme</a></li>
	<li><a href="#s05_03_04">Removing a link from the left menu in Bonita theme</a></li>
</ul>

<h4 id="s05_03_01">Adding a link to the left menu in Hermosa theme</h4>
<p>Links can be added to the left menu by modifying the <strong>left_nav.json</strong> file. For information on where this file is located, see <a href="#s11">Hermosa Custom File Structure</a>.</p>
<p>The following attributes are used in left menu objects:</p>
<ul>
	<li><strong>displayNameKey</strong>: points to a resource in the <strong>CustomApplicationResources.properties</strong> file for the label used on the menu item. See <a href="#s05_07_01">CustomApplicationResources.properties</a> for more information.</li>
	<li><strong>viewName</strong>: points to a view in <strong>metadata.json</strong> to determine where the menu item link takes the user.</li>
	<li><strong>icon</strong>: points to an icon to be used for the menu item. The developer portal uses icons from <a href="http://fontawesome.com">Font Awesome</a>, so the "icon" attribute uses a "soa-ui-cm-icon-" prefix before the icon name in Font Awesome. In our example below, the item we added uses the "bell" icon from Font Awesome, so we set the "icon" attribute to "soa-ui-cm-icon-bell".</li>
	<li><strong>authorization</strong>: any permissions needed for accessing the menu link. See <a href="#s101">Authorization</a> for more information.</li>
</ul>
<p>When you've done the updates, upload the modified file. The changes will be reflected in the left menu. For more information on uploading files, see <a href="#s03_03">Uploading Resources</a>.</p>
<p>As an example, let's add a link in the left menu of the user profile page to a new page we already created. For information on creating a new page, see <a href="#s11_01">Creating New Pages in Hermosa Theme</a> later in this document.</p>
<p>First, we edit the <strong>left_nav.json</strong> file and add the contents below.</p>
<p><strong>Note</strong>: We copied the "user" section from <strong>left_nav_original.json</strong>, and then added a new link at the top, pointing to "newuserpage". </p>
<pre>{
	"user": [
		{
			"displayNameKey": "resource.menu.user.newuserpage",
			"viewName": "newuserpage",
			"icon": "soa-ui-cm-icon-bell"
		}, {
			"displayNameKey": "resource.menu.user.details",
			"viewName": "profiledetails",
			"icon": "soa-ui-cm-icon-desktop"
		}, {
			"displayNameKey": "resource.menu.user.board",
			"viewName": "board",
			"authorization": {
				"resource": "tenant",
				"permissions": ["Modify"]
			},
			"icon": "soa-ui-cm-icon-comments"
		}, {
			"displayNameKey": "resource.menu.user.password",
			"viewName": "password",
			"icon": "soa-ui-cm-icon-lock"
		}, {
			"displayNameKey": "resource.menu.user.preferences",
			"viewName": "preferences",
			"icon": "soa-ui-cm-icon-heart"
		}, {
			"displayNameKey": "resource.menu.user.security",
			"viewName": "security",
			"icon": "soa-ui-cm-icon-key"
		}, {
			"displayNameKey": "resource.menu.user.settings",
			"viewName": "settings",
			"icon": "soa-ui-cm-icon-wrench"
		}
	]
}</pre>
<p>Next, upload the modified <strong>left_nav.json</strong> file into the appropriate directory.</p>
<p>Finally, refresh the page, click on the User in the top right part of the header, and then click <strong>Profile</strong>. The <strong>Profile Details</strong> page should load, and the left menu on the page should now include a <strong>New User Page</strong> menu item. Clicking the new menu item takes the user to the new page.</p>
<p><img src="customization_202020/image014.png" alt="New header link."/></p>
<p><a href="#top">Back to top</a></p>

<h4 id="s05_03_02">Removing a link from the left menu in Hermosa theme</h4>
<p>You can remove a link from the left menu by modifying the <strong>left_nav.json</strong> file. For information on where this file is located, see <a href="#s11">Hermosa Custom File Structure</a>.</p>
<p><strong>Note</strong>: To remove a link from a section in the <strong>left_nav.json</strong> file, you must include the entire section in <strong>left_nav.json</strong> while omitting the links desired.</p>
<p>When you've done the updates, upload the modified file. The changes will be reflected in the left menu. For more information on uploading files, see <a href="#s03_03">Uploading Resources</a>.</p>
<p>As an example, let's remove a link from the left menu on the user pages.</p>
<p>First, we edit the <strong>left_nav.json</strong> file and add the contents below.</p>
<p><strong>Note</strong>: We copied the "user" section over from <strong>left_nav_original.json</strong> and then removed the "settings" link near the bottom of the section. </p>
<pre>{
	"user": [
		{
			"displayNameKey": "resource.menu.user.details",
			"viewName": "profiledetails",
			"icon": "soa-ui-cm-icon-desktop"
		}, {
			"displayNameKey": "resource.menu.user.board",
			"viewName": "board",
			"authorization": {
				"resource": "tenant",
				"permissions": ["Modify"]
			},
			"icon": "soa-ui-cm-icon-comments"
		}, {
			"displayNameKey": "resource.menu.user.password",
			"viewName": "password",
			"icon": "soa-ui-cm-icon-lock"
		}, {
			"displayNameKey": "resource.menu.user.preferences",
			"viewName": "preferences",
			"icon": "soa-ui-cm-icon-heart"
		}, {
			"displayNameKey": "resource.menu.user.security",
			"viewName": "security",
			"icon": "soa-ui-cm-icon-key"
		}
	]
}</pre>
<p>Next, upload the modified <strong>left_nav.json</strong> file into the appropriate directory.</p>
<p>Finally, refresh the page, click on the User in the top right part of the header, and then click <strong>Profile</strong>. The <strong>Profile Details</strong> page should load, and the left menu on the page should now not include a Settings link.</p>
<p><img src="customization_202020/image015.png" alt="New header link."/></p>
<p><a href="#top">Back to top</a></p>

<h4 id="s05_03_03">Adding a link to the left menu in Bonita theme</h4>
<p>Links can be added to the left menu by modifying the <strong>api_sub_nav.ejs</strong>, <strong>app_sub_nav.ejs</strong> and/or <strong>user_profile_sub_nav.ejs</strong> files. For information on where these files are located, see <a href="#s12">Bonita Custom File Structure</a>.</p>
<p>The following attributes are typically used in left menu objects:</p>
<ul>
	<li><strong>name:</strong> points to a resource in the <strong>custom_en.json</strong> file for the label used on the menu item. See <a href="#s04_02_03">custom_en-us.json</a> for more information.</li>
	<li><strong>url:</strong> points to a page in <strong>widget_factory.js</strong> to determine where the menu item link takes the user. More specifically, it takes a call to the <strong>can.route.url</strong> function which takes an object which helps build the URL for the link. The following attributes can be given:
		<ul>
			<li><strong>page:</strong> the main page for the URL. In Bonita, this corresponds to what comes after the <strong>#!</strong> in the URL.</li>
			<li><strong>id:</strong> the id for the object. For an API page, this would be the API id.</li>
			<li><strong>versionId:</strong> the version id for the object. For an API page, this would be the API Version id.</li>
			<li><strong>section:</strong> the section which comes at the end of the URL. For example, the API logs page is at apis/{apiId}/versions/{apiVersionId}/logs. "logs" is the section.</li>
		</ul>
	</li>
</ul>
<p>When you've done the updates, upload the modified file. The changes will be reflected in the left menu. For more information on uploading files, see <a href="#s03_03">Uploading Resources</a>.</p>
<p>As an example, let's add a link in the left menu of the user profile page to a new page we already created. For information on creating new pages, see <a href="#s12_01">Creating New Pages in Bonita Theme</a> later in this document.</p>
<p>First, we edit the <strong>user_profile_sub_nav.ejs</strong> file and add the contents below.</p>
<p><strong>Note</strong>: This is the original content except that we added a new link at the top pointed to "newuserpage".</p>
<pre>&lt;%== soa.cm.imageUpload({
		"url": listener.attr("previewURL") || user.getAvatarUrl(),
		"upload": upload,
		"deleteBtn" : deleteBtn,
		"imgClasses" : "soa-control-cm-profile-avatar"
}) %&gt;
&lt;ul class="list-group soa-ui-cm-subnav soa-control-cm-subnav"&gt;
	&lt;%== soa.cm.subNavItem({
		"name": soa.framework.globalize("labels.newuserpage"),
		"url": can.route.url({
			"id": user.getId(),
			"page": "users",
			"section" : "newuserpage"
		})
	}) %&gt;
	&lt;%== soa.cm.subNavItem({
		"name": soa.framework.globalize("labels.profile"),
		"url": can.route.url({
			"id": user.getId(),
			"page": "users",
			"section" : "details"
		})
	}) %&gt;
	&lt;%== soa.cm.subNavItem({
		"name": soa.framework.globalize("labels.password"),
		"url": can.route.url({
			"page": "users",
			"id": user.getId(),
			"section": "password"
		})
	}) %&gt;
	&lt;%== soa.cm.subNavItem({
		"name": soa.framework.globalize("labels.security"),
		"url": can.route.url({
			"page": "users",
			"id": user.getId(),
			"section": "security"
		})
	}) %&gt;
	&lt;%== soa.cm.subNavItem({
		"name": soa.framework.globalize("labels.settings"),
		"url": can.route.url({
			"page": "users",
			"id": user.getId(),
			"section": "settings"
		})
	}) %&gt;
&lt;/ul&gt;</pre>
<p>Next, upload the modified file into the appropriate directory. In this case, it goes in <strong>SOA/Dev/user_profile_page/views</strong>.</p>
<p>Finally, refresh the page, click on the User in the top right part of the header, and then click <strong>Profile</strong>. The <strong>Profile Details</strong> page should load, and the left menu on the page should now include a "New User Page" menu item. Clicking the new menu item takes the user to the new page.</p>
<p><img src="customization_202020/image018.png" alt="New left menu link."/></p>
<p><a href="#top">Back to top</a></p>

<h4 id="s05_03_04">Removing a link from the left menu in Bonita theme</h4>
<p>You can remove a link from the left menu by modifying the <strong>api_sub_nav.ejs</strong>, <strong>app_sub_nav.ejs</strong> and/or <strong>user_profile_sub_nav.ejs</strong> files. For information on where these files are located, see <a href="#s12">Bonita Custom File Structure</a>.</p>
<p>When you've done the updates, upload the modified file. The changes will be reflected in the left menu. For more information on uploading files, see <a href="#s03_03">Uploading Resources</a>.</p>
<p>As an example, let's remove a link from the left menu on the user pages.</p>
<p>First, we edit the <strong>user_profile_sub_nav.ejs</strong> file and add the contents below.</p>
<p><strong>Note</strong>: This is the original content except that we removed the "settings" link near the bottom of the section. </p>
<pre>&lt;%== soa.cm.imageUpload({
		"url": listener.attr("previewURL") || user.getAvatarUrl(),
		"upload": upload,
		"deleteBtn" : deleteBtn,
		"imgClasses" : "soa-control-cm-profile-avatar"
}) %&gt;
&lt;ul class="list-group soa-ui-cm-subnav soa-control-cm-subnav"&gt;
	&lt;%== soa.cm.subNavItem({
		"name": soa.framework.globalize("labels.newuserpage"),
		"url": can.route.url({
			"id": user.getId(),
			"page": "users",
			"section" : "newuserpage"
		})
	}) %&gt;
	&lt;%== soa.cm.subNavItem({
		"name": soa.framework.globalize("labels.profile"),
		"url": can.route.url({
			"id": user.getId(),
			"page": "users",
			"section" : "details"
		})
	}) %&gt;
	&lt;%== soa.cm.subNavItem({
		"name": soa.framework.globalize("labels.password"),
		"url": can.route.url({
			"page": "users",
			"id": user.getId(),
			"section": "password"
		})
	}) %&gt;
	&lt;%== soa.cm.subNavItem({
		"name": soa.framework.globalize("labels.security"),
		"url": can.route.url({
			"page": "users",
			"id": user.getId(),
			"section": "security"
		})
	}) %&gt;
&lt;/ul&gt;</pre>
<p>Next, upload the modified file into the appropriate directory. In this case, it goes in <strong>SOA/Dev/user_profile_page/views</strong>.</p>
<p>Finally, refresh the page, click on the User in the top right part of the header, and then click <strong>Profile</strong>. The <strong>Profile Details</strong> page should load, and the left menu on the page should now not include a Settings link.</p>
<p><img src="customization_202020/image019.png" alt="New header link."/></p>
<p><a href="#top">Back to top</a></p>


<h3 id="s05_04">Header</h3>
<p>The page header shows at the top of every site page. By default, it includes links to main areas of the application: Dashboard, APIs, Apps, as well as the user's Profile.</p>
<p>You can customize the values in the page header by adding entries to the <strong>nav_extensions.js</strong> or <strong>quick_links_extensions.js</strong> files or by modifying the original header files.</p>
<p>This article gives examples of the changes you will need to make to achieve different results. It includes illustrations of several different scenarios, including the file changes and the results in the user interface.</p>
<p>This article includes:</p>
<ul>
	<li><a href="#s05_04_01">Adding a link to the header in Hermosa theme</a></li>
	<li><a href="#s05_04_02">Removing a link from the header in Hermosa theme</a></li>
	<li><a href="#s05_04_03">Adding a link to the header in Bonita theme</a></li>
	<li><a href="#s05_04_04">Removing a link from the header in Bonita theme</a></li>
</ul>

<h4 id="s05_04_01">Adding a link to the header in Hermosa theme</h4>
<p>Links can be added to the header by modifying the <strong>nav_extensions.ejs</strong> or <strong>quick_links_extensions.ejs</strong> files. For information on where these files are located, see <a href="#s11">Hermosa Custom File Structure</a>.</p>
<p>Links added in <strong>nav_extensions.ejs</strong> will be added just above the "Help" link under the top level "More" dropdown of the header. Similarly, links added in <strong>quick_links_extensions.ejs</strong> will be added just above the "Logout" link under the top level user dropdown in the far right side of the header.</p>
<p>When you've done the updates, upload the modified files. The changes will be reflected in the header. For more information on uploading files, see <a href="#s03_03">Uploading Resources</a>.</p>
<p>As an example, let's add a link in the header to the Showcases page we create in an <a href="#s11_01_01">example</a> later in this document.</p>
<p>First, we edit the <strong>nav_extensions.ejs</strong> file and add the contents below.</p>
<p><strong>Note</strong>: Menu items are simple &lt;li&gt; elements. Within the &lt;li&gt; elements, you can add a link. Here, we add a link to "#/home/showcases", which is our new page.</p>
<pre>&lt;li role="presentation" class="soa-ui-cm-secondary-resources-menu-item"&gt;
    &lt;a href="#/home/showcases" class="soa-control-cm-handle-page-dirty soa-control-cm-menu-item-link" role="menuitem"&gt;
        &lt;%= soa.framework.globalize("labels.showcases")%&gt;
    &lt;/a&gt;
&lt;/li&gt;</pre>
<p>Next, upload the modified <strong>nav_extensions.ejs</strong> file into the appropriate directory.</p>
<p>Finally, refresh the page and look at the <strong>More</strong> header dropdown. It should now include a "Showcases" menu item. Clicking the new menu item takes the user to the new page.</p>
<p><img src="customization_202020/image012.png" alt="New header link."/></p>
<p><a href="#top">Back to top</a></p>

<h4 id="s05_04_02">Removing a link from the header in Hermosa theme</h4>
<p><strong>Note</strong>: If you haven't already done so, generate the customization files and also download the customization ZIP. For instructions, see <a href="#s03_01">Starter Files</a>.</p>
<p>You cannot modify a link in the header, or remove a link from the header, by modifying the <strong>nav_extensions.ejs</strong> or <strong>quick_links_extensions.ejs</strong> files. Instead, update the original files with the links&#8212;<strong>nav.ejs</strong> or <strong>quick_links.ejs</strong>. For information on where these files are located, see <a href="#s11">Hermosa Custom File Structure</a>.</p>
<p>When you've done the updates, upload your files to these folders:
<ul>
	<li><strong>nav.ejs</strong>: <strong>theme/hermosa/SOA/CM/nav/views</strong></li>
	<li><strong>quick_links.ejs</strong>: <strong>theme/hermosa/SOA/CM/quick_links/views</strong></li>
</ul>
<p>The changes will be reflected in the header. For more information on uploading files, see <a href="#s03_03">Uploading Resources</a>.</p>
<p>As an example, let's remove the "Help" link from the header.</p>
<p>First, we edit the <strong>nav.ejs</strong> file and remove the contents at the bottom of the file containing the "Help" link.</p>
<pre>&lt;li role="presentation" class="soa-ui-cm-secondary-resources-menu-item"&gt;
    &lt;a href="#/home/support" class="soa-control-cm-handle-page-dirty soa-control-cm-menu-item-link" role="menuitem"&gt;
        &lt;%= soa.framework.globalize("labels.help")%&gt;
    &lt;/a&gt;
&lt;/li&gt;</pre>
<p>Next, create the necessary path for the file&#8212;<strong>theme/hermosa/SOA/CM/nav/views</strong>. Upload the file into the <strong>theme/hermosa/SOA/CM/nav/views</strong> directory.</p>
<p>Finally, refresh the page and look at the <strong>More</strong> header dropdown. It should now not include the "Help" link at the bottom.</p>
<p><img src="customization_202020/image013.png" alt="Help header link removed"/></p>
<p><a href="#top">Back to top</a></p>

<h4 id="s05_04_03">Adding a link to the header in Bonita theme</h4>
<p>Links can be added to the header by modifying the <strong>nav_extensions.ejs</strong> or <strong>quick_links_extensions.ejs</strong> files. For information on where these files are located, see <a href="#s12">Bonita Custom File Structure</a> for information on where these files are located.</p>
<p>Links added in <strong>nav_extensions.ejs</strong> will be added just above the "Help" link under the top level "More" dropdown of the header. Similarly, links added in <strong>quick_links_extensions.ejs</strong> will be added just above the "Logout" link under the top level user dropdown in the far right side of the header.</p>
<p>When you've done the updates, upload the modified file. The changes will be reflected in the header. For more information on uploading files, see <a href="#s03_03">Uploading Resources</a>.</p>
<p>As an example, let's add a link in the header to the Showcases page we create in an <a href="#s12_01_01">example</a> later in this document.</p>
<p>First, we edit the <strong>nav_extensions.ejs</strong> file and add the contents below.</p>
<p><strong>Note</strong>: Menu items are simple &lt;li&gt; elements. Within the &lt;li&gt; elements, you can add a link. Here, we add a link to "#!showcases", which is our new page.</p>
<pre>&lt;li role="presentation" class="soa-ui-cm-secondary-resources-menu-item"&gt;
    &lt;a href="#!showcases" class="soa-control-cm-handle-page-dirty soa-control-cm-menu-item-link" role="menuitem"&gt;
        &lt;%= soa.framework.globalize("labels.showcases")%&gt;
    &lt;/a&gt;
&lt;/li&gt;</pre>
<p>Next, upload the modified <strong>nav_extensions.ejs</strong> file into the appropriate directory.</p>
<p>Finally, refresh the page and look at the <strong>More</strong> header dropdown. It should now include a "Showcases" menu item. Clicking the new menu item takes the user to the new page.</p>
<p><img src="customization_202020/image016.png" alt="New header link."/></p>
<p><a href="#top">Back to top</a></p>

<h4 id="s05_04_04">Removing a link from the header in Bonita theme</h4>
<p>Links cannot be modified or removed from the header by modifying the <strong>nav_extensions.ejs</strong> or <strong>quick_links_extensions.ejs</strong> files. Instead, users must update the original files with the links&#8212;<strong>nav.ejs</strong> or <strong>quick_links.ejs</strong>. See <a href="#s12">Bonita Custom File Structure</a> for information on where these files are located.</p>
<p>Once updated, the directory structure for the files must be created if it doesn't exist yet. Place <strong>nav.ejs</strong> in a directory named <strong>theme/bonita/SOA/Dev/nav/views</strong>. Place <strong>quick_links.ejs</strong> in a directory named <strong>theme/bonita/SOA/Dev/quick_links/views</strong>.</p>
<p>Finally, upload the modified files into the appropriate directory. The changes will be reflected in the header. For more information on uploading files, see <a href="#s03_03">Uploading Resources</a>.</p>
<p>As an example, let's remove the "Help" link from the header.</p>
<p>First, we edit the <strong>nav.ejs</strong> file and remove the contents at the bottom of the file containing the "Help" link.</p>
<pre>&lt;li role="presentation" class="soa-ui-cm-secondary-resources-menu-item"&gt;
    &lt;a href="#!help" class="soa-control-cm-handle-page-dirty soa-control-cm-menu-item-link" role="menuitem"&gt;
        &lt;%= soa.framework.globalize("labels.help")%&gt;
    &lt;/a&gt;
&lt;/li&gt;</pre>
<p>Next, create the necessary path for the file&#8212;<strong>theme/bonita/SOA/Dev/nav/views</strong>. Upload the file into the <strong>theme/bonita/SOA/Dev/nav/views</strong> directory.</p>
<p>Finally, refresh the page and look at the <strong>More</strong> header dropdown. It should now not include the "Help" link at the bottom.</p>
<p><img src="customization_202020/image017.png" alt="Help header link removed"/></p>
<p><a href="#top">Back to top</a></p>


<h3 id="s05_05">Footer</h3>
<p>The page footer shows at the bottom of every site page. By default, it includes links to general information (About, Contact, Terms, Privacy) and a copyright statement. There is a thin line between the page and the footer.</p>
<p>You can customize the values in the page footer. For example, you can:</p>
<ul>
	<li>Add a link.</li>
	<li>Remove a link.</li>
	<li>Modify a link so that it leads to a different page.</li>
	<li>Update the copyright year and/or legal statement.</li>
</ul>
<p>To update the footer content, you will need to:</p>
<ol>
	<li>Create one or more customization files to override the defaults.</li>
	<li>Upload the customization files to the correct location in the file system.</li>
</ol>
<p>This article gives examples of the changes you will need to make to achieve different results. It includes illustrations of several different scenarios, including the file changes and the results in the user interface.</p>
<p>This article includes:</p>
<ul>
	<li><a href="#s05_05_01">Creating a custom footer file</a></li>
	<li><a href="#s05_05_02">Creating a custom properties file</a></li>
	<li><a href="#s05_05_03">Examples</a></li>
</ul>

<h4 id="s05_05_01">Creating a custom footer file</h4>
<p>The footer file includes variable references to content for the following links in the page footer:</p>
<ul>
	<li><strong>About</strong> (link to placeholder URL, with a variable for the link copy)</li>
	<li><strong>Contact Us</strong> (link to placeholder URL, with a variable for the link copy)</li>
	<li><strong>Terms</strong> (link to placeholder URL, with a variable for the link copy)</li>
	<li><strong>Privacy Policy</strong> (link to placeholder URL, with a variable for the link copy)</li>
	<li><strong>Copyright</strong>: a variable for the copyright statement</li>
</ul>
<p><strong>Notes:</strong></p>
<ul>
	<li>The upload location in the file system is <strong>/resources/theme/default/templates/footer/footer.htm</strong>. However, note that you cannot download a default file. Follow these instructions to create a customization file, then upload it to the correct location in the file system to override the developer portal default.</li>
	<li>Links in the <strong>footer.htm</strong> file can have a class attribute with either of these values:
		<ul>
			<li><strong>ext</strong>: clicking the link opens the link destination in a popup window.</li>
			<li><strong>dialog</strong>: clicking the link opens the link destination in a dialog window.</li>
		</ul>
	</li>
	<li>To revert to the default, if needed, simply remove the customization file and refresh the page.</li>
	<li>If the <strong>footer.htm</strong> file requires additional styles, you can add them to <strong>custom.less</strong>.</li>
</ul>

<h4>To create a custom footer file</h4>
<p><strong>Note</strong>: If you haven't already done so, generate the customization files and also download the customization ZIP. For instructions, see <a href="#s03_01">Starter Files</a>.</p>
<ol>
	<li>Modify the generated file <strong>footer.htm</strong> for your current theme as needed. You can update the footer file by:
		<ul>
			<li><a href="#s05_05_01_01">Updating the link destinations</a></li>
			<li><a href="#s05_05_01_02">Replacing the variables in the footer.htm file with hardcoded copy</a></li>
			<li><a href="#s05_05_01_03">Adding or removing links</a></li>
		</ul>
	<p><strong>Note</strong>: You can also update the footer by modifying a different customization file that controls some of the values in the footer. See <a href="#s05_05_02">Creating a custom properties file</a>.</p>
	</li>
	<li>Save the file. The next step is to upload it to the developer portal. For more information, see <a href="#s03_03">Uploading Resources</a>.</li>
</ol>

<h4 id="s05_05_01_01">Updating the link destinations</h4>
<p>The starter content file includes placeholder links that might not be valid for your company. You can update the footer to point to specific pages on your company website.</p>
<p>For example, the line below is the default content for the <strong>Contact</strong> link in the footer:</p>
<p><img src="customization_202020/image004.png" alt="Contact link in footer -- default content."/></p>
<p>You can update the contact URL to point to your company's contact page. Your updated &lt;a&gt; link, with your own URL, might look something like this:</p>
<p><img src="customization_202020/image005.png" alt="Contact link in footer -- updated content."/></p>

<h4 id="s05_05_01_02">Replacing the variables in the footer.htm file with hardcoded copy</h4>
<p>The variables in the <strong>footer.htm</strong> file are within triple curly braces, and they point to values defined in a different file, <strong>CustomApplicationResources.properties</strong> (see <a href="#s05_05_02">Creating a custom properties file</a> below).</p>
<p>You can redefine these values in the properties file, but you can also remove the variables and replace them with hardcopy content.</p>
<p>For example, the line below has a custom URL, but still has the default copy for the <strong>Contact</strong> link in the footer:</p>
<p><img src="customization_202020/image005.png" alt="Custom footer example with custom URL."/></p>
<p>You could update the contact URL, and you could also remove the variable reference and replace it with updated inline copy to a <strong>Contact Us</strong> link. Your updated &lt;a&gt; link might look something like this:</p>
<pre>&lt;a id="footerContact" href="http://acmepaymentscorp.com/contact" class="ext"&gt;Contact Us&lt;/a&gt;</pre>

<h4 id="s05_05_01_03">Adding or removing links</h4>
<p>The default footer includes a set of links, listed in <a href="#s05_05_01">Creating a custom footer file</a> above. You can add or remove links by updating the copy in the <strong>footer.htm</strong> file.</p>
<p>For example, you might just want About, Contact Us, and a copyright statement. You could use this content:</p>
<pre>&lt;ul class="footerNav clearthis"&gt;
  &lt;li&gt;
    &lt;!-- class="ext" will open the link in new tab --&gt;
    &lt;a id="footerAbout" href="http://acmepaymentscorp.com/about" class="ext"&gt;About Us&lt;/a&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;a id="footerContact" href="http://acmepaymentscorp.com/contact" class="ext"&gt;Contact Us&lt;/a&gt;
  &lt;/li&gt;
  &lt;li id="footerLegal" class="legal"&gt;Copyright © 2017-2020 ACME Payments Corp, Inc. All Rights Reserved.&lt;/li&gt;
&lt;/ul&gt;</pre>


<h4 id="s05_05_02">Creating a custom properties file</h4>
<p>You might want to keep the placeholders but redefine the values. For example, instead of link copy of <strong>About</strong>, you might want <strong>About Us</strong>, or some other wording. Rather than using hard-coded copy in the <strong>footer.htm</strong> file, you can define the new placeholder values in the <strong>CustomApplicationResources.properties</strong> file, and then upload the file to the correct place in the filesystem.</p>
<p><strong>Note</strong>: If you have a <strong>footer.htm</strong> file in place with hard-coded values, such as the copyright statement, the values in the <strong>footer.htm</strong> file override the values in the <strong>CustomApplicationResources.properties</strong> file.</p>

<h4>To redefine the placeholder values in the CustomApplicationResources.properties file</h4>
<p><strong>Note</strong>: If you haven't already done so, generate the customization files and also download the customization ZIP. For instructions, see <a href="#s03_01">Starter Files</a>.</p>
<ol>
	<li>In the <strong>CustomApplicationResources.properties</strong> file for your current theme, add an entry for each value you want to redefine. The example below provides new values for each variable in the default footer copy.
		<pre>footer.menu.about=About Acmepaymentscorp
footer.menu.contact=Contact Us
footer.menu.terms=Terms of Use
footer.menu.privacy=Our Privacy Statement
footer.menu.legal=© 2012-2020 Acmepaymentscorp, Inc. All Rights Reserved.</pre>
	</li>
	<li>Save the file. The next step is to upload it to the developer portal. For more information, see <a href="#s03_03">Uploading Resources</a>.</li>
</ol>

<h4 id="s05_05_03">Examples</h4>
<p>The examples below show changes to the default footer in a few scenarios based on uploading customization files. Examples include:</p>
<ul>
	<li><a href="#s05_05_03_01">Example 1: Default footer</a></li>
	<li><a href="#s05_05_03_02">Example 2: Footer with custom link copy defined</a></li>
	<li><a href="#s05_05_03_03">Example 3: Footer with copyright statement updated: hard-coded</a></li>
	<li><a href="#s05_05_03_04">Example 4: Footer with copyright statement updated: redefining the copyright statement variable</a></li>
</ul>

<h4 id="s05_05_03_01">Example 1: Default footer</h4>
<p>The example below shows the default values for a specific tenant:</p>
<p><img src="customization_202020/image006.png" alt="Developer portal footer, default."/></p>

<h4 id="s05_05_03_02">Example 2: Footer with custom link copy defined</h4>
<p>Let's say you want to update the link text in the default footer.</p>
<p>You can customize by defining and uploading a CustomApplicationResources.properties file.</p>
<p>The example below shows the file content and the results. Upload the file, with the following contents, to the /resources/theme/default/i18n folder.</p>
<pre>footer.menu.about=About ACME Payments Corp
footer.menu.contact=Contact Us
footer.menu.terms=Terms of Use
footer.menu.privacy=Our Privacy Statement</pre>
<p>When you refresh the page, the footer looks like the example below:</p>
<p><img src="customization_202020/image007.png" alt="Developer portal footer, modified with custom values."/></p>

<h4 id="s05_05_03_03">Example 3: Footer with copyright statement updated: hard-coded</h4>
<p><strong>Note</strong>: If you haven't already done so, generate the customization files and also download the customization ZIP. For instructions, see <a href="#s03_01">Starter Files</a>.</p>
<p>Let's say you want to update the copyright statement in the footer. The copyright statement only appears in the footer, which is on every page, so if you hard code the statement in the <strong>footer.htm</strong> file it will be updated everywhere.</p>
<p>You might also need to update the page destinations that the links in the footer go to.</p>
<p>In the downloaded starter files in the customization ZIP, identify the generated footer.htm file for your current theme.</p>
<p>Use the same file contents, but change the copy of the last &lt;li&gt; tag, for the legal statement, to a hard-coded legal statement, as follows:</p>
<pre>&lt;li id="footerLegal" class="legal"&gt;Copyright © 2017-2020 ACME Payments Corp, Inc. All Rights Reserved.&lt;/li&gt;</pre>
<p>When you refresh the page, the footer looks like the example below:</p>
<p><img src="customization_202020/image008.png" alt="Developer portal footer, modified with hard-coded legal statement."/></p>
<p>Note that the above example is the result of uploading two different customization files:</p>
<ul>
	<li><strong>CustomApplicationResources.properties</strong> to modify the link text</li>
	<li><strong>footer.htm</strong> to modify the link destinations and the copyright statement</li>
</ul>
<h4 id="s05_05_03_04">Example 4: Footer with copyright statement updated: redefining the copyright statement variable</h4>
<p>Let's say you want to update the copyright statement in the footer, but rather than hard coding the copy as shown above, you want to redefine the copy. You might want to do this if your copy is translated, if you have multiple themes that might have different copy, or if you want to reference the copyright variable elsewhere in the user interface.</p>
<p>You can do this by defining and uploading a <strong>CustomApplicationResources.properties</strong> file, as in #2 above, but this time defining an additional property in the file, the <strong>com.soa.atmosphere.footer.legal</strong> property.</p>
<p>The example below shows the file content and the results. Upload the file, with the following contents, to the <strong>/resources/theme/default/i18n</strong> folder. The copy is slightly different from the example in #2 so you can see the difference in the results.</p>
<pre>footer.menu.about=About ACME Payments
footer.menu.contact=Contact Us
footer.menu.terms=Terms of Use
footer.menu.privacy=Our Privacy Statement
com.soa.atmosphere.footer.legal= &copy; 2019-2020 ACME Payments, Inc. All Rights Reserved.</pre>
<p>When you refresh the page, the footer looks like the example below:</p>
<p><img src="customization_202020/image009.png" alt="Developer portal footer, modified with custom values."/></p>
<p><strong>Note</strong>: If you update the legal statement by defining the <strong>com.soa.atmosphere.footer.legal</strong> property in the <strong>CustomApplicationResources.properties</strong> file, as shown above, you must not also have the legal statement defined in the <strong>footer.htm</strong> file. A hard-coded value in the footer file will override the <strong>com.soa.atmosphere.footer.legal </strong>property.</p>


<h3 id="s05_06">Default Icons</h3>
<p>The platform includes default icons for apps, APIs, and other resources. You can specify new defaults by uploading new icons of the same filename, size, and type to the folder where the default files are stored.</p>
<p>The folder structure is not visible unless custom assets have already been created. If you have to create the folder structure, make sure you use the exact naming and spelling given below. Essentially you are creating the following files, two sizes for each resource for which you want to customize the icon.</p>
<table class="doctable">
	<thead>
		<tr>
			<th>Resource</th>
			<th>Main Icon (console/style/images/)</th>
			<th>Small Icons (console/style/images/)</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>API</td>
			<td>avatar_api_75x75.png</td>
			<td>avatar_api_25x25.png</td>
		</tr>
		<tr>
			<td>API Version</td>
			<td>avatar_app_version_75x75.png</td>
			<td>avatar_api_version_25x25.png</td>
		</tr>
		<tr>
			<td>App</td>
			<td>avatar_app_75x75.png</td>
			<td>avatar_app_25x25.png</td>
		</tr>
		<tr>
			<td>App Version</td>
			<td>avatar_app_version_75x75.png</td>
			<td>avatar_app_version_25x25.png</td>
		</tr>
		<tr>
			<td>Alert</td>
			<td>avatar_alert_75x75.png</td>
			<td>avatar_alert_25x25.png</td>
		</tr>
		<tr>
			<td>API Access Request</td>
			<td>avatar_api_access_req_75x75.png</td>
			<td>avatar_api_access_req_25x25.png</td>
		</tr>
		<tr>
			<td>Group</td>
			<td>avatar_group_75x75.png</td>
			<td>avatar_group_25x25.png</td>
		</tr>
		<tr>
			<td>Discussion</td>
			<td>avatar_discussion_75x75.png</td>
			<td>avatar_discussion_25x25.png</td>
		</tr>
		<tr>
			<td>Ticket</td>
			<td>avatar_ticket_75x75.png</td>
			<td>avatar_ticket_25x25.png</td>
		</tr>
	</tbody>
</table>


<h4>To modify the default icon for apps, APIs, or other resources on the developer platform</h4>
<p><strong>Note</strong>: If you haven't already done so, generate the customization files and also download the customization ZIP. For instructions, see <a href="#s03_01">Starter Files</a>.</p>
<ol>
	<li>Log in as a Site Admin and go to the Admin section.</li>
	<li>Go to <strong>File Manager</strong>.</li>
	<li>In the <strong>Resources</strong> section, click <strong>File Manager</strong>. The File Manager window opens at the <strong>resources</strong> folder.</li>
	<li>Navigate down to <strong>resources/console/style/images</strong>.</li>
	<li>From the <strong>images</strong> folder, click <strong>Upload a File</strong>.</li>
	<li>Go to the location of the new image or images and upload. You'll need to make sure your new default icons have the following properties:
	<ul>
		<li><strong>File type</strong>: PNG graphics format.</li>
		<li><strong>Dimensions</strong>: 75 x 75 pixels for the larger icon and 25 x 25 pixels for the smaller one.</li>
		<li><strong>Filenames</strong>: Refer to the table above for the filenames for each type of resource.</li>
	</ul>
	</li>
	<li>To update the browser, clear cache and refresh the page. You might even need to close the browser and re-open to see the new default images.</li>
</ol>
<p><a href="#top">Back to top</a></p>


<h3 id="s05_07">Internationalization</h3>
<p>There are two places in the product that drive internationalization:</p>
<ul>
	<li>/theme/default/i18n/CustomApplicationResources_[LOCALE].properties</li>
	<li>/locales/custom_[LOCALE].json</li>
</ul>

<h4 id="s05_07_01">CustomApplicationResources.properties</h4>
<p>The <strong>CustomApplicationResources.properties</strong> files are artifacts of the old framework and contain only a limited set of predefined labels:</p>
<pre>#com.soa.atmosphere.site.title=Your Developer Portal
#com.soa.atmosphere.footer.legal=Read the legal agreements.
#com.soa.atmosphere.footer.rights= © Your Company. All rights reserved. Note: No additional values should be added to this file.</pre>

<h4 id="s05_07_02">Custom.json</h4>
<p>The product leverages the <strong>jsperanto</strong> framework for internationalization – for more information, see <a href="https://github.com/jpjoyal/jsperanto" title="https://github.com/jpjoyal/jsperanto" target="_blank">https://github.com/jpjoyal/jsperanto</a>. All i18n strings in <strong>EJS</strong> views and <strong>widget_factory</strong> are defined in these files. The file is as follows:</p>
<pre>{
  "errors": {},
  "labels": {
    "key": "value",
    "key": "value"
  },
  "messages": {},
  "validator": {
  "errors": {}
  }
}</pre>

<h4 id="s05_07_03">Using Internationalization</h4>
<p>All language-specific text in the user interface should be externalized in custom_[LOCALE].json files and accessed via the soa.framework wrapper that has been provided in the product. For example:</p>
<ul>
	<li>in EJS files:
	<pre>&lt;%=soa.framework.globalize("labels.key", replacements)%&gt;</pre>
	</li>
	<li>in JavaScript files:
	<pre>SOA.Framework.Common.I18N.globalize(key, replacements);</pre>
	</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="s06">Customizing Page Styles</h2>
<p>The platform comes with a default look and feel, including styles, colors, navigation, logo, and so on. These platform default styles are stored in a stylesheet which is dynamically generated from a file named <strong>custom.less</strong>.</p>
<p>You can change the color scheme for platform elements such as:</p>
<ul>
	<li>Site background color</li>
	<li>Left and top navigation</li>
	<li>Text content area</li>
	<li>Pop-up dialog elements</li>
	<li>Horizontal rules</li>
	<li>Text color of input fields</li>
	<li>Default link colors</li>
</ul>
<p>If you want to customize platform styles, follow the basic steps below.</p>
<p><strong>Note</strong>: When you upload new styles to the platform, you will need to clear your browser cache and refresh the page to see the changes.</p>

<h4>To customize platform styles:</h4>
<p><strong>Note</strong>: If you haven't already done so, generate the customization files and also download the customization ZIP. For instructions, see <a href="#s03_01">Starter Files</a>.</p>
<ol>
	<li>Log in as a Site Admin and go to the Admin section.</li>
	<li>Go to <strong>More</strong> &gt; <strong>Admin</strong> &gt; <strong>Customization</strong>.</li>
	<li>From the <strong>Theme</strong> drop-down list, choose the theme.</li>
	<li>Download the current custom style template. Your choice depends on whether there is already customization in place:
	<ul>
		<li>No previous customization: click <strong>Download Custom Style Template</strong> and save the default <strong>custom_template.less</strong> file to your external filesystem.</li>
		<li>Existing customization: click <strong>Download Custom Styles</strong> and save the default <strong>custom_template.less</strong> file to your external filesystem.</li>
		<li>Not sure: click <strong>Download Custom Styles</strong>. If there is customization you will not lose it; if there is no customization, you will get the custom style template.</li>
	</ul>
	<p><strong>Note</strong>: Alternatively, if there is no previous customization, you can use the starter <strong>custom.less</strong> file for the current theme, in your downloaded customization files. For existing customization, you can also use the File Manager button and navigate to the <strong>custom.less</strong> file to download/edit. See <a href="#s11">Hermosa Custom File Structure</a> or <a href="#s12">Bonita Custom File Structure</a> for information on where the <strong>custom.less</strong> file can be found.</p>
	</li>
	<li>Modify the styles as needed.</li>
	<li>Upload the revised file to the platform using the <strong>Upload Custom Styles</strong> button or the <strong>File Manager</strong> button.
<p><strong>Note</strong>: If using File Manager, you must click <strong>Rebuild Styles</strong> to incorporate your stylesheet changes. For instructions with File Manager, see <a href="#s03_03">Uploading Resources</a>.</p></li>
	<li>Clear your browser cache and refresh the page to see the changes.</li>
</ol>
<p><strong>Note</strong>: The platform uses other stylesheets, such as <strong>style.css</strong> or <strong>supplement.css</strong>. Do not modify these stylesheets. All customizations should be stored in <strong>custom.less</strong> as explained above.</p>


<h3 id="s06_01">Examples</h3>

<h4 id="s06_01_01">Example 1: Change text color</h4>
<p>Let's say you want to update the non-link text color on all pages to red.</p>
<p>You can customize by defining and uploading a <strong>custom.less</strong> file as described above.</p>
<p>The example below shows the changed content and the results.</p>
<pre>

// color of link text
// @link-color: @main-color;

// The color of the non-link text
 @plain-text-color: red;</pre>
<p>When you clear your browser cache and refresh the page, the site text looks like:</p>
<p><img src="customization_202020/image010.png" alt="Action Dashboard custom copy."/></p>

<h4 id="s06_01_02">Example 2: Create extended theme (inherits text color from Example 1)</h4>
<p>Now let's say you create an extended theme from hermosa (the theme used in Example 1).</p>
<p>When you login to the new extended theme, you will see it inherits the text color change we made in Example 1:</p>
<p><img src="customization_202020/image010.png" alt="Action Dashboard custom copy."/></p>

<h4 id="s06_01_03">Example 3: Change link color of extended theme (does NOT inherit text color from Example 1)</h4>
<p>Now let's edit the <strong>custom.less</strong> file for the extended theme.</p>
<p>We will change the link text to yellow, but keep the non-link text as its default:</p>
<pre>

// color of link text
 @link-color: yellow;
 
// The color of the non-link text
// @plain-text-color: #7f7f7f;</pre>
<p>When you upload the changes as described above, clear the browser cache and refresh the page, the site text and link text both come from the extended theme's <strong>custom.less</strong> file, so the non-link text will fallback to the default, and the link text will now show as yellow:</p>
<p><img src="customization_202020/image011.png" alt="Action Dashboard custom copy with custom color."/></p>
<p><a href="#top">Back to top</a></p>



<h2 id="s07">Resource API</h2>
<p>When a resource is requested by the developer portal, there is an algorithm it calls to search for that resource.</p>
<p>Resources are typically requested via a URL in this format:</p>
<pre>.../ui/apps/&lt;versionid&gt;/resources/...</pre>
<p>For example, let’s say we have created an extended theme called <strong>clonedhermosa</strong> and we are requesting a resource <strong>metadata.json</strong>. The path for that request would be:</p>
<pre>ui/apps/atmosphere/_Vk7glUZDRzuuP1VJQMmUNBA/resources/theme/clonedhermosa/SOA/CM/extensions/metadata.json</pre>
<p>The algorithm would first look in the database for this path:</p>
<pre>resources/theme/clonedhermosa/SOA/CM/extensions/metadata.json</pre>
<p>If not found, it would look at the parent of the custom theme, which, in this case, is <strong>hermosa</strong>. So the next place it would look in the database would be for this path:</p>
<pre>resources/theme/hermosa/SOA/CM/extensions/metadata.json</pre>
<p>If not found here, it would look in the <strong>hermosa</strong> bundle for that resource path.</p>
<p>If still not found, it would go to the parent of the <strong>hermosa</strong> theme, which is the "default" theme. So it would check the database for the following path:</p>
<pre>resources/theme/default/SOA/CM/extensions/metadata.json</pre>
<p>If still not found, it would check the <strong>default</strong> bundle for that resource path.</p>
<p>If still not found, it would check this path:</p>
<pre>resources/console/SOA/CM/extensions/metadata.json</pre>
<p><strong>Note</strong>: You can also load resources from the local filesystem to test changes. This must be configured in the Akana Administration Console. Once logged in, click on the <strong>Configuration</strong> tab and click on the <strong>com.soa.atmosphere.console</strong> category. The <strong>atmosphere.console.config.stealEnvironment</strong> property must be set to <strong>development</strong>. Then click the <strong>Apply Changes</strong> button. Then click on the <strong>com.soa.uif</strong> category and set the <strong>uif.config.resourceBundlePath</strong> property to a file path to your local files. Then click the <strong>Apply Changes</strong> button. After these changes, the resource retrieval algorithm will first check this local path for the resource before going through the checks described above.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="s08">Content API</h2>
<p>When content is requested by the developer portal, it uses the Content API to retrieve it.</p>
<p>Content resources are typically requested via URL in this format:</p>
<pre>.../content/...</pre>
<p>It then uses the current tenant name to find that content. For example, if we are requesting /content/system/agreements and our tenant name is named <strong>development</strong>, we would look for the content with the path tenants/development/content/system/agreements.</p>
<p><strong>Note</strong>: You can also load content from the local filesystem to test changes. This must be configured in the Akana Administration Console. Once logged in, click on the <strong>Configuration</strong> tab and click on the <strong>com.soa.atmosphere.console</strong> category. The atmosphere.console.config.stealEnvironment property must be set to <strong>development</strong>. Then click the <strong>Apply Changes</strong> button. Then click on the <strong>com.soa.uif</strong> category and set the <strong>uif.config.resourceBundlePath</strong> property to a file path to your local files. Then click the <strong>Apply Changes</strong> button. After these changes, the resource retrieval algorithm will first check this local path for the resource before going through the checks described above.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="s09">Adding New Views or Widgets</h2>
<p>If branding alone is insufficient to achieve the desired customization, you could:</p>
<ol>
	<li>Add a new view or widget for a new page.</li>
	<li>Replace the view or a widget entirely for a page.</li>
	<li>Alter the existing view.</li>
</ol>
<p>To add a new view or widget, follow the following process:</p>
<ol>
	<li>Write the CanJS view, controller and optional model.</li>
	<li>Modify the <strong>metadata.json</strong> and <strong>widget_factory.json</strong> files to add the new view, or to add a new widget to an existing view.</li>
	<li>Create a zip file with the modified files.</li>
	<li>Upload the zip file in the developer portal user interface: <strong>Admin</strong> &gt; <strong>File Manager</strong> &gt; <strong>Content</strong>.</li>
</ol>
<p>The process for replacing a view or widget is similar to creating a new one:</p>
<ol>
	<li>Write the replacement CanJS view, controller and optional model.</li>
	<li>Modify the <strong>metadata.json</strong> and <strong>widget_factory.json</strong> files, adding the replacement view with the same <strong>objtype</strong> and <strong>view</strong> parameters as the existing view. This essentially overwrites the existing definition in the system.</li>
	<li>Create a zip file with the modified files.</li>
	<li>Upload the zip file in the developer portal: <strong>Admin</strong> &gt; <strong>File Manager</strong> &gt; <strong>Content</strong>.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="s10">Replacing Existing Widgets</h2>
<p>A widget is made up of a CanJS view (EJS) and corresponding controller. Altering existing widgets in the product is not a common practice since any significant changes to the view (EJS) files typically means that you need to change the controller as well, but there might be some cases (for example, adding a link) that justifies modifying the EJS file only.</p>
<p>To modify the EJS file simply upload a new EJS file into the developer portal content file structure to replace the existing file. For example, if the path of the EJS file is:</p>
<pre>/resources/[VER]/SOA/CM/common/notifications/views/notifications.ejs</pre>
<p>Then just add a new <strong>notifications.ejs</strong> file with the same path under <strong>theme/hermosa</strong> in the developer portal content file structure (<strong>Admin</strong> &gt; <strong>File Manager</strong> &gt; <strong>Content</strong>).</p>
<p><a href="#top">Back to top</a></p>



<h2 id="s101">Authorization</h2>
	<p>When adding new links or pages, you can also define which users have access to that link/page. This is done with the <strong>authorization</strong> attribute within the modified .json file (for example, metadata.json, left_nav.json).</p>
	<p>Below are the attributes commonly used within the 'authorization' object in the .json file. Most of these correspond to the security roles and permissions set up on the platform. For more information, see <a href="../../ag/security_admin/roles.htm">Security Roles and Role Memberships</a> (Policy Manager help).</p>
	<table class="doctable">
		<thead>
		<tr>
			<th>Attribute</th>
			<th>Description</th>
		</tr>
		</thead>
		<tbody>
		<tr>
			<td>loggedIn</td>
			<td>Boolean typically set to "true", which indicates the link/page is authorized for any logged in user.</td>
		</tr>
		<tr>
			<td>resourceType</td>
			<td>Defines which platform object type needs the authorization for this link/page. Available values are: <strong>app, app-version, api, apiversion, tenant, business, group, resource, deploymentzone, license, domain, promotion, model, modelversion</strong>.</td>
		</tr>
		<tr>
			<td>resourceKeyType</td>
			<td>Defines which platform object key type needs the authorization for this link/page. Available values are: <strong>Organization, Service, Contract, Container, Policy, Identity, Process, Script, Certificate</strong>.</td>
		</tr>
		<tr>
			<td>resource</td>
			<td>Defines which platform resource needs the authorization for this link/page. Available values are: <strong>business, resource, tenant</strong></td>
		</tr>
		<tr>
			<td>permissions</td>
			<td>Defines which actions are allowed for the given platform type. Available values are: <strong>Full Control, Add, Read, Modify, Delete, Monitor</strong>. The permissions are given as an array of values so that multiple actions can be allowed (for example, ["Read", "Modify"])</td>
		</tr>
		</tbody>
	</table>
	<p><a href="#top">Back to top</a></p>



	<h2 id="s11">Hermosa Custom File Structure</h2>
<table class="doctable">
	<thead>
		<tr>
			<th>Filename/Path</th>
			<th>Description</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>/resources/theme/hermosa/i18n/CustomApplicationResources.properties</td>
			<td>Override/add placeholder labels/messages that can be used in pages.</td>
		</tr>
		<tr>
			<td>/resources/theme/hermosa/i18n/CustomApplicationResources_en-US.properties</td>
			<td>Override/add placeholder labels/messages that can be used in pages (for US English).</td>
		</tr>
		<tr>
			<td>/resources/theme/hermosa/less/custom.less</td>
			<td>Allows you to customize the styles in the site, in LESS pre-compiler format.</td>
		</tr>
		<tr>
			<td>/resources/theme/hermosa/locales/custom_en-us.json</td>
			<td>Override default actions (that is, default page after login) as well as labels, messages in the portal pages.</td>
		</tr>
		<tr>
			<td>/resources/theme/hermosa/SOA/CM/extensions/init.js</td>
			<td>The initialization file for customization. All custom JavaScript files that are used for customization must be loaded in init.js.</td>
		</tr>
		<tr>
			<td>/resources/theme/hermosa/SOA/CM/extensions/left_nav.json</td>
			<td>Allows you to customize the left navigation items in the site. You can add, modify, or delete pages from the left navigation menu.</td>
		</tr>
		<tr>
			<td>/resources/theme/hermosa/SOA/CM/extensions/left_nav_original.json</td>
			<td>The original content of the left navigation items in the site. Content can be copied out of this file when adding content to the left_nav.json file.</td>
		</tr>
		<tr>
			<td>/resources/theme/hermosa/SOA/CM/extensions/metadata.json</td>
			<td>Allows you to add/remove pages to/from the developer portal and modify authorization for access to developer portal pages.</td>
		</tr>
		<tr>
			<td>/resources/theme/hermosa/SOA/CM/extensions/nav_extensions.ejs</td>
			<td>Allows you to add items to the top menu in the header.</td>
		</tr>
		<tr>
			<td>/resources/theme/hermosa/SOA/CM/extensions/quick_links_extensions.ejs</td>
			<td>Allows you to add items to the user profile pull-down menu in the header.</td>
		</tr>
		<tr>
			<td>/resources/theme/hermosa/SOA/CM/extensions/widget_factory.js</td>
			<td>Allows you to configure any new pages that were added in metadata.json.</td>
		</tr>
		<tr>
			<td>/resources/theme/hermosa/SOA/CM/nav/views/nav.ejs</td>
			<td>The original content of the top menu items in the header. Can be updated to modify/remove items from the original top menu items in the header.</td>
		</tr>
		<tr>
			<td>/resources/theme/hermosa/SOA/CM/quick_links/views/quick_links.ejs</td>
			<td>The original content of the user profile pull-down menu items in the header. Can be updated to modify/remove items from the original user profile pull-down menu items in the header.</td>
		</tr>
		<tr>
			<td>/resources/theme/hermosa/style/images/logo.png</td>
			<td>Default custom logo image.</td>
		</tr>
		<tr>
			<td>/resources/theme/hermosa/templates/footer/footer.htm</td>
			<td>Allows you to customize the footer content of the developer portal pages.</td>
		</tr>
	</tbody>
</table>
<p><a href="#top">Back to top</a></p>


<h3 id="s11_01">Creating New Pages in Hermosa Theme</h3>
<p>In this section:</p>
<ol>
	<li><a href="#s11_01_01">Example 1: Creating a New Static View in Hermosa Theme</a></li>
	<li><a href="#s11_01_02">Example 2: Creating a New Dynamic View with a Controller in Hermosa Theme</a></li>
</ol>

<h4 id="s11_01_01">Example 1: Creating a New Static View in Hermosa Theme</h4>
<p>A common customization task is to add a new view in the developer portal to support static content from the developer portal content file structure. For example, you might want to add a "Showcases" page that lists all the best apps that have been built and provides links to them.</p>
<p>To set this up you'd have to create and upload two files:</p>
<ol>
	<li>Create a <strong>metadata.json</strong> file and upload it to the platform (see <a href="#s03_03">Uploading Resources</a> for more information):
<ol>
	<li>Create the <strong>metadata.json</strong> file along the lines of the example shown below.</li>
	<li>Upload the new file to the Resources folder structure (create folders as needed, be sure case is exact on folder names). In the developer portal: <strong>More</strong> &gt; <strong>Admin</strong> &gt; Customization. At top of page, click <strong>File Manager</strong>.</li>
	<li>In the <strong>resources</strong> folder, create additional folders to create this path: resources/theme/hermosa/SOA/CM/extensions</li>
	<li>In the <strong>extensions</strong> folder, upload the <strong>metadata.json</strong> file.</li>
</ol>
</li>
	<li>Create the new content page and upload it to the platform in Content (see <a href="#s03_02">Uploading Content</a> for more information):
<ol>
	<li>Offline, develop your <strong>index.htm</strong> content file. Note the file extension should be <strong>htm</strong>, not html.</li>
	<li>In the developer portal: <strong>More</strong> &gt; <strong>Admin</strong> &gt; File Manager. In the <strong>Content</strong> section, click <strong>File Manager</strong>.</li>
	<li>In the <strong>content</strong> folder, create additional folders to create this path: <strong>content/home/showcases</strong>.</li>
	<li><strong>Note</strong>: the path is defined, in the sample file below, by the value of <strong>objType</strong>, which is <strong>home</strong>, and the value of <strong>view</strong>, which is <strong>showcases</strong>.</li>
	<li>In the <strong>showcases</strong> folder, upload the<strong> index.htm</strong> file.</li>
</ol>
</li>
	<li>Test. Go to the landing page, then change the URL from <strong>home/landing</strong> to <strong>home/showcases</strong> to view the new page.
<p><strong>Note</strong>: You might need to refresh the page.</p></li>
</ol>
<p><strong>Sample metadata.json file for adding a new static content view</strong></p>
<p>The following <strong>metadata.json</strong> file shows how a <strong>widget.document</strong> widget can be added to a new view.</p>
<p><strong>Note</strong>: Line 27 of the file below references <strong>widget.document</strong>, which is a standard widget that renders the index.htm file from the developer portal content file structure at the path corresponding to the browser URL. For example, "#/home/showcases" will automatically load "<strong>/home/showcases/index.htm</strong>" from the content file structure.</p>
<pre>{
  "layoutStructure":[
    {
      "objType":"home",
      "view":"showcases",
      "layout":[
  {
    "widgetInstance":"Main",
    "widget":"widget.horiz.tiling",
    "priority":"100"
  },
  {
    "widgetInstance":"Header",
    "widget":"widget.header",
    "parentWidgetInstance":"Main",
    "parent":"widget.horiz.tiling",
    "priority":"1000"
  },
  {
    "widgetInstance":"Content-Widest",
    "widget":"widget.horiz.tiling",
    "parentWidgetInstance":"Main",
    "parent":"widget.horiz.tiling",
    "priority":"2200"
  },
  {
    "widgetInstance":"Landing",
    "widget":"widget.document",
    "parentWidgetInstance":"Content-Widest",
    "parent":"widget.horiz.tiling",
    "priority":"2202"
  },
  {
    "widgetInstance":"Footer",
    "widget":"widget.footer",
    "parentWidgetInstance":"Main",
    "parent":"widget.horiz.tiling",
    "priority":"3000"
  }
      ]
    }
  ]
}</pre>

<h4 id="s11_01_02">Example 2: Creating a New Dynamic View with a Controller in Hermosa Theme</h4>
<p>If your new view requires dynamic content, this can be achieved as well.</p>
<p>The general approach is:</p>
<ol>
	<li>Write the CanJS view, controller and optional model.</li>
	<li>Modify the <strong>metadata.json</strong> and <strong>widget_factory.json</strong> files to add the new view, or to add a new widget to an existing view.</li>
	<li>Create a zip file with the modified files.</li>
	<li>Upload the zip file in the developer portal: <strong>Admin</strong> &gt; <strong>File Manager</strong> &gt; <strong>Content</strong>.</li>
</ol>
<p>Let's create a simple Hello World example with dynamic content.</p>

<h4 id="s11_01_01_metadatajson">metadata.json</h4>
<p>First we will create an entry in <strong>metadata.json</strong> much like we did for the static view. However, instead of our content using a <strong>widget.document</strong>, we will use a <strong>widget.iconsole.adapter widget</strong>. For this widget, we add a <strong>properties</strong> object with a <strong>widgetKey</strong> attribute which will point to our widget defined in <strong>widget_factory.json</strong>. In this case, we called it <strong>dynamicPageContainer</strong>.</p>
<p><strong>Note</strong>: Comments below are only for describing the file. Since comments are not allowed in .json files, please remove them if using the following content.</p>
<pre>{
  "layoutStructure": [{
  // objType: describes the root URL. Typically a resource in the
  // system such as "api", "app", or "user".
    "objType": "home",
  // view: describes the specific view for the objType above.
  // Typically something like "details" or "monitor".
    "view": "test",
  // scriptResources: these are the JavaScript files that need to
  // be loaded; typically the CanJS model and controller files.
    "scriptResources": ["SOA/CM/extensions/init.js"],
  // layout: an array of widgets with parent/child relationships.
    "layout":[
      {
  // widgetInstance: a unique widget instance name
      "widgetInstance": "Main",
  // widget: the name of the actual widget. In this specific case,
  // "widget.horiz.tiling" is a REQUIRED parent widget describing
  // a tile layout of all the other widgets on the page.
      "widget": "widget.horiz.tiling",
  // Priority: the order in which the widget is rendered within its
  // parent.
      "priority": "100"
      },
      {
  // The header widget is a predefined widget in the default theme
  // and is drawn first
      "widgetInstance": "Header",
      "widget": "widget.header",
      "parentWidgetInstance": "Main",
  // Typically, the parent is going to be "widget.horiz.tiling".
      "parent": "widget.horiz.tiling",
      "priority": "1000"
      },
      {
  // Content-Widest is a widget that describes a full-page layout
  // without left or right nav. (hence: widest). Other options are
  // Content-Wide (to make room for either left or right nav) and
  // Content (to make room for both left and right nav). These
  // correspond to style element in the css, so you can change the
  // size of the columns.
      "widgetInstance": "Content-Widest",
      "widget": "widget.horiz.tiling",
      "parentWidgetInstance": "Main",
      "parent": "widget.horiz.tiling",
      "priority": "2200"
      },
      {
      "widgetInstance": "soa-control-cm-test-form-widget",
  // "widget.iconsole.adapter" is where you will put most of your
  // customizations. It is the container for the actual HTML that
  // will be rendered on the page within its parent. You can have
  // multiple instances of this widget and they will be drawn
  // according to priority within the parent widget.
      "widget": "widget.iconsole.adapter",
      "parentWidgetInstance": "Content-Widest",
      "parent": "widget.horiz.tiling",
      "priority": "2201",
  // "properties" are specific to a widget.
      "properties":{
  // "widgetKey" references the widget in the widget_factory.json
  // file described below. It is specific to the
  // widget.iconsole.adapter.
  "widgetKey": “dynamicPageContainer”
      }
      },
      {
  // The footer widget is a predefined widget in the default theme
  // and is drawn last.
      "widgetInstance": "Footer",
      "widget": "widget.footer",
      "parentWidgetInstance": "Main",
      "parent": "widget.horiz.tiling",
      "priority": "3000"
      }
    ]
  }]
}</pre>

<h4 id="s11_01_02_files_widgetfactoryjson">widget_factory.json</h4>
<p>Next, we will create our entries in <strong>widget_factory.json</strong>. Typically, for creating a dynamic view, we create a container view and the container's content view. In our example, these are widgets named <strong>dynamicPageContainer</strong> (referenced in the <strong>metadata.json</strong> above) and <strong>dynamicPage</strong>. Here, we also set the <strong>view</strong> attribute to the EJS templates for the widgets, which we will create next.</p>
<p><strong>Note</strong>: Comments below are only for describing the file. Since comments are not allowed in .json files, please remove them if using the following content.</p>
<pre>{
  // The name of the object corresponds to the widgetKey for each of
  // the "widget.iconsole.adapter" widgets in metadata.json.
  "dynamicPageContainer": {
    "widgets": [
      {
  "position": "html",
       // view: provides the path to the EJS template for the view.
  "view": "TEST/CM/dynamicpage/views/dynamicpage_container.ejs"
      }
    ]
  },
  "dynamicPage": {
    "widgets": [
      {
  "position": "html",
       // view: provides the path to the EJS template for the view.
  "view": "TEST/CM/dynamicpage/views/dynamicpage.ejs"
      }
    ]
  }
}
</pre>

<h4 id="s11_01_02_files_ejsview">EJS View Templates</h4>
<p>We will create two .ejs files for our new view: one for the container and one for the container's content.</p>
<p>We will call the container template <strong>dynamicpage_container.ejs</strong>. Here we are just creating a div element. Inside the div element, we call our controller (which we will create subsequently) to draw the <strong>dynamicPage</strong> widget referenced above.</p>
<pre>&lt;div id="soa-control-test-custom-form-container"
    &lt;%= soa.framework.control("TEST.Console.DynamicPage", this) %&gt;&gt;
&lt;/div&gt;
</pre>
<p>The container content template we will call <strong>dynamicpage.ejs</strong>. Here we display our content. In our case, the content is very simple. We are just displaying the value of the <strong>test</strong> attribute, which gets set in our controller, which we will see next.</p>
<pre>&lt;div id="soa-control-test-custom-form"&gt;
   &lt;%= test %&gt;
&lt;/div&gt;</pre>

<h4 id="s11_01_02_files_controller">Controller</h4>
<p>The example below is just a tiny sample of the logic that is normally in a controller. Typically, the controllers extend SOA.Console.BaseControl and there are two key functions, namely "display" and "postDisplay". Display is where the data is typically retrieved asynchronously for the form. Once the data is retrieved, a call is made to "SOA.Framework.Common.WidgetFactory.draw()" to actually render the EJS template above.</p>
<p>We will call our controller file <strong>dynamicpage.js</strong>. We gave our controller object the name <strong>TEST.Console.DynamicPage</strong>. This object name can then be referenced in the EJS template like we saw in our container template. Our "display" function has no data to retrieve, so it simply calls "postDisplay". Our "postDisplay" function calls the <strong>SOA.Framework.Common.WidgetFactory.draw</strong> function, which takes the widget name (corresponding to the entry in <strong>widget_factory.json</strong>) and any data that should be passed to the widget. Here, we are drawing our "dynamicPage" widget, and passing in an attribute named "test" which is referenced in our content template above.</p>
<pre>steal("iconsole/SOA/console/base_control", function() {
  can.getObject("TEST.Console.DynamicPage", window, true);
  TEST.Console.DynamicPage = SOA.Console.BaseControl(
    /* @Static */
    {
      "defaults" : {
      }
    },
    /* @Prototype */
    {
      "display" : function () {
  var thisControl = this;
  thisControl.postDisplay();
      },
      "postDisplay" : function () {
  var thisControl = this;
  SOA.Framework.Common.WidgetFactory.draw("dynamicPage", {
    "test" : "Hello World!"
  }, thisControl.element);
      }
    });
});</pre>

<h4 id="s11_01_02_files_initjs">init.js</h4>
<p>One last file must be modified. The <strong>init.js</strong> file must add a reference to our controller so it can be loaded when it is called.</p>
<pre>steal("tenant/TEST/console/dynamicpage");</pre>

<h4>Uploading Files</h4>
<p>Now that we've modified/created all the files we need to, we must upload them to the developer portal using the resource File Manager (see <a href="#s03_03">Uploading Resources</a> for more information).</p>
<ol>
	<li><strong>metadata.json</strong>, <strong>init.js</strong>, and <strong>widget_factory.json</strong> all go into the resources/theme/hermosa/SOA/CM/extensions directory.</li>
	<li>EJS Templates can be theme specific, so we will add <strong>dynamicpage_container.ejs</strong> and dynamicpage.ejs into a resources/theme/hermosa/TEST/CM/dynamicpage/views directory, creating the necessary folders or zipping content and uploading the zip.</li>
	<li>The controller file can be re-used across themes, so we will put <strong>dynamicpage.js</strong> into a resources/TEST/console/dynamicpage directory, creating the necessary folders or zipping content and uploading the zip.</li>
</ol>

<h4>Testing the New Page</h4>
<p>After uploading the modified files, we can test out our example by going to the landing page, then change the URL from home/landing to home/test to view the new page. It should display a page containing the text "Hello World!".</p>
<p><strong>Note</strong>: You might need to refresh the page to see the changes.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="s12">Bonita Custom File Structure</h2>
<table class="doctable">
	<thead>
		<tr>
			<th>Filename/Path</th>
			<th>Description</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>/resources/theme/bonita/less/custom.less</td>
			<td>Allows you to customize the styles in the site, in LESS pre-compiler format.</td>
		</tr>
		<tr>
			<td>/resources/theme/bonita/locales/custom_en-us.json</td>
			<td>Override default actions (that is, default page after login) as well as labels, messages in the portal pages.</td>
		</tr>
		<tr>
			<td>/resources/theme/bonita/SOA/Dev/extensions/init.js</td>
			<td>The initialization file for customization. All custom JavaScript files that are used for customization must be loaded in init.js.</td>
		</tr>
		<tr>
			<td>/resources/theme/bonita/SOA/Dev/extensions/nav_extensions.ejs</td>
			<td>Allows you to add items to the top menu in the header.</td>
		</tr>
		<tr>
			<td>/resources/theme/bonita/SOA/Dev/extensions/quick_links_extensions.ejs</td>
			<td>Allows you to add items to the user profile pull-down menu in the header.</td>
		</tr>
		<tr>
			<td>/resources/theme/bonita/SOA/Dev/extensions/widget_factory.js</td>
			<td>Allows you to configure any new pages that were added in metadata.json.</td>
		</tr>
		<tr>
			<td>/resources/theme/hermosa/SOA/Dev/api_page/views/api_sub_nav.ejs</td>
			<td>Allows you to customize the left menu items for api pages.</td>
		</tr>
		<tr>
			<td>/resources/theme/hermosa/SOA/Dev/app_page/views/app_sub_nav.ejs</td>
			<td>Allows you to customize the left menu items for app pages.</td>
		</tr>
		<tr>
			<td>/resources/theme/bonita/SOA/Dev/footer/views/footer.ejs</td>
			<td>Allows you to customize the footer content of the developer portal pages.</td>
		</tr>
		<tr>
			<td>/resources/theme/hermosa/SOA/Dev/nav/views/nav.ejs</td>
			<td>The original content of the top menu items in the header. Can be updated to modify/remove items from the original top menu items in the header.</td>
		</tr>
		<tr>
			<td>/resources/theme/hermosa/SOA/Dev/quick_links/views/quick_links.ejs</td>
			<td>The original content of the user profile pull-down menu items in the header. Can be updated to modify/remove items from the original user profile pull-down menu items in the header.</td>
		</tr>
		<tr>
			<td>/resources/theme/hermosa/SOA/Dev/user_profile_page/views/user_profile_sub_nav.ejs</td>
			<td>Allows you to customize the left menu items for user profile pages.</td>
		</tr>
		<tr>
			<td>/resources/theme/bonita/style/images/logo.png</td>
			<td>Default custom logo image.</td>
		</tr>
	</tbody>
</table>
<p><a href="#top">Back to top</a></p>


<h3 id="s12_01">Creating New Pages in Bonita Theme</h3>
<p>In this section:</p>
<ol>
	<li><a href="#s12_01_01">Example 1: Creating a New Static View in Bonita Theme</a></li>
	<li><a href="#s12_01_02">Example 2: Creating a New Dynamic View with a Controller in Bonita Theme</a></li>
</ol>

<h4 id="s12_01_01">Example 1: Creating a New Static View in Bonita Theme</h4>
<p>A common customization task is to add a new view in the developer portal to support static content from the developer portal content file structure. For example, you might want to add a "Showcases" page that lists all the best apps that have been built and provides links to them.</p>
<p>To set this up you'd have to create and upload two files:</p>
<ol>
	<li>Create <strong>widget_factory.js</strong> file and upload it to the platform (see <a href="#s03_03">Uploading Resources</a> for more information):
		<ol>
			<li>Create the <strong>widget_factory.js</strong> file along the lines of the example shown below.</li>
			<li>Upload the new file to the Resources folder structure (create folders as needed, be sure case is exact on folder names). In the developer portal: <strong>More</strong> &gt; <strong>Admin</strong> &gt; <strong>Customization</strong>. At top of page, click <strong>File Manager</strong>.</li>
			<li>In the <strong>resources</strong> folder, create additional folders to create this path: <strong>resources/theme/bonita/SOA/Dev/extensions</strong></li>
			<li>In the <strong>extensions</strong> folder, upload the <strong>widget_factory.js</strong> file.</li>
		</ol>
	</li>
	<li>Create the new content page and upload it to the platform in Content (see <a href="#s03_02">Uploading Content</a> for more information):
		<ol>
			<li>Offline, develop your <strong>index.htm</strong> content file. Note the file extension should be htm, not html.</li>
			<li>In the developer portal: <strong>More</strong> &gt; <strong>Admin</strong> &gt; <strong>File Manager</strong>. In the <strong>Content</strong> section, click <strong>File Manager</strong>.</li>
			<li>In the <strong>content</strong> folder, create additional folders to create this path: <strong>content/showcases</strong>.
<p><strong>Note</strong>: the path is defined, in the sample file below, by the name of the widget, which is showcases.</p>
			</li>
			<li>In the showcases folder, upload the index.htm file.</li>
			</ol>
	</li>
	<li>Test. Go to the welcome page (click on logo in upper left corner), then change the URL from #!welcome to #!showcases to view the new page.
	<p><strong>Note</strong>: You might need to refresh the page.</p></li>
</ol>
<p><strong>Sample <strong>widget_factory.js</strong> file for adding a new static content view</strong></p>
<pre>steal("iframework/SOA/framework/common/widget_factory", function () {
  SOA.Framework.Common.WidgetFactory.config({
    // ------------------------------ Bookmark URLs ------------------------------
    "showcases" : {
      "widgets" : [{
  "ref" : "documentViewerContainer",
  "data" : {
    "defaultHeight" : 100
  }
      }]
    }
  });
});</pre>
<p><a href="#top">Back to top</a></p>



<h4 id="s12_01_02">Example 2: Creating a New Dynamic View with a Controller in Bonita Theme</h4>
<p>This example will be similar to <a href="#s11_01_02">Example 2: Creating a New Dynamic View with a Controller in Hermosa Theme</a>, with a few differences:</p>
<ol>
	<li>The Bonita theme does not have a <strong>metadata.json</strong> file to control the layout of the views. Instead, all views are defined in <strong>widget_factory.js</strong>.</li>
	<li>The path to the extensions directory is different. Hermosa uses a <strong>/SOA/CM/extensions</strong> path whereas Bonita uses a <strong>/SOA/Dev/extensions</strong> path.</li>
</ol>

<h4>widget_factory.js</h4>
<p>The <strong>widget_factory.js</strong> file is similar to the <a href="#s11_01_02_files_widgetfactoryjson">widget_factory.json</a> file we created in <a href="#s11_01_02">Example 2: Creating a New Dynamic View with a Controller in Hermosa Theme</a>. You'll see below the only difference is the addition of an additional widget named "test". This will serve as a bookmark URL, similar to the <strong>objtype</strong> and view attributes of the <a href="#s11_01_01_metadatajson">metadata.json</a> in the Hermosa theme. So when a URL in the Bonita theme ends with /#!test, it will load the widget "dynamicPageContainer". </p>
<p><strong>Note</strong>: You will notice the "view" paths to our EJS templates is slightly different to align with common paths in the Bonita theme (SOA/Dev/ vs SOA/CM/).</p>
<pre>steal("iframework/SOA/framework/common/widget_factory", function () {
  SOA.Framework.Common.WidgetFactory.config({
    // ------------------------------ Bookmark URLs ------------------------------
    "test" : {
      "widgets": [{
  "ref": "dynamicPageContainer"
      }]
    },
    "dynamicPageContainer" : {
      "widgets" : [{
  "position" : "html",
  "view" : "TEST/Dev/dynamicpage/views/dynamicpage_container.ejs",
  "selector" : "#soa-control-cm-page-container"
      }]
    },
    "dynamicPage" : {
      "widgets" : [{
  "position" : "html",
  "view" : "TEST/Dev/dynamicpage/views/dynamicpage.ejs"
      }]
    }
  });
});
</pre>

<h4>Other Files</h4>
<p>The <a href="#s11_01_02_files_ejsview">EJS templates</a>, <a href="#s11_01_02_files_controller">controller</a>, and <a href="#s11_01_02_files_initjs">init.js</a> files can be created in the same way as explained in <a href="#s11_01_02">Example 2: Creating a New Dynamic View with a Controller in Hermosa Theme</a>.</p>

<h4>Uploading Files</h4>
<p>Now that we've modified/created all the files we need to, we must upload them to the developer portal using the resource File Manager (see <a href="#s03_03">Uploading Resources</a> for more information).</p>
<ol>
	<li><strong>init.js</strong> and <strong>widget_factory.js</strong> go into the <strong>resources/theme/bonita/SOA/Dev/extensions</strong> directory.</li>
	<li>EJS templates can be theme-specific, so we will add <strong>dynamicpage_container.ejs</strong> and <strong>dynamicpage.ejs</strong> into a <strong>resources/theme/bonita/TEST/Dev/dynamicpage/views</strong> directory, creating the necessary folders or zipping content and uploading the zip.</li>
	<li>The controller file can be re-used across themes, so if not already done for <a href="#s11_01_02">Example 2: Creating a New Dynamic View with a Controller in Hermosa Theme</a>, we will put <strong>dynamicpage.js</strong> into a <strong>resources/TEST/console/dynamicpage directory</strong>, creating the necessary folders or zipping content and uploading the zip.</li>
</ol>

<h4>Testing the New Page</h4>
<p>After uploading the modified files, we can test out our example by going to the welcome page (click on logo in upper left corner), then change the URL from #!welcome to #!test to view the new page. It should display a page containing the text "Hello World!".</p>
<p><strong>Note</strong>: You might need to refresh the page to see the changes.</p>
<p><a href="#top">Back to top</a></p>