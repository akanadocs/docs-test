---
layout: apipage
title: Reference Material | Enterprise API Platform API
description: This page includes reference material common to multiple operations, including the topics listed below.
product: cm
category: ref
nav-title: Reference Material 
no-nav: api
sub-nav: true
sub-nav-class: ref
no-catalog: true
---

<h2><a name="top"></a>Enterprise API Platform API Reference Material</h2>
<p>This page includes reference material common to multiple operations, including the topics listed below.</p>
<table class="tableparmsresponse" width="100%" cellspacing="0" cellpadding="2">
<thead>
  <tr>
  <th width="33%">Topic (This File)</th>
  <th width="33%">Topic (This File)</th>
  <th width="34%">Topic (This File)</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td><a href="#ref_baseendpoint">Endpoint Construction</a></td>
    <td><a href="#ref_httpstatuscodes">HTTP Status Codes</a></td>
    <td><a href="#ref_authorizationroles">Authorization Roles</a></td>
  </tr>
  <tr>
    <td><a href="#ref_xmljson">XML and JSON</a></td>
    <td><a href="#ref_atmo_caching">How the&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;API Uses Caching</a></td>
    <td><a href="#ref_errormessages">Error Messages</a></td>
  </tr>
  <tr>
    <td><a href="#ref_httprequestheaders">HTTP Request Headers</a></td>
    <td><a href="#ref_datatypes">Data Types</a></td>
    <td><a href="#ref_publicandprivateapps">Public and Limited (Private) Apps</a></td>
  </tr>
  <tr>
    <td><a href="#ref_httpresponseheaders">HTTP Response Headers</a></td>
    <td><a href="#ref_mediatypes">Media Types</a></td>
    <td><a href="#ref_derivingstatevalue">Determining the State Value of an App</a></td>
  </tr>
  <tr>
    <td><a href="#ref_cookies">Cookies in the&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;</a></td>
    <td><a href="#ref_authentication">Authentication and Authorization</a></td>
    <td>&nbsp;</td>
  </tr>
</tbody>
</table>
<p>Supplementary reference material is also available in the following individual reference topics:</p>
<table class="tableparmsresponse" width="100%" cellspacing="0" cellpadding="2">
<thead>
  <tr>
  <th width="33%">Topic (Separate File)</th>
  <th width="33%">Topic (Separate File)</th>
  <th width="34%">Topic (Separate File)</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td><strong>General</strong></td>
    <td valign="top"><strong>General</strong></td>
    <td valign="top"><strong>APIs</strong></td>
  </tr>
  <tr>
    <td><a href="Ref_CSRFPreventionOnThePlatform.htm">CSRF Prevention on the Platform</a></td>
    <td valign="top"><a href="Ref_FileUploadWithAjax.htm">File Upload with Ajax</a></td>
    <td valign="top"><a href="Ref_API_DefaultProfile.htm">The API Default Profile</a></td>
  </tr>
  <tr>
    <td><a href="Ref_DeploymentZonesOnThePlatform.htm">Deployment Zones on the Platform</a></td>
    <td valign="top"><a href="Ref_ManagingAvatarsOnThePlatform.htm">Managing Avatars  on the Platform</a></td>
    <td valign="top"><a href="Ref_ManagingAPIAdministrators.htm">Managing API Administrators</a></td>
  </tr>
  <tr>
    <td><a href="Ref_DownloadableFilesInResponseMessages.htm">Downloadable Files in Response Messages</a></td>
    <td valign="top"><a href="Ref_RSSChannelsOnThePlatform.htm">RSS Channels in the Platform</a></td>
    <td valign="top"><strong>Apps</strong></td>
  </tr>
  <tr>
    <td><a href="Ref_IDsOnThePlatform.htm">IDs on the Platform</a></td>
    <td valign="top"><a href="Ref_UsingSearchOnThePlatform.htm">Using Search on the Platform</a></td>
    <td valign="top"><a href="Ref_ManagingAppVersions.htm">Managing App Versions</a></td>
  </tr>
  <tr>
    <td><a href="Ref_MetricsOnThePlatform.htm">Metrics on the Platform</a></td>
    <td valign="top"><a href="Ref_ManagingAPIDocumentationContent.htm">Managing API Documentation Content</a></td>
    <td valign="top"><a href="Ref_Ex_AddingAnApp.htm">Example: Adding an App</a></td>
  </tr>
  <tr>
    <td><a href="Ref_PasswordResetProcess.htm">The Password Reset Process</a></td>
    <td valign="top"><a href="Ref_ManagingDomainsOnThePlatform.htm">Managing Domains  on the Platform</a></td>
    <td valign="top"><a href="Ref_Ex_AddingAnAppVersion.htm">Example: Adding an App Version</a><a href="Ref_ManagingAPIAdministrators.htm"></a></td>
  </tr>
  <tr>
    <td><a href="Ref_WorkingWithTimeZonesAndTimeIntervals.htm">Working with Time Zones and Time Intervals</a></td>
    <td valign="top"><a href="Ref_ManagingGroupsOnThePlatform.htm">Managing Groups  on the Platform</a></td>
    <td valign="top"><a href="Ref_ManagingAPIAdministrators.htm">Managing API Administrators</a></td>
  </tr>
  <tr>
    <td><a href="Ref_AuthorizationRolesOnThePlatform.htm">Authorization Roles on the Platform</a></td>
    <td valign="top">&nbsp;</td>
    <td valign="top">&nbsp;</td>
  </tr>
  <tr>
    <td><a href="Ref_ExecutingWorkflowActions.htm">Executing Workflow Actions</a></td>
    <td valign="top">&nbsp;</td>
    <td valign="top">&nbsp;</td>
  </tr>
</tbody>
</table>
<a name="howto_list"></a><p>The following &quot;How-to&quot; getting started topics are also available:</p>
<table class="tableparmsresponse" width="100%" cellspacing="0" cellpadding="2">
<thead>
  <tr>
  <th width="33%">&quot;How-to&quot; topic</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td><a href="Ref_Ex_Overview.htm">Examples: Overview</a></td>
  </tr>
  <tr>
    <td><strong>Apps</strong></td>
    </tr>
  <tr>
    <td valign="top"><a href="Ref_Ex_AddingAnApp.htm">Example: Adding an App</a></td>
  </tr>
  <tr>
    <td valign="top"><a href="Ref_Ex_AddingAnAppVersion.htm">Example: Adding an App Version</a><a href="Ref_ManagingAPIAdministrators.htm"></a></td>
  </tr>
  <tr>
    <td valign="top"><strong>APIs</strong></td>
  </tr>
  <tr>
    <td valign="top"><a href="Ref_Ex_AddingAnAPI.htm">Example: Adding an API</a></td>
  </tr>
  <tr>
    <td valign="top"><a href="Ref_Ex_AddingAnAPIVersion.htm">Example: Adding an API Version</a></td>
  </tr>
  <tr>
    <td valign="top"><a href="Ref_Ex_AddingAnAPILegalAgreement.htm">Example: Adding an API Legal Agreement</a></td>
  </tr>
  <tr>
    <td valign="top"><strong>Users</strong></td>
  </tr>
  <tr>
    <td valign="top"><a href="Ref_Ex_ResettingAPassword.htm">Example: Resetting a Password</a></td>
  </tr>
</tbody>
</table>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>


<h3><a name="ref_baseendpoint"></a>Endpoint Construction</h3>
<p>The structure for all&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;API endpoints for the current version is as follows:</p>
<pre class="soaapidoc_endpoint"><!-- #BeginLibraryItem "/Library/_endpointbase.lbi" -->https://&lt;hostname&gt;/api/<!-- #EndLibraryItem -->{service}</pre>
<p>For example, for the apps service the endpoint is as follows:</p>
<pre class="soaapidoc_endpoint"><!-- #BeginLibraryItem "/Library/_endpointbase.lbi" -->https://&lt;hostname&gt;/api/<!-- #EndLibraryItem -->apps</pre>
<p>The basic URL, which is the same for all&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;services and methods, can be broken down as follows:</p>
<ul>
  <li>Scheme (https)</li>
  <li>Host (api.atmos.phere)</li>
  <li>Version (1)</li>
  <li>Specific service/operation</li>
</ul>
<p>There might also be one or more URL parameters, or an additional part to the URL. For example, the following includes two URL parameters and an extended URL path: </p>
<pre class="soaapidoc_endpoint"><!-- #BeginLibraryItem "/Library/_endpointbase.lbi" -->https://&lt;hostname&gt;/api/<!-- #EndLibraryItem -->apps/{AppID}/members/{UserID}</pre>
<p>Here is an example of the above: </p>
<pre class="soaapidoc_endpoint"><!-- #BeginLibraryItem "/Library/_endpointbase.lbi" -->https://&lt;hostname&gt;/api/<!-- #EndLibraryItem -->apps/app10017.<!-- #BeginLibraryItem "/Library/_productname_lowercase.lbi" -->
acmepayments<!-- #EndLibraryItem -->/members/user10021.<!-- #BeginLibraryItem "/Library/_productname_lowercase.lbi" -->
acmepayments<!-- #EndLibraryItem --></pre>
<p>In some cases there might be additional query parameters. These are appended after a question mark at the end of the URL. For example, the following operation, GET&nbsp;search, includes a query parameter for the search expression: </p>
<pre class="soaapidoc_endpoint"><!-- #BeginLibraryItem "/Library/_endpointbase.lbi" -->https://&lt;hostname&gt;/api/<!-- #EndLibraryItem -->search?{q}={SearchExpression}</pre>
<p>Here is an example of the above: </p>
<pre class="soaapidoc_endpoint"><!-- #BeginLibraryItem "/Library/_endpointbase.lbi" -->https://&lt;hostname&gt;/api/<!-- #EndLibraryItem -->search?q=payments&amp;count=2</pre>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>


<h3><a name="ref_xmljson"></a>XML and JSON</h3>
<p>Many methods  offer a choice of JSON or XML formats for the data in the response message. Other methods send or accept other media types such as plain text or image files.</p>
<p>The Content-Type header specifies which of the accepted media types your app is sending, and the Accept header specifies which of the accepted media type choices you want for the response format.</p>
<p>Depending on your app and implementation, JSON or XML might be preferable. For example, if your app is browser-based, you might prefer JSON because it can easily be converted to JavaScript.</p>
<p>In some cases, operations might also allow, or might only allow, version-specific headers; for example,  <!-- #BeginLibraryItem "/Library/hdrval_appjson_72.lbi" --><strong>application/vnd.soa.v72+json</strong><!-- #EndLibraryItem -->, <!-- #BeginLibraryItem "/Library/hdrval_appxml_72.lbi" --><strong>application/vnd.soa.v72+xml</strong><!-- #EndLibraryItem -->. In these cases, the request or response messages contain standard JSON or XML. The version-specific headers allow users to take advantage of version-specific feature enhancements associated with the API development.</p>
<p>Valid media types for each operation are listed in the documentation for the operation.</p>
<p><a href="Ref_API_Reference.htm#ref_mediatypes">List of valid media types in the&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;API.</a></p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3><a name="ref_httprequestheaders"></a>HTTP Request Headers</h3>
<p>The&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;API uses the HTTP request headers shown in the table below.<!-- For general information about each header field, refer to the applicable glossary entries.--> The significant headers are:</p>
<ul>
  <li><a href="#acceptheader">Accept</a></li>
  <li>For operations other than GET, <a href="#contenttype_request">Content-Type</a></li>
  <li><a href="#host_request">Host</a></li>
  <li>Cookie (certain cookies, see <a href="#ref_cookies">Cookies in the&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;</a>)</li>
</ul>
<table class="tableparmsresponse" width="100%" cellspacing="0" cellpadding="2">
  <thead>
    <tr>
      <th width="20%">Header Name</th>
      <th width="15%">Used In</th>
      <th width="65%">Description/Values</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a id="acceptheader"></a>Accept</td>
      <td>Request Only</td>
      <td><!-- #BeginLibraryItem "/Library/hdrreq_accept.lbi" -->
Lists one or more data formats that are valid in the response. For example,<strong> application/json or text/xml</strong>. The Accept header can include other formats as long as the required format is included. It's a good idea to list only the required format, or at least include it as the first on the list.<!-- #EndLibraryItem --></td>
  </tr>
    <tr>
      <td>Accept-Encoding</td>
      <td>Request Only</td>
      <td>Lists one or more encoding methods that are valid for compression of the response message. This ties in with the response header <strong>Content-Encoding</strong> which specifies the method actually used. For example: <strong>gzip,  deflate</strong></td>
  </tr>
    <tr>
      <td>Accept-Language</td>
      <td>Request Only</td>
      <td>Lists one or more languages that are valid for the response. <strong>en-us</strong> is preferred, <strong>en</strong> is valid. For example:<strong> en-us,en;q=0.5</strong></td>
  </tr>

    <tr>
      <td>Cache-Control</td>
      <td>Both</td>
      <td><!-- #BeginLibraryItem "/Library/hdrboth_cache-control.lbi" -->
Used in both request and response to specify whether the message can be cached between the client and the server.&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;operations generally do not cache responses, so the value is generally <strong>no-cache</strong>. In some instances, such as with avatars and content, it is more efficient to cache the information. In these cases, we set a value in the Cache-Control response header. For example: <strong>Cache-Control: public, max-age=604800</strong>. This sets the content to be cached for 604800 seconds (one week).<!-- #EndLibraryItem --></td>
  </tr>
    <tr>
      <td>Connection</td>
      <td>Request Only</td>
      <td><!-- #BeginLibraryItem "/Library/hdrreq_connection.lbi" -->Instructs the server what to do with the connection once the request is received. The <strong>keep-alive</strong> value for this header means that the connection is kept open for the response.<!-- #EndLibraryItem --></td>
  </tr>
    <tr>
      <td>Content-Length</td>
      <td>Request Only</td>
      <td>Indicates the length of the message body, in bytes. Example: <strong>53</strong>.</td>
  </tr>
    <tr>
      <td><a id="contenttype_request"></a>Content-Type</td>
      <td>Both</td>
      <td><!-- #BeginLibraryItem "/Library/hdrreq_content-type.lbi" -->
<p>Specifies the media type of a request or response message body.</p>
<p>For request messages, content-type is used for POST&nbsp;and PUT&nbsp;but not for GET&nbsp;or DELETE. Most&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;operations that use this header use <strong>application/json</strong> in the request message. Methods involving file upload use <strong>multipart/form-data</strong>. Methods with POST&nbsp;parameters might use <strong>application/x-www-form-urlencoded</strong>; for example, the <span class="apidoc_code"><a href="login/m_login_renewToken.htm">POST&nbsp;/api/login/renewToken</a></span> operation.</p><!-- #EndLibraryItem --></td>
  </tr>
    <tr>
      <td>Cookie</td>
      <td>Request Only</td>
      <td><!-- #BeginLibraryItem "/Library/hdrreq_cookie.lbi" -->
An extension header used for client identification and tracking. In the&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;API the cookie parameter contains the session ID.<!-- #EndLibraryItem -->For more information, see <a href="#ref_cookies">Cookies in the&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;</a> below.</td>
  </tr>
    <tr>
      <td><a id="host_request"></a>Host</td>
      <td>Request Only</td>
      <td><!-- #BeginLibraryItem "/Library/hdrreq_host.lbi" -->
The hostname and port number of the machine sending the message. Example: <strong>api.acmepayments.com.</strong><!-- #EndLibraryItem --></td>
  </tr>
    <tr>
      <td>Referer</td>
      <td>Request Only</td>
      <td><!-- #BeginLibraryItem "/Library/hdrreq_referer.lbi" -->
The URL from which the request originated. Example: <strong>https://api.acmepayments.com</strong>.<!-- #EndLibraryItem --></td>
  </tr>
    <tr>
      <td>User-Agent</td>
      <td>Request Only</td>
      <td>Indicates the software/version making the request. Generally includes browser name and version, and sometimes includes additional information such as operating system. Example: <strong>Mozilla/5.0 (Windows NT 6.1; WOW64; rv:13.0) Gecko/20100101 Firefox/13.0.1</strong>.</td>
  </tr>
    <tr>
      <td>X-Requested-With</td>
      <td>Request Only</td>
      <td>An extension header used to identify Ajax requests. Wherever the&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;API uses this header, the value is <strong>XMLHttpRequest</strong>.</td>
  </tr>
<!--  <tr>
      <td>&nbsp;</td>
      <td>&nbsp;</td>
      <td>&nbsp;</td>
  </tr>
-->
  </tbody>
</table>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3><a name="ref_httpresponseheaders"></a>HTTP Response Headers</h3>
<p>The&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;API uses the HTTP response headers shown in the table below.<!-- For general information about each header field, refer to the applicable glossary entries.--> The significant headers are:</p>
<ul>
  <li>Content-Type</li>
  <li>For the specific operations that require it, Atmo-Renew-Token</li>
</ul>
<table class="tableparmsresponse" width="100%" cellspacing="0" cellpadding="2">
  <thead>
    <tr>
      <th width="20%">Header Name</th>
      <th width="15%">Used In</th>
      <th width="65%">Description/Values</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a id="atmorenewtoken"></a>Atmo-Renew-Token</td>
      <td>Response only</td>
      <td><!-- #BeginLibraryItem "/Library/hdrrsp_atmo-renew-token.lbi" -->
<strong>renew</strong>. This is a custom response header used when the action of the method causes a change in a value  that's stored in the token. The token includes information on the user's apps, APIs, and groups, so actions such as adding an app or accepting an invitation to join an app team require update of the token. A value of <strong>renew</strong> means that the operation has changed some information that's stored in the token, and you must therefore renew the token using the <span class="apidoc_code"><a href="login/m_login_renewToken.htm">POST&nbsp;/api/login/renewToken</a></span> operation.<!-- #EndLibraryItem --></td>
  </tr>

    <tr>
      <td><a id="cachecontrol"></a>Cache-Control</td>
      <td>Both</td>
      <td><!-- #BeginLibraryItem "/Library/hdrboth_cache-control.lbi" -->
Used in both request and response to specify whether the message can be cached between the client and the server.&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;operations generally do not cache responses, so the value is generally <strong>no-cache</strong>. In some instances, such as with avatars and content, it is more efficient to cache the information. In these cases, we set a value in the Cache-Control response header. For example: <strong>Cache-Control: public, max-age=604800</strong>. This sets the content to be cached for 604800 seconds (one week).<!-- #EndLibraryItem --></td>
  </tr>
    <tr>
      <td>Content-Encoding</td>
      <td>Response only</td>
      <td><!-- #BeginLibraryItem "/Library/hrdrsp_content-encoding.lbi" -->
Indicates the type of compression encoding the server used for the response message, so that the client can decode the message. This is the counterpart to the <strong>Accept-Encoding</strong> request header which specifies which types of compression are acceptable in the response. Example: <strong>gzip</strong>. The&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;API always returns a gzip-encoded response if the request header indicates that gzip encoding is accepted for responses.<!-- #EndLibraryItem --></td>
  </tr>
    <tr>
      <td><a id="contentdisposition_response"></a>Content-Disposition</td>
      <td>Response only</td>
      <td>An opportunity to raise a &quot;File Download&quot; dialog box for a known binary file type, or to suggest a filename. This facilitates prompting the user to save the file directly to disk, bypassing the default behavior of displaying the file in the browser. All operations that return content as a downloadable file, such as app and API export files and metrics, use this header. For more information, see <a href="Ref_DownloadableFilesInResponseMessages.htm">Downloadable Files in Response Messages</a>.</td>
    </tr>
    <tr>
      <td><a id="contenttype_response"></a>Content-Type</td>
      <td>Both</td>
      <td><p>Specifies the media type of a request or response message  body.</p>
<p>For response messages, content-type is always used. Refer to  specific methods for valid values. Some typical scenarios:</p>
<ul class="apidoctable_ul">
  <li>Generally, response messages use <strong>application/json</strong>, <strong>text/xml</strong>,  or <strong>text/plain</strong>.</li>
  <li>Methods returning an RSS feed generally use <strong>application/json</strong> unless another format is requested in the request message's accept  header.</li>
  <li>Methods involving file upload use <strong>multipart/form-data</strong>. When binary data is included in the response, different content-types are used based on the type of the data; for example, <strong>image/gif</strong>, <strong>image/jpeg</strong>, <strong>image/png</strong>, or <strong>application/zip</strong>. </li>
</ul></td>
  </tr>
    <tr>
      <td><a id="location_response"></a>Location</td>
      <td>Response only</td>
      <td>Used with HTTP 307 Temporary Redirect, to provide the URL location for the redirect.</td>
    </tr>
    <tr>
      <td>Date</td>
      <td>Response only</td>
      <td><!-- #BeginLibraryItem "/Library/hdrrsp_date.lbi" -->
A date/timestamp representing the time on the server when the message response was sent. Example: <strong>Wed,  22 Jan 2014 21:09:23 GMT</strong>.<!-- #EndLibraryItem --></td>
  </tr>
    <tr>
      <td><a id="setcookie_response"></a>Set-Cookie</td>
      <td>Response only</td>
      <td>Sends an updated user cookie. Cookies are used for the authentication token, and some operations require an update to the cookie. For example, the authentication token includes information about groups that the user is a member of, so the <span class="apidoc_code"><a href="groups/m_groups_addGroup.htm">POST&nbsp;/api/groups</a></span>, <span class="apidoc_code"><a href="groups/m_groups_deleteGroup.htm">DELETE&nbsp;/api/groups/{GroupID}</a></span>, and <span class="apidoc_code"><a href="groups/m_groups_removeMemberFromGroup.htm">DELETE&nbsp;/api/groups/{GroupID}/members/{UserID}</a></span> operations return an updated cookie. Operations relating to signing in, such as <span class="apidoc_code"><a href="users/m_users_completeSignup.htm">POST&nbsp;/api/users/completeSignup</a></span>, also update the cookie. The <span class="apidoc_code"><a href="login/m_login_logout.htm">POST&nbsp;/api/login/logout</a></span> operation returns an updated value that expires the browser cookie since the user is logging out.</td>
  </tr>
    <tr>
      <td>Transfer-Encoding</td>
      <td>Response only</td>
      <td><!-- #BeginLibraryItem "/Library/hdrrsp_transfer-encoding.lbi" -->
If encoding was used to transfer the message safely, this value indicates the encoding method used. Example: <strong>chunked</strong>. For HTTP 1.1 messages, the&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;API always uses the value <strong>chunked</strong>. For HTTP 1.0, transfer-encoding is not used.<br /><strong>Note</strong>: We recommend using HTTP version 1.1 since it includes several enhancements; chunking is one of them.<!-- #EndLibraryItem --></td>
  </tr>
  </tbody>
</table>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3><a name="ref_cookies"></a>Cookies in the&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;</h3>
<p>API calls from the&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;use the custom cookies shown below. The AtmoAuthToken cookie is quite long&#8212;over 400 characters.</p>
<p class="apidoc_note"><strong>Note</strong>: The only requirement from the developer using the&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;API is that the app supports cookies. The&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;takes care of the rest. If your development environment supports automatically capturing and sending the&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;cookie you don't need to do anything. If it doesn't, you'll have to make sure the cookie that the&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;returns upon login is sent with every request and that the token is renewed when information stored in the token changes, such as when a user adds an app.</p>
<table class="tableparmsresponse" width="100%" cellspacing="0" cellpadding="2">
<thead>
    <tr>
    <th width="20%">Cookie Name</th>
    <th width="80%">Description/Values</th>
    </tr>
</thead>
<tbody>
    <tr>
      <td>AtmoAuthToken_&lt;fedmemberid&gt;</td>
      <td><p>A tenant-specific cookie. <!--In a federation scenario, one cookie is set for each federation member, so there would generally be at least two.-->This is the&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;authorization token. This cookie indicates the level of access allowed. It is valid only for 30 minutes and must be renewed at that time. It also includes other information, such as the APIs, apps, and groups the user is a member of. When any of this information changes, the token must be renewed.</p>
        <p><strong>Note</strong>: When your app invokes the <span class="apidoc_code"><a href="login/m_login_login.htm">POST&nbsp;/api/login</a></span> method, the&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;sets the cookie; you don't need to do anything. Your app must support cookies, so that the cookies that are set by the API responses can be sent back as part of the subsequent requests.</p></td>
    </tr>
    <tr>
      <td>Csrf-Token_&lt;fedmemberid&gt;</td>
      <td>An additional cookie used when the CSRF prevention feature is in effect. The value is then used in the <a href="Ref_Glossary_CommunityPlatform.htm#gl_xcsrf_token_fedmemberid">X-Csrf-Token_fedmemberID</a> custom header in request messages. For more information, see <a href="Ref_CSRFPreventionOnThePlatform.htm">CSRF Prevention on the Platform</a>.</td>
    </tr>
</tbody>
</table>
<p>Below is an example of an actual AtmoAuthToken cookie request header sent by the <span class="apidoc_code"><a href="legals/m_legals_getAgreementDocument.htm">GET&nbsp;/api/legals/{LegalDocumentID}</a></span> operation. Line breaks have been added for display reasons.</p>
<pre>Cookie:  AtmoAuthToken_acmepayments=TokenID%3D94299147-d006-11e3-a97a-e4f95250745e%2Cclaimed_id%3Durn%3Aacmepayments%3Auser
%3Ademo%3Auser29005%2CissueTime%3D1398821242584%2CexpirationTime%3D1398823042538%2CAttributesIncluded%3Dfalse
%2CUserFDN%3Duser29005%252Edemo%2CUserName%3Ddemo-MaryMead%2Csig%3DHXlox2IqdCf1bI060ZoGQESQjhQJz5x_uilEZGifnL
4gUr_cFaepQoebfmJJCmrUVqoF0yFkHnuhAMxnVzHUnnbIbfvwqOyZ2gClm4n8IyHza2m_PxfMAOpM8UWQ0jfwReP7mbU1E2OyH69uRCgg5Ss
Lw9RQLzyxojBGslxXDvo</pre>
<p>Below is an example of an actual CSRF token request header sent by the <span class="apidoc_code"><a href="contracts/m_contracts_updateContract.htm">PUT&nbsp;/api/contracts/{ContractID}</a></span> (update contract) operation. Line breaks have been added for display reasons.</p>
<pre>
<!-- #BeginLibraryItem "/Library/hdr_xcsrf.lbi" -->X-Csrf-Token_&lt;tenant&gt;: &lt;TokenID&gt;<!-- #EndLibraryItem --></pre>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>


<h3><a name="ref_atmo_caching"></a>How the&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;API Uses Caching</h3>
<p>Most&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;operations don't use caching at all. Generally, the <strong>Cache-Control</strong> header is set to <strong>no-cache</strong>, for both request and response messages, since the&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;APIs generally pass database information that might change and should therefore not be cached.</p>
<p>However, there are a few methods that do use caching. In general, the types of information that might be cached are images (such as a user's profile picture), data resources such as API documentation and online help, and code-related components such as JavaScript files, templates, and stylesheets.</p>
<p>In some cases, operations are set by default to read the response from cache, but include an optional parameter so that you can choose not to read from cache. For example, the <span class="apidoc_code"><a href="login/m_login_getLoginDomains.htm">GET&nbsp;/api/login/domains</a></span> operation includes this parameter.</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>


<h3><a name="ref_datatypes"></a>Data Types</h3>
<p>The&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;API uses the data types listed below.</p>
<table class="tableparmsresponse" width="100%" cellspacing="0" cellpadding="2">
<thead>
    <tr>
    <th width="20%">Type</th>
    <th width="80%">Description</th>
    </tr>
</thead>
<tbody>
    <tr>
      <td>boolean</td>
      <td>Primitive Java data type; if not required and not specified, defaults to <strong>false</strong>.</td>
  </tr>
    <tr>
      <td><a name="datatypes_datetime"></a>DateTime</td>
      <td>All date/time information in the&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;API uses the DateTime data type, with the Z suffix indicating that the time is represented in <a href="Ref_Glossary_CommunityPlatform.htm#gl_coordinateduniversaltime">UTC</a>. <strong>Example: 2014-01-30T09:30:10</strong>Z.</td>
  </tr>
    <tr>
      <td><a name="datatypes_duration"></a>Duration</td>
      <td><p>The duration of a request or response message is expressed with the Duration data type in the format <strong>PnYnMnDTnHnMnS</strong>, with up to three decimal digits for milliseconds, where:</p>
        <ul class="apidoctable_ul">
          <li>P indicates the period (required)</li>
          <li>nY indicates the number of years</li>
          <li>nM indicates the number of months</li>
          <li>nD indicates the number of days</li>
          <li>T indicates the start of a time section (required if you are going to specify hours, minutes, or seconds)</li>
          <li>nH indicates the number of hours</li>
          <li>nM indicates the number of minutes</li>
          <li>nS indicates the number of seconds, including up to three positions after the decimal point for milliseconds. For example, a message response time of P0Y0M0DT0H0M0.022S indicates 22 milliseconds.</li>
      </ul></td>
    </tr>
    <tr>
      <td>int</td>
      <td>Primitive Java data type; if not required and not specified, defaults to <strong>0</strong> (zero).</td>
  </tr>
    <tr>
      <td>long</td>
      <td>Primitive Java data type. For example, PictureID for the image associated with a user.</td>
  </tr>
    <tr>
      <td>string</td>
      <td>Primitive Java data type; if not required and not specified, defaults to <strong>null</strong>.</td>
  </tr>
</tbody>
</table>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3><a name="ref_mediatypes"></a>Media Types</h3>
<p>The&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;API uses the media types listed below, in either the request or response messages or both.</p>
<table class="tableparmsresponse" cellpadding="2" cellspacing="0" width="100%">
<thead>
 <tr bgcolor="#DDDDDD">
    <th width="20%">Mediatype</th>
    <th width="10%">in Req?</th>
    <th width="10%">In Resp?</th>
    <th width="60%">Description</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td><!-- #BeginLibraryItem "/Library/hdrval_appjson.lbi" --><strong>application/json</strong><!-- #EndLibraryItem --></td>
    <td>Yes</td>
    <td>Yes</td>
    <td><a href="Ref_Glossary_CommunityPlatform.htm#gl_json">JSON</a> format.</td>
  </tr>
  <tr>
    <td>application/xml</td>
    <td>Yes</td>
    <td>Yes</td>
    <td>XML format.</td>
  </tr>
  <tr>
    <td>text/xml</td>
    <td>Yes</td>
    <td>Yes</td>
    <td>XML format.</td>
  </tr>
  <tr>
    <td>text/plain</td>
    <td>&nbsp;</td>
    <td>Yes</td>
    <td>Plain text.</td>
  </tr>
  <tr>
    <td>application/octet-stream</td>
    <td>&nbsp;</td>
    <td>Yes</td>
    <td>Indicates a file attachment. For example, the <span class="apidoc_code"><a href="apps/m_apps_getAppCertificate.htm">GET&nbsp;/api/apps/versions/{RuntimeID}/certificate</a></span> operation, which returns the security certificate for an app version, has this media type for the response message, which is the certificate file.</td>
  </tr>
  <tr>
    <td>application/x-www-form-urlencoded</td>
    <td>Yes</td>
    <td>No</td>
    <td>The message information is URL -encoded. For example, the <span class="apidoc_code"><a href="passwordmanagement/m_passwordmanagement_sendPasswordResetCode.htm">POST&nbsp;passwordmanagement/sendPasswordResetCode</a></span> operation takes the user's email address as a form parameter. The request message is URL-encoded, so the <strong>@</strong> sign in the email address is encoded to <strong>%40</strong> for sending over HTTP.</td>
  </tr>
  <tr>
    <td>*/*</td>
    <td>Yes</td>
    <td>No</td>
    <td>Used in a request to indicate that the expected response can be any format.</td>
  </tr>
  <tr>
    <td>multipart/form-data</td>
    <td>Yes</td>
    <td>&nbsp;</td>
    <td>A format used when the content has multiple sections of different content types. The multipart media type has separate components, separated by boundaries, and each component has its own media type. An example of usage is the <span class="apidoc_code"><a href="dropbox/m_dropbox_addPicture.htm">POST&nbsp;/api/dropbox/pictures</a></span> method where the message includes some text and also an image. For more information about operations that support file upload, see <a href="Ref_FileUploadWithAjax.htm">File Upload with Ajax</a>.</td>
  </tr>
</tbody>
</table>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3><a name="ref_authentication"></a>Authentication and Authorization</h3>
<p>Authentication of platform API users is managed by means of the&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;authorization cookie.</p>
<p>For information on how to get, use, and renew the cookie, and different authentication requirements and scenarios, see <a href="Ref_AuthenticationAndSecurity.htm">Authentication and Security with the Enterprise API Platform API</a>.</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3><a name="ref_authorizationroles"></a>Authorization Roles</h3>
<p>Some operations require the user to be logged in; others can be performed by an anonymous user (a user who has not logged in). In other cases, activities are restricted so that certain actions can only be performed by a member of a certain user group or group, or by a site administrator. If an API call doesn't meet the necessary authorization role criteria it will fail.</p>
<p>For a full list of authorization roles and their definitions, see <a href="Ref_AuthorizationRolesOnThePlatform.htm">Authorization Roles on the Platform</a>.</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3><a name="ref_errormessages"></a>Error Messages</h3>
<p>If a call is unsuccessful,&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;returns one or both of the following:</p>
<ul>
  <li>The applicable HTTP code and its associated message. See <a href="#ref_httpstatuscodes">HTTP Status Codes</a> below.</li>
  <li>A a product-specific error code and message included in the response payload. Where there are unique messages for specific operations, they are included in the documentation for that operation.</li>
</ul>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3><a name="ref_httpstatuscodes"></a>HTTP Status Codes</h3>
<p>HTTP status codes break down into the following categories:</p>
<ul>
  <li>100-199: Informational messages</li>
  <li>200-200: The message was successful</li>
  <li>300-399: Redirection</li>
  <li>400-415: Error on the client side</li>
  <li>500-599: Error on the server side</li>
</ul>
<p>Recognizing the general numeric category could be helpful in tracking down the source of an error.</p>
<p>The table below provides information on some of the more common HTTP error codes you might encounter when working with the&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;API. For a full list of HTTP error code numbers and meanings, refer to <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank">the HTTP spec</a>.</p>

<table class="tableparmsresponse" width="100%" cellspacing="0" cellpadding="2">
<thead>
  <tr>
    <th width="20%">HTTP Code</th>
    <th width="20%">Body</th>
    <th width="60%">Cause/explanation/examples</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td colspan="3"><strong>Success codesl:</strong></td>
  </tr>
  <tr>
    <td><a name="http200"></a>200</td>
    <td>OK</td>
    <td>The request completed successfully.</td>
  </tr>
  <tr>
    <td><a name="http201"></a>201</td>
    <td>Created</td>
    <td>Successful create (add) request.</td>
  </tr>
  <tr>
    <td><a name="http204"></a>204</td>
    <td>No Content</td>
    <td>The server successfully processed the request, but is not returning any content.</td>
  </tr>
  <tr>
    <td colspan="3"><strong>Client error codes:</strong></td>
  </tr>
  <tr>
    <td><a name="http400"></a>400</td>
    <td>Bad Request</td>
    <td>Returned if the client sends invalid parameters or body content. For example, you might get this response if there is a typo in the request URL, or if you send malformed XML in your request (if applicable).</td>
  </tr>
  <tr>
    <td><a name="http401"></a>401</td>
    <td>Unauthorized</td>
    <td><p>Authentication (login) is required for this operation. For example, perhaps a required cookie was not included.</p>
      <p>You would get this response if you didn't include the custom <a href="../Ref_Glossary_CommunityPlatform.htm#gl_xcsrf_token_fedmemberid">X-Csrf-Token_fedmemberID</a> header in the request, or if it was invalid or expired.</p></td>
  </tr>
  <tr>
    <td><a name="http403"></a>403</td>
    <td>Forbidden</td>
    <td>Authentication is required.</td>
  </tr>
  <tr>
    <td><a name="http404"></a>404</td>
    <td>Resource not found</td>
    <td>The information in the path, parameters, or message header/body didn't match up to any available resource at the specified URL. For example, the message has the wrong content-type, a typo in the URL, or a wrong accept-header; or you might get this error if a specified resource, such as an app, API, or rating, does not exist.</td>
  </tr>
  <tr>
    <td><a name="http405"></a>405</td>
    <td>Method Not Allowed</td>
    <td>The request is  attempting to do something not allowed by this operation. For example, an Accept header that's not valid for the operation might cause this error, or an HTTP verb that's not supported for the operation.</td>
  </tr>
  <tr>
    <td><a name="http406"></a>406</td>
    <td>Unacceptable/Not acceptable</td>
    <td><p>Returned if the response format, as specified in the accept header, does not match the content type specified in the request.</p>
        <p>For example, you might get this response if you set the Accept header to text/xml for an operation that only returns an application/json response, such as <span class="apidoc_code"><a href="apis/m_apis_getFollowers.htm">GET&nbsp;/api/apis/{APIID}/followers</a></span>.</p></td>
  </tr>
  <tr>
    <td><a name="http409"></a>409</td>
    <td>Invalid action for current resource state</td>
    <td>The action attempted was not valid for the current state. For example, the message is attempting to cancel an API contract that doesn't currently have a status of Approved.</td>
  </tr>
  <tr>
    <td><a name="http415"></a>415</td>
    <td>Unsupported Media Type</td>
    <td>Returned if the request is using a media type not supported by the method.</td>
  </tr>
  <tr>
    <td colspan="3"><strong>Server error codes:</strong></td>
  </tr>
  <tr>
    <td><a name="http500"></a>500</td>
    <td>Internal Server Error</td>
    <td>An error occurred while processing the call. This error is generally returned for any business logic failure that doesn't fit into any of the defined categories above.</td>
  </tr>
</tbody>
</table>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3><a name="ref_publicandprivateapps"></a>Public and Limited (Private) Apps</h3>
<p>&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;supports two visibility scenarios that affect who can see information about, and interact with, your app. An app can be either <strong>public</strong> or <strong>limited</strong>.</p>
<p><strong>Public</strong>: a public app can be seen by all&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;users, whether registered or not. Communications relating to a public app, such as tickets and discussions, might be picked up and rendered by popular search engines. Changes to the app are still restricted to app team members, but the app has general visibility.</p>
<p><strong>Limited (Private)</strong>: if an app is limited (private), it can only be seen by members of the specific app team. Invited members don't see the app until they accept the invitation.</p>
<p>With limited (private) apps, content relating to the app, such as tickets and discussions, is not accessible to public search engines, although it is indexed and rendered by the&nbsp;<!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;internal search facility.</p>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3><a name="ref_derivingstatevalue"></a>Determining the State Value of an App</h3>
<p>To determine the state value of an app, check it against the following rules:</p>
<ol>
<li>If the AppVersion has zero contracts, it is in <strong>Setup</strong> state.</li>
<li>If the AppVersion is in Sandbox state and one or more API contracts for the production environment are not yet fully approved, it is in <strong>Sandbox</strong> state.</li>
<li>If the AppVersion has made contract requests for the production environment for all APIs that it has contracts with in the sandbox environment, and if all production contracts are in approved state,  the AppVersion is in <strong>Approved</strong> state. </li>
<li>If the AppVersion is in the Production environment, the AppVersion is in <strong>Live</strong> state.</li>
</ol>
<p class="apidoc_backtotop"><a href="#top">Back to top</a></p>



<h3>Related Topics</h3>
<ul>
  <li><a href="index.htm"><!-- #BeginLibraryItem "/Library/_PlatformName.lbi" -->Enterprise API Platform<!-- #EndLibraryItem -->&nbsp;API: Overview</a></li>
  <li><a href="Ref_AuthenticationAndSecurity.htm">Authentication and Security</a></li>
  <li><a href="Ref_TroubleshootingAndSupport.htm">Troubleshooting and Support</a></li>
  <li><a href="Ref_Glossary_CommunityPlatform.htm">Glossary of Terms</a></li>
  <li><a href="Ref_DocConventions.htm">Documentation Conventions</a></li>
</ul>

<hr />
