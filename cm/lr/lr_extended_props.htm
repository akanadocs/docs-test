---
layout: page
title: Extensible Metadata for Apps, APIs, and Users | Lifecycle Repository
description: Learn about defining app, API, and user metadata in Repository Client.
product: cm
category: learn
weight: 05
sub-nav-class: Lifecycle Repository
type: page
nav-title: Extensible Metadata for apps, APIs, and users
---
<h1 id="top">Adding and Configuring Extensible Metadata for Apps, APIs, and Users</h1>
<p>This document provides basic configuration information for using Repository Client, and information on step-by-step use cases for using Repository Client to configure and implement custom app, API, and user properties used by the extended properties and workflow feature on the API Platform.</p>
<hr class="divide_hr" />
<h2 style="color: gray;">Table of Contents</h2>



<h4 style="color: gray;"><a href="#h_lr_general">General Information/Getting Started:</a></h4>
<ol class="table_of_contents">
	<li><a href="#cusprop_intro">Akana API Platform support of extensible metadata -- Introduction</a></li>
	<li><a href="#repository_client_define">What is the Repository Client?</a></li>
	<li><a href="#extensible_metadata_types">Extensible metadata types supported</a></li>
	<li><a href="#overview">Configuring extensible metadata -- Overview</a></li>
	<li><a href="#s01">Enable Feature</a></li>
	<li><a href="#s02">Establish Admin Connection to Repository Client</a>
		<ul>
			<li><a href="#s02_01">Start the Repository Client</a></li>
			<li><a href="#s02_02">Create New Connection</a></li>
		</ul>
	</li>
	<li><a href="#s03">Create Configuration Project</a>
		<ul>
			<li><a href="#s03_01">Switch Repository Client to Resource Perspective</a></li>
			<li><a href="#s03_02">Create New Configuration Project</a></li>
		</ul>
	</li>
</ol>

<h4 style="color: gray;"><a href="#h_lr_apps_apis">Extensible Properties for Apps and APIs:</a></h4>
<ol class="table_of_contents">
	<li><a href="#s04">Define New Metadata Elements</a>
		<ul>
			<li><a href="#s04_01">Open GDT (Global Definition Template) Editor</a></li>
			<li><a href="#s04_02">Define New Metadata Element</a></li>
		</ul>
	</li>
	<li><a href="#s05_api_app">Populate Defined Elements into API and/or App Types</a></li>
	<li><a href="#s06">Upload the Configuration</a></li>
</ol>


<h4 style="color: gray;"><a href="#h_lr_users">Extensible Properties for Users:</a></h4>
<ol class="table_of_contents">
	<li><a href="#cusprop_asset_structure">Lifecycle Repository Asset Structure</a></li>
	<li><a href="#cusprop_scn_1">User Creation Scenario 1: Site Admin User Creation</a></li>
	<li><a href="#cusprop_scn_2">User Creation Scenario 2: User Self-Signup</a></li>
	<li><a href="#cusprop_ext_metadata">Adding Extensible User Metadata</a>
		<ul>
			<li><a href="#proc_00">Step 0: Create a library connection and download the Lifecycle Repository tenant library configuration</a></li>
			<li><a href="#proc_01">Step 1: Declare a new metadata type in the GDT</a></li>
			<li><a href="#proc_02">Step 2: Add the newly-declared metadata type to the User - Specified capture template</a></li>
			<li><a href="#proc_03">Step 3: Configure the LPC to properly expose the new metadata element</a></li>
			<li><a href="#proc_04">Step 4: Upload the configuration to the Lifecycle Repository tenant library</a></li>
		</ul>
	</li>
	</ol>




<hr class="divide_hr" />
<h2 id="h_lr_general">General Information/Getting Started:</h2>




<h2 id="cusprop_intro">Akana API Platform support of extensible metadata -- Introduction</h2>
<p>The Akana API Platform supports extensible metadata for apps, APIs, and users.</p>
<p>This document provides two basic sets of instructions:</p>
<ol>
	<li>Adding app and API metadata to a tenant configuration: see <a href="#h_lr_apps_apis">Extensible Properties for Users</a>.</li>
	<li>Adding user metadata to a tenant configuration: see <a href="#h_lr_users">Extensible Properties for Apps and APIs</a>.</li>
</ol>
<p>Both use cases are examples of how extensible metadata can be used. There are many other scenarios.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="repository_client_define">What is the Repository Client?</h2>
<p>The Repository Client is a standalone, Eclipse-based IDE, installed as a separate installation package available within the Lifecycle Manager installation download file. Repository Client is a standalone application that you can install locally, that allows you to connect to the Lifecycle Manager library. Lifecycle Manager installation is not required. Repository Client offers a graphical user interface that is easier to work with than raw XML configuration files. Repository Client is used to manage configuration files for <a href="../learnmore/basics_glossary.htm#gl_lm">Lifecycle Manager</a>, <a href="../learnmore/basics_glossary.htm#gl_lc">Lifecycle Coordinator</a>, and <a href="../learnmore/basics_glossary.htm#gl_lr">Lifecycle Repository</a> (Extensible Properties feature).</p>
<p>The Repository Client product allows you to specify predefined implementation details for an API, app, or user, based on values that users provide at runtime for custom properties added in the Community Manager developer portal.</p>
<p>When you create a resource in the Community Manager developer portal, such as an API, app, or user, it inherits default out-of-the-box settings. For example, for an API, anonymous access is enabled, a Live implementation is created, the context path is a unique URL based on the Community Manager developer portal URL, and there are no policies attached to the API.</p>
<p>By using the Repository Client product in conjunction with the Community Manager developer portal, you can collect values from the user at runtime and customize the API that's created for the user, based on those values. For example, for an API, you could set up a scenario where a custom property asks whether the API is sensitive or not, and if yes, the Community Manager developer portal creates the API with a default setting of Private.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="extensible_metadata_types">Extensible metadata types supported</h2>
<p>The following metadata types are supported in the Repository Client for defining classifiers for apps, APIs, and users in the Akana API Platform:</p>
<ul>
	<li>Boolean</li>
	<li>Date</li>
	<li>Decimal</li>
	<li>String. A string value can be either of the following:
		<ul>
			<li>Open String (values defined by the user)</li>
			<li>Enumerated String (values predefined)</li>
		</ul>
	</li>
</ul>
<p>Artifacts can be:</p>
<ul>
	<li>Textual description</li>
	<li>File upload</li>
	<li>URL</li>
</ul>
<p>Classifiers can include multi-level taxonomy (in legacy Lifecycle Manager terminology, compound classifiers). For example, in a billing system you might want the user to choose a country and then choose a state or province.</p>
<p>For illustrations of specifying the metadata type when adding a new classifier, see <a href="#s04_02">Define New Metadata Element</a>.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="overview">Configuring extensible metadata -- Overview</h2>
<p>At a high level, the steps for adding and configuring extensible metadata are:</p>
<ol>
	<li><a href="#s01">Enable Feature</a></li>
	<li><a href="#s02">Establish Admin Connection to Repository Client</a></li>
	<li><a href="#s03">Create Configuration Project</a></li>
	<li><a href="#s04">Define New Metadata Elements</a></li>
	<li><a href="#s05_api_app">Populate Defined Elements into API and/or App Types</a></li>
	<li><a href="#s06">Upload the Configuration</a></li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="s01">Enable Feature</h2>
<p>In the Community Manager developer portal, enable the <strong>Extended Properties and Workflow</strong> setting, as shown below.</p>
<p>Navigation: In the Community Manager developer portal, <strong>Admin</strong> &gt; <strong>Site</strong>. For details, see <a href="../learnmore/site_admin_site.htm#settings_config_site">How do I configure site settings?</a> (Community Manager developer portal help).</p>
<p><img src="images/lr_ext_meta_01.jpg" alt="Enabling the feature in CM" /></p>
<p><a href="#top">Back to top</a></p>



<h2 id="s02">Establish Admin Connection to Repository Client</h2>
<p>To establish the admin connection to the Repository Client, complete the following steps, illustrated below:</p>
<ul>
	<li><a href="#s02_01">Start the Repository Client</a></li>
	<li><a href="#s02_02">Create New Connection</a></li>
</ul>


<h3 id="s02_01">Start the Repository Client</h3>
<p>Start up the Repository Client user interface, shown below.</p>
<p><strong>Note</strong>: If you don't have the Repository Client installed, contact your Akana representative.</p>
<p><img src="images/lr_ext_meta_02.jpg" alt="" /></p>


<h3 id="s02_02">Create New Connection</h3>
<p>Follow the steps below.</p>

<h4>To create a new connection in Repository Client</h4>
<ol>
	<li>In the Library Explorer view, left-click on the red <strong>Connection</strong> icon to launch the <strong>New Library Connection</strong> wizard.</li>
	<li>In the Library Name field, use your tenant name from the Community Manager developer portal, as shown below.
	<p>You can use the Site Admin credentials from any Community Manager developer portal tenant as the Lifecycle Repository Admin credentials for the library connection.</p>
	<p><img src="images/lr_ext_meta_03.jpg" alt="" /></p>
	<p>The Connection name field defaults to the library (tenant) name, as shown below. Click <strong>Finish</strong>.</p>
	<p><img src="images/lr_ext_meta_04.jpg" alt="" /></p>
	<p>The initial connection to the instance triggers certificate installation and restart.</p>
	<p>When the connection is established, the Repository Client automatically opens the connection, as shown below.</p>
	<p><img src="images/lr_ext_meta_05.jpg" alt="" /></p></li>
</ol>
<p><strong>Note</strong>: It's not necessary to keep the connection open. To close it, in Library Explorer, right-click on the Connection name and choose <strong>Disconnect</strong>.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="s03">Create Configuration Project</h2>
<p>To create the configuration project, complete the following steps, illustrated below:</p>
<ul>
	<li><a href="#s03_01">Switch Repository Client to Resource Perspective</a></li>
	<li><a href="#s03_02">Create New Configuration Project</a></li>
</ul>

<h3 id="s03_01">Switch Repository Client to Resource Perspective</h3>
<p>At the top right, click the <strong>Resource</strong> button, as shown below.</p>
<p><img src="images/lr_ext_meta_06.jpg" alt="" /></p>


<h3 id="s03_02">Create New Configuration Project</h3>
<p>Follow the steps below.</p>

<h4>To create a new configuration project in Repository Client</h4>
<ol>
	<li>Right-click in Project Explorer to launch the <strong>New Project</strong> wizard.
	<p><img src="images/lr_ext_meta_07.jpg" alt="" /></p></li>
	<li>Open the Repository folder, select <strong>Configuration Project</strong>, and then click <strong>Next</strong>.</li>
	<li>Select the tenant library connection that you created in the earlier step, and make sure that the two <strong>Retrieve from the connected library</strong> options are selected, as shown below. Click <strong>Next</strong>.
	<p><img src="images/lr_ext_meta_08.jpg" alt="" /></p></li>
	<li>The project name defaults to the tenant library connection name. Click <strong>Finish</strong>.
	<p><img src="images/lr_ext_meta_09.jpg" alt="" /></p></li>
	<li>The Configuration Project creation and population process runs.</li>
</ol>
<p>When this process is complete, a new Configuration Project appears in the Project Explorer, and the Library Process Configuration (LPC) document editor opens in the editor view. An example is shown below.</p>
<p><img src="images/lr_ext_meta_10.jpg" alt="" /></p>
<p><a href="#top">Back to top</a></p>




<hr class="divide_hr" />
<h2 id="h_lr_apps_apis">Extensible Properties for Apps and APIs:</h2>




<h2 id="s04">Define New Metadata Elements</h2>
<p>To define metadata elements, complete the following steps, illustrated below:</p>
<ul>
	<li><a href="#s04_01">Open GDT (Global Definition Template) Editor</a></li>
	<li><a href="#s04_02">Define New Metadata Element</a></li>
</ul>


<h3 id="s04_01">Open GDT (Global Definition Template) Editor</h3>
<p>Close the LPC editor. In the configuration project, double-click the <strong>gdt.xml</strong> file. The Global Definition Template Editor opens in the editor view.</p>
<p><img src="images/lr_ext_meta_11.jpg" alt="" /></p>


<h3 id="s04_02">Define New Metadata Element</h3>
<p>To define a simple metadata element, left-click the Plus icon (<strong>+</strong>) on the <strong>Classifiers</strong> section of the editor, as shown below. For information on supported metadata elements, see <a href="#extensible_metadata_types">Extensible metadata types supported</a>.</p>
<p><img src="images/lr_ext_meta_12.jpg" alt="" /></p>
<p>The convention for the classifier name is to use lower case characters with connecting hyphens: for example, <strong>funding-date</strong>, <strong>implementation-cost</strong>.</p>
<p>when you click <strong>Finish</strong>, the new classifier is added to the GDT, as shown below. This example is a Boolean classifier.</p>
<p><img src="images/lr_ext_meta_12.jpg" alt="" /></p>
<p>Further editing of the newly defined classifier is typically not required.</p>
<p>You can define additional classifiers in the same way, as shown below.</p>
<ul>
	<li><a href="#classifier_date">Date classifier</a></li>
	<li><a href="#classifier_decimal">Decimal classifier</a></li>
	<li><a href="#classifier_string">String classifier (open)</a></li>
	<li><a href="#classifier_enum">String classifier (enumerated)</a></li>
	<li><a href="#classifier_tax">Taxonomic classifier</a></li>
</ul>

<h4 id="classifier_date">Date classifier</h4>
<p><img src="images/lr_ext_meta_14.jpg" alt="" /></p>

<h4 id="classifier_decimal">Decimal classifier</h4>
<p><img src="images/lr_ext_meta_15.jpg" alt="" /></p>

<h4 id="classifier_string">String classifier (open)</h4>
<p>String classifier types can be specified as open or enumerated. The example below shows an open string classifier.</p>
<p><img src="images/lr_ext_meta_16.jpg" alt="" /></p>

<h4 id="classifier_enum">String classifier (enumerated)</h4>
<p>To specify a string as enumerated, define the enumeration values by selecting the <strong>+</strong> action on the <strong>Values Constraints</strong> section of the <strong>Define Classifier Type</strong> dialog. Fill in the value field with the desired enumerated value, leave the other fields blank, and click <strong>Finish</strong>.</p>
<p><img src="images/lr_ext_meta_17.jpg" alt="" /></p>
<p>The enumerated values are presented by the Community Manager developer portal UI in the order in which they are specified. If necessary, you can reorder individual values by selecting the value and clicking the up or down arrow.</p>
<p><img src="images/lr_ext_meta_18.jpg" alt="" /></p>

<h4 id="classifier_tax">Taxonomic classifier</h4>
<p>To specify taxonomic classifiers (for example, business domain/subdomain) expand the Compound Classifiers section of the editor.</p>
<p><img src="images/lr_ext_meta_19.jpg" alt="" /></p>
<p>When specifying a compound classifier, specify the fields of the classifier first, and then specify the allowed values.</p>
<p><img src="images/lr_ext_meta_20.jpg" alt="" /></p>
<p>The ordering of fields in the editor dialog controls the definition of the taxonomy levels. Use the up and down arrow actions as needed to establish the correct ordering.</p>
<p><img src="images/lr_ext_meta_21.jpg" alt="" /></p>
<p>You must specify all valid value combinations for the taxonomy in the <strong>Values</strong> section of the dialog. To separate field values, use the pipe character (|).</p>
<p><img src="images/lr_ext_meta_22.jpg" alt="" /></p>
<p><img src="images/lr_ext_meta_23.jpg" alt="" /></p>
<p>You can specify URL-based fields by defining by-reference artifact types.</p>
<p><img src="images/lr_ext_meta_24.jpg" alt="" /></p>
<p>Note that you must clear the <strong>Textual description</strong> and <strong>File upload</strong> containment options. These are currently not supported by the Community Manager developer portal user interface.</p>
<p>Once all new elements are defined, save, and then close the GDT editor.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="s05_api_app">Populate Defined Elements into API and/or App Types</h2>
<p>Expand the Capture-Templates folder of the configuration project. Also expand the <strong>Common Asset.ctxml</strong> template to view its child templates. </p>
<p><img src="images/lr_ext_meta_25.jpg" alt="" /></p>
<p>Capture Templates are used to associate elements defined in the Global Definition Template with specific asset type/state combinations. The asset types that support extensible metadata in the Community Manager developer portal are API, app, and user. This use case addresses setting up extensible metadata for API and app. For information about setting up extensible metadata for users, see <a href="#h_lr_users">Extensible Properties for Users</a>.</p>
<p>For API and App, there are two sets of templates:</p>
<ul>
	<li>The <strong>API - Initial</strong> and <strong>App - Initial</strong> templates are used to specify create-time extensible metadata elements and constraints.</li>
	<li>The <strong>API - Specified</strong> and <strong>App - Specified</strong> templates are used to specify edit-time metadata elements and constraints (for example, to lock down a value entered at create time to become read-only, or to introduce an additional element that is applicable only after initial creation).</li>
</ul>
<p>Double-click the desired template to open the template editor. Start with the Initial template prior to editing the Specified template; all changes made to the Initial template are automatically inherited by the Specified template.</p>
<p><img src="images/lr_ext_meta_26.jpg" alt="" /></p>
<p>Collapse the General section of the Editor, and expand the Classifiers section to add Boolean, date, decimal, string (open or enum), and taxonomy types previously specified in the GDT.</p>
<p><img src="images/lr_ext_meta_27.jpg" alt="" /></p>
<p>Select the <strong>+</strong> action to add a classifier to the template. It's only necessary to specify a name.</p>
<p><img src="images/lr_ext_meta_28.jpg" alt="" /></p>
<p>Click <strong>Finish</strong>, and then expand the Constraints subsection of the Properties section of the newly added classifier to add cardinality or read-only constraints. <strong>Read only</strong>, <strong>Minimum occurrences</strong>, and <strong>Maximum occurrences</strong> are the only constraints currently supported by the Community Manager developer portal. In addition, you can specify a default value, in the <strong>General Appearance Properties</strong> section of the editor.</p>
<p><img src="images/lr_ext_meta_29.jpg" alt="" /></p>
<p>Expand the <strong>Artifacts</strong> section of the editor to add a previously-defined URL element to the template.</p>
<p><img src="images/lr_ext_meta_30.jpg" alt="" /></p>
<p><a href="#top">Back to top</a></p>



<h2 id="s06">Upload the Configuration</h2>
<p>After saving all the edited template files, go to the Project Explorer view, right-click on the top-level configuration project folder, and select <strong>Upload to Library</strong> to access the upload dialog. If this is the first time this configuration has been uploaded, select the correct tenant connection and check the <strong>set as the default for this project</strong> option. Click <strong>OK</strong> to initiate the upload.</p>
<p><img src="images/lr_ext_meta_31.jpg" alt="" /></p>
<p>A progress dialog appears until the upload is complete.</p>
<p><img src="images/lr_ext_meta_32.jpg" alt="" /></p>
<p><a href="#top">Back to top</a></p>




<hr class="divide_hr" />
<h2 id="h_lr_users">Extensible Properties for Users:</h2>




<h2 id="cusprop_asset_structure">Lifecycle Repository Asset Structure</h2>
<p>The Lifecycle Repository component deployed as part of the Akana API Platform comes with a default configuration that includes specification of an empty <strong>User</strong> asset type. This includes:</p>
<ul>
	<li>Specification of two User capture templates:
		<ul>
			<li> <strong>User - Initial</strong></li>
			<li><strong>User - Specified</strong></li>
		</ul>
	</li>
	<li>Declaration of the User asset type in the Lifecycle Repository Client user interface (LPC) with a default association of this type to the <strong>User - Initial</strong> capture template, as shown below.
		<p><img src="images/lr_cus_props_01.jpg" alt="" /></p></li>
	<li>Specification of a User Submission process in the LPC which automatically transitions a User asset in the Initial state to the <strong>User - Specified</strong> capture template after initial publication, as shown below.
		<p><img src="images/lr_cus_props_02.jpg" alt="" /></p></li>
</ul>
<p>This default configuration is suitable as a baseline configuration for each of the two User creation scenarios supported by the API Platform. This document addresses configuration steps for both scenarios:</p>
<ul>
	<li><a href="#cusprop_scn_1">Scenario 1: User creation by the Site Admin</a></li>
	<li><a href="#cusprop_scn_2">Scenario 2: User self-signup</a></li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="cusprop_scn_1">Scenario 1: User creation by the Site Admin</h2>
<p>A Site Admin can create new users in the Community Manager developer portal via the List of Users page: in the Community Manager developer portal user interface, <strong>Admin</strong> &gt; <strong>Users</strong>.</p>
<p>The default configuration assumes that the Site Admin is not responsible for populating any of the extensible User metadata fields specified for the tenant. Instead, it's expected that the user will populate these fields at first login.</p>
<p>To set this up, implement the <strong>User - Initial</strong> capture template as the default template to be used at the time of User asset creation. This template is empty except for an internal state classifier; this classifier is used to control template transition only, and should never be edited.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="cusprop_scn_2">User Creation Scenario 2: User self-signup</h2>
<p>An individual user can sign up to the Community Manager developer portal, creating a local account, without Site Admin involvement. This process initiates the creation of a unique UserID which is assigned to the user and linked to the user's credentials and other information provided by the user, and is stored in the database.</p>
<p>When extensible metadata is in use, the Community Manager developer portal user interface should present such users with the set of extensible User metadata fields at the time the user creates a profile. In order to enable this behavior, it's necessary to modify the User asset type entry in the LPC so that it references the <strong>User - Specified</strong> capture template in place of the default <strong>User - Initial</strong> capture template setting.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="cusprop_ext_metadata">Adding Extensible User Metadata</h2>
<p>Adding extensible metadata is a multi-step process.</p>
<p>For a list of supported metadata types, see <a href="#extensible_metadata_types">Extensible metadata types supported</a>.</p>
<p>This document does not provide an exhaustive guide covering each type. Instead, it provides a single example (an enumerated String labeled <strong>User Type</strong>). You can apply the principles of this example to elements of other types.</p>
<p>The process steps are as follows:</p>
<ul>
	<li><a href="#proc_00">Step 0: Create a library connection and download the Lifecycle Repository tenant library configuration</a></li>
	<li><a href="#proc_01">Step 1: Declare a new metadata type in the GDT</a></li>
	<li><a href="#proc_02">Step 2: Add the newly-declared metadata type to the User - Specified capture template</a></li>
	<li><a href="#proc_03">Step 3: Configure the LPC to properly expose the new metadata element</a></li>
	<li><a href="#proc_04">Step 4: Upload the configuration to the Lifecycle Repository tenant library</a></li>
</ul>


<h3 id="proc_00">Step 0: Create a library connection and download the Lifecycle Repository tenant library configuration</h3>
<p>If this is the first time that a Lifecycle Repository tenant library is being edited within the Repository Client user interface, the administrator must create a new library connection from the Repository Perspective of the client.</p>
<ol>
	<li>From the Library Explorer view, choose the red <strong>New Library Connection</strong> action. This allows the Administrator to configure the connection, as shown below.
	<p><img src="images/lr_cus_props_03.jpg" alt="" /></p>
	<p><strong>Note</strong>: By default, the Community Manager developer portal Site Admin role includes the appropriate permission to edit library configurations. Lifecycle Repository delegates user authentication to the Community Manager developer portal, so the same user credentials used to log in to the Community Manager developer portal should be populated into the Lifecycle Repository Library Connection.</p></li>
	<li>Once the connection is successfully created, switch to the Resource perspective and create a new Repository Project. To do this:
		<ol>
			<li>In the Project Explorer, right-click and choose <strong>New Project</strong>.</li>
			<li>Expand the Repository folder.</li>
			<li>Choose a configuration project and click <strong>Next</strong>.</li>
		</ol>
	</li>
	<li>On the next panel of the wizard, choose the correct Connection and make sure that the other settings are set to <strong>Retrieve from</strong>.
	<p>This creates a new project, primed with the default Lifecycle Repository tenant library configuration, in the Project Explorer.</p></li>
</ol>


<h3 id="proc_01">Step 1: Declare a new metadata type in the GDT</h3>
<p>All metadata types must be declared in the GDT (Global Definition Template) of the tenant library. This action makes them available for use within asset types.</p>
<p>The GDT is an XML file that can be opened in either of two ways:</p>
<ul>
	<li>Using the graphical editor provided by the Repository Client. Installation of Repository Client is via a separate installation package that is part of the Lifecycle Manager installation ZIP file. It does not require installation of Lifecycle Manager. When you install the Lifecycle Repository feature, it installs Eclipse as well as the Repository Client which is an Eclipse add-on.</li>
	<li>Within the schema-aware XML editor that comes as part of Eclipse (or in any XML editor).</li>
</ul>
<p>Since the GDT is a declarative document, it can be very efficient to copy and paste existing elements as a starting point for new element declaration. However, many users prefer to use the graphical editor as a guide to populating the various attributes that control element behavior. The right-click context menu controls which editor is applied when opening a file.</p>
<p>When using the graphical editor, to add a new classifier, select the green <strong>plus</strong> icon on the <strong>Defined Classifiers</strong> list. A dialog box opens, and the administrator can specify the details of the newly declared classifier, as illustrated in the two images below.</p>
<p><img src="images/lr_cus_props_04.jpg" alt="" /> <img src="images/lr_cus_props_05.jpg" alt="" /></p>
<p>In the example above, when the user clicks <strong>Finish</strong>, the editor generates the following underlying XML fragment:</p>
<pre>&lt;define-classifier display-name="User Type" help-text="How does this user interact with the API Platform?" name="user-type" type="string"&gt;
  &lt;add-value uuid="_FrMwIA4_Eeew5aMeFxkGxw" value="App Owner"/&gt;
  &lt;add-value uuid="_HI0ksA4_Eeew5aMeFxkGxw" value="App and API Owner"/&gt;
  &lt;add-value uuid="_DEi28A4_Eeew5aMeFxkGxw" value="API Owner"/&gt;
  &lt;add-value uuid="_IxnugA4_Eeew5aMeFxkGxw" value="Admin Only"/&gt;
&lt;/define-classifier&gt;</pre>
<p>You could also enter an equivalent XML fragment directly, using a schema-aware XML editor. In this case, you can omit the <strong>uuid</strong> attribute since the editor generates values on an as-needed basis based on other editing activities.</p>


<h3 id="proc_02">Step 2: Add the newly-declared metadata type to the User - Specified capture template</h3>
<p>As discussed previously, the default configuration for user metadata is capable of supporting both user creation scenarios with minimal change.</p>
<p>In both cases, only the <strong>User - Specified</strong> capture template should be used as a basis for modification.</p>
<p>The <strong>User - Initial</strong> template should <strong>never</strong> have customer-specific metadata types. The only exception to this is if you want a hybrid Site Admin user creation scenario where the Site Admin fills in a subset of the extensible user fields and the user fills in the remainder.</p>
<p>When an element is added to a capture template, the administrator can control options that control presentation behavior and logic, such as:</p>
<ul>
	<li>Cardinality (mandatory/optional)</li>
	<li>Single/multi-valued)</li>
	<li>Default values</li>
	<li>Editable vs. read-only</li>
</ul>
<p>In this scenario, again the Lifecycle library administrator has the option of using either the graphical editor or the Eclipse-provided schema-aware XML editor.</p>
<p>When using the graphical editor, be aware that most options presented on the editor UI are not relevant for embedded LM within the API Platform. In most cases, the only section that should be edited is the <strong>Constraints</strong> section, shown below.</p>
<p><img src="images/lr_cus_props_06.jpg" alt="" /></p>
<p>In the example above, the specific configuration settings enforce the following behavior on the newly-specified User property within the Community Manager developer portal user interface:</p>
<ul>
	<li>The User Type field is:
		<ul>
			<li>Mandatory (Minimum occurrence = 1)</li>
			<li>Single-valued (Maximum occurrence = 1)</li>
		</ul>
	</li>
	<li>The end-user can edit the value (this is the most common use case for integrated metadata).</li>
	<li>The metadata value is processed through submission governance (that is, the User submission process referenced earlier).</li>
</ul>
<p>If you edit the User Type classifier as above, the following XML fragment is generated in the underlying capture template document:</p>
<pre>&lt;use-classifier min-occurs=&quot;1&quot; max-occurs=&quot;1&quot; name=&quot;user-type&quot; /&gt;</pre>
<p>To create an optional single-valued field, delete the Minimum occurrence value in the graphical UI. This is represented in the underlying XML as follows:</p>
<pre>&lt;use-classifier appear-on-edit=&quot;true&quot; max-occurs=&quot;1&quot; name=&quot;birthdate&quot; /&gt;</pre>
<p>You can define a field as read-only in a similar way. Read-only values are generally not needed for User metadata, but might be useful in more advanced scenarios, such as API state transition with metadata lockdown after final transition.</p>


<h3 id="proc_03">Step 3: Configure the LPC to properly expose the new metadata element</h3>
<p>You must configure each metadata element into at least one LPC Group so that the element is accessible to Lifecycle Repository or to the Community Manager developer portal user interface.</p>
<p>By convention, the Lifecycle Repository default configuration defines two well-known LPC Groups:</p>
<ul>
	<li><strong>LM Internal Elements</strong>&#8212;This group is used to block exposure of an element to the Community Manager developer portal, so it is used only for control metadata (such as the user-status field used in the User Submission Process to control template transition).</li>
	<li><strong>Common Information</strong>&#8212;In general, all newly specified User metadata elements should be added to this group, in the order in which you want them to be displayed in the Community Manager developer portal user interface. An example is shown below.</li>
</ul>
<p><img src="images/lr_cus_props_07.jpg" alt="" /></p>


<h3 id="proc_04">Step 4: Upload the configuration to the Lifecycle Repository tenant library</h3>
<p>To upload the modified configuration to the Lifecycle Repository tenant library, right-click on the project folder and choose <strong>Upload to Library</strong>. In the dialog box, choose the correct connection and click <strong>OK</strong>.</p>
<p><a href="#top">Back to top</a></p>



<hr class="divide_hr" />



<h2 id="related_topics">Related Topics</h2>
<div class="relatedlinks" id="cm_lr">
<ul>
	<li><a href="../learnmore/site_admin_lm.htm">Using Custom Metadata in the Community Manager developer portal</a></li>
	<li><a href="../../sp/install_lr/install_lr.htm">Installing the Extended Properties Feature</a></li>
	<li><a href="../lr/lr_extended_props.htm">Adding and Configuring Extensible Metadata for Apps, APIs, and Users</a></li>
	<li><a href="../lr/lr_runtime_config.htm">Defaulting API Settings using Runtime Configurations</a></li>
</ul>
<ul>
	<li><a href="../../sp/platform_install/installing_akana_api_platform_all.htm">Installing the Akana API Platform (all versions)</a></li>
	<li><a href="../../sp/platform_install/implementation_planning.htm">Planning Your Implementation</a></li>
	<li><a href="../promotion/promotion_users_guide.htm">Promotion User's Guide</a></li>
</ul>
</div>