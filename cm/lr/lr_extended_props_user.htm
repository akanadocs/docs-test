---
layout: page
title: Extensible Metadata for Users | Lifecycle Repository
description: Learn about adding extensible user metadata to a tenant configuration in a specific use case, using Repository Client.
product: cm
category: learn
weight: 06
sub-nav-class: Lifecycle Repository
type: page
nav-title: Extensible Metadata for Users
---
<h1 id="top">Adding and Configuring Extensible Metadata for Users</h1>
<p>This document provides information on a step-by-step use case for using Repository Client to add extensible user metadata to a tenant configuration in a specific use case.</p>

<p><a href="../promotion/promotion_users_guide.htm" class="button secondary">Promotion User's Guide</a> 
<a href="../learnmore/site_admin_lm.htm" class="button secondary">Using Custom Metadata on the Developer Portal</a> 
	<a href="../../sp/install_lr/install_lr.htm" class="button secondary">Installing the Extended Properties Feature</a> 
</p>

<h4 class="stamp">API Platform Version: 8.4 and later</h4>
<hr class="divide_hr" />
<h2 style="color: gray;">Table of Contents</h2>




<ol class="table_of_contents">
	<li><a href="#cusprop_intro">Introduction</a></li>
	<li><a href="#cusprop_asset_structure">LM Asset Structure</a></li>
	<li><a href="#cusprop_scn_1">User Creation Scenario 1: Site Admin User Creation</a></li>
	<li><a href="#cusprop_scn_2">User Creation Scenario 2: User Self-Signup</a></li>
	<li><a href="#cusprop_ext_metadata">Adding Extensible User Metadata</a></li>
</ol>



<hr class="divide_hr" />



<h2 id="cusprop_intro">Introduction</h2>
<p>In version 8.4, the Akana API Platform introduced support for extensible user metadata alongside the existing API and app capabilities introduced in version 8.3. This document provides a basic set of instructions for adding extensible user metadata to a tenant configuration in a specific use case. It is an example of using extensible user metadata; it is not a complete set of documentation for all scenarios.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="cusprop_asset_structure">LM Asset Structure</h2>
<p>The LM Platform component deployed as part of the 8.4 API Platform comes with a default configuration that includes specification of an empty <strong>User</strong> asset type. This includes:</p>
<ul>
	<li>Specification of two User capture templates:
		<ul>
			<li> <strong>User - Initial</strong></li>
			<li><strong>User - Specified</strong></li>
		</ul>
	</li>
	<li>Declaration of the User asset type in the Lifecycle Repository Client user interface (LPC) with a default association of this type to the <strong>User - Initial</strong> capture template, as shown below.
		<p><img src="images/lr_cus_props_01.jpg" alt="" /></p></li>
	<li>Specification of a User Submission process in the LPC which automatically transitions a User asset in the Initial state to the <strong>User - Specified</strong> capture template after initial publication, as shown below.
		<p><img src="images/lr_cus_props_02.jpg" alt="" /></p></li>
</ul>
<p>This default configuration is suitable as a baseline configuration for each of the two User creation scenarios supported by the API Platform. This document addresses configuration steps for both scenarios:</p>
<ul>
	<li><a href="#cusprop_scn_1">Scenario 1: User creation by the Site Admin</a></li>
	<li><a href="#cusprop_scn_2">Scenario 2: User self-signup</a></li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="cusprop_scn_1">Scenario 1: User creation by the Site Admin</h2>
<p>A Site Admin can create new users in the developer portal via the List of Users page: in the developer portal user interface, <strong>Admin</strong> &gt; <strong>Users</strong>.</p>
<p>The default configuration assumes that the Site Admin is not responsible for populating any of the extensible User metadata fields specified for the tenant. Instead, it's expected that the user will populate these fields at first login.</p>
<p>To set this up, implement the <strong>User - Initial</strong> capture template as the default template to be used at the time of User asset creation. This template is empty except for an internal state classifier; this classifier is used to control template transition only, and should never be edited.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="cusprop_scn_2">User Creation Scenario 2: User self-signup</h2>
<p>An individual user can sign up to the developer portal, creating a local account, without Site Admin involvement. This process initiates the creation of a unique UserID which is assigned to the user and linked to the user's credentials and other information provided by the user and stored in the database.</p>
<p>When extensible metadata is in use, the developer portal user interface should present such users with the set of extensible User metadata fields at the time the user creates a profile. In order to enable this behavior, it's necessary to modify the User asset type entry in the LPC so that it references the <strong>User - Specified</strong> capture template in place of the default <strong>User - Initial</strong> capture template setting.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="cusprop_ext_metadata">Adding Extensible User Metadata</h2>
<p>Adding extensible metadata is a multi-step process.</p>
<p>The following metadata types are supported:</p>
<ul>
	<li>Boolean</li>
	<li>Decimal</li>
	<li>Date</li>
	<li>Open String</li>
	<li>Enumerated String</li>
	<li>Multi-level taxonomy (in legacy Lifecycle Manager terminology, compound classifiers)</li>
	<li>URL</li>
</ul>
<p>This  document does not provide an exhaustive guide covering each type. Instead, it provides a single example (an enumerated String labeled <strong>User Type</strong>). You can apply the principles of this example to elements of other types.</p>
<p>The process steps are as follows:</p>
<ul>
	<li><a href="#proc_00">Step 0: Create a library connection and download the LM tenant library configuration</a></li>
	<li><a href="#proc_01">Step 1: Declare a new metadata type in the GDT</a></li>
	<li><a href="#proc_02">Step 2: Add the newly-declared metadata type to the User - Specified capture template</a></li>
	<li><a href="#proc_03">Step 3: Configure the LPC to properly expose the new metadata element</a></li>
	<li><a href="#proc_04">Step 4: Upload the configuration to the LM tenant library</a></li>
</ul>

<h4 id="proc_00">Step 0: Create a library connection and download the LM tenant library configuration</h4>
<p>If this is the first time that an LM tenant library is being edited within the LM Admin Client, the administrator must create a new library connection from the Repository Perspective of the client.</p>
<ol>
	<li>From the Library Explorer view, choose the red New Library Connection action. This allows the Administrator to configure the connection, as shown below.
	<p><img src="images/lr_cus_props_03.jpg" alt="" /></p>
	<p><strong>Note</strong>: By default, the developer portal Site Admin role includes the appropriate permission (LM roles) to edit library configurations. LM delegates user authentication to the Portal, so the same user credentials used to log into the Portal should be populated into the LM Library Connection.</p></li>
	<li>Once the connection is successfully created, switch to the Resource perspective and create a new Repository Project. To do this:
		<ol>
			<li>In the Project Explorer, right-click and choose <strong>New Project</strong>.</li>
			<li>Expand the Repository folder</li>
			<li>Choose a configuration project and click <strong>Next</strong>.</li>
		</ol>
	</li>
	<li>On the next panel of the wizard, choose the correct Connection and make sure that the other settings are set to <strong>Retrieve from</strong>.
	<p>This creates a new project, primed with the default LM tenant library configuration, in the Project Explorer.</p></li>
</ol>
<h4 id="proc_01">Step 1: Declare a new metadata type in the GDT</h4>
<p>All metadata types must be declared in the GDT (Global Definition Template) of the tenant library. This action makes them available for use within asset types.</p>
<p>The GDT is an XML file that can be opened in two ways:</p>
<ul>
	<li>Using the graphical editor provided by the LM Admin Client.</li>
	<li>Within the schema-aware XML editor that comes as part of Eclipse.</li>
</ul>
<p>Since the GDT is a declarative document, it can be very efficient to copy and paste existing elements as a starting point for new element declaration. However, many users prefer to use the graphical editor as a guide to populating the various attributes that control element behavior. The right-click context menu controls which editor is applied when opening a file.</p>
<p>When using the graphical editor, to add a new classifier, select the green <strong>plus</strong> icon on the <strong>Defined Classifiers</strong> list. A dialog box opens, and the administrator can specify the details of the newly declared classifier, as illustrated in the two images below.</p>
<p><img src="images/lr_cus_props_04.jpg" alt="" /> <img src="images/lr_cus_props_05.jpg" alt="" /></p>
<p>In the example above, when the user clicks <strong>Finish</strong>, the editor generates the following underlying XML fragment:</p>
<pre>&lt;define-classifier display-name="User Type" help-text="How does this user interact with the API Platform?" name="user-type" type="string"&gt;
  &lt;add-value uuid="_FrMwIA4_Eeew5aMeFxkGxw" value="App Owner"/&gt;
  &lt;add-value uuid="_HI0ksA4_Eeew5aMeFxkGxw" value="App and API Owner"/&gt;
  &lt;add-value uuid="_DEi28A4_Eeew5aMeFxkGxw" value="API Owner"/&gt;
  &lt;add-value uuid="_IxnugA4_Eeew5aMeFxkGxw" value="Admin Only"/&gt;
&lt;/define-classifier&gt;</pre>
<p>You could also enter an equivalent XML fragment directly, using a schema-aware XML editor. In this case, you can omit the <strong>uuid</strong> attribute since the editor generates values on an as-needed basis based on other editing activities.</p>

<h4 id="proc_02">Step 2: Add the newly-declared metadata type to the User - Specified capture template</h4>
<p>As discussed previously, the default LM configuration for User metadata is capable of supporting both user creation scenarios with minimal change.</p>
<p>In both cases, only the <strong>User - Specified</strong> capture template should be used as a basis for modification.</p>
<p>The <strong>User - Initial</strong> template should <strong>never</strong> have customer-specific metadata types. The only exception to this is if you want a hybrid Site Admin user creation scenario where the Site Admin fills in a subset of the extensible user fields and the user fills in the remainder.</p>
<p>When an element is added to a capture template, the administrator can control options that control presentation behavior and logic, such as:</p>
<ul>
	<li>Cardinality (mandatory/optional</li>
	<li>Single/multi-valued)</li>
	<li>Default values</li>
	<li>Editable vs. read-only</li>
</ul>
<p>In this scenario, again the Lifecycle library administrator has the option of using either the graphical editor or the Eclipse-provided schema-aware XML editor.</p>
<p>When using the graphical editor, be aware that most options presented on the editor UI are not relevant for embedded LM within the API Platform. In most cases, the only section that should be edited is the <strong>Constraints</strong> section, shown below.</p>
<p><img src="images/lr_cus_props_06.jpg" alt="" /></p>
<p>In the example above, the specific configuration settings enforce the following behavior on the newly-specified User property within the developer portal user interface:</p>
<ul>
	<li>The User Type field is:
		<ul>
			<li>Mandatory (Minimum occurrence = 1)</li>
			<li>Single-valued (Maximum occurrence = 1)</li>
		</ul>
	</li>
	<li>The end-user can edit the value (this is the most common use case for integrated metadata).</li>
	<li>The metadata value is processed through submission governance (that is, the User submission process referenced earlier).</li>
</ul>
<p>If you edit the  User Type classifier as above, the following XML fragment is generated in the underlying capture template document:</p>
<pre>&lt;use-classifier min-occurs=&quot;1&quot; max-occurs=&quot;1&quot; name=&quot;user-type&quot; /&gt;</pre>
<p>To create an optional single-valued field, delete the Minimum occurrence value in the graphical UI. This is represented in the underlying XML as follows:</p>
<pre>&lt;use-classifier appear-on-edit=&quot;true&quot; max-occurs=&quot;1&quot; name=&quot;birthdate&quot; /&gt;</pre>
<p>You can define a field as read-only in a similar way. Read-only values are generally not needed for User metadata, but might be useful in more advanced scenarios, such as API state transition with metadata lockdown after final transition.</p>

<h4 id="proc_03">Step 3: Configure the LPC to properly expose the new metadata element</h4>
<p>You must configure each metadata element into at least one LPC Group so that the element is accessible to the LM UI or developer portal UI.</p>
<p>By convention, the LM Platform default configuration defines two well-known LPC Groups:</p>
<ul>
	<li><strong>LM Internal Elements</strong>&#8212;This group is used to block exposure of an element to the Portal UI, so is used only for control metadata (such as the user-status field used in the User Submission Process to control template transition).</li>
	<li><strong>Common Information</strong>&#8212;In general, all newly specified User metadata elements should be added to this group, in the order by which they are to be displayed in the developer portal user interface, as shown in the example below.</li>
</ul>
<p><img src="images/lr_cus_props_07.jpg" alt="" /></p>

<h4 id="proc_04">Step 4: Upload the configuration to the LM tenant library</h4>
<p>To upload the modified configuration to the LM tenant library, right-click on the project folder and choose <strong>Upload to Library</strong>. In the dialog box, choose the correct connection and click <strong>OK</strong>.</p>
<p><a href="#top">Back to top</a></p>



<hr class="divide_hr" />



<h2 id="related_topics">Related Topics</h2>
<ul>
	<li><a href="../learnmore/site_admin_lm.htm">Using Custom Metadata on the Developer Portal</a></li>
	<li><a href="../../sp/install_lr/install_lr.htm">Installing the Extended Properties Feature</a></li>
	<li><a href="../lr/lr_extended_props_app_api.htm">Adding and Configuring Extensible Metadata for apps and APIs</a></li>
	<li><a href="../lr/lr_extended_props_user.htm">Adding and Configuring Extensible Metadata for Users</a></li>
	<li><a href="../lr/lr_runtime_config.htm">Defaulting API Settings using Runtime Configurations</a></li>
</ul>
<ul>
	<li><a href="../../sp/platform_install/installing_akana_api_platform_all.htm">Installing the Akana API Platform (all versions)</a></li>
	<li><a href="../../sp/platform_install/implementation_planning.htm">Planning Your Implementation</a></li>
	<li><a href="../promotion/promotion_users_guide.htm">Promotion User's Guide</a></li>
</ul>
</div>