---
layout: page
title: Runtime Configuration | Lifecycle Repository
description: Learn how to use the Runtime Configurations feature to establish templates so that API implementation properties can be established and selectively applied based on custom property filters.
product: cm
category: learn
sub-nav-class: Lifecycle Repository
weight: 07
type: page
nav-title: Runtime Configuration
---
<h2 id="top">Defaulting API Settings using Runtime Configurations</h2>
<p>Learn how to use the Runtime Configurations feature to establish <strong>templates</strong> so that API implementation properties can be established and selectively applied based on custom property filters.</p>
<p><strong>Note</strong>: As of the 2018.0.0 release, the behavior in this document can now be defined as part of the Promotion feature within the topology directly, using the <strong>Environment Configuration</strong> element. See <a href="../promotion/promotion_users_guide.htm#s08_03_environment_config">Environment Configuration</a> (Promotion Guide).</p>
<p><a href="../../sp/install_lc/install_promotion.htm" class="button secondary">Lifecycle Coordinator Installation</a> 
<a href="../promotion/promotion_samples.htm" class="button secondary">Sample Topologies</a></p>

<h5 class="stamp">API Platform Version: 8.4.17 and later</h5>
<div class = "divider1"></div>


<h3 style="color: gray;">Table of Contents</h3>
<ol class="table_of_contents">
	<li><a href="#overview">Overview</a></li>
	<li><a href="#s08_01_create_asset">Creating a Runtime Configuration Asset</a>
		<ul>
			<li><a href="#s08_01_01_owning_group">Owning Group</a></li>
			<li><a href="#s08_01_02_asset_filters">Asset Filters</a></li>
			<li><a href="#s08_01_03_implementation_type">Implementation Type</a></li>
			<li><a href="#s08_01_04_policies">Policies</a></li>
			<li><a href="#s08_01_05_virtual_host">Virtual Host</a></li>
			<li><a href="#s08_01_06_path">Path Classifier</a>
				<ul>
				<li><a href="#rc_path_classifier_parms">Path classifier parameters</a></li>
				<li><a href="#rc_path_classifier_norm">Normalization in classifiers</a></li>
				<li><a href="#rc_path_classifier_modifier">Modifiers with path classifiers</a> (8.4.30 and later, 2018.0.3 and later)</li>
				</ul>
			</li>
			<li><a href="#s08_01_06b_dzs">Deployment Zones:</a>
				<ul>
					<li><a href="#s08_01_06b_dzs_01">Basic Deployment Zone Configuration</a></li>
					<li><a href="#s08_01_06b_dzs_02">Advanced Deployment Zone Configuration</a></li>
					<li><a href="#s08_01_06b_dzs_03">Deployment Zone Replacement Behavior</a></li>
				</ul>
			</li>
			<li><a href="#s08_01_07_anon_access">Allow Anonymous Access</a></li>
			<li><a href="#s08_01_08_approval_req">Approval Required</a></li>
			<li><a href="#s08_01_09_debug_mode">Debug Mode Enabled</a></li>
			<li><a href="#s08_01_10_api_visibility">API Visibility</a></li>
			<li><a href="#s08_01_11_api_groups">API Group Visibility</a></li>
			<li><a href="#s08_01_12_api_type">API Type (REST or SOAP)</a> (2019.1.0 and later)</li>
		</ul>
		</li>
	<li><a href="#s08_02_publishing">Publishing a Runtime Configuration Asset</a></li>
	<li><a href="#s08_03_rc_example">Runtime Configuration: Example</a></li>
</ol>
<div class = "divider1"></div>



<h3 id="overview">Overview</h3>
<p>The behavior described in this document is not part of Lifecycle Coordinator, but can be used to augment the capabilities of Lifecycle Coordinator to further tailor the configuration of APIs within each environment of a topology.</p>
<p>The intent of the <a href="../learnmore/basics_glossary.htm#gl_runtimeconfiguration">Runtime Configuration</a> feature is to allow <strong>templates</strong> for API implementation properties to be established and selectively applied based on custom property filters. This is accomplished through customization of the Lifecycle Manager library in which custom properties for a tenant are configured. This configuration requires a working knowledge of the Lifecycle Manager application and the Configuration Designer Tool.</p>
<p>As with the topology definition, it's best if Runtime Configuration assets are set up during the initial configuration of the environment. Changes to a Runtime Configuration do not retroactively affect pre-existing APIs unless those APIs are updated through the API Platform UI or subsequent promotions.</p>
<p>There are two ways to define runtime configuration:</p>
<ul>
	<li>Through the Lifecycle Repository user interface, as shown in <a href="#s08_01_create_asset">Creating a Runtime Configuration Asset</a> below.</li>
	<li>From 2018.0.0 onwards: As part of the Promotion feature within the topology directly, using the <strong>Environment Configuration</strong> element in the topology JSON file. See <a href="../promotion/promotion_users_guide.htm#s08_03_environment_config">Environment Configuration</a> (Promotion Guide). For an example see <a href="#s08_03_rc_example">Runtime Configuration: Example</a> below.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h3 id="s08_01_create_asset">Creating a Runtime Configuration Asset</h3>
<p>You can use the Lifecycle Manager user interface to create assets of type <strong>Runtime Configuration</strong>. The following image shows the Lifecycle Manager edit page for a Runtime Configuration asset:</p>
<p><img src="images_rc/promotion_17_runtime_config_asset.jpg" alt="Creating a Runtime Configuration asset" /></p>
<p>The following aspects of a Runtime Configuration asset determine its behavior when applied to an API implementation:</p>
<ul>
	<li><a href="#s08_01_01_owning_group">Owning Group</a></li>
	<li><a href="#s08_01_02_asset_filters">Asset Filters</a></li>
	<li><a href="#s08_01_03_implementation_type">Implementation Type</a></li>
	<li><a href="#s08_01_04_policies">Policies</a></li>
	<li><a href="#s08_01_05_virtual_host">Virtual Host</a></li>
	<li><a href="#s08_01_06_path">Path Classifier</a></li>
	<li><a href="#s08_01_06b_dzs">Deployment Zones:</a>
		<ul>
			<li><a href="#s08_01_06b_dzs_01">Basic Deployment Zone Configuration</a></li>
			<li><a href="#s08_01_06b_dzs_02">Advanced Deployment Zone Configuration</a></li>
			<li><a href="#s08_01_06b_dzs_03">Deployment Zone Replacement Behavior</a></li>
		</ul>
	</li>
	<li><a href="#s08_01_07_anon_access">Allow Anonymous Access</a></li>
	<li><a href="#s08_01_08_approval_req">Approval Required</a></li>
	<li><a href="#s08_01_09_debug_mode">Debug Mode Enabled</a></li>
</ul>


<h4 id="s08_01_01_owning_group">Owning Group</h4>
<p>Groups within the Lifecycle Manager library reflect the Organizations of the associated tenant. The <strong>Owning Group</strong> chosen when creating a Runtime Configuration asset determines the organizational scope that the Runtime Configuration applies to.</p>
<p>For example, if the tenant organization has two child organizations <strong>A</strong> and <strong>B</strong>, a Runtime Configuration asset assigned to Group <strong>A</strong> is applicable to APIs in organization <strong>A</strong> but not to APIs in organization <strong>B</strong>. If you choose the tenant organization as the owning group, the Runtime Configuration is applicable to all APIs within the tenant.</p>

<h4 id="s08_01_02_asset_filters">Asset Filters</h4>
<p>You can further scope the applicability of Runtime Configuration assets by using <strong>asset filters</strong>. Asset filters are defined in the Library Process Configuration document (LPC) for the library, and specify criteria for the custom properties of the API (known as <strong>classifiers</strong> within Lifecycle Manager). For example, the filter below selects APIs with the <strong>PII</strong> custom property set to <strong>true</strong>:</p>
<pre>&lt;asset-filter name="PII APIs"&gt;
  &lt;classifier-criteria classifier-category="asset-type"&gt;
    &lt;value-set&gt;
      &lt;value&gt;API&lt;/value&gt;
    &lt;/value-set&gt;
  &lt;/classifier-criteria&gt;
  &lt;classifier-criteria classifier-category="pii"&gt;
    &lt;value-set&gt;
      &lt;value&gt;<strong>true</strong>&lt;/value&gt;
    &lt;/value-set&gt;
  &lt;/classifier-criteria&gt;
&lt;/asset-filter&gt;
</pre>
<p>When selecting a value for the Asset Filter classifier, a list of asset filters defined in the LPC as well as implicit filters for the defined asset types in the library will be shown. The filter in the example above would appear as <strong>LPC:PII APIs</strong>. Selecting the implicit filter <strong>asset-type:API</strong> indicates that the Runtime Configuration is applicable to all APIs within its owning group.</p>
<p>Note that any filter chosen for a Runtime Configuration should include criteria specifying <strong>API</strong> as the asset-type.</p>

<h4 id="s08_01_03_implementation_type">Implementation Type</h4>
<p>This classifier specifies the type of API implementation the Runtime Configuration applies to. The choices are <strong>Live</strong> and <strong>Sandbox</strong>.</p>

<h4 id="s08_01_04_policies">Policies</h4>
<p>A Runtime Configuration asset provides three classifiers that you can use to select policies to be applied to applicable API implementations. These classifiers are:</p>
<ul>
	<li>Operational Policy</li>
	<li>Compliance Policy</li>
	<li>Service Level Policy</li>
</ul>
<p>When choosing values for these classifiers, the application will present a list of policies available for the associated tenant with the specified policy type. You can choose one or more policies for each classifier.</p>
<p>Additionally, there are three classifiers that allow you to select policies for the physical service supporting an API implementation using the <strong>proxy</strong> pattern. These classifiers are: </p>
<ul>
	<li>Operational Policy (Physical Service)</li>
	<li>Compliance Policy (Physical Service)</li>
	<li>Service Level Policy (Physical Service)</li>
</ul>

<p id="policy_replacement"><strong>Policy Replacement Behavior</strong></p>
<p>The default behavior for setting policies on an API implementation or physical service is additive, meaning that policies specified in the Runtime Configuration are added to any existing policies on the implementation or physical service. However, you can customize the default behavior to control policy replacement behavior.</p>
<p>Here are a couple of examples of how this could be used:</p>
<ul>
	<li><strong>Adding a policy</strong>: Let's say there is a two-environment topology, <strong>dev</strong> and <strong>prod</strong>, and the topology is configured so that policies from dev are preserved when promoting, but you also want to make sure that the production-level security policy is in place for all APIs that are PCI-compliant. You could set up a Runtime Configuration with a <strong>pci = true</strong> filter that specifies the production-level security policy, but you probably wouldn't want to remove other policies the API may have. In this scenario, you could set the <strong>preserve-existing-policies</strong> property to <strong>true</strong>. The new policy is in addition to any existing policies.</li>
	<li> <strong>Replacing existing policies</strong>: Let's say you want to completely automate the assignment of policies to APIs, managing it entirely based on properties set on the API. In this case, you could set the <strong>preserve-existing-policies</strong> property to <strong>false</strong>. The Runtime Configuration would then overwrite any policies that were manually set or were in the promotion from an earlier environment. The policies in the Runtime Configuration would replace all existing policies.</li>
</ul>
<p>There are two ways that you can customize policy replacement behavior:</p>
<ul>
	<li><a href="#policy_replacement_pre_2018">By setting the <strong>preserve-existing-policies</strong> property</a></li>
	<li><a href="#policy_replacement_2018">By setting the <strong>ENV:preserve-existing-policies</strong> property in the repository library</a> (2018.0.0 and later)</li>
</ul>
<p>In any case, if a policy classifier has no value in the Runtime Configuration, no action will be taken with the policies associated with the implementation or physical service.</p>

<p id="policy_replacement_pre_2018"><strong>Setting the <strong>preserve-existing-policies</strong> property</strong></p>
<p>You can customize the <strong>Apply Runtime Configuration</strong> API post-processing task using the Configuration Designer by setting the <strong>preserve-existing-policies</strong> property to <strong>false</strong>. This indicates that any existing policies on the implementation or physical service that are not specified in the Runtime Configuration will be removed, and replaced by those in the Runtime Configuration.</p>
<p>When the <strong>preserve-existing-policies</strong> property is set to <strong>false</strong>, you can specify the value of <strong>NONE</strong> for any of the policy classifiers. This indicates that all policies should be removed from the implementation or physical service.</p>
<p>In the example below, the <strong>preserve-existing-policies</strong> property is set to <strong>false</strong> in an environment configuration of a topology.</p>
<pre>"configuration": {
  "properties" : [
    {"name":"preserve-existing-policies","value":"false"}
  ],
  "apiImplementationProfiles": [ 
  ...
  ]
}</pre>
<p id="policy_replacement_2018"><strong>Setting the ENV:preserve-existing-policies property in the repository library</strong> (2018.0.0 and later)</p>
<p>In the example below, the <strong>ENV:preserve-existing-policies</strong> library property is set directly in the LPC document of the repository library.</p>
<pre>&lt;library-properties&gt;
  &lt;property name=&quot;ENV:preserve-existing-policies&quot;&gt;
    &lt;value&gt;false&lt;/value&gt;
  &lt;/property&gt;
&lt;/library-properties&gt;</pre>

<h4 id="s08_01_05_virtual_host">Virtual Host</h4>
<p>This classifier is used to set the vanity host name for every endpoint in the implementation. Leaving this classifier unset indicates that the host name of the endpoints should not be modified.</p>

<h4 id="s08_01_06_path">Path Classifier</h4>
<p>The <strong>path</strong> classifier supports the Lifecycle Manager concept of <strong>context parameters</strong>. It is used to set the context path for every endpoint in the implementation. This allows aspects of the API, such as the API name or the values of custom properties, to be used within the path.</p>
<p>If you leave the <strong>path</strong> classifier unset, the default API context path, assigned by the API portal, applies to the API created by the runtime configuration. However, you can use one or more of the <strong>path</strong> classifiers to control the context path for the API created using the configuration.</p>
<p>In this section:</p>
<ul>
	<li><a href="#rc_path_classifier_parms">Path classifier parameters</a></li>
	<li><a href="#rc_path_classifier_norm">Normalization in classifiers</a></li>
	<li><a href="#rc_path_classifier_modifier">Modifiers with path classifiers</a> (8.4.30 and later, 2018.0.3 and later)</li>
</ul>

<h5 id="rc_path_classifier_parms">Path classifier parameters</h5>
<p>The following parameters are available to be used for the <strong>path</strong> classifier:</p>
<ul>
	<li><strong>{catalog_asset.id}</strong>
<p>Indicates that the path should include  the asset ID (APIID, App ID, or UserID, depending on the asset that the Runtime Configuration is applied to).</p></li>
	<li><strong>{catalog_asset.name}</strong>
<p>Indicates that the path should include the asset name (for example, App03). If you're not sure what the asset name is, check in the Lifecycle Coordinator, as shown below. In this example, the asset name is <strong>Training-1</strong>.</p>
<p><img src="images_rc/promotion_pathclassifier_01_01.jpg" alt="Path classifier example -- input" /></p>
	</li>
	<li><strong>{catalog_asset.name_normalized}</strong>
<p>Indicates that the path should include the API's name, with normalization applied for any spaces or other characters that are not URL-safe. For normalization rules, see <a href="#rc_path_classifier_norm">Normalization in classifiers</a> below.</p></li>
	<li><strong>{catalog_asset.version}</strong>
<p>Indicates that the asset path should include the version.</p></li>
	<li><strong>{catalog_asset.version_normalized}</strong>
<p>Indicates that the asset path should include the version, with normalization applied for any spaces or other characters that are not URL-safe. For example, <strong>version 1</strong> becomes <strong>version_1</strong>. For normalization rules, see <a href="#rc_path_classifier_norm">Normalization in classifiers</a> below.</p>
	</li>
	<li><strong>{catalog_asset.property.&lt;property name&gt;}</strong>
<p>Indicates that the value of a specific property defined for the API should be used in the context path.</p></li>
	<li><strong>{catalog_asset.classifier.&lt;classifier name&gt;}</strong>
<p>Indicates that the value of a specific classifier defined for the API should be used in the context path. For example, if an API had a custom classifier called <strong>visibility</strong> set to a value <strong>external</strong>, using a value of <strong>/rest/{catalog_asset.classifier.visibility}</strong> for the path would result in endpoint paths set to <strong>/rest/external</strong>.</p></li>
	<li><strong>{catalog_asset.group.name}</strong>
<p>The group name, as defined in the Lifecycle Coordinator user interface, corresponds to the organization name as defined in the developer portal. If this classifier is used, the group/organization name is included in the API context path. See example below.</p>
<p>Note: You could also use modifiers with your path classifiers to normalize the copy. For more information, see <a href="#rc_path_classifier_modifier">Modifiers with path classifiers</a> below.</p>
	</li>
</ul>
<p><strong>Note</strong>: The above is a list of key path classifiers. For a complete list, refer to the Lifecycle Manager Configuration guide.<!-- (available on the Akana Library site, in the Documentation folder for <a href="https://library.roguewave.com/display/MAIN/Lifecycle+Manager" title="Link to Lifecycle Manager download" target="_blank">Lifecycle Manager installation for your version</a>). Note that the context asset for parameter resolution is the API asset--></p>

<p id="rc_path_classifier_eg_01"><strong>Example #1: No path classifier set</strong></p>
<p>If no path is specified in the Runtime Configuration, the default path is assigned when the API is created in the developer portal. An example is shown below.</p>
<p><img src="images_rc/promotion_pathclassifier_00_01.jpg" alt="Path classifier example -- unset" /></p>

<p id="rc_path_classifier_eg_02"><strong>Example #2: Three classifier values</strong></p>
<p>In the example below, three values are concatenated: <strong>{catalog_asset.group.name}</strong>, <strong>{catalog_asset.version_normalized}</strong>, and <strong>{catalog_asset.name_normalized}</strong>.</p>
<p>In the Runtime Configuration:</p>
<p><img src="images_rc/promotion_pathclassifier_04_01.jpg" alt="Path classifier example -- concatenated with three" /></p>
<p>The resulting API path, as displayed on the <strong>API Details</strong> page in the developer portal, is shown below.</p>
<p><img src="images_rc/promotion_pathclassifier_04_02.jpg" alt="Path classifier example -- concatenated with three: result" /></p>

<p id="rc_path_classifier_eg_03"><strong>Example #3: Four classifier values</strong></p>
<p>In the example below, four values are concatenated: <strong>{catalog_asset.group.name}</strong>, <strong>{catalog_asset.classifier.&lt;classifier name&gt;}</strong>, <strong>{catalog_asset.version_normalized}</strong>, and <strong>{catalog_asset.name_normalized}</strong>.</p>
<p><img src="images_rc/promotion_pathclassifier_03_01.jpg" alt="Path classifier example -- concatenated with three" /></p>
<p>The resulting API path, as displayed on the <strong>API Details</strong> page in the developer portal, is shown below.</p>
<p><img src="images_rc/promotion_pathclassifier_03_02.jpg" alt="Path classifier example -- concatenated with three" /></p>

<h5 id="rc_path_classifier_norm">Normalization in classifiers</h5>
<p>If you use a path classifier that includes normalization, the following rules are applied.</p>
<ul>
	<li>Uppercase is changed to lowercase, so all letters are lowercase.</li>
	<li>Any characters other than the below are removed:
		<ul>
			<li>letters</li>
			<li>numbers</li>
			<li>Period (.)</li>
			<li>Dash (-)</li>
			<li>Underscore (_)</li>
			<li>Colon (:)</li>
		</ul>
	</li>
</ul>
<p>For example, a space in an API name or API version name would be removed.</p>

<h5 id="rc_path_classifier_modifier">Modifiers with path classifiers</h5>
<p class="stamp"><strong>API Platform Version: 8.4.30 and later, 2018.0.3 and later</strong></p>
<p>You can also use the <strong>context_path_safe</strong> modifier, with path classifiers such as <strong>catalog_asset.group.name</strong>, to transform the resolved parameter value as follows:</p>
<ul>
	<li>Removes characters that aren't letters or numbers</li>
	<li>Strips accents from accented characters (for example, <strong>&eacute;</strong> becomes <strong>e</strong>)</li>
	<li>Changes remaining characters to lowercase</li>
</ul>
<p>For example, if you have a group name <strong>Nuestra Compa&ntilde;&iacute;a #1</strong>, the following path classifier, with the modifier added, would result in a URL-safe group name value of <strong>nuestracompania1</strong>:</p>
<pre>{catalog_asset.group.name.context_path_safe}</pre>


<h4 id="s08_01_06b_dzs">Deployment Zones</h4>
<p>A Runtime Configuration asset can include a Deployment Zones classifier. This allows deployment zones to be designated for deployment of API implementations that match the filter of the Runtime Configuration asset. This section includes:</p>
<ul>
	<li><a href="#s08_01_06b_dzs_01">Basic Deployment Zone Configuration</a></li>
	<li><a href="#s08_01_06b_dzs_02">Advanced Deployment Zone Configuration</a></li>
	<li><a href="#s08_01_06b_dzs_03">Deployment Zone Replacement Behavior</a></li>
</ul>

<h5 id="s08_01_06b_dzs_01"><strong>Basic Deployment Zone Configuration</strong></h5>
<p class="stamp"><strong>API Platform Version: 8.4.18 and later</strong></p>
<p>When the Deployment Zones classifier is edited, a list of Deployment Zones defined in the associated tenant is displayed. Any number of these deployment zones can be selected. Then, matching API implementations are deployed in the selected deployment zones.</p>
<p>If the Deployment Zones classifier is left empty, the deployment zones of a matching API implementation will not be affected. However, setting the classifier to a value of <strong>NONE</strong> will result in matching API implementations having no deployment zones enabled.</p>
<p> Settings designated in the <strong>Path</strong> and <strong>Virtual Host</strong> classifiers are applied to the endpoints in the designated deployment zones.</p>

<h5 id="s08_01_06b_dzs_02"><strong>Advanced Deployment Zone Configuration</strong></h5>
<p class="stamp"><strong>API Platform Version: 2018.0.0 and later</strong></p>
<p>While the Deployment Zones classifier mentioned above can specify deployment zones for an API to be deployed to, it is sometimes necessary to also specify listeners within a deployment zone as well as specific settings for each listener. If this level of granularity is needed, the Deployment Zones classifier should be left unset and instead the <strong>Deployment Zone Configuration</strong> artifact in the Runtime Configuration asset should be used. This artifact should be a JSON document containing a JSON array of deploymentZone properties in the same format as shown for the deploymentZones property of an Environment Configuration (see <a href="../promotion/promotion_users_guide.htm#s08_03_environment_config">Environment Configuration</a>). Here is a sample Deployment Zones Configuration document:</p>
<pre>[
  {
    "name": "DZ9921"
  },
  {
    "name": "DZ9941",
    "listeners": [
      {
        "name": "default-http0",
        "public": "false",
        "virtualHost": "{api.property.internal}",
        "path": "{api.name_normalized}_{api.version_normalized}"
      },
      {
        "name": "default-https",
        "useImplementationKeyforSSL": "true"
      }
    ]
  }
]</pre>
<p>Note that only the deployment zone name is required in each <strong>deploymentZone</strong> property. Also be aware that there is no configuration-time validation of the information specified in the Deployment Zones Configuration document, so care must be taken to ensure that it is in sync with the actual deployment zones and listeners defined in the API platform instance.</p>


<h5 id="s08_01_06b_dzs_03"><strong>Deployment Zone Replacement Behavior</strong></h5>
<p>By default, the deployment zones specified on the Runtime Configuration asset replace those already enabled for a matching API implementation.</p>
<p>Using Configuration Designer, it is possible to customize the <strong>Apply Runtime Configuration API</strong> post-processing task by setting the <strong>Preserve Existing Deployment Zones</strong> property <strong>to</strong> true. This indicates that any existing deployment zones enabled for a matching API implementation will be merged with those specified on the Runtime Configuration asset.</p>


<h4 id="s08_01_07_anon_access">Allow Anonymous Access</h4>
<p>This classifier is used to set the <strong>allow anonymous access</strong> value of the implementation. Leaving this classifier unset indicates that the <strong>allow anonymous access</strong> value of the implementation should not be modified.</p>


<h4 id="s08_01_08_approval_req">Approval Required</h4>
<p>This classifier is used to set the <strong>approval required</strong> value of the implementation. It is only applicable when <strong>allow anonymous access</strong> is set to <strong>false</strong>. Leaving this classifier unset indicates that the <strong>approval required</strong> value of the implementation should not be modified.</p>


<h4 id="s08_01_09_debug_mode">Debug Mode Enabled</h4>
<p>This classifier is used to set the <strong>debug mode enabled</strong> value of the implementation. Leaving this classifier unset indicates that the <strong>debug mode enabled</strong> value of the implementation should not be modified.</p>
<p>For an example, see <a href="#s08_03_rc_example">Runtime Configuration: Example</a>, Line 39.</p>


<h4 id="s08_01_10_api_visibility">API Visibility</h4>
<p class="stamp"><strong>API Platform Version: 2018.0.11 and later</strong></p>
<p>This classifier is used to set the <a href="../learnmore/basics_glossary.htm#gl_visibility">visibility</a> of the API that's created. Defaults to <strong>Public</strong>, which means that the API can be viewed by anyone.</p>
<p>Valid values: Public, Private, Registered Users.</p>
<p>For an example, see <a href="#s08_03_rc_example">Runtime Configuration: Example</a>, Line 40.</p>


<h4 id="s08_01_11_api_groups">API Group Visibility</h4>
<p class="stamp"><strong>API Platform Version: 2019.1.0 and later</strong></p>
<p>This classifier is used to invite user groups to view the API. Below is a configuration example:</p>
<pre>{
  "apiImplementationProfiles":[
    {
      "name":"Internal API Profile",
      "type":"Live",
      "apiVisibility":"Registered Users",
      "groupVisibility":[
        "Group 1",
        "Group 3"
      ]
    }
  ]
}</pre>
<p>Values that do not match a group are ignored.</p>


<h4 id="s08_01_12_api_type">API Type (REST or SOAP)</h4>
<p class="stamp"><strong>API Platform Version: 2019.1.0 and later</strong></p>
<p>This classifier allows you to filter your selection by API type. Valid values:</p>
<ul>
	<li>REST</li>
	<li>SOAP</li>
</ul>
<p>An example of these values shown on the Asset Filter list is shown below.</p>
<p><img src="images_rc/promotion_editclassifier_dropdown.png" alt="Edit Classifier drop-down" /></p>
<p>To implement this filter in an existing library you'll need to modify these files:</p>
<ul>
	<li><strong>lpc.lpc</strong>: The workflow definition file for the Configuration Designer.</li>
	<li><strong>gdt.xml</strong> </li>
	<li><strong> Runtime Configuration.ctxml </strong>: the capture template for Runtime Configuration</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h3 id="s08_02_publishing">Publishing a Runtime Configuration Asset</h3>
<p>When edit is complete on a Runtime Configuration asset, it must be submitted. Once any necessary approvals are complete, the Runtime Configuration is published, and is immediately active.</p>
<p><a href="#top">Back to top</a></p>



<h3 id="s08_03_rc_example">Runtime Configuration: Example</h3>
<p>The following is an example of an Environment Configuration definition. Line numbers have been added.</p>
<pre>01  {
02    "name":"development",
03    "displayName":"Development",
04    "description":"Development environment",
05    "tenant":"DevelopmentTenant",
06    "configuration":{
07      "apiImplementationProfiles":[
08        {
09          "name":"Internal API Profile",
10          "type":"Live",
11          "filterNames":[
12            "internal"
13          ],
14          "deploymentZones":[
15            "DZ9941"
16          ],
17          "virtualServicePolicies":[
18            {
19              "policyName":"DetailedAuditing"
20            }
21          ],
22          "virtualHost":"InternalHost.com",
23          "path":"/{catalog_asset.name_normalized}",
24          "allowAnonymousAccess":"true"
25        },
26        {
27          "name":"External API Profile",
28          "type":"Live",
29          "filterNames":[
30            "external"
31          ],
32          "deploymentZones":[
33            "DZ9942"
34          ],
35          "virtualHost":"ExternalHost.com",
36          "path":"/{catalog_asset.name_normalized}/external",
37          "allowAnonymousAccess":"false",
38          "approvalRequired":"true",
39          "debugModeEnabled":"true",
40          "apiVisibility":"Registered Users"
41        }
42      ]
43    }
44  }</pre>
<p><a href="#top">Back to top</a></p>



<div class = "divider1"></div>



<h3 id="related_topics">Related Topics</h3>
<div class="relatedlinks">
<ul>
	<li><a href="../learnmore/site_admin_lm.htm">Using Custom Metadata on the Developer Portal</a></li>
	<li><a href="../../sp/install_lr/install_lr.htm">Installing the Extended Properties Feature</a></li>
	<li><a href="../lr/lr_extended_props_app_api.htm">Adding and Configuring Extensible Metadata for apps and APIs</a></li>
	<li><a href="../lr/lr_extended_props_user.htm">Adding and Configuring Extensible Metadata for Users</a></li>
	<li><a href="../lr/lr_runtime_config.htm">Defaulting API Settings using Runtime Configurations</a></li>
</ul>
<ul>
	<li><a href="../../sp/platform_install/installing_akana_api_platform_all.htm">Installing the Akana API Platform (all versions)</a></li>
	<li><a href="../../sp/platform_install/implementation_planning.htm">Planning Your Implementation</a></li>
	<li><a href="../promotion/promotion_users_guide.htm">Promotion User's Guide</a></li>
</ul>
</div>