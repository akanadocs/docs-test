---
layout: page
title: App Version Workflow | Customizing Workflows in the API Platform
description: Information about initial actions, reserved actions, functions, conditions, and variables for the App Version workflow.
product: cm
category: ref
sub-nav-class: Workflows
weight: 03
type: page
nav-title: App Version Workflow
---
<h1 id="top">App Version Workflow</h1>
<p>There is no default workflow applied to app versions, but the platform supports implementation of custom workflow for app versions.</p>
<p>This section provides information about functions, conditions, and variables for the app version workflow, as well as initial actions and reserved actions.</p>


<hr class="divide_hr" />


<h2 style="color: gray;">Table of Contents</h2>
<ol class="table_of_contents">
	<li><a href="#appv_ia_00">App Version Workflow: Initial Actions</a></li>
	<li><a href="#appv_ra_00">App Version Workflow: Reserved Actions</a></li>
	<li><a href="#appv_f_00">App Version Workflow: Functions</a></li>
	<li><a href="#appv_c_00">App Version Workflow: Conditions</a></li>
	<li><a href="#appv_vr_00">App Version Workflow: Variable Resolvers</a></li>
</ol>
<hr class="divide_hr" />



<h2 id="appv_ia_00">App Version Workflow: Initial Actions</h2>
<p>The following initial actions are valid for Akana API Platform workflows relating to apps/app versions:</p>
<ul>
	<li><a href="#appv_ia_01">@Create</a></li>
</ul>


<h3 id="appv_ia_01">@Create</h3>
<p>Starts the workflow, for a new app.</p>
<p>For more information, see <a href="01_overview_cm_wf.htm#s01_11_ia">Workflow Initial Actions</a>.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="appv_ra_00">App Version Workflow: Reserved Actions</h2>
<p>The following reserved actions are defined for app version workflows:</p>
<ul>
	<li><a href="#appv_ra_01">@Modify</a></li>
	<li><a href="#appv_ra_02">@Delete</a></li>
	<li><a href="#appv_ra_03">@KeyInfoRemoved</a></li>
	<li><a href="#appv_ra_04">@KeyInfoSaved</a></li>
	<li><a href="#appv_ra_05">@RegeneratedSecret</a></li>
	<li><a href="#appv_ra_06">reserved-allow-cert-upload</a></li>
	<li><a href="#appv_ra_07">reserved-connect-to-api</a></li>
	<li><a href="#appv_ra_08">reserved-connect-to-api.Sandbox</a></li>
	<li><a href="#appv_ra_09">reserved-connect-to-api.Production</a></li>
	<li><a href="#appv_ra_10">reserved-approve-api-connection.Production</a></li>
	<li><a href="#appv_ra_11">reserved-cancel-api-connection.Sandbox</a></li>
	<li><a href="#appv_ra_12">reserved-cancel-api-connection</a></li>
	<li><a href="#appv_ra_13">@ModifyCert</a></li>
	<li><a href="#appv_ra_14">@RemoveCert</a></li>
	<li><a href="#appv_ra_15">@EditApp</a></li>
	<li><a href="#appv_ra_16">@RegenerateSecret</a></li>
	<li><a href="#appv_ra_17">@AddVersion</a></li>
	<li><a href="#appv_ra_18">@EditPublicProfile</a></li>
	<li><a href="#appv_ra_19">@EditOAuthDetails</a></li>
	<li><a href="#appv_ra_20">reserved-allow-oauth-auz-details-update</a></li>
	<li><a href="#appv_ra_21">reserved-action-modify</a></li>
</ul>


<h3 id="appv_ra_01">@Modify</h3>
<p>Used to determine whether an app version can be modified or should be read-only. If @Modify is not a valid action, the user interface disables the buttons/links leading to modifying anything about the app version.</p>
<p><strong>Note</strong>: @Modify controls permission to modify the entire app version. A user with this permission is authorized to perform all edit activities for the app version, such as saving or removing the app certificate/CSR, regenerating the shared secret, adding an app version, or editing the app's public profile. If @Modify is not present in the workflow, the platform checks for additional workflow actions that give more granular permission to perform a specific action.</p>
<!--<p>{There is also reserved-action-modify which, similiarly, gives general permission to modify. This is used by the LaaS workflow in Lifecycle Manager.}</p>-->


<h3 id="appv_ra_02">@Delete</h3>
<p>Indicates that the app version can be deleted at this point in the workflow, using the user interface or the platform API.</p>
<p>If you want the app version to be immediately deleted, you can invoke the deleteAppVersion function for @Delete. However, if you want to set up an approval process, you can instead take the app to a different state. The custom out-of-the-box app workflow, appversion-workflow-template1.xml, uses workflow step 200, Marked For Delete, to initiate a Business Admin approval process. If the Business Admin approves the request, the app is deleted.</p>


<h3 id="appv_ra_03">@KeyInfoRemoved</h3>
<p>Invoked when the certificate/CSR info that was previously added for an app version is removed.</p>
<p>You can use this to trigger additional actions in the workflow; for example, sending notifications or generating Board items.</p>


<h3 id="appv_ra_04">@KeyInfoSaved</h3>
<p>Invoked when the app version's certificate/CSR is added or modified.</p>
<p>You can use this to trigger additional actions in the workflow; for example, sending notifications or generating Board items.</p>


<h3 id="appv_ra_05">@RegeneratedSecret</h3>
<p>Invoked when the app Shared Secret is regenerated.</p>
<p>You can use this to trigger additional actions in the workflow; for example, sending notifications or generating Board items.</p>


<h3 id="appv_ra_06">reserved-allow-cert-upload</h3>
<p>If this reserved action is present in the workflow, certificate upload is allowed.</p>


<h3 id="appv_ra_07">reserved-connect-to-api</h3>
<p>If this reserved action is present in the workflow, an authorized user can initiate a connection to an API in either environment.</p>


<h3 id="appv_ra_08">reserved-connect-to-api.Sandbox</h3>
<p>If this reserved action is present in the workflow, an authorized user can initiate a connection to an API in the Sandbox environment.</p>


<h3 id="appv_ra_09">reserved-connect-to-api.Production</h3>
<p>If this reserved action is present in the workflow, an authorized user can initiate a connection to an API in the <!-- #BeginLibraryItem "/Library/environ_live.lbi" -->Live<!-- #EndLibraryItem --> environment.</p>


<h3 id="appv_ra_10">reserved-approve-api-connection.Production</h3>
<p>If this reserved action is present in the workflow, an authorized user can approve a connection to an API in the <!-- #BeginLibraryItem "/Library/environ_live.lbi" -->Live<!-- #EndLibraryItem --> environment.</p>


<h3 id="appv_ra_11">reserved-cancel-api-connection.Sandbox</h3>
<p>If this reserved action is present in the workflow, an authorized user can approve a connection to an API in the Sandbox environment.</p>


<h3 id="appv_ra_12">reserved-cancel-api-connection</h3>
<p>If this reserved action is present in the workflow, an authorized user can cancel a connection to an API.</p>


<h3 id="appv_ra_13">@ModifyCert</h3>
<p>If you want to give users with one or more roles permission to modify the app certificate, you can use this reserved action. You can then specify which roles can perform the action.</p>
<p>The platform only looks for this workflow action if the @Modify action, which gives broad permission to modify all aspects of the app version, is not present in the custom workflow.</p>


<h3 id="appv_ra_14">@RemoveCert</h3>
<p>Invoked when the app's certificate is removed.</p>
<p>If you want to give users with one or more roles permission to remove the app certificate, you can use this reserved action. You can then specify which roles can perform the action.</p>
<p>The platform only looks for this workflow action if the @Modify action, which gives broad permission to modify all aspects of the app version, is not present in the custom workflow.</p>


<h3 id="appv_ra_15">@EditApp</h3>
<p>If you want to give users with one or more roles permission to edit the app, you can use this reserved action. You can then specify which roles can perform the action.</p>
<p>The platform only looks for this workflow action if the @Modify action, which gives broad permission to modify all aspects of the app version, is not present in the custom workflow.</p>


<h3 id="appv_ra_16">@RegenerateSecret</h3>
<p>If you want to give users with one or more roles permission to regenerate the app's Shared Secret, you can use this reserved action. You can then specify which roles can perform the action.</p>
<p>The platform only looks for this workflow action if the @Modify action, which gives broad permission to modify all aspects of the app version, is not present in the custom workflow.</p>


<h3 id="appv_ra_17">@AddVersion</h3>
<p>If you want to give users with one or more roles permission to add an app version, you can use this reserved action. You can then specify which roles can perform the action.</p>
<p>The platform only looks for this workflow action if the @Modify action, which gives broad permission to modify all aspects of the app version, is not present in the custom workflow.</p>


<h3 id="appv_ra_18">@EditPublicProfile</h3>
<p>If you want to give users with one or more roles permission to modify the app's public profile, you can use this reserved action. You can then specify which roles can perform the action.</p>
<p>The platform only looks for this workflow action if the @Modify action, which gives broad permission to modify all aspects of the app version, is not present in the custom workflow.</p>


<h3 id="appv_ra_19">@EditOAuthDetails</h3>
<p>If you want to give users with one or more roles permission to modify the app's OAuth details, you can use this reserved action. You can then specify which roles can perform the action.</p>
<p>The platform only looks for this workflow action if the @Modify action, which gives broad permission to modify all aspects of the app version, is not present in the custom workflow.</p>


<h3 id="appv_ra_20">reserved-allow-oauth-auz-details-update</h3>
<p>Each app has a page where the app developer can specify the app's settings and preferences for OAuth. This page includes an additional section, for advanced Authorization settings, that isn't normally available to app developers. Only Site Admins or Business Admins see the Authorization section at the bottom of the OAuth Profile page.</p>
<p>If you want to allow app developers to modify values in the Authorization section of the App OAuth Profile, you'll need to upload a custom workflow that includes the reserved-allow-oauth-auz-details-update reserved workflow action.</p>
<p>The workflow section below shows how this would look in a custom workflow.</p>
<pre>&lt;action id="116" name="reserved-allow-oauth-auz-details-update"&gt;
  &lt;restrict-to&gt;
    &lt;conditions type="AND"&gt;
      &lt;condition type="authorizeByAtmosphereRole"&gt;
        &lt;arg name="role"&gt;&amp;AtmoRoleAdmin;&lt;/arg&gt;
      &lt;/condition&gt;
    &lt;/conditions&gt;
  &lt;/restrict-to&gt;
  &lt;results&gt;
    &lt;unconditional-result old-status="Setup" status="Setup" step="100" owner="${caller}" /&gt;
  &lt;/results&gt;
&lt;/action&gt;</pre>
<p>In the default Community Manager developer portal, there is a template, workflow-workflow_definition_appversion-workflow-template1.xml, that you can use to implement this functionality.</p>


<h3 id="appv_ra_21">reserved-action-modify</h3>
<p>Similar to @Modify. This gives the ability to add permission for who can modify the object.</p>
<!--<p>{MM 2/14/17: similar to @Modify. We just added it for backward compatibility.}</p>-->

<p>The workflow section below shows how this would look in a custom workflow.</p>
<pre>&lt;action id="117" name="reserved-action-modify"&gt;
  &lt;restrict-to&gt;
    &lt;conditions type="AND"&gt;
      &lt;condition type="authorizeByAtmosphereRole"&gt;
        &lt;arg name="role"&gt;&amp;AtmoRoleAdmin;&lt;/arg&gt;
      &lt;/condition&gt;
    &lt;/conditions&gt;
  &lt;/restrict-to&gt;
  &lt;results&gt;
    &lt;unconditional-result old-status="Setup" status="Setup" step="100" owner="${caller}" /&gt;
  &lt;/results&gt;
  &lt;post-functions&gt;
    &lt;function type="syncAppVersionOAuthClient"&gt;
      &lt;arg name="action"&gt;Reset&lt;/arg&gt;
    &lt;/function&gt;
  &lt;/post-functions&gt;
&lt;/action&gt;</pre>
<p><a href="#top">Back to top</a></p>



<h2 id="appv_f_00">App Version Workflow: Functions</h2>
<p>The following functions are available for the app version workflow:</p>
<ul>
	<li><a href="#appv_f_01">cloneAllAPIContracts</a></li>
	<li><a href="#appv_f_02">activateAllAPIContractsInEnvironment</a></li>
	<li><a href="#appv_f_03">cancelAllAPIContractsInEnvironment</a></li>
	<li><a href="#appv_f_04">sendNotification</a></li>
	<li><a href="#appv_f_05">deleteAppVersion</a></li>
	<li><a href="#appv_f_06">addBoardItem</a></li>
	<li><a href="#appv_f_07">syncAppVersionOAuthClient</a></li>
	<li><a href="#appv_f_08">notifyAppVersionDeleteToOAuthClient</a></li>
</ul>
<!--<p>{\com.soa.atmosphere.impl\src\com\soa\application\workflow\impl\AppVersionWorkflowFunctions.java}</p>-->



<h3 id="appv_f_01">cloneAllAPIContracts</h3>
<p>Sets up connections in the target environment with all the API versions that the app version is connected to in the source environment.</p>

<h4>Parameters</h4>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>EnvFrom</td>
			<td>Source environment: The environment contracts are being cloned from. Values: Sandbox or Production.</td>
		</tr>
		<tr>
			<td>EnvTo</td>
			<td>Target environment: The environment contracts are being cloned to. Values: Sandbox or Production.</td>
		</tr>
	</tbody>
</table>

<h4>Examples/Notes/Additional Information</h4>
<p>In the example below, this function is used to clone all API contracts from Sandbox to <!-- #BeginLibraryItem "/Library/environ_live.lbi" -->Live<!-- #EndLibraryItem --> (Production).</p>
<pre>&lt;pre-functions&gt;
  &lt;function type="cloneAllAPIContracts"&gt;
    &lt;arg name="EnvFrom"&gt;Sandbox&lt;/arg&gt;
    &lt;arg name="EnvTo"&gt;Production&lt;/arg&gt;
  &lt;/function&gt;
&lt;/pre-functions&gt;</pre>


<h3 id="appv_f_02">activateAllAPIContractsInEnvironment</h3>
<p>Activates all of an app's connections in the specified environment. For example, for an app with five contracts in the <!-- #BeginLibraryItem "/Library/environ_live.lbi" -->Live<!-- #EndLibraryItem --> environment, this function would activate all of them.</p>

<h4>Parameters</h4>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>Environment</td>
			<td>The environment in which all API contracts are being activated. Values: Sandbox or Production.</td>
		</tr>
	</tbody>
</table>

<h4>Examples/Notes/Additional Information</h4>
<p>In the example below, this function is used to activate all API contracts in the <!-- #BeginLibraryItem "/Library/environ_live.lbi" -->Live<!-- #EndLibraryItem --> environment.</p>
<pre>&lt;pre-functions&gt;
  &lt;function type="activateAllAPIContractsInEnvironment"&gt;
    &lt;arg name="Environment"&gt;Production&lt;/arg&gt;
  &lt;/function&gt;
  &lt;function type="cancelAllAPIContractsInEnvironment"&gt;
    &lt;arg name="Environment"&gt;Sandbox&lt;/arg&gt;
  &lt;/function&gt;
&lt;/pre-functions&gt;</pre>


<h3 id="appv_f_03">cancelAllAPIContractsInEnvironment</h3>
<p>Cancels all of an app's connections in the specified environment.</p>

<h4>Parameters</h4>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>Environment</td>
			<td>The environment in which all API contracts are being cancelled. Values: Sandbox or Production.</td>
		</tr>
	</tbody>
</table>

<h4>Examples/Notes/Additional Information</h4>
<p>The example below shows the use of <strong>activateAllAPIContractsInEnvironment</strong> followed by <strong>cancelAllAPIContractsInEnvironment</strong> to activate all contracts in the <!-- #BeginLibraryItem "/Library/environ_live.lbi" -->Live<!-- #EndLibraryItem --> environment and then cancel all contracts in the Sandbox environment.</p>
<pre>&lt;restrict-to&gt;
  &lt;conditions type="AND"&gt;
    &lt;condition type="authorizeByAtmosphereRole"&gt;
      &lt;arg name="role"&gt;AppAdmin&lt;/arg&gt;
    &lt;/condition&gt;
  &lt;/conditions&gt;
&lt;/restrict-to&gt;
&lt;pre-functions&gt;
  &lt;function type="activateAllAPIContractsInEnvironment"&gt;
    &lt;arg name="Environment"&gt;Production&lt;/arg&gt;
  &lt;/function&gt;
  &lt;function type="cancelAllAPIContractsInEnvironment"&gt;
    &lt;arg name="Environment"&gt;Sandbox&lt;/arg&gt;
  &lt;/function&gt;
&lt;/pre-functions&gt;</pre>



<h3 id="appv_f_04">sendNotification</h3>
<p>Triggers the specified notification based on an event relating to an app version.</p>
<p><strong>Note</strong>: The email isn't sent instantly; it is queued to be sent. It goes to the notifications queue, and the job runs every 60 seconds. There might be a short delay before the user receives the email.</p>

<h4>Parameters</h4>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>notificationType</td>
			<td><p>The type of notification being sent. Can be any valid notification existing in the platform. For example:</p>
				<ul>
					<li>com.soa.notification.type.app.marked.for.deletion.appteam</li>
					<li>com.soa.notification.type.app.marked.for.deletion.apiadmin</li>
					<li>com.soa.notification.type.app.marked.for.deletion.bizadmin</li>
				</ul>      </td>
		</tr>
		<tr>
			<td>Role</td>
			<td><p>The role to which the notifications will be sent. Valid values:</p>
				<ul>
					<li>ApiAdmin</li>
					<li>AppAdmin</li>
					<li>BusinessAdmin</li>
				</ul>      </td>
		</tr>
	</tbody>
</table>

<h4>Examples/Notes/Additional Information</h4>
<p>In the example below, three different notifications are sent out, one for each of three different types of users, to notify the users that the app was marked for deletion.</p>
<pre>&lt;function type="sendNotification"&gt;
  &lt;arg name="notificationType"&gt;com.soa.notification.type.app.marked.for.deletion.appteam&lt;/arg&gt;
  &lt;arg name="role"&gt;AppAdmin&lt;/arg&gt;
&lt;/function&gt;
&lt;function type="sendNotification"&gt;
  &lt;arg name="notificationType"&gt;com.soa.notification.type.app.marked.for.deletion.apiadmin&lt;/arg&gt;
  &lt;arg name="role"&gt;ApiAdmin&lt;/arg&gt;
&lt;/function&gt;
&lt;function type="sendNotification"&gt;
  &lt;arg name="notificationType"&gt;com.soa.notification.type.app.marked.for.deletion.bizadmin&lt;/arg&gt;
  &lt;arg name="role"&gt;BusinessAdmin&lt;/arg&gt;
&lt;/function&gt;</pre>



<h3 id="appv_f_05">deleteAppVersion</h3>
<p>This function permanently deletes the application version from the database.</p>
<p>It does not add a Board item or notification, but you can add either or both of these as additional functions:</p>
<p>To add a notification, use <a href="#appv_f_04">sendNotification</a>.</p>
<p>To add a Board item, use <a href="#appv_f_06">addBoardItem</a>.</p>
<p>The out-of-the-box app version workflow includes notifications and Board items as additional functions, by default. The deleteAppVersion function itself does not send them.</p>
<p><strong>Note</strong>: If you want to add Board items or functions, add them before the deleteAppVersion function is run, so that information needed for the Board item, such as the App Version ID, is still available. Once app version is deleted, the App Version ID is no longer valid.</p>

<h4>Parameters</h4>
<p>None.</p>
<h4>Examples/Notes/Additional Information</h4>
<p>In the example below, deleteAppVersion is run as the last pre-function.</p>
<pre>&lt;pre-functions&gt;
  &lt;function type="addBoardItem"&gt;
    &lt;arg name="boardItemTemplateId"&gt;com.soa.board.item.appversion.delete.request.approved&lt;/arg&gt;
    &lt;arg name="visibility"&gt;Limited&lt;/arg&gt;
    &lt;arg name="type"&gt;Discussion&lt;/arg&gt;
    &lt;arg name="targetBoard.appversion"&gt;${app.version.dn}&lt;/arg&gt;
    &lt;arg name="targetBoard.appdn"&gt;${app.dn}&lt;/arg&gt;
    &lt;arg name="targetBoard.appteamgrp"&gt;${app.team.group.dn}&lt;/arg&gt;
    &lt;arg name="targetBoard.apiversion"&gt;${connected.apiversion.ids}&lt;/arg&gt;
    &lt;arg name="targetBoard.apiadmin.groups"&gt;${connected.apis.admin.groups}&lt;/arg&gt;
    &lt;arg name="targetBoard.api"&gt;${connected.apis.id}&lt;/arg&gt;
    &lt;arg name="viewers"&gt;${app.dn},${app.team.group.dn},${connected.apis.id},${business.dn}&lt;/arg&gt;
  &lt;/function&gt;
  &lt;function type="sendNotification"&gt;
    &lt;arg name="notificationType"&gt;com.soa.notification.type.app.deletion.request.approved.apiadmin&lt;/arg&gt;
    &lt;arg name="role"&gt;ApiAdmin&lt;/arg&gt;
  &lt;/function&gt;
  &lt;function type="sendNotification"&gt;
    &lt;arg name="notificationType"&gt;com.soa.notification.type.app.deletion.request.approved.appteam&lt;/arg&gt;
    &lt;arg name="role"&gt;AppAdmin&lt;/arg&gt;
  &lt;/function&gt;
  &lt;function type="sendNotification"&gt;
    &lt;arg name="notificationType"&gt;com.soa.notification.type.app.deletion.request.approved.bizadmin&lt;/arg&gt;
    &lt;arg name="role"&gt;BusinessAdmin&lt;/arg&gt;
  &lt;/function&gt;
  &lt;function type="deleteAppVersion" /&gt;
&lt;/pre-functions&gt;</pre>



<h3 id="appv_f_06">addBoardItem</h3>
<p>Adds a Board item to one or more boards for the app.</p>
<p>This function can load a message template and dynamically fill in some values into the template with the help of a parameter resolver. When the workflow action is invoked, a comment is added by the user. The parameter resolver can be used to include this comment in the board item title/description, email message subject/body, and/or a dashboard notification. To use this feature, reference the parameter resolver <strong>{action.comment}</strong> in the notification template. When the action is performed, this parameter resolver will be replaced by the comment entered by the user performing the workflow action.</p>

<h4>Parameters</h4>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>boardItemTemplateId</td>
			<td><p>The ID of the Board item notification template, from the database, to be used for the Board item title and description. For example:</p>
				<ul>
					<li>com.soa.board.item.appversion.delete.request.approved</li>
				</ul></td>
		</tr>
		<tr>
			<td>Visibility</td>
			<td><p>The visibility of the Board item. Valid values:</p>
				<ul>
					<li>Public</li>
					<li>Limited</li>
					<li>RegisteredUsers</li>
				</ul>      </td>
		</tr>
		<tr>
			<td>Type</td>
			<td>The Board item type. Currently, the only valid value is Discussion.</td>
		</tr>
		<tr>
			<td>targetBoard</td>
			<td><p>Used to specify that one item could be added to multiple boards. For example, the Delete App board item could be added to the app board and also the API boards for connected APIs. It could also be added to other boards, such as the board for each team member.</p>
<p>There are two ways to add the targetBoard information (see example below):</p>
<ul>
	<li>targetBoard.{parametername}, listing separately each parameter to be added to the target board.</li>
	<li>targetBoards, plural parameter, with a comma-separated list of Board items to be added.</li>
</ul>      </td>
		</tr>
		<tr>
			<td>viewers</td>
			<td><p>Indicates who can view the Board item. For example, providing the App ID as a value indicates that anyone who can administer the app can view the Board item. There are two ways to specify the viewers:</p>
				<ul>
					<li>viewer.{parametername}, listing separately each applicable ID to indicate that users who have view of that resource have view of the Board item.</li>
					<li>viewers, plural parameter, with a comma-separated list of Board items to be added.</li>
				</ul>
<p>Examples of values:</p>
<ul>
	<li>app.team.group.dn: app team</li>
	<li>connected.apis.id: API Admins for connected APIs</li>
	<li>business.dn: Business Admins for the business</li>
</ul>      </td>
		</tr>
	</tbody>
</table>

<h4>Examples/Notes/Additional Information</h4>
<p>The example below shows adding a Board item as a pre-function, to announce that an app deletion request was approved. In this example, <strong>targetBoard</strong> is a set of separate arguments.</p>
<pre>&lt;pre-functions&gt;
  &lt;function type="addBoardItem"&gt;
    &lt;arg name="boardItemTemplateId"&gt;com.soa.board.item.appversion.delete.request.approved&lt;/arg&gt;
    &lt;arg name="visibility"&gt;Limited&lt;/arg&gt;
    &lt;arg name="type"&gt;Discussion&lt;/arg&gt;
    &lt;arg name="targetBoard.appversion"&gt;${app.version.dn}&lt;/arg&gt;
    &lt;arg name="targetBoard.appdn"&gt;${app.dn}&lt;/arg&gt;
    &lt;arg name="targetBoard.appteamgrp"&gt;${app.team.group.dn}&lt;/arg&gt;
    &lt;arg name="targetBoard.apiversion"&gt;${connected.apiversion.ids}&lt;/arg&gt;
    &lt;arg name="targetBoard.apiadmin.groups"&gt;${connected.apis.admin.groups}&lt;/arg&gt;
    &lt;arg name="targetBoard.api"&gt;${connected.apis.id}&lt;/arg&gt;
    &lt;arg name="viewers"&gt;${app.dn},${app.team.group.dn},${connected.apis.id},${business.dn}&lt;/arg&gt;
  &lt;/function&gt;</pre>
<p>The example below shows adding a Board item as a post-function, to announce that an app version has been marked for deletion. In this example, the targetBoards parameter is used, with multiple values in a comma-separated list.</p>
<pre>&lt;post-functions&gt;
  &lt;function type="addBoardItem"&gt;
    &lt;arg name="boardItemTemplateId"&gt;com.soa.board.item.appversion.mark.for.delete&lt;/arg&gt;
    &lt;arg name="visibility"&gt;Limited&lt;/arg&gt;
    &lt;arg name="type"&gt;Discussion&lt;/arg&gt;
    &lt;arg name="targetBoards"&gt;${app.version.dn},${app.dn},${app.team.group.dn},${connected.apiversion.ids},
${connected.apis.admin.groups},${connected.apis.id},${app.version.dn},${app.dn}&lt;/arg&gt;
    &lt;arg name="viewers"&gt;${app.dn},${app.team.group.dn},${connected.apis.id},${business.dn}&lt;/arg&gt;
  &lt;/function&gt;</pre>


<h3 id="appv_f_07">syncAppVersionOAuthClient</h3>
<p>Adds an app version to the OAuth client via the Client Registration endpoint, so that manual registration is not necessary. Useful for any OAuth provider that supports Client Registration (for example, PingFederate).</p>
<p>Also used to update information for an existing app, so that client registration stays current.</p>
<p>There is no default workflow for Application; in order to implement Client Registration, custom application workflow is needed that includes this function.</p>
<p>Certain workflow actions would typically trigger this function in the app workflow, as listed for the Action parameter. See examples below.</p>

<h4>Parameters</h4>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>Action</td>
			<td><p>The specific workflow action. Valid values:</p>
				<ul>
					<li>EditOAuthDetails</li>
					<li>@KeyInfoRemoved</li>
					<li>@KeyInfoSaved</li>
					<li>@RegeneratedSecret</li>
					<li>com.soa.appversion.delete.approve</li>
					<li>com.soa.appversion.delete.auto</li>
					<li>reserved-action-modify</li>
				</ul>      </td>
		</tr>
	</tbody>
</table>

<h4>Examples/Notes/Additional Information</h4>
<p>The examples below show this function used with each of the workflow actions listed above.</p>
<p>@EditOAuthDetails:</p>
<pre>&lt;function type="syncAppVersionOAuthClient"&gt;
  &lt;arg name="action"&gt;Reset&lt;/arg&gt;
&lt;/function&gt;</pre>

<p>@KeyInfoRemoved:</p>
<pre>&lt;function type="syncAppVersionOAuthClient"&gt;
  &lt;arg name="action"&gt;Reset&lt;/arg&gt;
&lt;/function&gt;</pre>

<p>@KeyInfoSaved:</p>
<pre>&lt;function type="syncAppVersionOAuthClient"&gt;
  &lt;arg name="action"&gt;Reset&lt;/arg&gt;
&lt;/function&gt;</pre>

<p>@RegeneratedSecret:</p>
<pre>&lt;function type="syncAppVersionOAuthClient"&gt;
  &lt;arg name="action"&gt;Reset&lt;/arg&gt;
&lt;/function&gt;</pre>

<p>com.soa.appversion.delete.approve:</p>
<pre>&lt;function type="syncAppVersionOAuthClient"&gt;
  &lt;arg name="action"&gt;Delete&lt;/arg&gt;
&lt;/function&gt;</pre>

<p>com.soa.appversion.delete.auto:</p>
<pre>&lt;function type="syncAppVersionOAuthClient"&gt;
  &lt;arg name="action"&gt;Delete&lt;/arg&gt;
&lt;/function&gt;</pre>

<p>reserved-action-modify:</p>
<pre>&lt;function type="syncAppVersionOAuthClient"&gt;
  &lt;arg name="action"&gt;Reset&lt;/arg&gt;
&lt;/function&gt;</pre>



<h3 id="appv_f_08">notifyAppVersionDeleteToOAuthClient</h3>
<p>Notifies the OAuth client when a registered app or app version is deleted, via the Client Registration endpoint, so that client registration stays current.</p>
<p>There is no default workflow for Application; in order to implement Client Registration, custom application workflow is needed that includes this function.</p>
<p>The following workflow actions would typically trigger this function in the app workflow (see examples below):</p>
<ul>
	<li><a href="#appv_f_08_ex1">com.soa.appversion.delete.approve</a></li>
	<li><a href="#appv_f_08_ex2">com.soa.appversion.delete.auto</a></li>
</ul>

<h4>Parameters</h4>
<p>None.</p>
<h4>Examples/Notes/Additional Information</h4>
<p>The examples below show this function used with each of the workflow actions listed above.</p>

<p id="appv_f_08_ex1">com.soa.appversion.delete.approve:</p>
<pre>&lt;function type="notifyAppVersionDeleteToOAuthClient"/&gt;</pre>

<p id="appv_f_08_ex2">com.soa.appversion.delete.auto:</p>
<pre>&lt;function type="notifyAppVersionDeleteToOAuthClient"/&gt;</pre>
<p><a href="#top">Back to top</a></p>



<h2 id="appv_c_00">App Version Workflow: Conditions</h2>
<p>The following conditions apply to the app version workflow:</p>
<ul>
	<li><a href="#appv_c_01">isAppTeamMemberUserLeaderOfAnyOtherGroup</a></li>
	<li><a href="#appv_c_02">atleastOneValidAPIContractInEnvironment</a></li>
	<li><a href="#appv_c_03">allAPIContractsInEnvironmentApproved</a></li>
	<li><a href="#appv_c_04">existAPIContractsForAllAPIsInEnvironments</a></li>
</ul>
<!--<p>{\com.soa.atmosphere.impl\src\com\soa\application\workflow\impl\AppVersionWorkflowConditions.java}</p>-->


<h3 id="appv_c_01">isAppTeamMemberUserLeaderOfAnyOtherGroup</h3>
<p>Tests to see if the user is an app team member and is also a leader of at least one other independent group. Returns <strong>true</strong> if the logged-in user is a leader of any independent group.</p>

<h4>Parameters</h4>
<p>None.</p>


<h3 id="appv_c_02">atleastOneValidAPIContractInEnvironment</h3>
<p>Checks that there is at least one contract for the specified app version with the specified API in the specified environment. Returns <strong>true</strong> if the app is connected to at least one API version in the specified environment (states of Cancelled or ApiDeleted are not valid).</p>

<h4>Parameters</h4>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>Environment</td>
			<td>The environment being tested to see if there is a valid contract. For this function, the value will always be <strong>Sandbox</strong>.</td>
		</tr>
	</tbody>
</table>

<h4>Examples/Notes/Additional Information</h4>
<p>In the example below, the action being performed is to cancel an API contract in the Sandbox environment. The workflow first checks that there is at least one valid API contract in the Sandbox environment.</p>
<pre>&lt;action id="202" name="reserved-cancel-api-connection.Sandbox"&gt;
  &lt;results&gt;
    &lt;result old-status="Sandbox" status="Setup" step="100" owner="${caller}"&gt;
      &lt;conditions type="AND"&gt;
&lt;condition type="atleastOneValidAPIContractInEnvironment"&gt;
  &lt;arg name="Environment"&gt;Sandbox&lt;/arg&gt;
&lt;/condition&gt;
      &lt;/conditions&gt;
    &lt;/result&gt;
    &lt;unconditional-result old-status="Sandbox" status="Sandbox" step="200" owner="${caller}" /&gt;
  &lt;/results&gt;
&lt;/action&gt;</pre>


<h3 id="appv_c_03">allAPIContractsInEnvironmentApproved</h3>
<p>Checks whether all API contracts in the specified environment are approved. Returns <strong>true</strong> if all connections in the specified environment are approved.</p>

<h4>Arguments</h4>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
      <td height="30">Environment</td>
			<td>The environment for which all API contracts are being approved. Values: Sandbox or Production.</td>
		</tr>
	</tbody>
</table>

<h4>Examples/Notes/Additional Information</h4>
<p>In the example below, the action being performed is to approve all API contracts in the <!-- #BeginLibraryItem "/Library/environ_live.lbi" -->Live<!-- #EndLibraryItem --> environment.</p>
<pre>&lt;action id="301" name="reserved-approve-api-connection.Production"&gt;
  &lt;restrict-to&gt;
    &lt;conditions type="AND"&gt;
      &lt;condition type="existAPIContractsForAllAPIsInEnvironments"&gt;
&lt;arg name="EnvFrom"&gt;Sandbox&lt;/arg&gt;
&lt;arg name="EnvTo"&gt;Production&lt;/arg&gt;
      &lt;/condition&gt;
      &lt;condition type="allAPIContractsInEnvironmentApproved"&gt;
&lt;arg name="Environment"&gt;Production&lt;/arg&gt;
      &lt;/condition&gt;
      &lt;condition type="authorizeByAtmosphereRole"&gt;
&lt;arg name="role"&gt;BusinessAdmin&lt;/arg&gt;
      &lt;/condition&gt;
    &lt;/conditions&gt;
  &lt;/restrict-to&gt;
  &lt;results&gt;
    &lt;unconditional-result old-status="Review" status="Approved" step="400" owner="${caller}" /&gt;
  &lt;/results&gt;
&lt;/action&gt;</pre>


<h3 id="appv_c_04">existAPIContractsForAllAPIsInEnvironments</h3>
<p>Checks whether for each contract that exists in one API environment (sandbox or <!-- #BeginLibraryItem "/Library/environ_live.lbi" -->Live<!-- #EndLibraryItem -->) there is a corresponding contract for the other environment. Returns <strong>true</strong> if the app version is connected to the same API versions in the "EnvTo" environment as in the "EnvFrom" environment.</p>

<h4>Arguments</h4>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>EnvFrom</td>
			<td>The environment the API contract is exported from (Sandbox or Production).</td>
		</tr>
		<tr>
			<td>EnvTo</td>
			<td>The environment the API contract is exported to (Sandbox or Production).</td>
		</tr>
	</tbody>
</table>

<h4>Examples/Notes/Additional Information</h4>
<p>In the example below, the action being performed is to approve all API contracts in the <!-- #BeginLibraryItem "/Library/environ_live.lbi" -->Live<!-- #EndLibraryItem --> environment. The workflow first tests that there are contracts in existence, because a contract must exist before it can be approved.</p>
<pre>&lt;action id="301" name="reserved-approve-api-connection.Production"&gt;
  &lt;restrict-to&gt;
    &lt;conditions type="AND"&gt;
      &lt;condition type="existAPIContractsForAllAPIsInEnvironments"&gt;
&lt;arg name="EnvFrom"&gt;Sandbox&lt;/arg&gt;
&lt;arg name="EnvTo"&gt;Production&lt;/arg&gt;
      &lt;/condition&gt;
      &lt;condition type="allAPIContractsInEnvironmentApproved"&gt;
&lt;arg name="Environment"&gt;Production&lt;/arg&gt;
      &lt;/condition&gt;
      &lt;condition type="authorizeByAtmosphereRole"&gt;
&lt;arg name="role"&gt;BusinessAdmin&lt;/arg&gt;
      &lt;/condition&gt;
    &lt;/conditions&gt;
  &lt;/restrict-to&gt;
  &lt;results&gt;
    &lt;unconditional-result old-status="Review" status="Approved" step="400" owner="${caller}" /&gt;
  &lt;/results&gt;
&lt;/action&gt;</pre>



<h2 id="appv_vr_00">App Version Workflow: Variable Resolvers</h2>
<p>The following variable resolvers are available for the app version workflow:</p>
<ul>
	<li><a href="#appv_vr_01">${app.dn}</a></li>
	<li><a href="#appv_vr_02">${app.team.group.dn}</a></li>
	<li><a href="#appv_vr_03">${app.version.dn}</a></li>
	<li><a href="#appv_vr_04">${app.version.name}</a></li>
	<li><a href="#appv_vr_05">${business.dn}</a></li>
	<li><a href="#appv_vr_06">${connected.apis.admin.groups}</a></li>
	<li><a href="#appv_vr_07">${connected.apiversion.ids}</a></li>
	<li><a href="#appv_vr_08">${connected.apis.id}</a></li>
</ul>
<!--<p>{\com.soa.atmosphere.impl\src\com\soa\application\workflow\impl\AppVersionWorkflowVariableResolver.java (172007)}</p>-->



<h3 id="appv_vr_01">${app.dn}</h3>
<p>The unique ID for the app, as a string in the format ${app.dn}.</p>


<h3 id="appv_vr_02">${app.team.group.dn}</h3>
<p>The group ID for the app team members, as a string in the format ${app.team.group.dn}.</p>


<h3 id="appv_vr_03">${app.version.dn}</h3>
<p>The unique ID for the app version, as a string in the format ${app.version.dn}.</p>


<h3 id="appv_vr_04">${app.version.name}</h3>
<p>The text name for the app version, as a string in the format ${app.version.name}.</p>


<h3 id="appv_vr_05">${business.dn}</h3>
<p>The unique ID for the business, a string in the format ${business.dn}.</p>


<h3 id="appv_vr_06">${connected.apis.admin.groups}</h3>
<p>The unique IDs for the API Admin groups of any APIs connected to a specific app, in the format ${connected.apis.admin.groups}.</p>


<h3 id="appv_vr_07">${connected.apiversion.ids}</h3>
<p>The unique API Version IDs for all API versions connected to a specific app, in the format ${connected.apiversion.ids}.</p>


<h3 id="appv_vr_08">${connected.apis.id}</h3>
<p>The unique API IDs for all APIs connected to a specific app, in the format ${connected.apis.ids}.</p>
<p><a href="#top">Back to top</a></p>




<hr class="divide_hr" />




<h2 id="related_topics">Related Topics</h2>
<div class="relatedlinks" id="cm_workflow">
<ul>
	<li><a href="01_overview_cm_wf.htm">Custom Workflows in the Community Manager developer portal</a></li>
	<li><a href="02_general.htm">Workflow General Reference: Functions, Conditions, and Variables</a></li>
	<li><a href="03_app_version_wf.htm">App Version Workflow</a></li>
	<li><a href="04_api_version_wf.htm">API Version Workflow</a></li>
	<li><a href="05_api_contract_wf.htm">API Contract Workflow</a></li>
	<li><a href="06_ticket_wf.htm">Ticket Workflow</a></li>
</ul>
<ul>
	<li><a href="07_group_membership_wf.htm">Group Membership Workflow</a></li>
	<li><a href="08_user_wf.htm">User Workflow</a></li>
	<li><a href="09_review_wf.htm">Review Workflow</a></li>
	<li><a href="10_discussions_wf.htm">Discussions Workflow</a></li>
	<li><a href="11_comments_wf.htm">Comments Workflow</a></li>
	<li><a href="12_model_wf.htm">Model Object Workflow</a></li>
</ul>
</div>