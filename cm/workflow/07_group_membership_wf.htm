---
layout: page
title: Group Membership Workflow | Customizing Workflows in the API Platform
description: A brief overview of SAML as it relates to the Akana API Platform implementation.
product: cm
category: ref
sub-nav-class: Custom Workflows
weight: 07
type: page
nav-title: Group Membership Workflow
---
<h2 id="top">Group Membership Workflow</h2>
<p>This section provides information about functions, conditions, and variables for the group membership workflow, as well as initial actions and reserved actions.</p>

<div class = "divider1"></div>


<h3 style="color: gray;">Table of Contents</h3>
<ol class="table_of_contents">
  <li><a href="#group_ia_00">Group Membership Workflow: Initial Actions</a></li>
  <li><a href="#group_ra_00">Group Membership Workflow: Reserved Actions</a></li>
  <li><a href="#group_f_00">Group Membership Workflow: Functions</a></li>
  <li><a href="#group_c_00">Group Membership Workflow: Conditions</a></li>
  <li><a href="#group_vr_00">Group Membership Workflow: Variable Resolvers</a></li>
</ol>
<div class = "divider1"></div>



<a name="group_ia_00"></a><h3>Group Membership Workflow: Initial Actions</h3>
<p>The initial actions valid for Akana API Platform workflows relating to group membership are:</p>
<ul>
  <li><a href="#group_ia_01">@Invite</a></li>
  <li><a href="#group_ia_02">@Import</a></li>
</ul>


<a name="group_ia_01"></a><h4>@Invite</h4>
<p>Starts the workflow for a new group member. Used to control workflow actions that occur when a member is invited to a group.</p>
<p>This is the default initial action, used in most cases.</p>


<a name="group_ia_02"></a><h4>@Import</h4>
<p>Starts the workflow when group membership information is imported. Takes the group membership direct to the Approved state.</p>
<p><a href="#top">Back to top</a></p>



<a name="group_ra_00"></a><h3>Group Membership Workflow: Reserved Actions</h3>
<p>The following reserved actions are defined for group membership workflows:</p>
<ul>
  <li><a href="#group_ra_01">@RecreateInPendingState</a></li>
  <li><a href="#group_ra_02">@RecreateInAcceptedState</a></li>
  <li><a href="#group_ra_03">@RecreateInDeclinedState</a></li>
  <li><a href="#group_ra_04">Group.membership.action.accept</a></li>
  <li><a href="#group_ra_05">group.membership.action.decline</a></li>
  <li><a href="#group_ra_06">group.membership.action.resend</a></li>
  <li><a href="#group_ra_07">group.membership.action.remove</a></li>
  <li><a href="#group_ra_08">group.membership.action.make.admin</a></li>
  <li><a href="#group_ra_09">group.membership.action.make.leader</a></li>
  <li><a href="#group_ra_10">group.membership.action.make.member</a></li>
  <li><a href="#group_ra_11">group.membership.action.group.deleted</a></li>
</ul>


<a name="group_ra_01"></a><h4>@RecreateInPendingState</h4>
<p>Used to control workflow actions that occur when a group membership action is recreated in pending state.</p>


<a name="group_ra_02"></a><h4>@RecreateInAcceptedState</h4>
<p>Used to control workflow actions that occur when a group membership action is recreated in accepted state.</p>


<a name="group_ra_03"></a><h4>@RecreateInDeclinedState</h4>
<p>Used to control workflow actions that occur when a group membership action is recreated in declined state.</p>


<a name="group_ra_04"></a><h4>Group.membership.action.accept</h4>
<p>Used to control workflow actions that occur when a group membership invitation is accepted.</p>


<a name="group_ra_05"></a><h4>group.membership.action.decline</h4>
<p>Used to control workflow actions that occur when a group membership invitation is declined.</p>


<a name="group_ra_06"></a><h4>group.membership.action.resend</h4>
<p>Used to control workflow actions that occur when a group membership invitation is resent.</p>


<a name="group_ra_07"></a><h4>group.membership.action.remove</h4>
<p>Used to control workflow actions that occur when a group member is removed from the group.</p>


<a name="group_ra_08"></a><h4>group.membership.action.make.admin</h4>
<p>Used to control workflow actions that occur when a group member who was a member or leader is made a group admin.</p>


<a name="group_ra_09"></a><h4>group.membership.action.make.leader</h4>
<p>Used to control workflow actions that occur when a group member who was a member or admin is made a group leader.</p>


<a name="group_ra_10"></a><h4>group.membership.action.make.member</h4>
<p>Used to control workflow actions that occur when a group member who was a member or leader is made a group member.</p>


<a name="group_ra_11"></a><h4>group.membership.action.group.deleted</h4>
<p>Used to control workflow actions that occur when a group is deleted.</p>
<!--<p>{\com.soa.atmosphere.impl\META-INF\resources\templates\teamWorkflowDefinition.xml}</p>-->
<p><a href="#top">Back to top</a></p>



<a name="group_f_00"></a><h3>Group Membership Workflow: Functions</h3>
<p>The following functions are available for the group membership workflow:</p>
<ul>
  <li><a href="#group_f_01">setGroupMembershipRequestState</a></li>
  <li><a href="#group_f_02">setGroupMembershipRole</a></li>
  <li><a href="#group_f_03">sendGroupMembershipNotification</a></li>
</ul>
<!--<p>{\com.soa.atmosphere.impl\src\com\soa\C:\SVN\atmosphere\com.soa.atmosphere.impl\src\com\soa\group\impl\}</p>-->


<a name="group_f_01"></a><h4>setGroupMembershipRequestState</h4>
<p>Changes the state of a group membership request to a new state specified in the parameter.</p>

<h5>Parameters</h5>
<table cellspacing="0px" class="doctable" style="width: 98%;">
  <thead>
    <tr>
      <th width="20%">Name</th>
      <th width="80%">Description/Values</th>
    </tr>
  </thead>
  <tbody>
    <tr class="t2row">
      <td>State</td>
      <td><p>The state that the group membership request is being set to. Valid values:</p>
        <ul>
          <li>com.soa.group.membership.state.approved</li>
          <li>com.soa.group.membership.state.disapproved</li>
          <li>com.soa.group.membership.state.pending</li>
          <li>com.soa.group.membership.state.removed</li>
          <li>com.soa.group.membership.state.group.deleted</li>
        </ul>      </td>
    </tr>
  </tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<p>The example below shows the workflow step when an invited group member declines the invitation. As a result, the group membership request state is set to com.soa.group.membership.state.disapproved.</p>
<pre>&lt;action id="102" name="group.membership.action.decline"&gt;
  &lt;restrict-to&gt;
    &lt;conditions type="AND"&gt;
      &lt;condition type="isSelfMembership"&gt;&lt;/condition&gt;
    &lt;/conditions&gt;
  &lt;/restrict-to&gt;
  &lt;results&gt;
    &lt;unconditional-result old-status="Pending" status="Declined" step="300" /&gt;
  &lt;/results&gt;
  &lt;!--  update status to declined --&gt;
  &lt;post-functions&gt;
    &lt;function type="setGroupMembershipRequestState"&gt;
      &lt;arg name="state"&gt;com.soa.group.membership.state.disapproved&lt;/arg&gt;
    &lt;/function&gt;
    &lt;function type="sendGroupMembershipNotification"&gt;
      &lt;arg name="notificationType"&gt;com.soa.notification.type.appteam.membership.rejected&lt;/arg&gt;
      &lt;arg name="groupType"&gt;com.soa.group.type.appteam&lt;/arg&gt;
      &lt;arg name="roles"&gt;role.group.all.members&lt;/arg&gt;
    &lt;/function&gt;
    &lt;function type="sendGroupMembershipNotification"&gt;
      &lt;arg name="notificationType"&gt;com.soa.notification.type.privateapi.membership.rejected&lt;/arg&gt;
      &lt;arg name="groupType"&gt;com.soa.group.type.private.apigroup&lt;/arg&gt;
      &lt;arg name="roles"&gt;role.group.all.members&lt;/arg&gt;
    &lt;/function&gt;
    &lt;function type="sendGroupMembershipNotification"&gt;
      &lt;arg name="notificationType"&gt;com.soa.notification.type.apiadmin.membership.rejected&lt;/arg&gt;
      &lt;arg name="groupType"&gt;com.soa.group.type.api.admingroup&lt;/arg&gt;
      &lt;arg name="roles"&gt;role.group.all.members&lt;/arg&gt;
    &lt;/function&gt;
    &lt;function type="sendGroupMembershipNotification"&gt;
      &lt;arg name="notificationType"&gt;com.soa.notification.type.bizadmin.membership.rejected&lt;/arg&gt;
      &lt;arg name="groupType"&gt;com.soa.group.type.business.admingroup&lt;/arg&gt;
      &lt;arg name="roles"&gt;role.group.all.members&lt;/arg&gt;
    &lt;/function&gt;
    &lt;function type="sendGroupMembershipNotification"&gt;
      &lt;arg name="notificationType"&gt;com.soa.notification.type.siteadmin.membership.rejected&lt;/arg&gt;
      &lt;arg name="groupType"&gt;com.soa.group.type.tenant.admingroup&lt;/arg&gt;
      &lt;arg name="roles"&gt;role.group.all.members&lt;/arg&gt;
    &lt;/function&gt;
    &lt;function type="sendGroupMembershipNotification"&gt;
      &lt;arg name="notificationType"&gt;com.soa.notification.type.group.membership.rejected&lt;/arg&gt;
      &lt;arg name="groupType"&gt;com.soa.group.type.independent&lt;/arg&gt;
      &lt;arg name="roles"&gt;role.group.all.members&lt;/arg&gt;
    &lt;/function&gt;
  &lt;/post-functions&gt;
&lt;/action&gt;</pre>


<a name="group_f_02"></a><h4>setGroupMembershipRole</h4>
<p>Sets the group membership role for the specified group member to a new role.</p>

<h5>Parameters</h5>
<table cellspacing="0px" class="doctable" style="width: 98%;">
  <thead>
    <tr>
      <th width="20%">Name</th>
      <th width="80%">Description/Values</th>
    </tr>
  </thead>
  <tbody>
    <tr class="t2row">
      <td>role</td>
      <td><p>The group role which is now assigned to the specified group member. Valid values:</p>
        <ul>
          <li>com.soa.group.membership.role.admin</li>
          <li>com.soa.group.membership.role.leader</li>
          <li>com.soa.group.membership.role.member</li>
        </ul>      </td>
    </tr>
  </tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, the group member is made into a leader. The setGroupMembershipRole function is used to change the user's role to com.soa.group.membership.role.leader.</p>
<pre>&lt;action id="106" name="group.membership.action.make.leader"&gt;
  &lt;restrict-to&gt;
    &lt;conditions type="OR"&gt;
      &lt;condition type="isCallerGroupAdmin" /&gt;
      &lt;condition type="isCallerSiteAdmin"/&gt;
      &lt;conditions type="AND"&gt;
&lt;condition type="isCallerGroupLeader" /&gt;
&lt;conditions type="OR"&gt;
  &lt;condition type="isLeaderMembership" /&gt;
  &lt;condition type="isMemberMembership" /&gt;
         &lt;/conditions&gt;
      &lt;/conditions&gt;
    &lt;/conditions&gt;
  &lt;/restrict-to&gt;
  &lt;results&gt;

    &lt;unconditional-result old-status="Pending" status="Pending" step="100" /&gt;
  &lt;/results&gt;
  &lt;post-functions&gt;
    &lt;function type="setGroupMembershipRole"&gt;
      &lt;arg name="role"&gt;com.soa.group.membership.role.leader&lt;/arg&gt;
    &lt;/function&gt;
    &lt;function type="sendGroupMembershipNotification"&gt;
      &lt;arg name="notificationType"&gt;com.soa.notification.type.privateapi.membership.status.changed&lt;/arg&gt;
      &lt;arg name="groupType"&gt;com.soa.group.type.private.apigroup&lt;/arg&gt;
      &lt;arg name="roles"&gt;role.group.all.members,role.invited.user&lt;/arg&gt;
      &lt;arg name="param.groupmembership.oldrole"&gt;${groupmembership.oldrole}&lt;/arg&gt;
      &lt;arg name="param.groupmembership.role"&gt;${groupmembership.role}&lt;/arg&gt;
    &lt;/function&gt;
    &lt;function type="sendGroupMembershipNotification"&gt;
      &lt;arg name="notificationType"&gt;com.soa.notification.type.group.membership.role.changed&lt;/arg&gt;
      &lt;arg name="groupType"&gt;com.soa.group.type.independent&lt;/arg&gt;
      &lt;arg name="roles"&gt;role.group.all.members,role.invited.user&lt;/arg&gt;
      &lt;arg name="param.groupmembership.oldrole"&gt;${groupmembership.oldrole}&lt;/arg&gt;
      &lt;arg name="param.groupmembership.role"&gt;${groupmembership.role}&lt;/arg&gt;
    &lt;/function&gt;
  &lt;/post-functions&gt;
&lt;/action&gt;</pre>


<a name="group_f_03"></a><h4>sendGroupMembershipNotification</h4>
<p>Sends group membership email and dashboard notifications when parameters match the group membership. Since the same function is used for all groups and all membership, this function is designed so that different notifications can be sent to different roles or different group membership depending on the event.</p>

<h5>Parameters</h5>
<table cellspacing="0px" class="doctable" style="width: 98%;">
  <thead>
    <tr>
      <th width="20%">Name</th>
      <th width="80%">Description/Values</th>
    </tr>
  </thead>
  <tbody>
    <tr class="t2row">
      <td>notificationType</td>
      <td><p>Valid notification ID of the notification message template for the notification to be sent. For example:</p>
        <ul>
          <li>com.soa.notification.type.appteam.member.invited.team</li>
          <li>com.soa.notification.type.independent.group.deleted</li>
        </ul>      </td>
    </tr>
    <tr class="t1row">
      <td>groupType</td>
      <td><p>Checks whether the sendGroupMembershipNotification function is for the current group type for which the membership is being updated. When the value of this parameter matches the group type of the group membership that is being affected, a notification is sent. Otherwise, no action is taken.</p>
<p>The group workflow is designed to accommodate several different group types. Depending on the group type, a different notification might be sent. This parameter tests the current group type.</p>
<p>Valid values:</p>
<ul>
  <li>com.soa.group.type.appteam: App team</li>
  <li>com.soa.group.type.private.apigroup: Private API group</li>
  <li>com.soa.group.type.tenant.admingroup: Site Administrator</li>
  <li>com.soa.group.type.api.admingroup: API Administrator</li>
  <li>com.soa.group.type.independent: Independent group</li>
  <li>com.soa.group.type.business.admingroup: Business Administrator</li>
</ul>      </td>
    </tr>
    <tr class="t2row">
      <td>Roles</td>
      <td><p>Defines the roles to which the notification is sent, as a comma-separated list of role names.</p>
<p>Role names used for this parameter are:</p>
<ul>
  <li><strong>role.group.all.members</strong>: the notification is sent to all confirmed members of the specified group or groups (admins, leaders, and members).</li>
  <li><strong>role.group.leader</strong>: Notification is sent to all leaders of the group.</li>
  <li><strong>role.group.admin</strong>: Notification is sent to all admins of the group.</li>
  <li><strong>role.group.member</strong>: Notification is sent to all members of the group.</li>
  <li><strong>role.invited.user.unregistered</strong>: Notification is sent to users who were invited but have not yet accepted the invitation (only if user is not yet registered on the platform).</li>
  <li><strong>role.invited.user.registered</strong>: Notification is sent to users who were invited but have not yet accepted the invitation (only if user is registered on the platform).</li>
  <li><strong>role.invited.user</strong>: Notification is sent to users who were invited but have not yet accepted the invitation (whether registered or unregistered).</li>
  <li><strong>role.inviting.user</strong>: Notification is sent to the user that is sending the invitation (applies to only invite and resend actions).</li>
</ul></td>
    </tr>
    <tr class="t1row">
      <td>Any parameter with name prefixed with "param"</td>
      <td><p>Parameter values for parameters with names starting with "param." Can be used in the notification template data.</p>
<p>Examples:</p>
<ul>
  <li>param.groupmembership.oldrole: Optional, used when a group member has a role change, to indicate the old role.</li>
  <li>param.groupmembership.role: Optional, used when a group member has a role change, to indicate the new role.</li>
</ul>      </td>
    </tr>
  </tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<p>The example below shows workflow steps when a group is deleted. One of two possible notifications is sent out, depending on the group type, to notify group members that the group was deleted.</p>
<pre>&lt;action id="108" name="group.membership.action.group.deleted"&gt;
  &lt;results&gt;
    &lt;unconditional-result old-status="Pending" status="Group Deleted" step="400" /&gt;
  &lt;/results&gt;
  &lt;post-functions&gt;
    &lt;function type="setGroupMembershipRequestState"&gt;
      &lt;arg name="state"&gt;com.soa.group.membership.state.group.deleted&lt;/arg&gt;
    &lt;/function&gt;
    &lt;function type="sendGroupMembershipNotification"&gt;
      &lt;arg name="notificationType"&gt;com.soa.notification.type.independent.group.deleted&lt;/arg&gt;
      &lt;arg name="groupType"&gt;com.soa.group.type.independent&lt;/arg&gt;
      &lt;arg name="roles"&gt;role.invited.user&lt;/arg&gt;
    &lt;/function&gt;
    &lt;function type="sendGroupMembershipNotification"&gt;
      &lt;arg name="notificationType"&gt;com.soa.notification.type.privateapi.group.deleted&lt;/arg&gt;
      &lt;arg name="groupType"&gt;com.soa.group.type.private.apigroup&lt;/arg&gt;
      &lt;arg name="roles"&gt;role.invited.user&lt;/arg&gt;
    &lt;/function&gt;
  &lt;/post-functions&gt;
&lt;/action&gt;</pre>
<p><a href="#top">Back to top</a></p>



<a name="group_c_00"></a><h3>Group Membership Workflow: Conditions</h3>
<p>The following conditions apply to the group membership workflow:</p>
<ul>
  <li><a href="#group_c_01">isSelfMembership</a></li>
  <li><a href="#group_c_02">isCallerSiteAdmin</a></li>
  <li><a href="#group_c_03">isCallerGroupAdmin</a></li>
  <li><a href="#group_c_04">isCallerGroupAdminMember</a></li>
  <li><a href="#group_c_05">isCallerGroupLeader</a></li>
  <li><a href="#group_c_06">isCallerGroupMember</a></li>
  <li><a href="#group_c_07">isMemberMembership</a></li>
  <li><a href="#group_c_08">isLeaderMembership</a></li>
  <li><a href="#group_c_09">isAdminMembership</a></li>
  <li><a href="#group_c_10">authorizeInviteeByDomain</a></li>
  <li><a href="#group_c_11">authorizeInviteeByDomainType</a></li>
  <li><a href="#group_c_12">authorizeInviteeByEmail</a></li>
  <li><a href="#group_c_13">authorizeInviteeByGroupName</a></li>
</ul>
<!--<p>{\com.soa.atmosphere.impl\src\com\soa\C:\SVN\atmosphere\com.soa.atmosphere.impl\src\com\soa\group\impl\GroupMembershipWorkflowConditions.java}</p>-->


<a name="group_c_01"></a><h4>isSelfMembership</h4>
<p>Checks whether the group membership is for the logged-in user; returns Boolean true if so.</p>

<h5>Arguments</h5>
<p>None.</p>
<h5>Examples/Notes/Additional Information</h5>
<p>The example below shows workflow for when a group member accepts an invitation to join the group. Since the invited person is the only one who is authorized to accept the invitation, the workflow uses the isSelfMembership condition to check that the individual performing the action is the invited member.</p>
<pre>&lt;actions&gt;
  &lt;action id="101" name="group.membership.action.accept"&gt;
    &lt;restrict-to&gt;
      &lt;conditions type="AND"&gt;
        &lt;condition type="isSelfMembership"&gt;&lt;/condition&gt;
      &lt;/conditions&gt;
    &lt;/restrict-to&gt;
    &lt;results&gt;
      &lt;unconditional-result old-status="Pending" status="Accepted" step="200" /&gt;
    &lt;/results&gt;
    &lt;!--  update status to approved --&gt;
    &lt;post-functions&gt;
      &lt;function type="setGroupMembershipRequestState"&gt;
        &lt;arg name="state"&gt;com.soa.group.membership.state.approved&lt;/arg&gt;
      &lt;/function&gt;
      &lt;!--
      &lt;function type="addBoardComment"&gt;
        &lt;arg name="notificationType"&gt;com.soa.notification.type.accept.appteam.invite&lt;/arg&gt;
      &lt;/function&gt;
      --&gt;
      &lt;function type="sendGroupMembershipNotification"&gt;
        &lt;arg name="notificationType"&gt;com.soa.notification.type.appteam.membership.accepted&lt;/arg&gt;
        &lt;arg name="groupType"&gt;com.soa.group.type.appteam&lt;/arg&gt;
        &lt;arg name="roles"&gt;role.group.all.members&lt;/arg&gt;
      &lt;/function&gt;
      &lt;function type="sendGroupMembershipNotification"&gt;
        &lt;arg name="notificationType"&gt;com.soa.notification.type.privateapi.membership.accepted&lt;/arg&gt;
        &lt;arg name="groupType"&gt;com.soa.group.type.private.apigroup&lt;/arg&gt;
        &lt;arg name="roles"&gt;role.group.all.members&lt;/arg&gt;
      &lt;/function&gt;
      &lt;function type="sendGroupMembershipNotification"&gt;
        &lt;arg name="notificationType"&gt;com.soa.notification.type.apiadmin.membership.accepted&lt;/arg&gt;
        &lt;arg name="groupType"&gt;com.soa.group.type.api.admingroup&lt;/arg&gt;
        &lt;arg name="roles"&gt;role.group.all.members&lt;/arg&gt;
      &lt;/function&gt;
      &lt;function type="sendGroupMembershipNotification"&gt;
        &lt;arg name="notificationType"&gt;com.soa.notification.type.bizadmin.membership.accepted&lt;/arg&gt;
        &lt;arg name="groupType"&gt;com.soa.group.type.business.admingroup&lt;/arg&gt;
        &lt;arg name="roles"&gt;role.group.all.members&lt;/arg&gt;
      &lt;/function&gt;
      &lt;function type="sendGroupMembershipNotification"&gt;
        &lt;arg name="notificationType"&gt;com.soa.notification.type.siteadmin.membership.accepted&lt;/arg&gt;
        &lt;arg name="groupType"&gt;com.soa.group.type.tenant.admingroup&lt;/arg&gt;
        &lt;arg name="roles"&gt;role.group.all.members&lt;/arg&gt;
      &lt;/function&gt;
      &lt;function type="sendGroupMembershipNotification"&gt;
        &lt;arg name="notificationType"&gt;com.soa.notification.type.group.membership.accepted&lt;/arg&gt;
        &lt;arg name="groupType"&gt;com.soa.group.type.independent&lt;/arg&gt;
        &lt;arg name="roles"&gt;role.group.all.members&lt;/arg&gt;
      &lt;/function&gt;
    &lt;/post-functions&gt;
  &lt;/action&gt;</pre>


<a name="group_c_02"></a><h4>isCallerSiteAdmin</h4>
<p>Checks whether the logged-in user is a Site Admin; returns Boolean true if so.</p>

<h5>Arguments</h5>
<p>None.</p>
<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, the action being performed changes a group member's role to admin. The conditions section tests that the user performing the action is either a group admin or a site admin, since these are the two roles authorized to perform the action.</p>
<pre>&lt;action id="105" name="group.membership.action.make.admin"&gt;
  &lt;restrict-to&gt;
    &lt;conditions type="OR"&gt;
      &lt;condition type="isCallerGroupAdmin" /&gt;
      &lt;condition type="isCallerSiteAdmin"/&gt;
    &lt;/conditions&gt;
  &lt;/restrict-to&gt;
  &lt;results&gt;
    &lt;unconditional-result old-status="Pending" status="Pending" step="100" /&gt;
  &lt;/results&gt;
  &lt;post-functions&gt;
    &lt;function type="setGroupMembershipRole"&gt;
      &lt;arg name="role"&gt;com.soa.group.membership.role.admin&lt;/arg&gt;
    &lt;/function&gt;
    &lt;function type="sendGroupMembershipNotification"&gt;
      &lt;arg name="notificationType"&gt;com.soa.notification.type.privateapi.membership.status.changed&lt;/arg&gt;
      &lt;arg name="groupType"&gt;com.soa.group.type.private.apigroup&lt;/arg&gt;
      &lt;arg name="roles"&gt;role.group.all.members,role.invited.user&lt;/arg&gt;
      &lt;arg name="param.groupmembership.oldrole"&gt;${groupmembership.oldrole}&lt;/arg&gt;
      &lt;arg name="param.groupmembership.role"&gt;${groupmembership.role}&lt;/arg&gt;
    &lt;/function&gt;
&lt;function type="sendGroupMembershipNotification"&gt;
      &lt;arg name="notificationType"&gt;com.soa.notification.type.group.membership.role.changed&lt;/arg&gt;
      &lt;arg name="groupType"&gt;com.soa.group.type.independent&lt;/arg&gt;
      &lt;arg name="roles"&gt;role.group.all.members,role.invited.user&lt;/arg&gt;
      &lt;arg name="param.groupmembership.oldrole"&gt;${groupmembership.oldrole}&lt;/arg&gt;
      &lt;arg name="param.groupmembership.role"&gt;${groupmembership.role}&lt;/arg&gt;
    &lt;/function&gt;
  &lt;/post-functions&gt;
&lt;/action&gt;</pre>


<a name="group_c_03"></a><h4>isCallerGroupAdmin</h4>
<p>Checks whether the individual performing the action is an admin for the group; returns Boolean true if so.</p>

<h5>Arguments</h5>
<p>None.</p>
<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, the action being performed changes a group member's role to admin. The conditions section tests that the user performing the action is either a group admin or a site admin, since these are the two roles authorized to perform the action.</p>
<pre>&lt;action id="105" name="group.membership.action.make.admin"&gt;
  &lt;restrict-to&gt;
    &lt;conditions type="OR"&gt;
      &lt;condition type="isCallerGroupAdmin" /&gt;
      &lt;condition type="isCallerSiteAdmin"/&gt;
    &lt;/conditions&gt;
  &lt;/restrict-to&gt;
  &lt;results&gt;
    &lt;unconditional-result old-status="Pending" status="Pending" step="100" /&gt;
  &lt;/results&gt;
  &lt;post-functions&gt;
    &lt;function type="setGroupMembershipRole"&gt;
      &lt;arg name="role"&gt;com.soa.group.membership.role.admin&lt;/arg&gt;
    &lt;/function&gt;
    &lt;function type="sendGroupMembershipNotification"&gt;
      &lt;arg name="notificationType"&gt;com.soa.notification.type.privateapi.membership.status.changed&lt;/arg&gt;
      &lt;arg name="groupType"&gt;com.soa.group.type.private.apigroup&lt;/arg&gt;
      &lt;arg name="roles"&gt;role.group.all.members,role.invited.user&lt;/arg&gt;
      &lt;arg name="param.groupmembership.oldrole"&gt;${groupmembership.oldrole}&lt;/arg&gt;
      &lt;arg name="param.groupmembership.role"&gt;${groupmembership.role}&lt;/arg&gt;
    &lt;/function&gt;
&lt;function type="sendGroupMembershipNotification"&gt;
      &lt;arg name="notificationType"&gt;com.soa.notification.type.group.membership.role.changed&lt;/arg&gt;
      &lt;arg name="groupType"&gt;com.soa.group.type.independent&lt;/arg&gt;
      &lt;arg name="roles"&gt;role.group.all.members,role.invited.user&lt;/arg&gt;
      &lt;arg name="param.groupmembership.oldrole"&gt;${groupmembership.oldrole}&lt;/arg&gt;
      &lt;arg name="param.groupmembership.role"&gt;${groupmembership.role}&lt;/arg&gt;
    &lt;/function&gt;
  &lt;/post-functions&gt;
&lt;/action&gt;</pre>


<a name="group_c_04"></a><h4>isCallerGroupAdminMember</h4>
<p>Checks whether the logged-in user (the user triggering the action) is a group admin member; returns Boolean true if so.</p>

<h5>Arguments</h5>
<p>None.</p>


<a name="group_c_05"></a><h4>isCallerGroupLeader</h4>
<p>Checks whether the logged-in user is a group leader; returns Boolean true if so.</p>

<h5>Arguments</h5>
<p>None.</p>
<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, the action being performed makes someone a group member. The conditions section specifies that a user who is a group admin or site admin can perform the action; additionally, a user who is a group leader can perform the action on another user who is a leader or member.</p>
<p>This limits the action to authorized individuals.</p>
<pre>&lt;action id="107" name="group.membership.action.make.member"&gt;
  &lt;restrict-to&gt;
    &lt;conditions type="OR"&gt;
      &lt;condition type="isCallerGroupAdmin" /&gt;
      &lt;condition type="isCallerSiteAdmin"/&gt;
      &lt;conditions type="AND"&gt;
&lt;condition type="isCallerGroupLeader" /&gt;
&lt;conditions type="OR"&gt;
  &lt;condition type="isLeaderMembership" /&gt;
  &lt;condition type="isMemberMembership" /&gt;
         &lt;/conditions&gt;
      &lt;/conditions&gt;
    &lt;/conditions&gt;
  &lt;/restrict-to&gt;
  &lt;results&gt;
    &lt;unconditional-result old-status="Pending" status="Pending" step="100" /&gt;
  &lt;/results&gt;
  &lt;post-functions&gt;
    &lt;function type="setGroupMembershipRole"&gt;
      &lt;arg name="role"&gt;com.soa.group.membership.role.member&lt;/arg&gt;
    &lt;/function&gt;
    &lt;function type="sendGroupMembershipNotification"&gt;
      &lt;arg name="notificationType"&gt;com.soa.notification.type.privateapi.membership.status.changed&lt;/arg&gt;
      &lt;arg name="groupType"&gt;com.soa.group.type.private.apigroup&lt;/arg&gt;
      &lt;arg name="roles"&gt;role.group.all.members,role.invited.user&lt;/arg&gt;
      &lt;arg name="param.groupmembership.oldrole"&gt;${groupmembership.oldrole}&lt;/arg&gt;
      &lt;arg name="param.groupmembership.role"&gt;${groupmembership.role}&lt;/arg&gt;
    &lt;/function&gt;
    &lt;function type="sendGroupMembershipNotification"&gt;
      &lt;arg name="notificationType"&gt;com.soa.notification.type.group.membership.role.changed&lt;/arg&gt;
      &lt;arg name="groupType"&gt;com.soa.group.type.independent&lt;/arg&gt;
      &lt;arg name="roles"&gt;role.group.all.members,role.invited.user&lt;/arg&gt;
      &lt;arg name="param.groupmembership.oldrole"&gt;${groupmembership.oldrole}&lt;/arg&gt;
      &lt;arg name="param.groupmembership.role"&gt;${groupmembership.role}&lt;/arg&gt;
    &lt;/function&gt;
  &lt;/post-functions&gt;
&lt;/action&gt;</pre>


<a name="group_c_06"></a><h4>isCallerGroupMember</h4>
<p>Checks whether the logged-in user is a group member; returns Boolean true if so.</p>

<h5>Arguments</h5>
<p>None.</p>


<a name="group_c_07"></a><h4>isMemberMembership</h4>
<p>Checks the role of the group membership being managed with the workflow to see if the role is Member (group membership represents member membership). If the role is Member, returns true.</p>
<p>Used in combination with isCallerGroupAdminMember, isCallerGroupLeader, and isCallerGroupMember:</p>
<p>To check the role of the user calling the workflow:</p>
<p>isCallerGroupAdminMember</p>
<p>isCallerSiteAdmin</p>
<p>isCallerGroupAdmin</p>
<p>isCallerGroupLeader</p>
<p>isCallerGroupMember</p>
<p>To check the role of the group membership being managed with the action:</p>
<p>isAdminMembership</p>
<p>isLeaderMembership</p>
<p>isMemberMembership</p>
<p>isSelfMembership</p>
<p>This combination of conditions verifies that the person calling the workflow has adequate rights to perform the action. A group admin can perform actions relating to admins, leaders, or members; a leader can perform actions relating to leaders or members; a member can perform actions relating to members.</p>

<h5>Arguments</h5>
<p>None.</p>
<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, the action being performed is to assign an existing group member the role of member (as distinct from leader or admin). The "restrict-to" section tests that the user performing the action is either a group admin or a site admin, or that the user is a group leader and the action is being performed on a group member who has the role of leader or member; and, therefore, that the user performing the action is authorized to do so.</p>
<pre>&lt;action id="107" name="group.membership.action.make.member"&gt;
  &lt;restrict-to&gt;
    &lt;conditions type="OR"&gt;
      &lt;condition type="isCallerGroupAdmin" /&gt;
      &lt;condition type="isCallerSiteAdmin"/&gt;
      &lt;conditions type="AND"&gt;
&lt;condition type="isCallerGroupLeader" /&gt;
&lt;conditions type="OR"&gt;
  &lt;condition type="isLeaderMembership" /&gt;
  &lt;condition type="isMemberMembership" /&gt;
         &lt;/conditions&gt;
      &lt;/conditions&gt;
    &lt;/conditions&gt;
  &lt;/restrict-to&gt;
  &lt;results&gt;
    &lt;unconditional-result old-status="Pending" status="Pending" step="100" /&gt;
  &lt;/results&gt;
  &lt;post-functions&gt;
    &lt;function type="setGroupMembershipRole"&gt;
      &lt;arg name="role"&gt;com.soa.group.membership.role.member&lt;/arg&gt;
    &lt;/function&gt;
    &lt;function type="sendGroupMembershipNotification"&gt;
      &lt;arg name="notificationType"&gt;com.soa.notification.type.privateapi.membership.status.changed&lt;/arg&gt;
      &lt;arg name="groupType"&gt;com.soa.group.type.private.apigroup&lt;/arg&gt;
      &lt;arg name="roles"&gt;role.group.all.members,role.invited.user&lt;/arg&gt;
      &lt;arg name="param.groupmembership.oldrole"&gt;${groupmembership.oldrole}&lt;/arg&gt;
      &lt;arg name="param.groupmembership.role"&gt;${groupmembership.role}&lt;/arg&gt;
    &lt;/function&gt;
    &lt;function type="sendGroupMembershipNotification"&gt;

      &lt;arg name="notificationType"&gt;com.soa.notification.type.group.membership.role.changed&lt;/arg&gt;
      &lt;arg name="groupType"&gt;com.soa.group.type.independent&lt;/arg&gt;
      &lt;arg name="roles"&gt;role.group.all.members,role.invited.user&lt;/arg&gt;
      &lt;arg name="param.groupmembership.oldrole"&gt;${groupmembership.oldrole}&lt;/arg&gt;
      &lt;arg name="param.groupmembership.role"&gt;${groupmembership.role}&lt;/arg&gt;
    &lt;/function&gt;
  &lt;/post-functions&gt;
&lt;/action&gt;</pre>


<a name="group_c_08"></a><h4>isLeaderMembership</h4>
<p>Checks the role of the group membership being managed with the workflow to see if the role is Leader. If the role is Leader, returns true.</p>
<p>Used in combination with isCallerGroupAdminMember, isCallerGroupLeader, and isCallerGroupMember:</p>
<p>To check the role of the user calling the workflow:</p>
<p>isCallerGroupAdminMember</p>
<p>isCallerGroupLeader</p>
<p>isCallerGroupMember</p>
<p>To check the role of the group member being managed with the action:</p>
<p>isAdminMembership</p>
<p>isLeaderMembership</p>
<p>isMemberMembership</p>
<p>This combination of conditions verifies that the person calling the workflow has adequate rights to perform the action. A group admin can perform actions relating to admins, leaders, or members; a leader can perform actions relating to leaders or members; a member can perform actions relating to members.</p>

<h5>Arguments</h5>
<p>None.</p>
<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, the action being performed is to assign an existing group member the role of leader (as distinct from member or admin). The "restrict-to" section tests that the user performing the action is either a group admin or a site admin, or that the user is a group leader and the action is being performed on a group member who has the role of leader or member; and, therefore, that the user performing the action is authorized to do so.</p>
<pre>&lt;action id="106" name="group.membership.action.make.leader"&gt;
  &lt;restrict-to&gt;
    &lt;conditions type="OR"&gt;
      &lt;condition type="isCallerGroupAdmin" /&gt;
      &lt;condition type="isCallerSiteAdmin"/&gt;
      &lt;conditions type="AND"&gt;
&lt;condition type="isCallerGroupLeader" /&gt;
&lt;conditions type="OR"&gt;
  &lt;condition type="isLeaderMembership" /&gt;
  &lt;condition type="isMemberMembership" /&gt;
         &lt;/conditions&gt;
      &lt;/conditions&gt;
    &lt;/conditions&gt;
  &lt;/restrict-to&gt;
  &lt;results&gt;
    &lt;unconditional-result old-status="Pending" status="Pending" step="100" /&gt;
  &lt;/results&gt;
  &lt;post-functions&gt;
    &lt;function type="setGroupMembershipRole"&gt;
      &lt;arg name="role"&gt;com.soa.group.membership.role.leader&lt;/arg&gt;
    &lt;/function&gt;
    &lt;function type="sendGroupMembershipNotification"&gt;
      &lt;arg name="notificationType"&gt;com.soa.notification.type.privateapi.membership.status.changed&lt;/arg&gt;
      &lt;arg name="groupType"&gt;com.soa.group.type.private.apigroup&lt;/arg&gt;
      &lt;arg name="roles"&gt;role.group.all.members,role.invited.user&lt;/arg&gt;
      &lt;arg name="param.groupmembership.oldrole"&gt;${groupmembership.oldrole}&lt;/arg&gt;
      &lt;arg name="param.groupmembership.role"&gt;${groupmembership.role}&lt;/arg&gt;
    &lt;/function&gt;
    &lt;function type="sendGroupMembershipNotification"&gt;
      &lt;arg name="notificationType"&gt;com.soa.notification.type.group.membership.role.changed&lt;/arg&gt;
      &lt;arg name="groupType"&gt;com.soa.group.type.independent&lt;/arg&gt;
      &lt;arg name="roles"&gt;role.group.all.members,role.invited.user&lt;/arg&gt;
      &lt;arg name="param.groupmembership.oldrole"&gt;${groupmembership.oldrole}&lt;/arg&gt;
      &lt;arg name="param.groupmembership.role"&gt;${groupmembership.role}&lt;/arg&gt;
    &lt;/function&gt;
  &lt;/post-functions&gt;
&lt;/action&gt;</pre>


<a name="group_c_09"></a><h4>isAdminMembership</h4>
<p>Checks the role of the group membership being managed with the workflow to see if the role is Admin. If the role is Admin, returns true.</p>
<p>Used in combination with isCallerGroupAdminMember, isCallerGroupLeader, and isCallerGroupMember:</p>
<p>To check the role of the user calling the workflow:</p>
<p>isCallerGroupAdminMember</p>
<p>isCallerGroupLeader</p>
<p>isCallerGroupMember</p>
<p>To check the role of the group member being managed with the action:</p>
<p>isAdminMembership</p>
<p>isLeaderMembership</p>
<p>isMemberMembership</p>
<p>This combination of conditions verifies that the person calling the workflow has adequate rights to perform the action. A group admin can perform actions relating to admins, leaders, or members; a leader can perform actions relating to leaders or members; a member can perform actions relating to members.</p>

<h5>Arguments</h5>
<p>None.</p>


<a name="group_c_10"></a><h4>authorizeInviteeByDomain</h4>
<p>Checks the domain of the invitee to make sure the domain is one of the domains specified as valid. If so, returns true. If the condition is not met, the invitation is not allowed.</p>
<p>This can be used as a security measure to help prevent user error in potentially inviting someone who should not be invited. For example, invitations can be limited to one specific domain for security purposes.</p>

<h5>Arguments</h5>
<table cellspacing="0px" class="doctable" style="width: 98%;">
  <thead>
    <tr>
      <th width="20%">Name</th>
      <th width="80%">Description/Values</th>
    </tr>
  </thead>
  <tbody>
    <tr class="t2row">
      <td>domain</td>
      <td><p>One or more domains that authorization is restricted to.</p>
<p>To include multiple values, you can either include multiple &lt;domain&gt; arguments or list multiple domains on one line, separated by commas.</p>
<p><strong>Note</strong>: the value for this parameter should be the domain name used in Policy Manager for the applicable identity system. For Policy Manager, use Local Domain as the value.</p></td>
    </tr>
  </tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, this condition specifies that only users on the platform's domain, acmepaymentscorp, can be invited.</p>
<pre>&lt;condition type="authorizeInviteeByDomain"&gt;
  &lt;arg name="domain"&gt;acmepaymentscorp&lt;/arg&gt;
&lt;/condition&gt;</pre>


<a name="group_c_11"></a><h4>authorizeInviteeByDomainType</h4>
<p>Checks the domain type of the invitee to make sure it is one of the domain types specified as valid. If so, returns true. If the condition is not met, the invitation is not allowed.</p>
<p>This can be used as a security measure to help prevent user error in potentially inviting someone who should not be invited. For example, invitations can be limited to one type of domain, such as LDAP, for security purposes.</p>

<h5>Arguments</h5>
<table cellspacing="0px" class="doctable" style="width: 98%;">
  <thead>
    <tr>
      <th width="20%">Name</th>
      <th width="80%">Description/Values</th>
    </tr>
  </thead>
  <tbody>
    <tr class="t2row">
      <td>DomainType</td>
      <td><p>One or more domain types (Identity System type in Policy Manager, Domain Type in the developer portal), that the action is restricted to.</p>
<p>To include multiple values, you can either include multiple &lt;DomainType&gt; arguments or list multiple domain types on one line, separated by commas.</p>
<p>Valid values:</p>
<ul>
  <li>Directory Server (domain type for LDAP)</li>
  <li>CA SiteMinder (domain type for a CA SiteMinder domain)</li>
  <li>com.soa.securitydomain.pingfederate.provider (PingFederate domain)</li>
  <li>com.soa.securitydomain.fb.connector (Facebook Connector domain)</li>
  <li>com.soa.securitydomain.openidconnect.relyingparty (OpenID Connect Relying Party domain)</li>
  <li>com.soa.securitydomain.oauth.provider (OAuth Provider domain; not an identity store domain, but supports OAuth/OpenID for other domain users)</li>
  <li>com.soa.securitydomain.google.connector (Google Connector domain)</li>
  <li>SAML Web Browser SSO (SAML Web SSO SP domain)</li>
</ul>      </td>
    </tr>
  </tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<p>The example below tests that the domain type is Directory Server. This limits invitees to LDAP users.</p>
<pre>&lt;condition type="authorizeInviteeByDomainType"&gt;
  &lt;arg name="DomainType"&gt;Directory Server&lt;/arg&gt;
&lt;/condition&gt;</pre>


<a name="group_c_12"></a><h4>authorizeInviteeByEmail</h4>
<p>Checks the email address of the invitee to make sure it matches the email address patterns specified in the argument. If so, returns true. If the condition is not met, the invitation is not allowed.</p>
<p>This can be used as a security measure to help prevent user error in potentially inviting someone who should not be invited. For example, invitations can be limited to one specific email domain for security purposes.</p>

<h5>Arguments</h5>
<table cellspacing="0px" class="doctable" style="width: 98%;">
  <thead>
    <tr>
      <th width="20%">Name</th>
      <th width="80%">Description/Values</th>
    </tr>
  </thead>
  <tbody>
    <tr class="t2row">
      <td>email</td>
      <td><p>One or more specific email address patterns valid for invitations.</p>
<p>To include multiple values, you can either include multiple &lt;email&gt; arguments or list multiple email values on one line, separated by commas.</p></td>
    </tr>
  </tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<p>The example below shows the general structure of this argument.</p>
<pre>&lt;condition type="authorizeInviteeByEmail"&gt;
  &lt;arg name="email"&gt;Email Address,Pattern&lt;/arg&gt;
&lt;/condition&gt;</pre>
<p>The two examples below show different approaches to restricting email address to two domains.</p>
<p>Example 1: Both domains on the same line, with comma separators, using the AND condition:</p>
<pre>&lt;restrict-to&gt;
  &lt;conditions type="AND"&gt;
    &lt;condition type="authorizeByEmail"&gt;
      &lt;arg name="email"&gt;.*@soa.com,.*@akana.com&lt;/arg&gt;
    &lt;/condition&gt;
  &lt;/conditions&gt;
&lt;/restrict-to&gt;</pre>
<p>Example 2: Each domain on a separate line, using the OR condition:</p>
<pre>&lt;restrict-to&gt;
  &lt;conditions type="OR"&gt;
    &lt;condition type="authorizeByEmail"&gt;
      &lt;arg name="email"&gt;.*@soa.com&lt;/arg&gt;
    &lt;/condition&gt;
    &lt;condition type="authorizeByEmail"&gt;
      &lt;arg name="email"&gt;.*@akana.com&lt;/arg&gt;
    &lt;/condition&gt;
  &lt;/conditions&gt;
&lt;/restrict-to&gt;</pre>


<a name="group_c_13"></a><h4>authorizeInviteeByGroupName</h4>
<p>Checks to make sure the invitee is a member of one of the specified groups. If so, returns true. If the condition is not met, the invitation is not allowed.</p>
<p>This can be used as a security measure to help prevent user error in potentially inviting someone who should not be invited. For example, invitations can be limited to one specific group for security purposes.</p>
<p><strong>Note</strong>: If no domain argument is passed, the condition is applied to a platform group.</p>

<h5>Arguments</h5>
<table cellspacing="0px" class="doctable" style="width: 98%;">
  <thead>
    <tr>
      <th width="20%">Name</th>
      <th width="80%">Description/Values</th>
    </tr>
  </thead>
  <tbody>
    <tr class="t2row">
      <td>domain</td>
      <td><p>Optional: one or more domains that authorization is restricted to.</p>
<p>Only needed if the group is not a group on the developer portal; for example, a Policy Manager group. Defaults to developer portal groups.</p>
<p>To include multiple values, you can either include multiple &lt;domain&gt; arguments or list multiple domains on one line, separated by commas.</p>
<p><strong>Note</strong>: the value for this parameter should be the domain name used in Policy Manager for the applicable identity system. For Policy Manager groups, use <strong>Local Domain</strong> as the value.</p></td>
    </tr>
    <tr class="t1row">
      <td>group</td>
      <td>
<p>One or more groups that authorization is restricted to. By default, if the &lt;domain&gt; argument is not present, a group name is interpreted to mean a platform group.</p>
<p>To include multiple values, you can either include multiple &lt;group&gt; arguments or list multiple groups on one line, separated by commas.</p></td>
    </tr>
  </tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, this condition specifies that in order to be invited, users must meet any one of the following sets of conditions:</p>
<ul>
  <li>Be a member of one of these two developer portal groups: CM_Group1 or CM_Group2</li>
  <li>Be a member of one of these two Policy Manager groups on the local domain: PM_Group1 or PM_Group2</li>
  <li>Be a member of one of these two groups on the LDAP domain: LDAP_Group1 or LDAP_Group2</li>
</ul>
<pre>&lt;restrict-to&gt;
  &lt;conditions type="OR"&gt;
    &lt;condition type="authorizeInviteeByGroupName"&gt;
      &lt;arg name="group"&gt;CM_Group1, CM_Group2&lt;/arg&gt;
    &lt;/condition&gt;
    &lt;condition type="authorizeInviteeByGroupName"&gt;
      &lt;arg name="domain"&gt;Local Domain&lt;/arg&gt;
      &lt;arg name="group"&gt;PM_Group1,PM_Group2&lt;/arg&gt;
    &lt;/condition&gt;
            &lt;condition type="authorizeInviteeByGroupName"&gt;
      &lt;arg name="domain"&gt;ldap&lt;/arg&gt;
      &lt;arg name="group"&gt;LDAP_Group1,LDAP_Group2&lt;/arg&gt;
    &lt;/condition&gt;
  &lt;/conditions&gt;
&lt;/restrict-to&gt;</pre>
<p><a href="#top">Back to top</a></p>



<a name="group_vr_00"></a><h3>Group Membership Workflow: Variable Resolvers</h3>
<p>The following variables are available for the group membership workflow:</p>
<ul>
  <li><a href="#group_vr_01">${group.dn}</a></li>
  <li><a href="#group_vr_02">${group.type}</a></li>
  <li><a href="#group_vr_03">${group.membership.request.dn}</a></li>
  <li><a href="#group_vr_04">${membership.id}</a></li>
  <li><a href="#group_vr_05">${member.dn}</a></li>
  <li><a href="#group_vr_06">${groupmembership.oldrole}</a></li>
  <li><a href="#group_vr_07">${groupmembership.oldstate}</a></li>
  <li><a href="#group_vr_08">${groupmembership.role}</a></li>
  <li><a href="#group_vr_09">${groupmembership.state}</a></li>
</ul>
<!--<p>{\com.soa.atmosphere.impl\src\com\soa\C:\SVN\atmosphere\com.soa.atmosphere.impl\src\com\soa\group\impl\GroupMembershipRequestVariableResolver.java}</p>-->



<a name="group_vr_01"></a><h4>${group.dn}</h4>
<p>The unique GroupID for the group.</p>


<a name="group_vr_02"></a><h4>${group.type}</h4>
<p>A value indicating the group type as a string in the format <strong>${group.type}</strong>.</p>
<p>Valid values:</p>
<ul>
  <li>com.soa.group.type.tenant.admingroup</li>
  <li>com.soa.group.type.business.admingroup</li>
  <li>com.soa.group.type.internal</li>
  <li>com.soa.group.type.appteam</li>
  <li>com.soa.group.type.api.admingroup</li>
  <li>com.soa.group.type.independent</li>
  <li>com.soa.group.type.private.apigroup</li>
</ul>
<a name="group_vr_03"></a><h4>${group.membership.request.dn}</h4>
<p>The unique GroupMembershipRequestID. This is the Board Item ID corresponding to the group membership request. All audits related to the group membership are tracked under this request ID.</p>


<a name="group_vr_04"></a><h4>${membership.id}</h4>
<p>The unique ID for the individual's membership in the group; a number.</p>


<a name="group_vr_05"></a><h4>${member.dn}</h4>
<p>The unique User ID of the group member.</p>


<a name="group_vr_06"></a><h4>${groupmembership.oldrole}</h4>
<p>The previous group membership role.</p>
<p>When the setGroupMembershipRole function is used, this variable is set with old role name of the group membership for use in subsequent conditions and functions.</p>


<a name="group_vr_07"></a><h4>${groupmembership.oldstate}</h4>
<p>The previous group membership state.</p>
<p>When the setGroupMembershipRequestState function is used, this variable is set with the state name of the group membership for use in subsequent conditions and functions for the duration of the workflow action being performed.</p>


<a name="group_vr_08"></a><h4>${groupmembership.role}</h4>
<p>The group membership role.</p>


<a name="group_vr_09"></a><h4>${groupmembership.state}</h4>
<p>The group membership state.</p>
<p><a href="#top">Back to top</a></p>




<div class = "divider1"></div>




<h3 id="related_topics">Related Topics</h3>
<table width="700" border="0" cellspacing="0" cellpadding="2" class="doctable">
  <tr>
  <td width="300"><ul>
  <li><a href="01_overview_cm_wf.htm">Custom Workflows in the Developer Portal</a></li>
  <li><a href="02_general.htm">Workflow General Reference: Functions, Conditions, and Variables</a></li>
  <li><a href="03_app_version_wf.htm">App Version Workflow</a></li>
  <li><a href="04_api_version_wf.htm">API Version Workflow</a></li>
  <li><a href="05_api_contract_wf.htm">API Contract Workflow</a></li>
  <li><a href="06_ticket_wf.htm">Ticket Workflow</a></li>
  </ul>
  </td>
  <td width="400"><ul>
  <li><a href="07_group_membership_wf.htm">Group Membership Workflow</a></li>
  <li><a href="08_user_wf.htm">User Workflow</a></li>
  <li><a href="09_review_wf.htm">Review Workflow</a></li>
  <li><a href="10_discussions_wf.htm">Discussions Workflow</a></li>
  <li><a href="11_comments_wf.htm">Comments Workflow</a></li>
  </ul>
</td>
  </tr>
</table>