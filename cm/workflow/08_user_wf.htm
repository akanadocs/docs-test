---
layout: page
title: User Workflow | Customizing Workflows in the API Platform
description: Information about initial actions, reserved actions, functions, conditions, and variables for the User workflow.
product: cm
category: ref
sub-nav-class: Workflows
weight: 08
type: page
nav-title: User Workflow
---
<h2 id="top">User Workflow</h2>
<p>This section provides information about functions, conditions, and variable resolvers available for the user workflow, as well as initial actions and reserved actions.</p>

<div class = "divider1"></div>


<h3 style="color: gray;">Table of Contents</h3>
<ol class="table_of_contents">
	<li><a href="#user_ia_00">User Workflow: Initial Actions</a></li>
	<li><a href="#user_ra_00">User Workflow: Reserved Actions</a></li>
	<li><a href="#user_f_00">User Workflow: Functions</a></li>
	<li><a href="#user_c_00">User Workflow: Conditions</a></li>
	<li><a href="#user_vr_00">User Workflow: Variable Resolvers</a></li>
	<li><a href="#user_wf_2fa_ex">User Workflow: Implementing Two-Factor Authentication</a></li>
</ol>
<div class = "divider1"></div>
<!--<p>{com.soa.atmosphere.impl\META-INF\resources\templates}</p>-->



<h3 id="user_ia_00">User Workflow: Initial Actions</h3>
<p>The following initial actions are valid for Akana API Platform workflows relating to users:</p>
<ul>
	<li><a href="#user_ia_01">@UserPhoneNotRequired</a></li>
</ul>


<h4 id="user_ia_01">@UserPhoneNotRequired</h4>
<h5 class="stamp">API Platform Version: 8.4.15 and later</h5>
<p>Used to define custom workflow for a scenario where phone number is not required for users who meet one or more specified conditions. For example, using <strong>@UserPhoneNotRequired</strong> in combination with the workflow condition, <a href="#user_c_23">doesUserBelongToDomain</a>, customizes the user workflow so that users belonging to a specific login domain are not required to provide a telephone number. If this functionality is in place, and the condition is met, the phone number field is not required, and is not shown to the user.</p>
<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, <strong>@UserPhoneNotRequired</strong> is used in combination with <strong>doesUserBelongToDomain</strong>. If the user belongs to the specified domain, the condition is met, and the new user is allowed to log in without providing a phone number on the user profile.</p>
<p><strong>Note</strong>: during domain configuration, the <strong>mail</strong> attribute must be mapped in the setting for the referenced domain so that the user can be identified. In the OpenID Connect Relying Party domain in the developer portal (<strong>Admin</strong> &gt; <strong>Domains</strong>), it's Tab 7. See <a href="http://docs.akana.com/cm/learnmore/bus_admin_domains_oidc.htm#oidcrp_domain_tab7">Tab 7: User</a> (Site Admin help).</p>
<pre>&lt;action id=&quot;25&quot; name=&quot;@UserPhoneNotRequired&quot;&gt;
  &lt;restrict-to&gt;
    &lt;conditions type=&quot;AND&quot;&gt;
      &lt;condition type=&quot;doesUserBelongToDomain&quot;&gt;
        &lt;arg name=&quot;DomainName&quot;&gt;acmepaymentscorpLDAP&lt;/arg&gt;
      &lt;/condition&gt;
    &lt;/conditions&gt;
  &lt;/restrict-to&gt;
  &lt;results&gt;
    &lt;unconditional-result old-status="none" status="init-phone-check" step="-1"/&gt;
  &lt;/results&gt;
&lt;/action&gt;</pre>
<p>To see where these fit into the workflow document, you can download the user workflow from the developer portal. The new initial action and condition are in the default workflow, but commented out.</p>
<p><a href="#top">Back to top</a></p>



<h3 id="user_ra_00">User Workflow: Reserved Actions</h3>
<p>The following reserved actions are defined for user workflows:</p>
<ul>
	<li><a href="#user_ra_01">@Add</a></li>
	<li><a href="#user_ra_02">@AddApp</a></li>
	<li><a href="#user_ra_03">@AddGroup</a></li>
	<li><a href="#user_ra_04">@AgreementsAccepted</a></li>
	<li><a href="#user_ra_05">@ChallengeQuestionsAnswered</a></li>
	<li><a href="#user_ra_06">@ForcedPasswordChanged</a></li>
	<li><a href="#user_ra_07">@Invite</a></li>
	<li><a href="#user_ra_08">@Login</a></li>
	<li><a href="#user_ra_09">@ModifyProfile</a></li>
	<li><a href="#user_ra_10">@PasswordChanged</a></li>
	<li><a href="#user_ra_11">@Setup</a></li>
	<li><a href="#user_ra_12">@Signup</a></li>
	<li><a href="#user_ra_13">@UserDisabled</a></li>
	<li><a href="#user_ra_14">@UserEnabled</a></li>
	<li><a href="#user_ra_15">@UserLocked</a></li>
	<li><a href="#user_ra_16">@UserUnlocked</a></li>
	<li><a href="#user_ra_17">@ResolveLoginPendingTask</a></li>
</ul>
<!--<p>{com.soa.atmosphere.impl\META-INF\resources\templates\default-user-workflow-v2.xml}</p>-->


<h4 id="user_ra_01">@Add</h4>
<p>Used when the Site Admin adds a user using the UserAPI.addUser() operation (see POST /api/users on docs.akana.com).</p>
<p>The user is automatically registered before this initial action is added. This action does not affect the user's registered state, but can be used for post-functions such as sending notifications.</p>


<h4 id="user_ra_02">@AddApp</h4>
<p>Determines whether the current user has permission to add an app.</p>
<p>By default, all registered users have permission to add an app. However, this action can be combined with a condition, such as <strong>authorizeByAtmosphereRole</strong>, <strong>authorizeByGroup</strong>, <strong>authorizeByDomain</strong>, or <strong>authorizeByEmail</strong> to determine whether the current user has permission to add an app.</p>
<p>For example, you might want to configure a custom workflow to support one or more of the following scenarios:</p>
<ul>
	<li>Only tenant business administrators can create apps.</li>
	<li>Users that are self-registered can create apps, but not users added by the Site Admin.</li>
	<li>All users can browse APIs, but only certain approved users can create apps. This implies users that are in a specific workflow state can create apps.</li>
</ul>
<h4 id="user_ra_03">@AddGroup</h4>
<p>Determines whether the current user has permission to add a group.</p>
<p>By default, all registered users have permission to add a group. However, this action can be combined with a condition, such as <strong>authorizeByAtmosphereRole</strong>, <strong>authorizeByGroup</strong>, <strong>authorizeByDomain</strong>, or <strong>authorizeByEmail</strong> to determine whether the current user has permission to add a group.</p>
<p>For example, you might want to configure a custom workflow to support one or more of the following scenarios:</p>
<ul>
	<li>Only tenant business administrators can create groups.</li>
	<li>Users that are self-registered can create groups, but not users added by the Site Admin.</li>
	<li>Only certain approved users can create groups.</li>
</ul>
<h4 id="user_ra_04">@AgreementsAccepted</h4>
<p>Indicates that any required platform legal agreement was accepted by the user. This is only used during the login process.</p>


<h4 id="user_ra_05">@ChallengeQuestionsAnswered</h4>
<p>Indicates that the user has provided answers to any required security challenge questions.</p>
<p>This reserved action is a hook that you can use to extend the workflow with additional actions such as generating a notification and/or Board item, or initiating a back-end process.</p>


<h4 id="user_ra_06">@ForcedPasswordChanged</h4>
<p>Indicates that the user has changed the password. Invoked when the user changes the password as the result of a change password requirement.</p>
<p>This reserved action is a hook that you can use to extend the workflow with additional actions such as generating a notification and/or Board item or initiating a back-end process.</p>


<h4 id="user_ra_07">@Invite</h4>
<p>Checks the user settings to determine whether inviting a non-platform user to a team or group is allowed or not. The default workflow uses this setting to decide whether this initial action is allowed.</p>
<p>If you are creating a custom user workflow, include this initial action if you want to  allow inviting users that are not registered in the platform. You can include one or more additional conditions as needed.</p>


<h4 id="user_ra_08">@Login</h4>
<p>This reserved action is invoked whenever the user tries to log in.</p>
<p><strong>Note</strong>: this is currently used only for platform users, not third-party domain users.</p>
<p>When the user logs in, the workflow determines the status value returned in the login response&#8212;which then determines the next step. If there is a pending task to be performed, these are prompted before login is complete. The possible pending tasks for @Login are:</p>
<ul>
	<li><strong>ChangePassword</strong>: forces the user to change password as part of the login process. In the default workflow, this is applicable when the Site Admin has provided a temporary password for initial user login.</li>
	<li><strong>ForceAcceptAgreements</strong>: forces the user to accept the platform legal agreement as part of the login process.</li>
	<li><strong>securityQuestionsAnswered</strong>: forces the user to provide answers for security challenge questions as part of the login process. The number required depends on platform security settings.</li>
</ul>
<p>As part of creating a default workflow, you could create additional pending tasks. However, you would also have to develop the UI to support those tasks so that users could log in via the UI.</p>


<h4 id="user_ra_09">@ModifyProfile</h4>
<p>Used to determine whether the platform settings allow the user to modify the user profile.</p>
<p>In the default platform workflow, this is how it is used:</p>
<ul>
	<li>If users do self-signup, they can modify the profile or not based on this setting.</li>
	<li>If users are added by administrators (Managed Users), they cannot modify the profile unless they are site administrators.</li>
	<li>If the platform setting allowing users to modify their own profiles is turned on, even a Site Admin cannot modify his/her own profile; it must be modified by another Site Admin.</li>
</ul>
<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, the workflow for the @ModifyProfile workflow action checks to make sure that either the setting to allow users who are not Managed Users to modify their own profiles is turned on (condition <strong>userSettingsAllowModifyProfile</strong>), or else the current user is a Site Admin. If one of these conditions is met, the action can go forward.</p>
<p>Note that this condition only applies to users who signed up for the platform themselves (whether by invitation, by setting up a platform account, or by setting up an account with a third-party identity provider such as Google). Managed Users, added by the Site Admin, cannot modify their own profiles, even if the platform setting is turned on.</p>
<p>If the setting to allow users to modify their own profiles is disabled, a user who is a Site Admin cannot modify his/her own profile. In this case, only another Site Admin can modify this Site Admin's profile.</p>
<pre>&lt;action id="456" name="@ModifyProfile"&gt;
  &lt;restrict-to&gt;
    &lt;conditions type="OR"&gt;
      &lt;conditions type="AND"&gt;
        &lt;condition type="authorizeSelf"/&gt;
        &lt;condition type="userSettingsAllowModifyProfile"/&gt;
      &lt;/conditions&gt;
      &lt;conditions type="AND"&gt;
        &lt;condition type="authorizeByAtmosphereRole"&gt;
          &lt;arg name="role"&gt;&amp;RoleSiteAdmin;&lt;/arg&gt;
        &lt;/condition&gt;
        &lt;condition negate="true" type="authorizeSelf"/&gt;
      &lt;/conditions&gt;
    &lt;/conditions&gt;
  &lt;/restrict-to&gt;
  &lt;results&gt;
    &lt;unconditional-result old-status="registered" status="registered" step="450"/&gt;
  &lt;/results&gt;
&lt;/action&gt;</pre>


<h4 id="user_ra_10">@PasswordChanged</h4>
<p>Indicates that the user has changed the password. Invoked when the user voluntarily changes the password via the <strong>Profile</strong> &gt; <strong>Password</strong> page.</p>
<p>This reserved action is a hook that you can use to extend the workflow with additional actions such as generating a notification and/or Board item or initiating a back-end process.</p>


<h4 id="user_ra_11">@Setup</h4>
<p>Used in an upgrade scenario, where existing users are added to the scenario because an upgraded installation requires all users to be in the workflow. During the upgrade process, when the <strong>Upgrade CM Models</strong> admin action is run, this reserved action is used to add all registered users to the workflow. Currently this is applicable only to platform users, not third-party users.</p>


<h4 id="user_ra_12">@Signup</h4>
<p>Used to determine whether the platform settings allow the user to sign up to the platform (user-initiated signup).</p>
<p>The UsersAPI.signupUser() operation (see POST /api/users/signupUser[/{InvitationCode}] on docs.akana.com) uses the availability of this initial action to either reject the message request or proceed with the signup.</p>
<p>The platform user interface references the user settings to determine whether signup is allowed or not. The default workflow allows or rejects signup based on the UI setting.</p>


<h4 id="user_ra_13">@UserDisabled</h4>
<p>Can be used to initiate one or more actions when the current user's account is disabled.</p>
<p>For example, you might want to configure a custom workflow so that when the current user's account is disabled, a Board item is created and a notification is sent to the user and, perhaps, a different notification to Site Admins and/or Business Admins.</p>
<p>Applicable board items and notifications:</p>
<ul>
	<li>com.soa.board.item.user.disabled</li>
	<li>User notification: com.soa.notification.type.user.disabled</li>
	<li>Admin notification: com.soa.notification.type.user.account.status.change</li>
</ul>
<h4 id="user_ra_14">@UserEnabled</h4>
<p>Can be used to initiate one or more actions when the current user's account is enabled.</p>
<p>For example, you might want to configure a custom workflow so that when the current user's account is enabled, a notification is sent to the user and, perhaps, a different notification to Site Admins and/or Business Admins.</p>
<p>Applicable board items and notifications:</p>
<ul>
	<li>com.soa.board.item.user.enabled</li>
	<li>User notification: com.soa.notification.type.user.disabled</li>
	<li>Admin notification: com.soa.notification.type.user.account.status.change</li>
</ul>
<h4 id="user_ra_15">@UserLocked</h4>
<p>Can be used to initiate one or more actions when a user's account is locked.</p>
<p>For example, you might want to configure a custom workflow so that when the current user's account is locked, a notification is sent to the user and, perhaps, a different notification to Site Admins and/or Business Admins.</p>
<p>Applicable board items and notifications:</p>
<ul>
	<li>com.soa.board.item.user.locked</li>
	<li>User notification: com.soa.notification.type.user.locked</li>
	<li>Admin notification: com.soa.notification.type.user.account.status.change</li>
</ul>
<h4 id="user_ra_16">@UserUnlocked</h4>
<p>Can be used to initiate one or more actions when a user's account is unlocked.</p>
<p>For example, you might want to configure a custom workflow so that when the current user's account is unlocked, a notification is sent to the user and, perhaps, a different notification to Site Admins and/or Business Admins.</p>
<p>Applicable board items and notifications:</p>
<ul>
	<li>com.soa.board.item.user.unlocked</li>
	<li>User notification: com.soa.notification.type.user.unlocked</li>
	<li>Admin notification: com.soa.notification.type.user.account.status.change</li>
</ul>
<h4 id="user_ra_17">@ResolveLoginPendingTask</h4>
<p>Used to determine whether there are pending tasks the user must complete before login is complete and, if so, to guide the user through those tasks; for example, validating a two-factor verification code or requesting a new verification code.</p>
<p>This reserved action is valid only when the user is in the login process; for example, if two-factor authentication is turned on and the user has authenticated with credentials but has not yet provided the verification code.</p>
<p>The default workflow restricts this action to be valid only when the <strong>isSessionInLoginProcess</strong> condition is <strong>true</strong>.</p>
<p>Additional functions can be used to specify actions that will be taken to resolve the pending task, such as:</p>
<ul>
	<li>If 2FA is turned on but has not been initiated, generate the verification code, send the cookie, and generate a notification.</li>
	<li>If change password is required, forcing the user to change the password.</li>
	<li>If change password is not required, check if agreements are accepted, and if there are pending legal agreements, guiding the user to accept the legal agreement.</li>
	<li>If security questions are required to complete login, guiding the user to provide answers to the security questions.</li>
</ul>
<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, this reserved action is invoked if the pre-conditions are met. Pre-conditions are that the login is in process, the auth token property exists (indicating that 2FA is required) and the auth token property does <strong>not</strong> match <strong>2FAComplete</strong> (indicating that the two-factor authentication process is not complete).</p>
<pre>&lt;action id="499" name="@ResolveLoginPendingTask"&gt;
  &lt;restrict-to&gt;
    &lt;conditions type="AND"&gt;
      &lt;condition type="isSessionInLoginProcess"/&gt;
      &lt;condition type="authTokenPropertyExists"&gt;
        &lt;arg name="PropertyName"&gt;2FAData&lt;/arg&gt;
        &lt;arg name="message"&gt;2FA not initiated&lt;/arg&gt;
      &lt;/condition&gt;
      &lt;condition negate="true" type="authTokenPropertyMatches"&gt;
          &lt;arg name="PropertyName"&gt;2FAComplete&lt;/arg&gt;
          &lt;arg name="PropertyValue"&gt;Yes&lt;/arg&gt;
      &lt;/condition&gt;
      &lt;condition type="argumentExists"&gt;
        &lt;arg name="ArgName"&gt;Action&lt;/arg&gt;
        &lt;arg name="message"&gt;Action is required&lt;/arg&gt;
      &lt;/condition&gt;
      &lt;condition type="argumentExists"&gt;
        &lt;arg name="ArgName"&gt;task.id&lt;/arg&gt;
        &lt;arg name="message"&gt;Task id is required&lt;/arg&gt;
      &lt;/condition&gt;
    &lt;/conditions&gt;
  &lt;/restrict-to&gt;</pre>
<p><a href="#top">Back to top</a></p>



<h3 id="user_f_00">User Workflow: Functions</h3>
<p>The following functions are available for the user workflow:</p>
<ul>
	<li><a href="#user_f_01">markUserPermanent</a></li>
	<li><a href="#user_f_02">markUserPermanentIfFirstLogin</a></li>
	<li><a href="#user_f_03">addBoardItem</a></li>
	<li><a href="#user_f_04">sendNotification</a></li>
	<li><a href="#user_f_05">setProperty</a></li>
	<li><a href="#user_f_06">setTwofaDeliveryOptions</a></li>
	<li><a href="#user_f_07">setTwofaDeliveryTarget</a></li>
	<li><a href="#user_f_08">send2FACodeToEmail</a></li>
	<li><a href="#user_f_09">generate2FACode</a></li>
	<li><a href="#user_f_10">setPendingTask</a></li>
	<li><a href="#user_f_11">unmarshall2FACode</a></li>
	<li><a href="#user_f_12">handle2FATask</a></li>
	<li><a href="#user_f_13">validate2FACode</a></li>
	<li><a href="#user_f_14">terminateSession</a></li>
	<li><a href="#user_f_15">acceptAgreementForDomainUsers</a></li>
	<li><a href="#user_f_16">acceptAgreementForUsersBelongToRoles</a></li>
</ul>
<!--<p>{com.soa.atmosphere.impl\src\com\soa\user\workflow\UserWorkflowFunctions.java}</p>-->


<h4 id="user_f_01">markUserPermanent</h4>
<p>This function marks the user as permanent in the database. Until a user logs in for the first time, the user is not marked as permanent; the user's invitation expires after a pre-set time period, and invited users who did not complete the process are periodically purged from the database. This function marks the record as permanent so that it does not get purged.</p>
<p class="apidoc_note"><strong>Note</strong>: Two separate functions exist, <strong>markUserPermanent</strong> and <strong>markUserPermanentIfFirstLogin</strong>, to offer flexibility in implementation. In the out-of-the box user workflow there is no difference in implementation between these two, but a custom workflow could be designed to differentiate between a user's first login and subsequent logins. For example, a custom workflow could require users to renew the account every year, and could enforce the account renewal process.</p>


<h4 id="user_f_02">markUserPermanentIfFirstLogin</h4>
<p>If this is the first login by the user, this function marks the user as permanent in the database. Until a user logs in for the first time, the user is not marked as permanent; the user's invitation expires after a pre-set time period, and invited users who did not complete the process are periodically purged from the database. This function marks the record as permanent so that it does not get purged.</p>
<p>The default user workflow uses this function to mark the user as permanent when the user logs in for the first time.</p>
<p class="apidoc_note"><strong>Note</strong>: Two separate functions exist, <strong>markUserPermanent</strong> and <strong>markUserPermanentIfFirstLogin</strong>, to offer flexibility in implementation. In the out-of-the box user workflow there is no difference in implementation between these two, but a custom workflow could be designed to differentiate between a user's first login and subsequent logins. For example, a custom workflow could require users to renew the account every year, and could enforce the account renewal process.</p>
<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, the user has completed the registration process. LoginState is set to LoginComplete and the user is therefore marked as permanent. The notification is currently commented out.</p>
<pre>&lt;unconditional-result old-status="registered" status="registered" step="400"&gt;
  &lt;pre-functions&gt;
    &lt;function type="setProperty"&gt;
      &lt;arg name="LoginState"&gt;&amp;LoginComplete;&lt;/arg&gt;
    &lt;/function&gt;
    &lt;function type="<strong>markUserPermanentIfFirstLogin</strong>"/&gt;
    &lt;!--  invoke send Notification on first time login.  --&gt;
  &lt;/pre-functions&gt;
&lt;/unconditional-result&gt;</pre>


<h4 id="user_f_03">addBoardItem</h4>
<p>Adds a Board item to one or more boards for the user.</p>
<p>This function can load a message template and dynamically fill in some values into the template with the help of a parameter resolver. When the workflow action is invoked, a comment is added by the user. The parameter resolver can be used to include this comment in the board item title/description, email message subject/body, and/or a dashboard notification. To use this feature, reference the parameter resolver <strong>{action.comment}</strong> in the notification template. When the action is performed, this parameter resolver will be replaced by the comment entered by the user performing the workflow action.</p>

<h5>Parameters</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>boardItemTemplateId</td>
			<td><p>The ID of the Board item notification template, from the database, to be used for the Board item title and description. For example:</p>
				<ul>
					<li>com.soa.board.item.user.logged.in.first.time</li>
				</ul></td>
		</tr>
		<tr>
			<td>Visibility</td>
			<td><p>The visibility of the Board item. Valid values:</p>
				<ul>
					<li>Public</li>
					<li>Limited</li>
					<li>RegisteredUsers</li>
				</ul>      </td>
		</tr>
		<tr>
			<td>Type</td>
			<td>The Board item type. Currently, the only valid value is <strong>Discussion</strong>.</td>
		</tr>
		<tr>
			<td>targetBoard</td>
			<td><p>Used to specify that one item could be added to multiple boards.</p>
<p>There are two ways to add the targetBoard information:</p>
<ul>
	<li><strong>targetBoard.{parametername}</strong>, listing separately each parameter to be added to the target board.</li>
	<li><strong>targetBoards</strong>, plural parameter, with a comma-separated list of Board items to be added.</li>
</ul>      </td>
		</tr>
		<tr>
			<td>viewers</td>
			<td><p>Indicates who can view the Board item. For example, providing the App ID as a value indicates that anyone who can administer the app can view the Board item. There are two ways to specify the viewers:</p>
				<ul>
					<li><strong>viewer.{parametername}</strong>, listing separately each applicable ID to indicate that users who have view of that resource have view of the Board item.</li>
					<li><strong>viewers</strong>, plural parameter, with a comma-separated list of Board items to be added.</li>
				</ul>
<p>Examples of values:</p>
<ul>
	<li>app.team.group.dn: app team</li>
	<li>connected.apis.id: API Admins for connected APIs</li>
	<li>business.dn: Business Admins for the business</li>
</ul>      </td>
		</tr>
	</tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<p>The example below shows adding a Board item as a post-function, to announce that a user added by the Site Admin has logged in for the first time. In this example, <strong>targetBoard</strong> is a set of separate arguments, and <strong>viewers</strong> is a plural parameter.</p>

<pre>&lt;post-functions&gt;
  &lt;function type="markUserPermanent"/&gt;
  &lt;function type="addBoardItem"&gt;
    &lt;arg name="boardItemTemplateId"&gt;com.soa.board.item.user.logged.in.first.time&lt;/arg&gt;
    &lt;arg name="visibility"&gt;Limited&lt;/arg&gt;
    &lt;arg name="type"&gt;Discussion&lt;/arg&gt;
    &lt;arg name="author"&gt;${site.admin.dn}&lt;/arg&gt;
    &lt;arg name="targetBoard.apiversion"&gt;${connected.apiversion.ids}&lt;/arg&gt;
    &lt;arg name="targetBoard.api"&gt;${connected.apis.id}&lt;/arg&gt;
    &lt;arg name="viewers"&gt;${connected.apis.id},${business.dn},${site.admin.dn}&lt;/arg&gt;
  &lt;/function&gt;
  &lt;function type="sendNotification"&gt;
    &lt;arg name="role"&gt;ApiAdmins,SiteAdmin,BusinessAdmin&lt;/arg&gt;
    &lt;arg name="notificationType"&gt;com.soa.notification.type.user.logged.in.first.time&lt;/arg&gt;
  &lt;/function&gt;</pre>


<h4 id="user_f_04">sendNotification</h4>
<p>Triggers the specified email/Dashboard notification based on an event relating to a user.</p>
<p><strong>Note</strong>: The email isn't sent instantly; it is queued to be sent. It goes to the notifications queue, and the job runs every 60 seconds. There might be a short delay before the user receives the email.</p>
<p>This function can load a message template and dynamically fill in some values into the template with the help of a parameter resolver. When the workflow action is invoked, a comment is added by the user. The parameter resolver can be used to include this comment in the board item title/description, email message subject/body, and/or a dashboard notification. To use this feature, reference the parameter resolver <strong>{action.comment}</strong> in the notification template. When the action is performed, this parameter resolver will be replaced by the comment entered by the user performing the workflow action.</p>

<h5>Parameters</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>notificationType</td>
			<td><p>The type of notification being sent. Can be any valid notification existing in the platform. For example:</p>
				<ul>
					<li>com.soa.notification.type.user.admin.added</li>
					<li>com.soa.notification.type.user.2fa.verification.code</li>
				</ul>      </td>
		</tr>
		<tr>
			<td>role</td>
			<td><p>The role to which the notifications will be sent. Valid values:</p>
				<ul>
					<li>ApiAdmins</li>
					<li>SiteAdmin</li>
					<li>BusinessAdmin</li>
					<li>Self</li>
					<li>User</li>
				</ul>      </td>
		</tr>
	</tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, a notification is sent as a post-function when the Site Admin adds a user.</p>
<pre>&lt;step id="20" name="Route Admin Add" &gt;
  &lt;actions&gt;
    &lt;action id="21" name="init-admin-add" auto="TRUE"&gt;
      &lt;results&gt;
        &lt;result old-status="none" status="registered" step="400" &gt;
          &lt;conditions type="AND"&gt;
            &lt;condition type="isLocalDomainUser"/&gt;
          &lt;/conditions&gt;
          &lt;post-functions&gt;
            &lt;function type="sendNotification"&gt;
              &lt;arg name="notificationType"&gt;com.soa.notification.type.user.admin.added&lt;/arg&gt;
              &lt;arg name="role"&gt;ApiAdmins,SiteAdmin,BusinessAdmin&lt;/arg&gt;
            &lt;/function&gt;
          &lt;/post-functions&gt;
        &lt;/result&gt;
        &lt;unconditional-result old-status="none" status="unknown" step="-1"/&gt;
      &lt;/results&gt;
    &lt;/action&gt;
  &lt;/actions&gt;
&lt;/step&gt;</pre>


<h4 id="user_f_05">setProperty</h4>
<p>Sets any property defined by the workflow, allowing the workflow to communicate back to the application or to the response stream by setting a property based on the workflow. The property can be used inside the workflow to give feedback to the application and thus guide the process flow.</p>
<p>setProperty can be used to set any property in any workflow document.</p>
<p>For example, in the default user workflow, the @Login reserved action, invoked at login, uses setProperty to determine the next step&#8212;based on the workflow and existing conditions/information, whether the login action is complete or whether one or more required actions must be completed first.</p>
<p>In this scenario, the argument is PendingTask and there are three possible values (see <a href="#user_ra_00">User Workflow: Reserved Actions</a>.</p>
<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, this function is used to evaluate whether the user logging in is a local domain user and, if so, whether a password change is required. If a password change is required, it is set as a pending task that must be completed prior to login.</p>
<pre>&lt;step id="400" name="managed"&gt;
  &lt;actions&gt;
    &lt;action id="401" name="@Login"&gt;
      &lt;results&gt;
        &lt;result old-status="registered" status="registered" step="400"&gt;
          &lt;conditions type="AND"&gt;
            &lt;condition type="isLocalDomainUser"/&gt;
            &lt;condition type="isChangePasswordRequired"/&gt;
          &lt;/conditions&gt;
          &lt;pre-functions&gt;
            &lt;function type="setProperty"&gt;
              &lt;arg name="PendingTask"&gt;&amp;ChangePassword;&lt;/arg&gt;
            &lt;/function&gt;
          &lt;/pre-functions&gt;</pre>


<h4 id="user_f_06">setTwofaDeliveryOptions</h4>
<p>When two-factor authentication is in use, indicates the delivery options supported for the 2FA verification code.</p>
<p><strong>Note</strong>: In the platform's out-of-the-box 2FA use workflow, if more than one delivery option is defined as valid in the workflow, the platform does not generate the verification code immediately. Instead, it returns the valid delivery options. The user can then select an option; based on that, the verification code is generated.</p>

<h5>Parameters</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>VoiceSupported</td>
			<td>Indicates whether a voice option is supported for the 2FA verification code. Boolean <strong>true</strong>/<strong>false</strong>.</td>
		</tr>
		<tr>
			<td>TextSupported</td>
			<td>Indicates whether text messaging is supported for the 2FA verification code. Boolean <strong>true</strong>/<strong>false</strong></td>
		</tr>
		<tr>
			<td>EmailSupported</td>
			<td>Indicates whether email is supported for the 2FA verification code. Boolean <strong>true</strong>/<strong>false</strong>.</td>
		</tr>
	</tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, <strong>setTwofaDeliveryOptions</strong> is invoked as the first pre-function to specify the supported delivery options. Depending on the delivery options supported, subsequent workflow actions guide the process.</p>
<pre>&lt;pre-functions&gt;
  &lt;function type="setTwofaDeliveryOptions"&gt;
    &lt;arg name="VoiceSupported"&gt;true&lt;/arg&gt;
    &lt;arg name="TextSupported"&gt;true&lt;/arg&gt;
    &lt;arg name="EmailSupported"&gt;true&lt;/arg&gt;
  &lt;/function&gt;
  &lt;function type="handle2FATask"&gt;
    &lt;arg name="PropertyName"&gt;2FAData&lt;/arg&gt;
    &lt;arg name="2FAData"&gt;${authtoken.property.2FAData}&lt;/arg&gt;
    &lt;arg name="2FACode"&gt;${arg.2fa.code}&lt;/arg&gt;
    &lt;arg name="2FASalt"&gt;${authtoken.property.2FASalt}&lt;/arg&gt;
  &lt;/function&gt;
&lt;/pre-functions&gt;</pre>


<h4 id="user_f_07">setTwofaDeliveryTarget</h4>
<p>When two-factor authentication is in use, indicates the delivery option that the user has chosen for the 2FA verification code.</p>

<h5>Parameters</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>DeliveryOptions</td>
			<td>${arg.2fa.task.data}. This resolves to the value of <strong>2fa.task.data</strong>. See <a href="#user_vr_01">${arg.xxxx}</a>.</td>
		</tr>
		<tr>
			<td>DeliveryMechanism</td>
			<td><p>Indicates the way the verification code will be delivered. Valid values, if defined as <strong>true</strong> in arguments for the <strong>setTwofaDeliveryOptions</strong> function:</p>
				<ul>
					<li>Email</li>
					<li>Voice</li>
					<li>Text</li>
				</ul></td>
		</tr>
	</tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, <strong>setTwofaDeliveryTarget</strong> is set to <strong>text</strong>.</p>
<pre>&lt;pre-functions&gt;
  &lt;function type="setTwoFADeliveryTarget"&gt;
    &lt;arg name="DeliveryOptions"&gt;${arg.2fa.task.data}&lt;/arg&gt;
    &lt;arg name="DeliveryMechanism"&gt;Text&lt;/arg&gt;
    &lt;arg name="DeliveryTargetAddress"&gt;${arg.twofa.delivery.target.address}&lt;/arg&gt;
    &lt;!--&lt;arg name="Index"&gt;0&lt;/arg&gt;--&gt;&lt;!-- Either or --&gt;
  &lt;/function&gt;
  &lt;function type="generate2FACode"/&gt;
  &lt;function type="setAuthTokenProperty"&gt;
    &lt;arg name="PropertyName"&gt;2FAData&lt;/arg&gt;
    &lt;arg name="PropertyValue"&gt;${arg.2fa.authtoken.property}&lt;/arg&gt;
  &lt;/function&gt;</pre>


<h4 id="user_f_08">send2FACodeToEmail</h4>
<p>When two-factor authentication is in use, indicates that the delivery mechanism by which the 2FA verification code will be sent to the user is email, and conveys the applicable information.</p>
<p>The platform's out-of-the-box user workflow includes support for sending the 2FA code to an email address.</p>
<p><strong>Note</strong>: The email isn't sent instantly; it is queued to be sent. It goes to the notifications queue, and the job runs every 60 seconds. There might be a short delay before the user receives the email.</p>

<h5>Parameters</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>DeliveryTargetAddress</td>
			<td><p>${arg.twofa.delivery.target.address}: the specific email address the verification code will be sent to.</p>
<p>If this parameter is used in a custom function to send the code to a phone, it could be the phone number, including country code.</p></td>
		</tr>
		<tr>
			<td>DeliveryMechanism</td>
			<td><p>${arg.DeliveryMechanism}: indicates the way the verification code will be sent to the user. The only valid value for this function is Email.</p>
<p>If this parameter is used in a custom function to send the code to a phone, the value could be Voice or Text.</p></td>
		</tr>
		<tr>
			<td>2FAData</td>
			<td>A value used internally. Not currently needed.</td>
		</tr>
		<tr>
			<td>2FAVerificationCode</td>
			<td>${arg.verificationCode}: the specific verification code sent to the user.</td>
		</tr>
		<tr>
			<td>2FAVerificationCodeValidMinutes</td>
			<td>${arg.2fa.verification.code.valid.minutes}: the validity period for the 2FA code, as set up in the platform settings.</td>
		</tr>
	</tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<p>The example below is a template for this function.</p>
<pre>&lt;function type="send2FACodeToEmail"&gt;
  &lt;arg name="DeliveryTargetAddress"&gt;${arg.twofa.delivery.target.address}&lt;/arg&gt;
  &lt;arg name="DeliveryMechanism"&gt;${arg.DeliveryMechanism}&lt;/arg&gt;
  &lt;arg name="2FAData"&gt;${arg.2fa.task.data}&lt;/arg&gt;
  &lt;arg name="2FAVerificationCode"&gt;${arg.verificationCode}&lt;/arg&gt;
  &lt;arg name="2FAVerificationCodeValidMinutes"&gt;${arg.2fa.verification.code.valid.minutes}&lt;/arg&gt;
&lt;/function&gt;</pre>


<h4 id="user_f_09">generate2FACode</h4>
<p>Generates the code to be used in the two-factor authentication process, and:</p>
<ul>
	<li>Sets the generated 2FA code details into the argument properties.</li>
	<li>Sets an argument property with an opaque token that must be saved so that it can be used later for validating the 2FA code.</li>
</ul>
<!--<p>{com.soa.atmosphere.impl\src\com\soa\user\workflow\twofa\UserTwoFAWorkflowFunctions.java}</p>-->


<h4 id="user_f_10">setPendingTask</h4>
<p>Specifies a pending task, and allows some associated data relating to the pending tasks to be included. For example, this can be used to specify that two-factor authentication is required and is a pending task that must be completed before user login is complete; in this scenario, this could then give the 2FA data.</p>
<!--<p>{com.soa.atmosphere.impl\src\com\soa\user\workflow\twofa\UserTwoFAWorkflowFunctions.java}</p>-->


<h4 id="user_f_11">unmarshall2FACode</h4>
<p>Extracts the 2FA object from the auth token data, and converts the opaque 2FA token into a structure that other 2FA functions can use.</p>
<p>This function allows the 2FA data to be read if needed; for example, by the GET /api/login/status operation that returns information about the user's current login status.</p>
<!--<p>{com.soa.atmosphere.impl\src\com\soa\user\workflow\twofa\UserTwoFAWorkflowFunctions.java}</p>-->


<h4 id="user_f_12">handle2FATask</h4>
<p>Relating to two-factor verification codes generated by the Generate2FACode function, <strong>handle2FATask</strong> takes care of any of the following:</p>
<ul>
	<li>Generate the verification code</li>
	<li>Validate the verification code</li>
</ul>
<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, the <strong>handle2FATask</strong> function sets a value for the opaque code, 2FACode, and sets the structure into the auth token property, <strong>2FAData</strong>.</p>
<pre>&lt;pre-functions&gt;
  &lt;function type="handle2FATask"&gt;
    &lt;arg name="PropertyName"&gt;2FAData&lt;/arg&gt;
    &lt;arg name="2FAData"&gt;${authtoken.property.2FAData}&lt;/arg&gt;
    &lt;arg name="2FACode"&gt;${arg.2fa.code}&lt;/arg&gt;
  &lt;/function&gt;
&lt;/pre-functions&gt;</pre>
<!--<p>{com.soa.atmosphere.impl\src\com\soa\user\workflow\twofa\UserTwoFAWorkflowFunctions.java}</p>-->


<h4 id="user_f_13">validate2FACode</h4>
<p>Validates the two-factor verification code. The session must be in login process for this function to be valid.</p>
<!--<p>{com.soa.atmosphere.impl\src\com\soa\user\workflow\twofa\UserTwoFAWorkflowFunctions.java}</p>-->


<h4 id="user_f_14">terminateSession</h4>
<p>Allows the workflow to force logout and end the current user's session. This function removes the browser cookie, which means the session is terminated.</p>
<p>There might be a short delay before it's apparent to the user that the UI session has ended. However, if this is used as part of the ResolveLoginPendingTask action, the UI will recognize it immediately and give the user a notification message.</p>
<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, the workflow checks whether the code is expired or max attempts is exceeded. If either of these conditions is met, 2FA required is set as a pending task and the user's cookie is removed. This means that the user must start the login process from the beginning.</p>
<pre>&lt;conditions type="OR"&gt;
  &lt;condition type="is2FACodeExpired"/&gt;
  &lt;condition type="is2FAMaxAttemptsExceeded"/&gt;
&lt;/conditions&gt;
&lt;pre-functions&gt;
  &lt;function type="setPendingTask"&gt;
    &lt;arg name="PendingTask"&gt;2fa.required&lt;/arg&gt;
    &lt;arg name="TaskData"&gt;${arg.2fa.task.data}&lt;/arg&gt;
  &lt;/function&gt;
  &lt;function type="removeAuthTokenProperty"&gt;
    &lt;arg name="PropertyName"&gt;2FAData&lt;/arg&gt;
  &lt;/function&gt;
  &lt;function type="terminateSession"/&gt;
&lt;/pre-functions&gt;</pre>


<h4 id="user_f_15">acceptAgreementForDomainUsers</h4>
<h5 class="stamp">API Platform Version: 8.4.15 and later</h5>
<p>By default, the platform required acceptance of the platform legal agreement, if one is uploaded to the developer portal.</p>
<p>The <strong>acceptAgreementForDomainUsers</strong>  function allows customization of the workflow so that the mandatory acceptance of the platform legal agreement is skipped for users belonging to a specific login domain.</p>
<p>If this custom workflow function is in place, new users who match the specified condition do not see the developer agreement. For these users, the login process just skips that step.</p>

<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, this function is added in the workflow document, in the &quot;@Login&quot; section, to skip requiring acceptance of the developer portal agreement for users of the acmepaymentscorp domain. This argument also supports multiple domains with comma separator.</p>
<pre>&lt;function type=&quot;acceptAgreementForDomainUsers&quot;&gt;
  &lt;arg name=&quot;DomainName&quot;&gt;acmepaymentscorp&lt;/arg&gt;
&lt;/function&gt;</pre>
<p><strong>Note</strong>: To see where this fits into the workflow document, you can download the user workflow from the developer portal. The new function is in the default workflow, but is commented out.</p>


<h4 id="user_f_16">acceptAgreementForUsersBelongToRoles</h4>
<h5 class="stamp">API Platform Version: 8.4.15 and later</h5>
<p>By default, the platform required acceptance of the platform legal agreement, if one is uploaded to the developer portal. </p>
<p>The <strong>acceptAgreementForUsersBelongToRoles</strong> function allows customization of the workflow so that the mandatory acceptance of the platform legal agreement is skipped for users with a specific role.</p>
<p>If this custom workflow function is in place, new users who match the specified condition do not see the developer agreement. For these users, the login process just skips that step.</p>

<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, this function is added in the workflow document, in the &quot;@Login&quot; section, to skip requiring acceptance of the developer portal agreement for users who have either the Business Administrator or API Developer roles. This argument supports multiple roles with comma separator, as shown below.</p>
<pre>&lt;function type=&quot;acceptAgreementForUsersBelongToRoles&quot;&gt;
  &lt;arg name=&quot;role&quot;&gt;Business Administrator,API Developer&lt;/arg&gt;
&lt;/function&gt;</pre>
<p><strong>Note</strong>: To see where this fits into the workflow document, you can download the user workflow from the developer portal. The new function is in the default workflow, but is commented out.</p>

<!--<p>{com.soa.atmosphere.impl\src\com\soa\user\workflow\UserWorkflowFunctions.java}</p>-->
<p><a href="#top">Back to top</a></p>



<h3 id="user_c_00">User Workflow: Conditions</h3>
<p>The following conditions apply to the user workflow:</p>
<ul>
	<li><a href="#user_c_01">isLocalDomainUser</a></li>
	<li><a href="#user_c_02">IsRegisteredUser</a></li>
	<li><a href="#user_c_03">IsLocalRegisteredUser</a></li>
	<li><a href="#user_c_04">IsLastLoginEmpty</a></li>
	<li><a href="#user_c_05">IsChangePasswordRequired</a></li>
	<li><a href="#user_c_06">AgreementsAccepted</a></li>
	<li><a href="#user_c_07">IsForceChallengeQuestionsAnsweredOnLoginSetup</a></li>
	<li><a href="#user_c_08">SecurityQuestionsAnswered</a></li>
	<li><a href="#user_c_08">IsSelfSignupAllowed</a></li>
	<li><a href="#user_c_10">UserSettingsAllowModifyProfile</a></li>
	<li><a href="#user_c_11">IsInviteUnRegisteredUserAllowed</a></li>
	<li><a href="#user_c_12">authorizeSelf</a></li>
	<li><a href="#user_c_13">Is2FAEnabled</a></li>
	<li><a href="#user_c_14">is2FARequired</a></li>
	<li><a href="#user_c_15">isNoDeliveryOption</a></li>
	<li><a href="#user_c_16">isDeliveryOptionsOnlyOne</a></li>
	<li><a href="#user_c_17">isDeliveryOptionsOnlyEmail</a></li>
	<li><a href="#user_c_18">isDeliveryTypeEmail</a></li>
	<li><a href="#user_c_19">isDeliveryTypeVoice</a></li>
	<li><a href="#user_c_20">isDeliveryTypeText</a></li>
	<li><a href="#user_c_21">is2FACodeValid</a></li>
	<li><a href="#user_c_22">is2FATerminated</a></li>
	<li><a href="#user_c_23">doesUserBelongToDomain</a></li>
</ul>
<!--<p>{com.soa.atmosphere.impl\src\com\soa\user\workflow\UserWorkflowConditions.java}</p>-->



<h4 id="user_c_01">isLocalDomainUser</h4>
<p>Tests to see if the user is a local domain user.</p>


<h4 id="user_c_02">IsRegisteredUser</h4>
<p>Tests to see that the user is a registered platform user.</p>


<h4 id="user_c_03">IsLocalRegisteredUser</h4>
<p>Tests to see that the user is a registered platform user with a local account.</p>


<h4 id="user_c_04">IsLastLoginEmpty</h4>
<p>Tests to see whether this is the first login.</p>


<h4 id="user_c_05">IsChangePasswordRequired</h4>
<p>Tests to see if a change of password for the user is required; for example, at first login when the Site Admin has provided the user with a temporary password.</p>


<h4 id="user_c_06">AgreementsAccepted</h4>
<p>Tests to see whether the user has accepted the platform legal agreement, if required.</p>


<h4 id="user_c_07">IsForceChallengeQuestionsAnsweredOnLoginSetup</h4>
<p>Tests to see whether the platform user setting, <strong>EnforceChallengesSetupOnLogin</strong>, is enabled. If the setting is enabled, the user must provide answers to the challenge questions as part of login.</p>


<h4 id="user_c_08">SecurityQuestionsAnswered</h4>
<p>Tests to see if the user has provided answers to the required number of security questions.</p>


<h4 id="user_c_09">IsSelfSignupAllowed</h4>
<p>Tests to see whether the platform user setting, <strong>SelfSignup</strong>, is enabled. If the setting is disabled, the user cannot sign themselves up for the platform.</p>


<h4 id="user_c_10">UserSettingsAllowModifyProfile</h4>
<p>Tests to see whether the platform business security setting, <strong>UserModifyEmail</strong>, is enabled. If the setting is disabled, the user cannot modify his/her profile.</p>
<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, the workflow for the @ModifyProfile workflow action checks to make sure that either the setting to allow users who are not Managed Users to modify their own profiles is turned on (condition <strong>userSettingsAllowModifyProfile</strong>), or else the current user is a Site Admin. If one of these conditions is met, the action can go forward.</p>
<p>Note that this condition only applies to users who signed up for the platform themselves (whether by invitation, by setting up a platform account, or by setting up an account with a third-party identity provider such as Google). Managed Users, added by the Site Admin, cannot modify their own profiles, even if the platform setting is turned on.</p>
<p>If the setting to allow users to modify their own profiles is disabled, a user who is a Site Admin cannot modify his/her own profile. In this case, only another Site Admin can modify this Site Admin's profile.</p>
<p>For more information, refer to <a href="#user_ra_09">@ModifyProfile</a>.</p>
<pre>&lt;action id="456" name="@ModifyProfile"&gt;
  &lt;restrict-to&gt;
    &lt;conditions type="OR"&gt;
      &lt;conditions type="AND"&gt;
        &lt;condition type="authorizeSelf"/&gt;
        &lt;condition type="userSettingsAllowModifyProfile"/&gt;
      &lt;/conditions&gt;
      &lt;conditions type="AND"&gt;
        &lt;condition type="authorizeByAtmosphereRole"&gt;
          &lt;arg name="role"&gt;&amp;RoleSiteAdmin;&lt;/arg&gt;
        &lt;/condition&gt;
        &lt;condition negate="true" type="authorizeSelf"/&gt;
      &lt;/conditions&gt;
    &lt;/conditions&gt;
  &lt;/restrict-to&gt;
  &lt;results&gt;
    &lt;unconditional-result old-status="registered" status="registered" step="450"/&gt;
  &lt;/results&gt;
&lt;/action&gt;</pre>


<h4 id="user_c_11">IsInviteUnRegisteredUserAllowed</h4>
<p>Tests to see whether the platform user setting, <strong>InviteUnregisteredUsers</strong>, is enabled; if so, returns <strong>true</strong>. If the setting is disabled, group members cannot invite unregistered users to join platform groups or teams.</p>


<h4 id="user_c_12">authorizeSelf</h4>
<p>Tests to see whether the user running this action is the user whose workflow document is being used. For example, it is used at login by default. It is also used for modify profile. If the Site Admin is modifying the user's profile, authorizeSelf is <strong>false</strong>. If the user is modifying his/her own profile, it is <strong>true</strong>.</p>


<h4 id="user_c_13">Is2FAEnabled</h4>
<p>Checks the platform settings to see whether two-factor authentication is enabled for user login; returns Boolean true or false.</p>
<pre>&lt;condition type="is2FAEnabled"/&gt;</pre>
<!--<p>{com.soa.atmosphere.impl\src\com\soa\user\workflow\twofa\UserTwoFAWorkflowConditions.java}</p>-->


<h4 id="user_c_14">is2FARequired</h4>
<p>Checks to see whether two-factor authentication is required for login of the current user, based on the recurrence mode specified in the platform's 2FA settings and the user's history of completing the 2FA process. Returns Boolean true or false.</p>
<pre>&lt;condition type="is2FARequired"/&gt;</pre>
<!--<p>{com.soa.atmosphere.impl\src\com\soa\user\workflow\twofa\UserTwoFAWorkflowConditions.java}</p>-->


<h4 id="user_c_15">isNoDeliveryOption</h4>
<p>When used with negative=true, as shown below, checks to make sure that there is at least one 2FA delivery option specified. Returns Boolean true or false.</p>

<h5>Arguments</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>PropertyName</td>
			<td>${arg.2fa.task.data}. This resolves to the value of <strong>2fa.task.data</strong>. See <a href="#user_vr_01">${arg.xxxx}</a>.</td>
		</tr>
	</tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<pre>&lt;condition negate="true" type="isNoDeliveryOption"&gt;
  &lt;arg name="PropertyName"&gt;${arg.2fa.task.data}&lt;/arg&gt;
&lt;/condition&gt;</pre>
<!--<p>{com.soa.atmosphere.impl\src\com\soa\user\workflow\twofa\UserTwoFAWorkflowConditions.java}</p>-->


<h4 id="user_c_16">isDeliveryOptionsOnlyOne</h4>
<p>Tests to see if there is only one delivery option defined for the 2FA verification code. If there is only one delivery option, the user is not offered a choice. Instead, the code is generated and issued to the user by the specified delivery option and the user is directed to the UI page for entering the verification code.</p>
<p>Returns Boolean true or false.</p>

<h5>Arguments</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>PropertyName</td>
			<td>${arg.2fa.task.data}. This resolves to the value of <strong>2fa.task.data</strong>. See <a href="#user_vr_01">${arg.xxxx}</a>.</td>
		</tr>
	</tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<pre>&lt;condition type="is2FAEnabled"/&gt;
&lt;condition type="is2FARequired"/&gt;
&lt;condition type="isDeliveryOptionsOnlyOne"&gt;
  &lt;arg name="PropertyName"&gt;${arg.2fa.task.data}&lt;/arg&gt;
&lt;/condition&gt;</pre>
<!--<p>{com.soa.atmosphere.impl\src\com\soa\user\workflow\twofa\UserTwoFAWorkflowConditions.java}</p>-->


<h4 id="user_c_17">isDeliveryOptionsOnlyEmail</h4>
<p>Checks to see if the only valid delivery option for the 2FA verification code is email (this is the platform default).</p>
<p>Returns Boolean true or false.</p>

<h5>Arguments</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>PropertyName</td>
			<td>${arg.2fa.task.data}. This resolves to the value of <strong>2fa.task.data</strong>. See <a href="#user_vr_01">${arg.xxxx}</a>.</td>
		</tr>
	</tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<pre>&lt;condition type="isDeliveryOptionsOnlyEmail"&gt;&lt;!-- out of the box support --&gt;
  &lt;arg name="PropertyName"&gt;${arg.2fa.task.data}&lt;/arg&gt;
&lt;/condition&gt;</pre>
<!--<p>{com.soa.atmosphere.impl\src\com\soa\user\workflow\twofa\UserTwoFAWorkflowConditions.java}</p>-->


<h4 id="user_c_18">isDeliveryTypeEmail</h4>
<p>Checks to see if the only valid delivery option for the 2FA verification code is email (this is the platform default).</p>

<h5>Arguments</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>PropertyName</td>
			<td>${arg.2fa.task.data}. This resolves to the value of <strong>2fa.task.data</strong>. See <a href="#user_vr_01">${arg.xxxx}</a>.</td>
		</tr>
	</tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<pre>&lt;condition type="isDeliveryOptionsOnlyEmail"&gt;&lt;!-- out of the box support --&gt;
  &lt;arg name="PropertyName"&gt;${arg.2fa.task.data}&lt;/arg&gt;
&lt;/condition&gt;</pre>
<!--<p>{com.soa.atmosphere.impl\src\com\soa\user\workflow\twofa\UserTwoFAWorkflowConditions.java}</p>-->


<h4 id="user_c_19">isDeliveryTypeVoice</h4>
<p>Checks to see if the only valid delivery option for the 2FA verification code is email (this is the platform default).</p>

<h5>Arguments</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>PropertyName</td>
			<td>${arg.2fa.task.data}. This resolves to the value of <strong>2fa.task.data</strong>. See <a href="#user_vr_01">${arg.xxxx}</a>.</td>
		</tr>
	</tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<pre>&lt;condition type="isDeliveryOptionsOnlyEmail"&gt;&lt;!-- out of the box support --&gt;
  &lt;arg name="PropertyName"&gt;${arg.2fa.task.data}&lt;/arg&gt;
&lt;/condition&gt;</pre>
<!--<p>{com.soa.atmosphere.impl\src\com\soa\user\workflow\twofa\UserTwoFAWorkflowConditions.java}</p>-->


<h4 id="user_c_20">isDeliveryTypeText</h4>
<p>Checks to see if the only valid delivery option for the 2FA verification code is email (this is the platform default).</p>

<h5>Arguments</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>PropertyName</td>
			<td>${arg.2fa.task.data}. This resolves to the value of <strong>2fa.task.data</strong>. See <a href="#user_vr_01">${arg.xxxx}</a>.</td>
		</tr>
	</tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<pre>&lt;condition type="isDeliveryOptionsOnlyEmail"&gt;&lt;!-- out of the box support --&gt;
  &lt;arg name="PropertyName"&gt;${arg.2fa.task.data}&lt;/arg&gt;
&lt;/condition&gt;</pre>
<!--<p>{com.soa.atmosphere.impl\src\com\soa\user\workflow\twofa\UserTwoFAWorkflowConditions.java}</p>-->


<h4 id="user_c_21">is2FACodeValid</h4>
<p>Tests to see if the verification code that the user provided is valid. Returns <strong>true</strong> if the code is valid.</p>
<p>In the example below, <strong>is2FACodeValid</strong> is the second condition. Not shown: if both conditions evaluate to <strong>true</strong>, the workflow sets the auth token cookie and checks if there are any other pending login steps to complete the user's login.</p>
<pre>&lt;result old-status="registered" status="registered" step="450"&gt;
  &lt;conditions type="AND"&gt;
    &lt;condition type="argumentValueEquals"&gt;
      &lt;arg name="ArgName"&gt;Action&lt;/arg&gt;
      &lt;arg name="Value"&gt;validate&lt;/arg&gt;
    &lt;/condition&gt;
    &lt;condition type="is2FACodeValid"/&gt;
  &lt;/conditions&gt;</pre>
<!--<p>{com.soa.atmosphere.impl\src\com\soa\user\workflow\twofa\UserTwoFAWorkflowConditions.java}</p>-->


<h4 id="user_c_22">is2FATerminated</h4>
<p>Checks to make sure that the 2FA session has not been terminated. 2FA is terminated if conditions are violated such as if the number of attempts with an invalid code has been exceeded or if the code has expired. If the session has been terminated, this condition returns <strong>true</strong>.</p>
<p><strong>Note</strong>: The valid number of attempts for a specific instance of the platform, and the timeout period for the cookie, are determined by the Site Admin in the 2FA settings.</p>
<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, if <strong>is2FATerminated</strong> resolves to <strong>Yes</strong>, <strong>2fa.required</strong> is set as a pending task, the current auth token property is removed, and the user's session is terminated. The user must start the login process from the beginning.</p>
<pre>&lt;result old-status="registered" status="registered" step="400"&gt;
  &lt;conditions type="AND"&gt;
    &lt;condition type="is2FATerminated"/&gt;
  &lt;/conditions&gt;
  &lt;pre-functions&gt;
    &lt;function type="setPendingTask"&gt;
      &lt;arg name="PendingTask"&gt;2fa.required&lt;/arg&gt;
      &lt;arg name="TaskData"&gt;${arg.2fa.task.data}&lt;/arg&gt;
    &lt;/function&gt;
    &lt;function type="removeAuthTokenProperty"&gt;
      &lt;arg name="PropertyName"&gt;2FAData&lt;/arg&gt;
    &lt;/function&gt;
    &lt;function type="terminateSession"/&gt;
  &lt;/pre-functions&gt;
&lt;/result&gt;</pre>
<!--<p>{com.soa.atmosphere.impl\src\com\soa\user\workflow\twofa\UserTwoFAWorkflowConditions.java}</p>-->
<p><a href="#top">Back to top</a></p>



<h4 id="user_c_23">doesUserBelongToDomain</h4>
<h5 class="stamp">API Platform Version: 8.4.15 and later</h5>
<p>Checks whether the user belongs to one or more specified domains so that further actions can be taken depending on the result of the condition.</p>
<p>This argument also supports multiple domains with a comma separator.</p>
<p>Using <strong>doesUserBelongToDomain</strong> in combination with the user workflow initial action, <a href="#user_ia_01">@UserPhoneNotRequired</a>, customizes the user workflow so that users belonging to a specific login domain are not required to provide a telephone number. If this functionality is in place, and the condition is met, the phone number field is not required, and is not shown to the user.</p>
<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, <strong>doesUserBelongToDomain</strong> is used in combination with @<strong>UserPhoneNotRequired</strong>. If the user belongs to the specified domain, the condition is met, and the new user is allowed to log in without providing a phone number on the user profile.</p>
<p><strong>Note</strong>: during domain configuration, the <strong>mail</strong> attribute must be mapped in the setting for the referenced domain so that the user can be identified. In the OpenID Connect Relying Party domain in the developer portal (<strong>Admin</strong> &gt; <strong>Domains</strong>), it's Tab 7. See <a href="http://docs.akana.com/cm/learnmore/bus_admin_domains_oidc.htm#oidcrp_domain_tab7">Tab 7: User</a> (Site Admin help).</p>
<pre>&lt;action id=&quot;25&quot; name=&quot;@UserPhoneNotRequired&quot;&gt;
  &lt;restrict-to&gt;
    &lt;conditions type=&quot;AND&quot;&gt;
      &lt;condition type=&quot;doesUserBelongToDomain&quot;&gt;
        &lt;arg name=&quot;DomainName&quot;&gt;acmepaymentscorpLDAP&lt;/arg&gt;
      &lt;/condition&gt;
    &lt;/conditions&gt;
  &lt;/restrict-to&gt;
  &lt;results&gt;
    &lt;unconditional-result old-status=&quot;none&quot; status=&quot;init-phone-check&quot; step=&quot;-1&quot;/&gt;
  &lt;/results&gt;
&lt;/action&gt;</pre>
<p>To see where these fit into the workflow document, you can download the user workflow from the developer portal. The new initial action and condition are in the default workflow, but commented out.</p>
<!--<p>{com.soa.atmosphere.impl\src\com\soa\user\workflow\twofa\UserTwoFAWorkflowConditions.java}</p>-->
<p><a href="#top">Back to top</a></p>



<h3 id="user_vr_00">User Workflow: Variable Resolvers</h3>
<p>The following variable resolvers are available for the user workflow.</p>
<ul>
	<li><a href="#user_vr_01">${arg.xxxx}</a></li>
	<li><a href="#user_vr_02">${authtoken.property.xxx}</a></li>
	<li><a href="#user_vr_03">${cookie.xxx}</a></li>
	<li><a href="#user_vr_04">${sessionuser.xxx}</a></li>
	<li><a href="#user_vr_05">${business.twofa.maxattempts}</a></li>
	<li><a href="#user_vr_06">${business.twofa.recurrence.mode}</a></li>
	<li><a href="#user_vr_07">${business.twofa.recurrence.interval}</a></li>
	<li><a href="#user_vr_08">${business.twofa.device.cookie.name}</a></li>
	<li><a href="#user_vr_09">${business.twofa.code.validity}</a></li>
</ul>
<!--<p>{com.soa.atmosphere.impl\src\com\soa\user\workflow\UserWorkflowVariableResolver.java}</p>-->



<h4 id="user_vr_01">${arg.xxxx}</h4>
<p>A dynamic variable resolver that can take any value as the argument. It resolves to a parameter provided in place of the <strong>xxx</strong> value, and returns the value of the parameter. For example, <strong>${arg.2fa.task.data}</strong> would resolve to the <strong>2fa.task.data</strong> parameter. If the parameter is found, the value is returned.</p>


<h4 id="user_vr_02">${authtoken.property.xxx}</h4>
<p>A dynamic variable resolver that can take any value as the argument. It resolves to a function provided in place of the <strong>xxx</strong> value, and returns the result of the function. For example, <strong>${authtoken.property.2FAData}</strong> would resolve to the 2FA data.</p>


<h4 id="user_vr_03">${cookie.xxx}</h4>
<p>A dynamic variable resolver that can take any value as the argument. It looks for the cookie specified in the <strong>xxx</strong> value, and returns the value of the cookie.</p>


<h4 id="user_vr_04">${sessionuser.xxx}</h4>
<p>A dynamic variable resolver that looks for the specified sessionuser information and returns the value of it. It looks for the specific value provided in place of the <strong>xxx</strong>, and returns the value of it.</p>
<p>The valid values for <strong>xxx</strong> in the above&#8212;the sessionuser information that can be checked in this variable resolver&#8212;are:</p>
<ul>
	<li><strong>${sessionuser.phone}</strong>
<p>Looks for the user's phone number and returns the value of it.</p></li>
	<li><strong>${sessionuser.firstname}</strong>
<p>Looks for the user's first name and returns the value of it.</p></li>
	<li><strong>${sessionuser.lastname}</strong>
<p>Looks for the user's last name and returns the value of it.</p></li>
	<li><strong>${sessionuser.email}</strong>
<p>Looks for the user's email address and returns the value of it.</p></li>
	<li><strong>${sessionuser.username}</strong>
<p>Looks for the username and returns the value of it.</p></li>
	<li><strong>${sessionuser.name}</strong>
<p>Looks for the user's profile name (same as username) and returns the value of it.</p></li>
	<li><strong>${sessionuser.domain}</strong>
<p>Looks for the user's domain and returns the value of it.</p></li>
</ul>


<h4 id="user_vr_05">${business.twofa.maxattempts}</h4>
<p>Checks the business settings for the platform tenant, as specified by the Site Admin in the 2FA settings, to determine the maximum number of attempts allowed with a single two-factor verification code.</p>


<h4 id="user_vr_06">${business.twofa.recurrence.mode}</h4>
<p>Checks the business settings for the platform tenant, as specified by the Site Admin in the 2FA settings, to determine the recurrence mode&#8212;that is, the frequency with which the user must perform two-factor authentication. There are three options for recurrence mode:</p>
<ul>
	<li><strong>twofa.each.login</strong>: each time the user logs in.</li>
	<li><strong>twofa.login.new.device</strong>: the first time the user logs in on a different device (includes cookie name).</li>
	<li><strong>twofa.once.each.interval</strong>: after the specified time interval has passed (cookie name and also time interval setting).</li>
</ul>
<h4 id="user_vr_07">${business.twofa.recurrence.interval}</h4>
<p>Checks the business settings for the platform tenant, as specified by the Site Admin in the 2FA settings, to determine the recurrence interval. Only applicable when the setting for recurrence mode is <strong>twofa.once.each.interval</strong>. For example, the interval might be 15 days.</p>


<h4 id="user_vr_08">${business.twofa.device.cookie.name}</h4>
<p>Checks the business settings for the platform tenant, as specified by the Site Admin in the 2FA settings, to determine the cookie name. Only applicable when the setting for recurrence mode is <strong>twofa.once.each.interval</strong> or <strong>twofa.login.new.device</strong>.</p>


<h4 id="user_vr_09">${business.twofa.code.validity}</h4>
<p>Checks the business settings for the platform tenant, as specified by the Site Admin in the 2FA settings, to determine how long the 2FA verification code is valid for. Code validity period is specified in milliseconds.</p>
<p><a href="#top">Back to top</a></p>



<h3 id="user_wf_2fa_ex">User Workflow: Implementing Two-Factor Authentication</h3>
<p>The platform supports setting up a second factor, a verification code generated and sent to the user, as an additional security feature on the login process.</p>
<p>There is a specific version of the user workflow that is provided out of the box to help get you started on setting up two-factor authentication for login.</p>
<p>Two-factor authentication is also supported by additional platform settings specified by the Site Admin (<strong>Administration</strong> &gt; <strong>Settings</strong> &gt; <strong>User 2FA</strong>).</p>

<h4>Workflow Example Implementing Two-Factor Authentication</h4>
<p>The example below shows the first action of a step in a custom User Workflow that implements two-factor authentication for registered users. This workflow:</p>
<ul>
	<li>Sets the 2FA delivery options that will be available to users.
  <p><strong>Note</strong>: If you want to use the platform default, leave <strong>EmailSupported</strong> set to <strong>true</strong> and set the other two options to <strong>false</strong>.</p></li>
	<li>Tests to see whether the authentication cookie already exists. If so, the workflow step ends.</li>
	<li>Tests to make sure that the custom property 2FAComplete does <strong>not</strong> exist in the user's auth token; that is, the two-factor authentication process is not complete. If this property does exist, the workflow step ends.</li>
	<li>Generates the verification code for the second factor of the authentication process.</li>
	<li>Generates a user notification.</li>
	<li>Sets "2FA required" as a pending task. The user must enter the code as part of the login process in order for login to be complete.</li>
</ul>
<pre>&lt;action id="451" name="@Login"&gt;
  &lt;pre-functions&gt;
    &lt;function type="setTwofaDeliveryOptions"&gt;
      &lt;arg name="VoiceSupported"&gt;true&lt;/arg&gt;
      &lt;arg name="TextSupported"&gt;true&lt;/arg&gt;
      &lt;arg name="EmailSupported"&gt;true&lt;/arg&gt;
    &lt;/function&gt;
  &lt;/pre-functions&gt;
  &lt;results&gt;
    &lt;result old-status="registered" status="registered" step="450"&gt;
      &lt;conditions type="AND"&gt;
        &lt;condition type="is2FAEnabled"/&gt;
        &lt;condition type="is2FARequired"/&gt;
        &lt;condition type="isDeliveryOptionsOnlyOne"&gt;
          &lt;arg name="PropertyName"&gt;${arg.2fa.task.data}&lt;/arg&gt;
        &lt;/condition&gt;
        &lt;condition negate="true" type="isNoDeliveryOption"&gt;
          &lt;arg name="PropertyName"&gt;${arg.2fa.task.data}&lt;/arg&gt;
        &lt;/condition&gt;
        &lt;condition type="isDeliveryOptionsOnlyEmail"&gt;&lt;!-- out of the box support --&gt;
          &lt;arg name="PropertyName"&gt;${arg.2fa.task.data}&lt;/arg&gt;
        &lt;/condition&gt;
        &lt;condition negate="true" type="authTokenPropertyMatches"&gt;
            &lt;arg name="PropertyName"&gt;2FAComplete&lt;/arg&gt;
            &lt;arg name="PropertyValue"&gt;Yes&lt;/arg&gt;
        &lt;/condition&gt;
        &lt;condition negate="true" type="authTokenPropertyMatches"&gt;
            &lt;arg name="PropertyName"&gt;2FASkipped&lt;/arg&gt;
            &lt;arg name="PropertyValue"&gt;Yes&lt;/arg&gt;
        &lt;/condition&gt;
        &lt;condition negate="true" type="authTokenPropertyExists"&gt;
            &lt;arg name="PropertyName"&gt;2FAData&lt;/arg&gt;
        &lt;/condition&gt;
      &lt;/conditions&gt;

      &lt;pre-functions&gt;
        &lt;function type="setTwoFADeliveryTarget"&gt;
          &lt;arg name="DeliveryOptions"&gt;${arg.2fa.task.data}&lt;/arg&gt;
          &lt;arg name="DeliveryMechanism"&gt;Email&lt;/arg&gt;
          &lt;!--&lt;arg name="Index"&gt;0&lt;/arg&gt;--&gt;&lt;!-- Either or --&gt;
        &lt;/function&gt;
        &lt;function type="generate2FACode"/&gt;
        &lt;function type="setAuthTokenProperty"&gt;
          &lt;arg name="PropertyName"&gt;2FAData&lt;/arg&gt;
          &lt;arg name="PropertyValue"&gt;${arg.2fa.authtoken.property}&lt;/arg&gt;
        &lt;/function&gt;
        &lt;!-- Implement sendToPhone custom function similar to this function --&gt;
        &lt;function type="send2FACodeToEmail"&gt;
          &lt;arg name="DeliveryTargetValue"&gt;${arg.twofa.delivery.target.val}&lt;/arg&gt;
          &lt;arg name="DeliveryMechanism"&gt;${arg.DeliveryMechanism}&lt;/arg&gt;
          &lt;arg name="2FAData"&gt;${arg.2fa.task.data}&lt;/arg&gt;
          &lt;arg name="2FAVerificationCode"&gt;${arg.verificationCode}&lt;/arg&gt;
          &lt;arg name="2FAVerificationCodeValidMinutes"&gt;${arg.2fa.verification.code.valid.minutes}&lt;/arg&gt;
        &lt;/function&gt;
        &lt;!-- &lt;function type="sendNotification"&gt;
          &lt;arg name="notificationType"&gt;com.soa.notification.type.user.2fa.verification.code&lt;/arg&gt;
          &lt;arg name="role"&gt;Self&lt;/arg&gt;
        &lt;/function&gt; --&gt;
        &lt;function type="setPendingTask"&gt;
          &lt;arg name="PendingTask"&gt;2fa.required&lt;/arg&gt;
          &lt;arg name="TaskData"&gt;${arg.2fa.task.data}&lt;/arg&gt;
        &lt;/function&gt;
      &lt;/pre-functions&gt;
    &lt;/result&gt;
    &lt;result old-status="registered" status="registered" step="450"&gt;
      &lt;conditions type="AND"&gt;
        &lt;condition type="is2FAEnabled"/&gt;
        &lt;condition type="is2FARequired"/&gt;
        &lt;condition type="isDeliveryOptionsOnlyOne"&gt;
          &lt;arg name="PropertyName"&gt;${arg.2fa.task.data}&lt;/arg&gt;
        &lt;/condition&gt;
        &lt;condition negate="true" type="isNoDeliveryOption"&gt;
          &lt;arg name="PropertyName"&gt;${arg.2fa.task.data}&lt;/arg&gt;
        &lt;/condition&gt;
        &lt;condition type="isDeliveryOptionsOnlyText"&gt;&lt;!-- out of the box support --&gt;
          &lt;arg name="PropertyName"&gt;${arg.2fa.task.data}&lt;/arg&gt;
        &lt;/condition&gt;
        &lt;condition negate="true" type="authTokenPropertyMatches"&gt;
            &lt;arg name="PropertyName"&gt;2FAComplete&lt;/arg&gt;
            &lt;arg name="PropertyValue"&gt;Yes&lt;/arg&gt;
        &lt;/condition&gt;
        &lt;condition negate="true" type="authTokenPropertyMatches"&gt;
            &lt;arg name="PropertyName"&gt;2FASkipped&lt;/arg&gt;
            &lt;arg name="PropertyValue"&gt;Yes&lt;/arg&gt;
        &lt;/condition&gt;
        &lt;condition negate="true" type="authTokenPropertyExists"&gt;
            &lt;arg name="PropertyName"&gt;2FAData&lt;/arg&gt;
        &lt;/condition&gt;
      &lt;/conditions&gt;

      &lt;pre-functions&gt;
        &lt;function type="setTwoFADeliveryTarget"&gt;
          &lt;arg name="DeliveryOptions"&gt;${arg.2fa.task.data}&lt;/arg&gt;
          &lt;arg name="DeliveryMechanism"&gt;Text&lt;/arg&gt;
          &lt;!--&lt;arg name="Index"&gt;0&lt;/arg&gt;--&gt;&lt;!-- Either or --&gt;
        &lt;/function&gt;
        &lt;function type="generate2FACode"/&gt;
        &lt;function type="setAuthTokenProperty"&gt;
          &lt;arg name="PropertyName"&gt;2FAData&lt;/arg&gt;
          &lt;arg name="PropertyValue"&gt;${arg.2fa.authtoken.property}&lt;/arg&gt;
        &lt;/function&gt;
        &lt;!-- &lt;function type="send2FACodeToPhone"&gt; custom workflow function to send text
          &lt;arg name="DeliveryTargetValue"&gt;${arg.twofa.delivery.target.val}&lt;/arg&gt;
          &lt;arg name="DeliveryMechanism"&gt;${arg.DeliveryMechanism}&lt;/arg&gt;
          &lt;arg name="2FAData"&gt;${arg.2fa.task.data}&lt;/arg&gt;
          &lt;arg name="2FAVerificationCode"&gt;${arg.verificationCode}&lt;/arg&gt;
          &lt;arg name="2FAVerificationCodeValidMinutes"&gt;${arg.2fa.verification.code.valid.minutes}&lt;/arg&gt;
        &lt;/function&gt; --&gt;
        &lt;function type="setPendingTask"&gt;
          &lt;arg name="PendingTask"&gt;2fa.required&lt;/arg&gt;
          &lt;arg name="TaskData"&gt;${arg.2fa.task.data}&lt;/arg&gt;
        &lt;/function&gt;
      &lt;/pre-functions&gt;
    &lt;/result&gt;
    &lt;result old-status="registered" status="registered" step="450"&gt;
      &lt;conditions type="AND"&gt;
        &lt;condition type="is2FAEnabled"/&gt;
        &lt;condition type="is2FARequired"/&gt;
        &lt;condition type="isDeliveryOptionsOnlyOne"&gt;
          &lt;arg name="PropertyName"&gt;${arg.2fa.task.data}&lt;/arg&gt;
        &lt;/condition&gt;
        &lt;condition negate="true" type="isNoDeliveryOption"&gt;
          &lt;arg name="PropertyName"&gt;${arg.2fa.task.data}&lt;/arg&gt;
        &lt;/condition&gt;
        &lt;condition type="isDeliveryOptionsOnlyVoice"&gt;&lt;!-- out of the box support --&gt;
          &lt;arg name="PropertyName"&gt;${arg.2fa.task.data}&lt;/arg&gt;
        &lt;/condition&gt;
        &lt;condition negate="true" type="authTokenPropertyMatches"&gt;
            &lt;arg name="PropertyName"&gt;2FAComplete&lt;/arg&gt;
            &lt;arg name="PropertyValue"&gt;Yes&lt;/arg&gt;
        &lt;/condition&gt;
        &lt;condition negate="true" type="authTokenPropertyMatches"&gt;
            &lt;arg name="PropertyName"&gt;2FASkipped&lt;/arg&gt;
            &lt;arg name="PropertyValue"&gt;Yes&lt;/arg&gt;
        &lt;/condition&gt;
        &lt;condition negate="true" type="authTokenPropertyExists"&gt;
            &lt;arg name="PropertyName"&gt;2FAData&lt;/arg&gt;
        &lt;/condition&gt;
      &lt;/conditions&gt;

      &lt;pre-functions&gt;
        &lt;function type="setTwoFADeliveryTarget"&gt;
          &lt;arg name="DeliveryOptions"&gt;${arg.2fa.task.data}&lt;/arg&gt;
          &lt;arg name="DeliveryMechanism"&gt;Voice&lt;/arg&gt;
          &lt;!--&lt;arg name="Index"&gt;0&lt;/arg&gt;--&gt;&lt;!-- Either or --&gt;
        &lt;/function&gt;
        &lt;function type="generate2FACode"/&gt;
        &lt;function type="setAuthTokenProperty"&gt;
          &lt;arg name="PropertyName"&gt;2FAData&lt;/arg&gt;
          &lt;arg name="PropertyValue"&gt;${arg.2fa.authtoken.property}&lt;/arg&gt;
        &lt;/function&gt;
        &lt;!-- &lt;function type="send2FACodeToPhone"&gt; custom workflow function to send voice
          &lt;arg name="DeliveryTargetValue"&gt;${arg.twofa.delivery.target.val}&lt;/arg&gt;
          &lt;arg name="DeliveryMechanism"&gt;${arg.DeliveryMechanism}&lt;/arg&gt;
          &lt;arg name="2FAData"&gt;${arg.2fa.task.data}&lt;/arg&gt;
          &lt;arg name="2FAVerificationCode"&gt;${arg.verificationCode}&lt;/arg&gt;
          &lt;arg name="2FAVerificationCodeValidMinutes"&gt;${arg.2fa.verification.code.valid.minutes}&lt;/arg&gt;
        &lt;/function&gt; --&gt;
        &lt;function type="setPendingTask"&gt;
          &lt;arg name="PendingTask"&gt;2fa.required&lt;/arg&gt;
          &lt;arg name="TaskData"&gt;${arg.2fa.task.data}&lt;/arg&gt;
        &lt;/function&gt;
      &lt;/pre-functions&gt;
    &lt;/result&gt;
    &lt;result old-status="registered" status="registered" step="450"&gt;
      &lt;conditions type="AND"&gt;
        &lt;condition type="is2FAEnabled"/&gt;
        &lt;condition type="is2FARequired"/&gt;
        &lt;condition type="isDeliveryOptionsMultiple"&gt;
          &lt;arg name="PropertyName"&gt;${arg.2fa.task.data}&lt;/arg&gt;
        &lt;/condition&gt;
        &lt;condition negate="true" type="authTokenPropertyMatches"&gt;
            &lt;arg name="PropertyName"&gt;2FAComplete&lt;/arg&gt;
            &lt;arg name="PropertyValue"&gt;Yes&lt;/arg&gt;
        &lt;/condition&gt;
        &lt;condition negate="true" type="authTokenPropertyMatches"&gt;
            &lt;arg name="PropertyName"&gt;2FASkipped&lt;/arg&gt;
            &lt;arg name="PropertyValue"&gt;Yes&lt;/arg&gt;
        &lt;/condition&gt;
        &lt;condition negate="true" type="authTokenPropertyExists"&gt;
            &lt;arg name="PropertyName"&gt;2FAData&lt;/arg&gt;
        &lt;/condition&gt;
      &lt;/conditions&gt;
      &lt;pre-functions&gt;
        &lt;!-- returns delivery options --&gt;
        &lt;function type="setPendingTask"&gt;
          &lt;arg name="PendingTask"&gt;2fa.required&lt;/arg&gt;
          &lt;arg name="TaskData"&gt;${arg.2fa.task.data}&lt;/arg&gt;
        &lt;/function&gt;
      &lt;/pre-functions&gt;
    &lt;/result&gt;
    &lt;result old-status="registered" status="registered" step="450"&gt;
      &lt;conditions type="AND"&gt;
        &lt;condition type="is2FAEnabled"/&gt;
        &lt;condition type="is2FARequired"/&gt;
        &lt;condition type="isNoDeliveryOption"&gt;
          &lt;arg name="PropertyName"&gt;${arg.2fa.task.data}&lt;/arg&gt;
        &lt;/condition&gt;
        &lt;condition negate="true" type="authTokenPropertyMatches"&gt;
            &lt;arg name="PropertyName"&gt;2FAComplete&lt;/arg&gt;
            &lt;arg name="PropertyValue"&gt;Yes&lt;/arg&gt;
        &lt;/condition&gt;
        &lt;condition negate="true" type="authTokenPropertyMatches"&gt;
            &lt;arg name="PropertyName"&gt;2FASkipped&lt;/arg&gt;
            &lt;arg name="PropertyValue"&gt;Yes&lt;/arg&gt;
        &lt;/condition&gt;
        &lt;condition negate="true" type="authTokenPropertyExists"&gt;
            &lt;arg name="PropertyName"&gt;2FAData&lt;/arg&gt;
        &lt;/condition&gt;
      &lt;/conditions&gt;
      &lt;pre-functions&gt;
        &lt;function type="generate2FACode"/&gt;
        &lt;function type="setAuthTokenProperty"&gt;
          &lt;arg name="PropertyName"&gt;2FAData&lt;/arg&gt;
          &lt;arg name="PropertyValue"&gt;${arg.2fa.authtoken.property}&lt;/arg&gt;
        &lt;/function&gt;
        &lt;!-- Add a default delivery option here as there are no delivery options defined, this has to be custom --&gt;
        &lt;!-- &lt;function type="send2FACodeToPhone"&gt; custom workflow function
          &lt;arg name="userPhoneNumber"&gt;${sessionuser.phone.number}&lt;/arg&gt;
          &lt;arg name="2FAData"&gt;${arg.2fa.task.data}&lt;/arg&gt;
          &lt;arg name="2FAVerificationCode"&gt;${arg.verificationCode}&lt;/arg&gt;
          &lt;arg name="2FAVerificationCodeValidMinutes"&gt;${arg.2fa.verification.code.valid.minutes}&lt;/arg&gt;
        &lt;/function&gt; --&gt;
        &lt;function type="setPendingTask"&gt;
          &lt;arg name="PendingTask"&gt;2fa.required&lt;/arg&gt;
          &lt;arg name="TaskData"&gt;${arg.2fa.task.data}&lt;/arg&gt;
        &lt;/function&gt;
      &lt;/pre-functions&gt;
    &lt;/result&gt;
    &lt;result old-status="registered" status="registered" step="450"&gt;
      &lt;conditions type="AND"&gt;
        &lt;condition type="is2FAEnabled"/&gt;
        &lt;condition negate="true" type="authTokenPropertyMatches"&gt;
            &lt;arg name="PropertyName"&gt;2FAComplete&lt;/arg&gt;
            &lt;arg name="PropertyValue"&gt;Yes&lt;/arg&gt;
        &lt;/condition&gt;
        &lt;condition negate="true" type="authTokenPropertyMatches"&gt;
            &lt;arg name="PropertyName"&gt;2FASkipped&lt;/arg&gt;
            &lt;arg name="PropertyValue"&gt;Yes&lt;/arg&gt;
        &lt;/condition&gt;
        &lt;condition type="authTokenPropertyExists"&gt;
            &lt;arg name="PropertyName"&gt;2FAData&lt;/arg&gt;
        &lt;/condition&gt;
      &lt;/conditions&gt;
      &lt;pre-functions&gt;
        &lt;function type="unmarshall2FACode"/&gt;
        &lt;function type="setPendingTask"&gt;
          &lt;arg name="PendingTask"&gt;2fa.required&lt;/arg&gt;
          &lt;arg name="TaskData"&gt;${arg.2fa.task.data}&lt;/arg&gt;
        &lt;/function&gt;
      &lt;/pre-functions&gt;
    &lt;/result&gt;
    &lt;result old-status="registered" status="registered" step="450"&gt;
      &lt;conditions type="AND"&gt;
        &lt;condition type="isLocalDomainUser"/&gt;
        &lt;condition type="isChangePasswordRequired"/&gt;
      &lt;/conditions&gt;
      &lt;pre-functions&gt;
        &lt;function type="setProperty"&gt;
          &lt;arg name="PendingTask"&gt;&amp;ChangePassword;&lt;/arg&gt;
        &lt;/function&gt;
      &lt;/pre-functions&gt;
    &lt;/result&gt;
    &lt;result old-status="registered" status="registered" step="450"&gt;
      &lt;conditions type="AND"&gt;
        &lt;condition negate="true" type="isChangePasswordRequired"/&gt;
        &lt;condition negate="true" type="agreementsAccepted"/&gt;
      &lt;/conditions&gt;
      &lt;pre-functions&gt;
        &lt;function type="setProperty"&gt;
          &lt;arg name="PendingTask"&gt;&amp;ForceAcceptAgreements;&lt;/arg&gt;
        &lt;/function&gt;
      &lt;/pre-functions&gt;
    &lt;/result&gt;
    &lt;result old-status="registered" status="registered" step="450"&gt;
      &lt;conditions type="AND"&gt;
        &lt;condition type="isLocalDomainUser"/&gt;
                 &lt;condition negate="true" type="isChangePasswordRequired"/&gt;
        &lt;condition type="agreementsAccepted"/&gt;
        &lt;condition negate="true" type="securityQuestionsAnswered"/&gt;
        &lt;condition type="isForceChallengeQuestionsAnsweredOnLoginSetup"/&gt;
      &lt;/conditions&gt;
      &lt;pre-functions&gt;
        &lt;function type="setProperty"&gt;
          &lt;arg name="PendingTask"&gt;&amp;CollectSecurityQuestionAnswers;&lt;/arg&gt;
        &lt;/function&gt;
      &lt;/pre-functions&gt;
    &lt;/result&gt;
    &lt;unconditional-result old-status="registered" status="registered" step="450"&gt;
      &lt;pre-functions&gt;
        &lt;function type="setProperty"&gt;
          &lt;arg name="LoginState"&gt;&amp;LoginComplete;&lt;/arg&gt;
        &lt;/function&gt;
        &lt;!--  invoke send Notification on first time login.  --&gt;
        &lt;function type="markLoginComplete"/&gt;
      &lt;/pre-functions&gt;
    &lt;/unconditional-result&gt;
  &lt;/results&gt;
&lt;/action&gt;</pre>
<p><a href="#top">Back to top</a></p>




<div class = "divider1"></div>




<h3 id="related_topics">Related Topics</h3>
<div class="relatedlinks">
<ul>
	<li><a href="01_overview_cm_wf.htm">Custom Workflows in the Developer Portal</a></li>
	<li><a href="02_general.htm">Workflow General Reference: Functions, Conditions, and Variables</a></li>
	<li><a href="03_app_version_wf.htm">App Version Workflow</a></li>
	<li><a href="04_api_version_wf.htm">API Version Workflow</a></li>
	<li><a href="05_api_contract_wf.htm">API Contract Workflow</a></li>
</ul>
<ul>
	<li><a href="06_ticket_wf.htm">Ticket Workflow</a></li>
	<li><a href="07_group_membership_wf.htm">Group Membership Workflow</a></li>
	<li><a href="08_user_wf.htm">User Workflow</a></li>
	<li><a href="09_review_wf.htm">Review Workflow</a></li>
	<li><a href="10_discussions_wf.htm">Discussions Workflow</a></li>
	<li><a href="11_comments_wf.htm">Comments Workflow</a></li>
</ul>
</div>