<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Customizing Workflows in the API Platform</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link href="../../style/reset.css" rel="stylesheet" type="text/css" />
<link href="../../style/base.css" rel="stylesheet" type="text/css" />
<link href="../../style/document.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div class="documentation">
<!-----
layout: page
title: Workflow General Reference | Customizing Workflows in the API Platform
description: A technical reference for creating and maintaining workflow definitions for use with the platform.
product: cm
category: ref
sub-nav-class: Workflows
weight: 02
type: page
nav-title: Workflow General Reference
----->
<h2 id="top">Workflow General Reference: Functions, Conditions, and Variables</h2>
<p>This document serves as a technical reference for creating and maintaining workflow definitions for use with the platform. It includes details about the built-in workflow variables, conditions, and functions for general use with any platform workflow.</p>

<div class = "divider1"></div>


<h3 style="color: gray;">Table of Contents</h3>
<ol class="table_of_contents">
	<li><a href="#s02_01">Functions, Conditions, and Variables</a></li>
	<li><a href="#s02_02">General Use: Functions</a></li>
	<li><a href="#s02_03">General Use: Conditions</a></li>
	<li><a href="#s02_04">General Use: Variable Resolvers</a></li>
</ol>
<div class = "divider1"></div>




<h3 id="s02_01">Functions, Conditions, and Variables</h3>
<p>The functions, conditions, and variables work together and are the building blocks of your custom workflow.</p>
<p>Each workflow type might have specific functions, conditions, and variables that only work within that type of workflow. In addition, there are general conditions that can be used in any CM custom workflow.</p>
<p class="apidoc_note"><strong>Note</strong>: The general use functions, conditions, and variables described in this section are for use with Akana API Platform custom workflows. There is also a set of general use functions, conditions and variables for use specifically with SOA Software Policy Manager workflows. Those are also valid for Akana API Platform workflows. You will see some of them in use in the examples in this document.</p>
<p><a href="#top">Back to top</a></p>



<h3 id="s02_02">General Use: Functions</h3>
<p>Functions are used to add behavior and automation to a workflow.</p>
<p>Below is a generic example of how a function is used in a workflow, and how its arguments are represented:</p>
<pre>
function type=&quot;functionName&quot;&gt;
  &lt;arg name=&quot;argName1&quot;&gt;arg name 1&lt;/arg&gt;
  &lt;arg name=&quot;keyName&quot;&gt;Key name&lt;/arg&gt;
  &lt;arg name=&quot;keyValue&quot;&gt;Key value&lt;/arg&gt;
&lt;/function&gt;</pre>
<p>The following general use functions are available for workflow in the Akana API Platform:</p>
<ul>
	<li><a href="#s02_02_01">setAuthTokenProperty</a></li>
	<li><a href="#s02_02_02">removeAuthTokenProperty</a></li>
	<li><a href="#s02_02_03">markLoginComplete</a></li>
	<li><a href="#s02_02_04">setArgumentValue</a></li>
	<li><a href="#s02_02_05">setCookie</a></li>
	<li><a href="#s02_02_06">removeCookie</a></li>
</ul>
<!--<p>{com.soa.atmosphere.impl\src\com\soa\atmosphere\workflow\AtmosphereWorkflowFunctions.java}</p>-->


<h4 id="s02_02_01">setAuthTokenProperty</h4>
<p>Used to specify a custom property for the auth token cookie.</p>

<h5>Parameters</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Property</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>PropertyName</td>
			<td>The name of a specific property in the auth token cookie.</td>
		</tr>
		<tr>
			<td>PropertyValue</td>
			<td>The value of a specific property in the auth token cookie.</td>
		</tr>
	</tbody>
</table>


<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, the property name <strong>2FAComplete</strong> is set to a value of <strong>Yes</strong>.</p>
<pre>&lt;function type=&quot;setAuthTokenProperty&quot;&gt;
  &lt;arg name=&quot;PropertyName&quot;&gt;2FAComplete&lt;/arg&gt;
  &lt;arg name=&quot;PropertyValue&quot;&gt;Yes&lt;/arg&gt;
&lt;/function&gt;</pre>


<h4 id="s02_02_02">removeAuthTokenProperty</h4>
<p>Used to remove a custom property from the auth token cookie.</p>

<h5>Parameters</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Property</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>PropertyName</td>
			<td>The name of the property.</td>
		</tr>
	</tbody>
</table>


<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, the first function removes the existing property and the second one sets a new property, 2FA Complete, with a value of Yes.</p>
<pre>&lt;function type=&quot;removeAuthTokenProperty&quot;&gt;
  &lt;arg name=&quot;PropertyName&quot;&gt;2FAData&lt;/arg&gt;
&lt;/function&gt;
&lt;function type=&quot;setAuthTokenProperty&quot;&gt;
  &lt;arg name=&quot;PropertyName&quot;&gt;2FAComplete&lt;/arg&gt;
  &lt;arg name=&quot;PropertyValue&quot;&gt;Yes&lt;/arg&gt;
&lt;/function&gt;</pre>


<h4 id="s02_02_03">markLoginComplete</h4>
<p>Marks the user's login action as fully complete, with no pending login tasks. This is used at the end of the default user workflow, after the user has been guided through all tasks relating to login, such as accepting a legal agreement or specifying the answers to security challenge questions.</p>

Parameters
<p>None.</p>

<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, the workflow sets the LoginState to LoginComplete and then runs the markLoginComplete function.</p>
<pre>&lt;unconditional-result old-status=&quot;registered&quot; status=&quot;registered&quot; step=&quot;450&quot;&gt;
  &lt;pre-functions&gt;
    &lt;function type=&quot;setProperty&quot;&gt;
      &lt;arg name=&quot;LoginState&quot;&gt;&amp;LoginComplete;&lt;/arg&gt;
    &lt;/function&gt;
    &lt;!--  invoke send Notification on first time login.  --&gt;
    &lt;function type=&quot;markLoginComplete&quot;/&gt;
  &lt;/pre-functions&gt;
&lt;/unconditional-result&gt;</pre>


<h4 id="s02_02_04">setArgumentValue</h4>
<p>Creates an argument with a specific value. Use this function to make a specific argument available within the workflow execution.</p>

<h5>Parameters</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Property</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>ArgName</td>
			<td>The name of the argument.</td>
		</tr>
		<tr>
			<td>Value</td>
			<td>The value of the argument.</td>
		</tr>
	</tbody>
</table>

<h4 id="s02_02_05">setCookie</h4>
<p>Sets a cookie with a specific name, value, and expiration date/time.</p>

<h5>Parameters</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Property</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>CookieName</td>
			<td>The name of the cookie.</td>
		</tr>
		<tr>
			<td>CookieValue</td>
			<td>The value of the cookie.</td>
		</tr>
		<tr>
			<td>CookieExpirationTimeMillis</td>
			<td>The expiration time of the cookie, in milliseconds. If not defined, the default is 1500000 (25 minutes).</td>
		</tr>
	</tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<p>The example below sets the value and expiration time of the D cookie.</p>
<pre>&lt;function type=&quot;setCookie&quot;&gt;
  &lt;arg name=&quot;CookieName&quot;&gt;D&lt;/arg&gt;
  &lt;arg name=&quot;CookieValue&quot;&gt;akana api platform&lt;/arg&gt;
  &lt;arg name=&quot;CookieExpirationTimeMillis&quot;&gt;31556952000&lt;/arg&gt;
&lt;/function&gt;</pre>


<h4 id="s02_02_06">removeCookie</h4>
<p>Removes the specified cookie.</p>

<h5>Parameters</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Property</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>CookieName</td>
			<td>The name of the cookie.</td>
		</tr>
	</tbody>
</table>
<p><a href="#top">Back to top</a></p>



<h3 id="s02_03">General Use: Conditions</h3>
<p>Conditions allow you to:</p>
Select the result of an action
Restrict the availability of an action by:
Restricting actions: to restrict when an action can be seen or performed.
Restricting access: to control service and contract access.
<p>Workflow uses conditions as logical expressions. Conditional functions can take arguments:</p>
<pre>&lt;arg&gt;. . .&lt;/arg&gt;</pre>
<p>For example, the workflow snippet below restricts the workflow action to a specific role. The role specified in the argument is AppAdmin. One or more roles can be specified.</p>
<pre>&lt;restrict-to&gt;
  &lt;conditions type=&quot;AND&quot;&gt;
    &lt;condition type=&quot;authorizeByAtmosphereRole&quot;&gt;
      &lt;arg name=&quot;role&quot;&gt;AppAdmin&lt;/arg&gt;
    &lt;/condition&gt;
  &lt;/conditions&gt;
&lt;/restrict-to&gt;</pre>
<p>Some additional points to note about conditions and how you can use them in custom workflows:</p>
<ul>
	<li>Conditions can also include nested conditions. You can use a structure of nested conditions to form a complex logical expression.</li>
	<li> You can code a logical NOT as a negative condition: <span class="apidoc_code">&lt;condition ... negate=&quot;TRUE&quot;&gt;</span>.</li>
</ul>
<p>The following general use conditions are available in developing all types of custom workflows on the platform:</p>
<ul>
	<li><a href="#s02_03_01">authorizeByAtmosphereRole</a></li>
	<li><a href="#s02_03_02">authorizeByAtmosphereAction</a></li>
	<li><a href="#s02_03_03">authorizeByDomain</a></li>
	<li><a href="#s02_03_04">authorizeByDomainType</a></li>
	<li><a href="#s02_03_05">authorizeByEmail</a></li>
	<li><a href="#s02_03_06">authorizeByGroupName</a></li>
	<li><a href="#s02_03_07">authTokenPropertyExists</a></li>
	<li><a href="#s02_03_08">authTokenPropertyMatches</a></li>
	<li><a href="#s02_03_09">argumentExists</a></li>
	<li><a href="#s02_03_10">argumentValueEquals</a></li>
	<li><a href="#s02_03_11">argumentValueMatches</a></li>
	<li><a href="#s02_03_12">isSessionInLoginProcess</a></li>
	<li><a href="#s02_03_13">cookieExists</a></li>
	<li><a href="#s02_03_14">cookieValueEquals</a></li>
	<li><a href="#s02_03_15">cookieValueMatches</a></li>
	<li><a href="#s02_03_16">actionCommentMatchesRegEx</a></li>
	<li><a href="#s02_03_17">actionCommentExists</a></li>
</ul>
<!--<p>{com.soa.atmosphere.impl\src\com\soa\atmosphere\workflow\AtmosphereWorkflowConditions.java}</p>-->


<h4 id="s02_03_01">authorizeByAtmosphereRole</h4>
<p>Tests to see if the workflow user has been assigned one or more specified roles in the platform, and is therefore authorized to perform the workflow action; returns Boolean true or false.</p>

<h5>Arguments</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>Role</td>
			<td><p>One or more roles that are authorized to perform the function. Valid values:</p>
				<ul>
					<li>ApiAdmin</li>
					<li>ApiInvitedUser</li>
					<li>AppAdmin</li>
					<li>SiteAdmin</li>
					<li>BusinessAdmin</li>
					<li>Admin (administrator of context object: applies to App, App version, API, API version, and Group)</li>
				</ul></td>
		</tr>
	</tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, the function clones all the contracts a specific app has with APIs, from the Sandbox environment to the <!-- #BeginLibraryItem "/Library/environ_live.lbi" -->Live<!-- #EndLibraryItem --> environment. The <span class="apidoc_code">&lt;condition&gt;</span> tag uses the <strong>authorizeByAtmosphereRole</strong> condition to specify that the user attempting to perform this action must be an App Admin (a member of the app team).</p>
<pre>&lt;action id=&quot;210&quot; name=&quot;Submit For Review&quot;&gt;
  &lt;restrict-to&gt;
    &lt;conditions type=&quot;AND&quot;&gt;
      &lt;condition type=&quot;authorizeByAtmosphereRole&quot;&gt;
        &lt;arg name=&quot;role&quot;&gt;AppAdmin&lt;/arg&gt;
      &lt;/condition&gt;
    &lt;/conditions&gt;
  &lt;/restrict-to&gt;
  &lt;pre-functions&gt;
    &lt;function type=&quot;cloneAllAPIContracts&quot;&gt;
      &lt;arg name=&quot;EnvFrom&quot;&gt;Sandbox&lt;/arg&gt;
      &lt;arg name=&quot;EnvTo&quot;&gt;Production&lt;/arg&gt;
    &lt;/function&gt;
  &lt;/pre-functions&gt;
  &lt;results&gt;
    &lt;unconditional-result old-status=&quot;Sandbox&quot; status=&quot;Review&quot; step=&quot;300&quot; owner=&quot;${caller}&quot; /&gt;
  &lt;/results&gt;
&lt;/action&gt;</pre>
<!--<p>{Appversion-workflow.xml}</p>-->


<h4 id="s02_03_02">authorizeByAtmosphereAction</h4>
<p>Tests to see if the workflow user has permission to perform a specific action on a specific type of resource.</p>

<h5>Arguments</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>Action</td>
			<td><p>The specific action. Valid values:</p>
				<ul>
					<li>Add</li>
				</ul></td>
		</tr>
		<tr>
			<td>ResourceType</td>
			<td><p>The specific resource. Valid values:</p>
				<ul>
					<li>app</li>
					<li>api</li>
					<li>group</li>
				</ul></td>
		</tr>
	</tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, the workflow tests that the current user has permission to add an API. If the user does not meet the condition, the action is not allowed.</p>
<pre>&lt;action id=&quot;409&quot; name=&quot;@AddAPI&quot;&gt;
  &lt;restrict-to&gt;
    &lt;conditions type=&quot;AND&quot;&gt;
      &lt;condition type=&quot;authorizeByAtmosphereAction&quot;&gt;
        &lt;arg name=&quot;Action&quot;&gt;Add&lt;/arg&gt;
      &lt;arg name=&quot;ResourceType&quot;&gt;api&lt;/arg&gt;
      &lt;/condition&gt;
    &lt;/conditions&gt;
  &lt;/restrict-to&gt;</pre>


<h4 id="s02_03_03">authorizeByDomain</h4>
<p>Tests to see if the domain of the workflow user matches one of the domains specified, and the user is therefore authorized to perform the workflow action; if so, returns <strong>true</strong>.</p>
<p>This can be used as a security measure. For example, actions can be limited to one specific domain for security purposes.</p>

<h5>Arguments</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>domain</td>
			<td><p>One or more domains that authorization is restricted to.</p>
<p>To include multiple values, you can either include multiple <span class="apidoc_code">&lt;domain&gt;</span> arguments or list multiple domains on one line, separated by commas.</p>
<p><strong>Note</strong>: the value for this parameter should be the domain name used in Policy Manager for the applicable identity system. For Policy Manager, use Local <strong>Domain</strong> as the value.</p></td>
		</tr>
	</tbody>
</table>


<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, this condition specifies that an action is valid only for users on the platform's domain, acmepaymentscorp.</p>
<pre>&lt;condition type=&quot;authorizeByDomain&quot;&gt;
  &lt;arg name=&quot;domain&quot;&gt;acmepaymentscorp&lt;/arg&gt;
&lt;/condition&gt;</pre>


<h4 id="s02_03_04">authorizeByDomainType</h4>
<p>Tests to see if the domain type of the workflow user matches one or more specified values. If so, returns <strong>true</strong>.</p>
<p>This can be used as a security measure to limit platform actions to a specific set of authorized users. For example, a workflow action can be limited to one specific domain type, such as an LDAP domain, for security purposes.</p>

<h5>Arguments</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>DomainType</td>
			<td><p>One or more domain types (Identity System type in Policy Manager, Domain Type in the developer portal), that the action is restricted to.</p>
<p>To include multiple values, you can either include multiple <span class="apidoc_code">&lt;DomainType&gt;</span> arguments or list multiple domain types on one line, separated by commas.</p>
<p>Valid values:</p>
<ul>
	<li>Directory Server (domain type for LDAP)</li>
	<li>CA SiteMinder (domain type for a CA SiteMinder domain)</li>
	<li>com.soa.securitydomain.pingfederate.provider (PingFederate domain)</li>
	<li>com.soa.securitydomain.fb.connector (Facebook Connector domain)</li>
	<li>com.soa.securitydomain.openidconnect.relyingparty (OpenID Connect Relying Party domain)</li>
	<li>com.soa.securitydomain.oauth.provider (OAuth Provider domain; not an identity store domain, but supports OAuth/OpenID for other domain users)</li>
	<li>com.soa.securitydomain.google.connector (Google Connector domain)</li>
	<li>SAML Web Browser SSO (SAML Web SSO SP domain)</li>
</ul>      </td>
		</tr>
	</tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, this condition specifies that only users on a directory server (LDAP) domain can perform the action.</p>
<pre>&lt;condition type=&quot;authorizeByDomainType&quot;&gt;
  &lt;arg name=&quot;DomainType&quot;&gt;Directory Server&lt;/arg&gt;
&lt;/condition&gt;</pre>


<h4 id="s02_03_05">authorizeByEmail</h4>
<p>Tests to see if the email address of the workflow user matches one or more specified values; returns Boolean true or false.</p>
<p>This can be used as a security measure to limit platform actions to a specific set of authorized users. For example, actions can be limited to one specific email domain for security purposes.</p>

<h5>Arguments</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>email</td>
			<td><p>One or more specific email address patterns.</p>
<p>To include multiple values, you can either include multiple <span class="apidoc_code">&lt;email&gt;</span> arguments or list multiple values on one line, separated by commas.</p></td>
		</tr>
	</tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, this condition specifies that only users with email addresses on the platform's domain, acmepaymentscorp.com, can perform the action.</p>
<pre>&lt;condition type=&quot;authorizeByEmail&quot;&gt;
  &lt;arg name=&quot;email&quot;&gt;.*@acmepaymentscorp.com&lt;/arg&gt;
&lt;/condition&gt;</pre>


<h4 id="s02_03_06">authorizeByGroupName</h4>
<p>Tests to see if the workflow user is a member of one or more specified platform groups; returns Boolean true or false.</p>

<h5>Arguments</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>Domain</td>
			<td><p>Optional: one or more domains that authorization is restricted to.</p>
<p>Only needed if the group is not a group on the developer portal; for example, a Policy Manager group. Defaults to developer portal groups.</p>
<p>To include multiple values, you can either include multiple <span class="apidoc_code">&lt;domain&gt;</span> arguments or list multiple domains on one line, separated by commas.</p>
<p><strong>Note</strong>: the value for this parameter should be the domain name used in Policy Manager for the applicable identity system. For Policy Manager groups, use <strong>Local Domain</strong> as the value.</p></td>
		</tr>
		<tr>
			<td>group</td>
			<td><p>One or more platform groups that authorization is restricted to. By default, a group name is interpreted to mean a platform group.</p>
<p>To include multiple values, you can either include multiple <span class="apidoc_code">&lt;group&gt;</span> arguments or list multiple groups on one line, separated by commas.</p></td>
		</tr>
	</tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<p>Example 1: One condition</p>
<p>In the example below, this condition checks that the logged-in user is a member of the EngineeringGroup group on the ldap domain. If the user does not meet the condition, the workflow action the condition is associated with is not allowed.</p>
<pre>&lt;condition type=&quot;authorizeByGroupName&quot;&gt;
  &lt;arg name=&quot;group&quot;&gt;EngineeringGroup&lt;/arg&gt;
  &lt;arg name=&quot;domain&quot;&gt;ldap&lt;/arg&gt;
&lt;/condition&gt;</pre>
<p>Example 2: Multiple conditions</p>
<p>In the example below, this condition specifies that in order to perform the workflow action, users must meet any one of the following sets of conditions:</p>
<ul>
	<li>Be a member of one of these two developer portal groups: CM_Group1 or CM_Group2</li>
	<li>Be a member of one of these two Policy Manager groups on the local domain: PM_Group1 or PM_Group2</li>
	<li>Be a member of one of these two groups on the LDAP domain: LDAP_Group1 or LDAP_Group2</li>
</ul>
<pre>&lt;restrict-to&gt;
  &lt;conditions type=&quot;OR&quot;&gt;
    &lt;condition type=&quot;authorizeByGroupName&quot;&gt;
      &lt;arg name=&quot;group&quot;&gt;CM_Group1, CM_Group2&lt;/arg&gt;
    &lt;/condition&gt;
    &lt;condition type=&quot;authorizeByGroupName&quot;&gt;
      &lt;arg name=&quot;group&quot;&gt;PM_Group1,PM_Group2&lt;/arg&gt; 
      &lt;arg name=&quot;domain&quot;&gt;Local Domain&lt;/arg&gt;
    &lt;/condition&gt;
            &lt;condition type=&quot;authorizeByGroupName&quot;&gt;
      &lt;arg name=&quot;group&quot;&gt;LDAP_Group1,LDAP_Group2&lt;/arg&gt;
      &lt;arg name=&quot;domain&quot;&gt;ldap&lt;/arg&gt;
    &lt;/condition&gt;
  &lt;/conditions&gt;
&lt;/restrict-to&gt;</pre>


<h4 id="s02_03_07">authTokenPropertyExists</h4>
<p>Checks to see if the specified property exists in the user's auth token cookie. Returns <strong>true</strong> if found.</p>

<h5>Arguments</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>PropertyName</td>
			<td>The name of the auth token property being checked.</td>
		</tr>
		<tr>
			<td>Message</td>
			<td>A custom message designed by custom code or hardcoded into the workflow itself.</td>
		</tr>
	</tbody>
</table>


<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, two conditions are checked: first, is the session in login process (applicable when two-factor authentication is in effect and the user has already provided login credentials), and then, if the specific auth token property, 2FAData, is there.</p>
<pre>&lt;conditions type=&quot;AND&quot;&gt;
  &lt;condition type=&quot;isSessionInLoginProcess&quot;/&gt;
  &lt;condition type=&quot;authTokenPropertyExists&quot;&gt;
    &lt;arg name=&quot;PropertyName&quot;&gt;2FAData&lt;/arg&gt;
    &lt;arg name=&quot;message&quot;&gt;2FA not initiated&lt;/arg&gt;
  &lt;/condition&gt;</pre>


<h4 id="s02_03_08">authTokenPropertyMatches</h4>
<p>Checks to see if the specified property in the user's auth token cookie matches the specified value. Returns <strong>true</strong> if so.</p>

<h5>Arguments</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>PropertyName</td>
			<td>The name of the auth token property.</td>
		</tr>
		<tr>
			<td>PropertyValue</td>
			<td>The value of the auth token property being checked.</td>
		</tr>
	</tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, the workflow checks if the auth token property is set to 2FAComplete indicating that the two-factor authentication process has completed successfully.</p>
<pre>&lt;condition negate=&quot;true&quot; type=&quot;authTokenPropertyMatches&quot;&gt;
  &lt;arg name=&quot;PropertyName&quot;&gt;2FAComplete&lt;/arg&gt;
  &lt;arg name=&quot;PropertyValue&quot;&gt;Yes&lt;/arg&gt;
&lt;/condition&gt;</pre>


<h4 id="s02_03_09">argumentExists</h4>
<p>Checks to see if the specified argument exists. Returns <strong>true</strong> if so.</p>

<h5>Arguments</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>ArgName</td>
			<td>The name of the argument.</td>
		</tr>
		<tr>
			<td>Message</td>
			<td>A message to be generated if the argument exists.</td>
		</tr>
	</tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, the custom workflow checks to see if a specific argument exists and, if it does, generates a specific message. The workflow then checks for a different argument and generates a message for that.</p>
<pre>&lt;action id=&quot;499&quot; name=&quot;@ResolveLoginPendingTask&quot;&gt;
  &lt;restrict-to&gt;
    &lt;conditions type=&quot;AND&quot;&gt;
      &lt;condition type=&quot;isSessionInLoginProcess&quot;/&gt;
      &lt;condition type=&quot;authTokenPropertyExists&quot;&gt;
        &lt;arg name=&quot;PropertyName&quot;&gt;2FAData&lt;/arg&gt;
        &lt;arg name=&quot;message&quot;&gt;2FA not initiated&lt;/arg&gt;
      &lt;/condition&gt;
      &lt;condition negate=&quot;true&quot; type=&quot;authTokenPropertyMatches&quot;&gt;
          &lt;arg name=&quot;PropertyName&quot;&gt;2FAComplete&lt;/arg&gt;
          &lt;arg name=&quot;PropertyValue&quot;&gt;Yes&lt;/arg&gt;
      &lt;/condition&gt;
      &lt;condition type=&quot;argumentExists&quot;&gt;
        &lt;arg name=&quot;ArgName&quot;&gt;Action&lt;/arg&gt;
        &lt;arg name=&quot;message&quot;&gt;Action is required&lt;/arg&gt;
      &lt;/condition&gt;
      &lt;condition type=&quot;argumentExists&quot;&gt;
        &lt;arg name=&quot;ArgName&quot;&gt;task.id&lt;/arg&gt;
        &lt;arg name=&quot;message&quot;&gt;Task id is required&lt;/arg&gt;
      &lt;/condition&gt;
    &lt;/conditions&gt;
  &lt;/restrict-to&gt;</pre>


<h4 id="s02_03_10">argumentValueEquals</h4>
<p>Checks to see if a specific argument has a specific value. Further actions can then be taken based on the results.</p>

<h5>Arguments</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>ArgName</td>
			<td>The name of the argument.</td>
		</tr>
		<tr>
			<td>Value</td>
			<td>The value of the argument.</td>
		</tr>
	</tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, the argumentValueEquals condition is used to check if the value for Action is regenerate. If so (later part of the workflow not shown), the 2FA code is regenerated.</p>
<pre>&lt;conditions type=&quot;AND&quot;&gt;
  &lt;condition type=&quot;argumentValueEquals&quot;&gt;
    &lt;arg name=&quot;ArgName&quot;&gt;Action&lt;/arg&gt;
    &lt;arg name=&quot;Value&quot;&gt;regenerate&lt;/arg&gt;
  &lt;/condition&gt;</pre>


<h4 id="s02_03_11">argumentValueMatches</h4>
<p>Checks to see if a specific argument matches the specified regular expression. Further actions can then be taken based on the results.</p>

<h5>Arguments</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Property</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>ArgName</td>
			<td>The name of the argument.</td>
		</tr>
		<tr>
			<td>RegEx</td>
			<td>The regular expression.</td>
		</tr>
	</tbody>
</table>

<h4 id="s02_03_12">isSessionInLoginProcess</h4>
<p>Checks that the session is not in a LoginComplete state; if the session is still in the login process, indicating that login is not complete, returns <strong>true</strong>.</p>
<h5>Parameters </h5>
<p>None.</p>

<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, the workflow action is restricted to the conditions specified. The first condition is to check that the session is in the login process. If this condition is not met, the step is not continued.</p>
<pre>&lt;action id=&quot;449&quot; name=&quot;@ResolveLoginPendingTask&quot;&gt;
  &lt;restrict-to&gt;
    &lt;conditions type=&quot;AND&quot;&gt;
      &lt;condition type=&quot;isSessionInLoginProcess&quot;/&gt;
      &lt;condition type=&quot;authTokenPropertyExists&quot;&gt;
        &lt;arg name=&quot;PropertyName&quot;&gt;2FAData&lt;/arg&gt;
        &lt;arg name=&quot;message&quot;&gt;2FA not initiated&lt;/arg&gt;
      &lt;/condition&gt;
      &lt;condition negate=&quot;true&quot; type=&quot;authTokenPropertyMatches&quot;&gt;
          &lt;arg name=&quot;PropertyName&quot;&gt;2FAComplete&lt;/arg&gt;
          &lt;arg name=&quot;PropertyValue&quot;&gt;Yes&lt;/arg&gt;
      &lt;/condition&gt;</pre>


<h4 id="s02_03_13">cookieExists</h4>
<p>Checks whether the specified cookie exists. Returns <strong>true</strong> if so.</p>

<h5>Arguments</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Property</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>CookieName</td>
			<td>The name of the cookie.</td>
		</tr>
	</tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, the workflow action is restricted to the conditions specified. The first condition is to check that the cookie does not exist (negate-true on cookieExists). If the cookie does exist, the step is not continued.</p>
<pre>&lt;action id=&quot;401&quot; name=&quot;@Login&quot;&gt;
  &lt;results&gt;
    &lt;result old-status=&quot;registered&quot; status=&quot;registered&quot; step=&quot;400&quot;&gt;
      &lt;conditions type=&quot;AND&quot;&gt;
        &lt;condition negate=&quot;true&quot; type=&quot;cookieExists&quot;&gt;
            &lt;arg name=&quot;CookieName&quot;&gt;D&lt;/arg&gt;
        &lt;/condition&gt;
        &lt;condition negate=&quot;true&quot; type=&quot;authTokenPropertyMatches&quot;&gt;
            &lt;arg name=&quot;PropertyName&quot;&gt;2FAComplete&lt;/arg&gt;
            &lt;arg name=&quot;PropertyValue&quot;&gt;Yes&lt;/arg&gt;
        &lt;/condition&gt;
        &lt;condition negate=&quot;true&quot; type=&quot;authTokenPropertyMatches&quot;&gt;
            &lt;arg name=&quot;PropertyName&quot;&gt;2FASkipped&lt;/arg&gt;
            &lt;arg name=&quot;PropertyValue&quot;&gt;Yes&lt;/arg&gt;
        &lt;/condition&gt;
        &lt;condition negate=&quot;true&quot; type=&quot;authTokenPropertyExists&quot;&gt;
            &lt;arg name=&quot;PropertyName&quot;&gt;2FAData&lt;/arg&gt;
        &lt;/condition&gt;
      &lt;/conditions&gt;</pre>


<h4 id="s02_03_14">cookieValueEquals</h4>
<p>Checks to see if the user's cookie equals the specified value. Returns <strong>true</strong> if so.</p>

<h5>Arguments</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Property</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>CookieName</td>
			<td>The name of the cookie.</td>
		</tr>
		<tr>
			<td>CookieValue</td>
			<td>The value of the cookie.</td>
		</tr>
	</tbody>
</table>

<h4 id="s02_03_15">cookieValueMatches</h4>
<p>Checks to see if the user's cookie matches the specified regular expression. Returns <strong>true</strong> if so.</p>

<h5>Arguments</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Property</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>CookieName</td>
			<td>The name of the cookie.</td>
		</tr>
		<tr>
			<td>Expression</td>
			<td>The regular expression</td>
		</tr>
	</tbody>
</table>

<h4 id="s02_03_16">actionCommentMatchesRegEx</h4>
<p>Checks to see that the comment that's entered when a workflow action is performed matches the specified regular expression. Returns <strong>true</strong> if so. If it doesn't match, this condition returns false, and the user is given a message that can prompt the user to enter a valid comment.</p>
<p>When checking for valid actions, when the comment doesn't exist, this condition returns <strong>true</strong>. However, when performing the action, when the comment exists and doesn't follow the proper format, the condition returns false and returns the specified message.</p>

<h5>Parameters</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Property</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>RegEx</td>
			<td>The regular expression that the comment is tested against for a match.</td>
		</tr>
		<tr>
			<td>FailedMatchMessage</td>
			<td>The message that will be returned if the comment that's entered when a workflow action is performed doesn't match the specified regular expression.</td>
		</tr>
	</tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, the actionCommentMatchesRegEx condition is used to ensure that when performing a workflow action, the user enters a specific comment that includes the Support Ticket information (RegEx argument). If no comment is entered, the message specified in the FailedMatchMessage argument is displayed to the user.</p>
<pre>&lt;conditions type=&quot;AND&quot;&gt;
  &lt;condition type=&quot;actionCommentExists&quot;&gt;
    &lt;arg name=&quot;CommentMissingMessage&quot;&gt;Comment needed with Support Ticket ID&lt;/arg&gt;
  &lt;/condition&gt;
  &lt;condition type=&quot;actionCommentMatchesRegEx&quot;&gt;
    &lt;arg name=&quot;RegEx&quot;&gt;.*Support Ticket*&lt;/arg&gt;
    &lt;arg name=&quot;FailedMatchMessage&quot;&gt;Comment does not include Support Ticket ID&lt;/arg&gt;
  &lt;/condition&gt;
&lt;/conditions&gt;</pre>


<h4 id="s02_03_17">actionCommentExists</h4>
<p>Checks to see that a comment was entered when a workflow action is performed. Returns <strong>true</strong> if so.</p>

<h5>Parameters</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Property</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>CommentMissingMessage</td>
			<td>The message that will be returned if a comment is <strong>not</strong> entered when a workflow action is performed.</td>
		</tr>
	</tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<pre>&lt;conditions type=&quot;AND&quot;&gt;
  &lt;condition type=&quot;actionCommentExists&quot;&gt;
    &lt;arg name=&quot;CommentMissingMessage&quot;&gt;Comment needed with Support Ticket ID&lt;/arg&gt;
  &lt;/condition&gt;
  &lt;condition type=&quot;actionCommentMatchesRegEx&quot;&gt;
    &lt;arg name=&quot;RegEx&quot;&gt;.*KYC.*&lt;/arg&gt;
    &lt;arg name=&quot;FailedMatchMessage&quot;&gt;Comment does not include Support Ticket ID&lt;/arg&gt;
  &lt;/condition&gt;
&lt;/conditions&gt;</pre>
<p><a href="#top">Back to top</a></p>



<h3 id="s02_04">General Use: Variable Resolvers</h3>
<p>The following variable resolvers are available for all workflows in the Akana API Platform:</p>
<ul>
	<li><a href="#s02_04_01">${workflow.step.name}</a></li>
	<li><a href="#s02_04_02">${workflow.step.id}</a></li>
</ul>


<h4 id="s02_04_01">${workflow.step.name}</h4>
<p>The name for a specific workflow step, as a string in the format =${workflow.step.name}. Allows the workflow to dynamically reference another workflow step, by step name, as shown in the example below.</p>
<pre>&lt;result old-status=&quot;${workflow.step.name}&quot; status=&quot;${workflow.step.name}&quot; step=&quot;-1&quot;&gt;
  &lt;conditions type=&quot;AND&quot;&gt;
    &lt;condition type=&quot;isLastLoginEmpty&quot;/&gt;
    &lt;condition type=&quot;class&quot;&gt;
      &lt;arg name=&quot;class.name&quot;&gt;com.opensymphony.workflow.util.StatusCondition&lt;/arg&gt;
      &lt;arg name=&quot;status&quot;&gt;managed&lt;/arg&gt;
    &lt;/condition&gt;
  &lt;/conditions&gt;
  &lt;post-functions&gt;
    &lt;function type=&quot;markUserPermanent&quot;/&gt;
    &lt;function type=&quot;addBoardItem&quot;&gt;
      &lt;arg name=&quot;boardItemTemplateId&quot;&gt;com.soa.board.item.user.logged.in.first.time&lt;/arg&gt;
      &lt;arg name=&quot;visibility&quot;&gt;Limited&lt;/arg&gt;
      &lt;arg name=&quot;type&quot;&gt;Discussion&lt;/arg&gt;
      &lt;arg name=&quot;author&quot;&gt;${site.admin.dn}&lt;/arg&gt;
      &lt;arg name=&quot;targetBoard.apiversion&quot;&gt;${connected.apiversion.ids}&lt;/arg&gt;
      &lt;arg name=&quot;targetBoard.api&quot;&gt;${connected.apis.id}&lt;/arg&gt;
      &lt;arg name=&quot;viewers&quot;&gt;${connected.apis.id},${business.dn},${site.admin.dn}&lt;/arg&gt;
    &lt;/function&gt;
    &lt;function type=&quot;sendNotification&quot;&gt;
      &lt;arg name=&quot;role&quot;&gt;ApiAdmins,SiteAdmin,BusinessAdmin&lt;/arg&gt;
      &lt;arg name=&quot;notificationType&quot;&gt;com.soa.notification.type.user.logged.in.first.time&lt;/arg&gt;
    &lt;/function&gt;
    &lt;function type=&quot;markLoginComplete&quot;/&gt;
  &lt;/post-functions&gt;
&lt;/result&gt;</pre>


<h4 id="s02_04_02">${workflow.step.id}</h4>
<p>The name for a specific workflow step, as a string in the format =${workflow.step.id}. Allows the workflow to dynamically reference another workflow step, by step ID.</p>
<p><a href="#top">Back to top</a></p>




<div class = "divider1"></div>




<h3 id="related_topics">Related Topics</h3>
<div class="relatedlinks" id="cm_workflow">
<ul>
	<li><a href="01_overview_cm_wf.htm">Custom Workflows in the Developer Portal</a></li>
	<li><a href="02_general.htm">Workflow General Reference: Functions, Conditions, and Variables</a></li>
	<li><a href="03_app_version_wf.htm">App Version Workflow</a></li>
	<li><a href="04_api_version_wf.htm">API Version Workflow</a></li>
	<li><a href="05_api_contract_wf.htm">API Contract Workflow</a></li>
	<li><a href="06_ticket_wf.htm">Ticket Workflow</a></li>
</ul>
<ul>
	<li><a href="07_group_membership_wf.htm">Group Membership Workflow</a></li>
	<li><a href="08_user_wf.htm">User Workflow</a></li>
	<li><a href="09_review_wf.htm">Review Workflow</a></li>
	<li><a href="10_discussions_wf.htm">Discussions Workflow</a></li>
	<li><a href="11_comments_wf.htm">Comments Workflow</a></li>
</ul>
</div>




</div>
</body>
</html>