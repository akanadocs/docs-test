---
layout: page
title: Custom Workflows in the Developer Portal | Customizing Workflows in the API Platform
description: Information about using custom workflows in the Akana developer portal.
product: cm
category: ref
sub-nav-class: Workflows
weight: 01
type: page
nav-title: Custom Workflows in the Developer Portal
---
<h2 id="top">Custom Workflows in the Developer Portal</h2>
<p>This document provides information about using custom workflows in the Akana developer portal.</p>


<div class = "divider1"></div>


<h3 style="color: gray;">Table of Contents</h3>
<ol class="table_of_contents">
  <li><a href="#01_01_overview">Overview</a></li>
  <li><a href="#01_02_examples">Examples of custom workflow usage</a></li>
  <li><a href="#01_03_using">Using Custom Workflows: Overview</a></li>
  <li><a href="#01_04_resources">Resources with Customizable Workflow</a></li>
  <li><a href="#01_05_steps">Steps for Implementing a Custom Workflow</a></li>
  <li><a href="#01_06_uploading">Uploading a New Custom Workflow</a></li>
  <li><a href="#01_07_testing">Testing a New Custom Workflow</a></li>
  <li><a href="#01_08_implementing">Implementing a New Custom Workflow</a></li>
  <li><a href="#01_09_updating">Updating User Documentation</a></li>
  <li><a href="#01_10_wf_xml">The Workflow Definition XML File</a></li>
  <li><a href="#01_11_ia">Workflow Initial Actions</a></li>
  <li><a href="#01_12_ra">Workflow Reserved Actions</a></li>
  <li><a href="#01_13_steps_actions">Workflow Steps and Actions</a></li>
  <li><a href="#01_14_developing">Developing a Custom Workflow: Steps to Consider</a></li>
</ol>
<div class = "divider1"></div>



<a name="01_01_overview"></a><h3>Overview</h3>
<p>Workflow defines the sequence of steps that are followed in a business process, through initial actions that trigger the workflow, to additional actions that change the state of the resource, from beginning to end. Major components include conditions (for example, a ticket must be resolved before it can be closed, or, an action can only be completed by a Site Admin) and state (for example, a ticket can have states of Open, Resolved, and Closed).</p>
<p>Defining the workflow for a resource gives you control over the process and allows you to monitor and customize as needed to streamline the business process.</p>
<p>The Akana API Platform allows you to customize the workflow for several key resources, such as API contracts. It also includes examples of custom workflows for some resources.</p>
<p>This document provides information about the resources that follow default workflows, the resources for which you can define custom workflows, and the process you'll need to follow to design, create, test, and implement a custom workflow.</p>
<p>It includes the following main sections:</p>
<ul>
  <li><a href="#01_03_using">Using Custom Workflows: Overview</a>&#8212;the workflows you can customize, how to get started, and how to implement a custom workflow on the platform.</li>
  <li><a href="02_general.htm">Workflow General Reference: Functions, Conditions, and Variables</a>&#8212;the technical details about components that are common to all workflows for the developer portal.</li>
  <li>Individual chapters with specific information about the functions, conditions, and variables relating to workflow for a specific resource, such as app version, contract, or discussion.</li>
</ul>
<p class="apidoc_note"><strong>Note</strong>: The Akana API Platform uses OSWorkflow v2.8.0 from OpenSymphony. OSWorkflow is an open-source workflow engine written in Java.</p>
<p><a href="#top">Back to top</a></p>



<a name="01_02_examples"></a><h3>Examples of custom workflow usage</h3>
<p>This section includes just a few examples of how you could use workflow definitions to customize process flow in the Akana API Platform:</p>
<ul>
  <li>You could build a workflow that customizes the platform's Export functionality so that at the click of a button an authorized user could export platform data to a designated folder, to be picked up by a corresponding Import function in a custom workflow in another build. You could then use this custom workflow feature to automate the transfer of data from a development environment to a QA environment.</li>
  <li><strong>Tickets</strong>: You could customize the ticket workflow so that each new ticket for your API in the platform automatically triggers an email to create a ticket in your own internal trouble ticketing system.</li>
  <li><strong>Contracts</strong>: You might implement a custom workflow so that an app cannot have an active contract in the production environment with one API until it's ready to run in the production environment with all the APIs it's using. Note that you would also need to update the site documentation.</li>
  <li><strong>APIs</strong>: You could use a reserved action to determine that when an API is deleted, all existing contracts relating to that API are deleted and a notification is sent out to all users affected by the change.</li>
  <li><strong>Apps</strong>: If an app is deleted, you could use a reserved action to determine what happens to API contracts associated with the app.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<a name="01_03_using"></a><h3>Using Custom Workflows: Overview</h3>
<p>The ability to customize the platform default workflow for resources gives you great flexibility.</p>
<p>By developing a custom workflow, you can control how resources behave in the system as a result of certain actions.</p>
<p>The basic building blocks of workflow are:</p>
<ul>
  <li><strong>Actions</strong>. An <strong>action</strong> element changes a resource from one state to another by accomplishing some activity on the resource. An action element indicates what is happening to the resource. There are two main scenarios:
<ul>
  <li>In some cases, the action can extend the default behavior in the platform. For example, you could set up the group membership workflow so that if a group is deleted all members receive a notification.</li>
  <li>In other cases, a workflow action can replace the default behavior. For example, in the app version workflow, you could redefine the steps that are taken when the <strong>@delete</strong> action occurs, so that an administrator must approve the deletion. As another example, you could set up the workflow so that when the app certificate is modified (<strong>@KeyInfoSaved</strong> action), a notification is sent.</li>
</ul></li>
  <li><strong>Steps</strong>: A <strong>step</strong> element indicates the state of a resource and defines the actions that are valid when a resource is in that state.</li>
  <li><strong>Conditions</strong>: A workflow action can be restricted by the results of one or more <strong>condition</strong> elements. The condition element determines whether or not the action is valid. For example, a condition might test that the user attempting to perform the action has a valid role and is therefore authorized to perform the action.</li>
  <li><strong>Functions</strong>: A <strong>function</strong> element acts on the resource and changes it in some way; for example, the <strong>deleteReview</strong> function deletes a review, ending the workflow for that review. The function might have arguments. In a workflow step, functions can be either of the below:
<ul>
  <li><strong>Pre-functions</strong>: The pre-functions element indicates that the function is executed before entering the step or action.</li>
  <li><strong>Post-functions</strong>: the function is executed after leaving the step or action.</li>
</ul></li>
</ul>
<p><a href="#top">Back to top</a></p>



<a name="01_04_resources"></a><h3>Resources with Customizable Workflow</h3>
<p>The platform supports implementation of custom workflows for the following types of resources:</p>
<ul>
  <li>App: see <a href="03_app_version_wf.htm">App Version Workflow</a></li>
  <li>API: see <a href="04_api_version_wf.htm">API Version Workflow</a></li>
  <li>API Contract: see <a href="05_api_contract_wf.htm">API Contract Workflow</a></li>
  <li>Ticket: see <a href="06_ticket_wf.htm">Ticket Workflow</a></li>
  <li>Group Membership: see <a href="07_group_membership_wf.htm">Group Membership Workflow</a></li>
  <li>User: see <a href="08_user_wf.htm">User Workflow</a></li>
  <li>Reviews: see <a href="09_review_wf.htm">Review Workflow</a></li>
  <li>Discussions: see <a href="10_discussions_wf.htm">Discussions Workflow</a></li>
  <li>Comments: see <a href="11_comments_wf.htm">Comments Workflow</a></li>
</ul>
<p><a href="#top">Back to top</a></p>



<a name="01_05_steps"></a><h3>Steps for Implementing a Custom Workflow</h3>
<p>At a high level, the steps to implement a custom workflow are listed below. The following sections provide more information on each of these steps.</p>
<p>In some cases, certain actions must be performed by users with a specific role. Roles are shown for each step.</p>
<p class="apidoc_note"><strong>Note</strong>: It is best to test a new custom workflow in a sandbox environment before implementing in your production environment. For more information, see <a href="#01_07_testing">Testing a New Custom Workflow</a>.</p>
<ol>
  <li>Optional: download existing workflow. You can download an existing workflow to use as a starting point for the customization (<strong>Admin</strong> &gt; <strong>Workflows</strong> &gt; <strong>View</strong> &gt; <strong>Download</strong>). For more information, refer to the platform help.</li>
  <li>Create the custom workflow outside the platform. For more information and technical details, refer to <a href="#01_10_wf_xml">The Workflow Definition XML File</a>. (<strong>Admin or delegate</strong>)</li>
  <li>Upload the custom workflow to a sandbox environment. See <a href="#01_06_uploading">Uploading a New Custom Workflow</a> below. (<strong>Site Admin only</strong>)</li>
  <li>Assign the new custom workflow as the default for new resources of that type. See <a href="#01_08_implementing">Implementing a New Custom Workflow</a>. (<strong>Site Admin</strong>)</li>
  <li>Test the new custom workflow, and resolve any issues as needed until you are sure the new workflow is fully functional and bug-free. For more information, see <a href="#01_07_testing">Testing a New Custom Workflow</a>. (<strong>Site Admin, Business Admin, or resource admin</strong>)</li>
  <li>Update user documentation. The platform's user documentation reflects the default workflow. If you change the workflow, it might render the platform documentation incomplete, incorrect, or both. You must make sure you update the documentation to reflect any changes from the default workflow. (<strong>Site Admin or delegate</strong>)</li>
  <li>When you're sure that everything is functioning correctly, it's time to update the production environment:
<ul>
  <li>Upload the new workflow (Step 3 above).</li>
  <li>Assign it as the default for the resource type (Step 4 above).</li>
  <li>If needed, upload the updated documentation (Step 6 above).</li>
</ul></li>
</ol>
<p><a href="#top">Back to top</a></p>



<a name="01_06_uploading"></a><h3>Uploading a New Custom Workflow</h3>
<p>Roles in custom workflow management are as follows:</p>
<ul>
  <li><strong>Uploading a new custom workflow</strong>: Site Admin or Business Admin</li>
  <li><strong>Changing the workflow definition for a specific type of resource</strong>: Site Admin</li>
</ul>
<p>To upload a custom workflow, log in as the Site Admin or Business Admin and go to Administration > Workflows. Here you can easily manage custom workflows, including adding, editing, viewing, or deleting.</p>
<p>For additional instruction, if needed, refer to the platform online help, available at http://docs.akana.com/docs-test/cm/learning.html.</p>
<p><a href="#top">Back to top</a></p>



<a name="01_07_testing"></a><h3>Testing a New Custom Workflow</h3>
<p>Changing the custom workflow for resources on the platform can significantly impact the user experience for all users on the platform. It's very important to test a new workflow thoroughly, making sure it works as planned, before implementing it as the default.</p>
<p>One strategy is to write out various use cases that will be affected by the workflow change, apply the new workflow to one or two custom resources, and then test those resources, using the use cases as a guide. Make sure all state changes and results are as expected.</p>
<p>If you encounter any issues, restore the default workflow and then delete the test workflow from the platform. When corrections are made, upload the corrected version and test again.</p>
<p>Make sure you are completely satisfied that the new workflow runs as expected before making it the default for new resources of the applicable type.</p>
<p>Below is an example of a testing strategy for a new API version workflow.</p>

<h5>Example: to validate and test a new API version workflow</h5>
<ol>
  <li>Load the workflow into the developer portal but do not set it as the default for APIs.</li>
  <li>Create a test API.</li>
  <li>Specify the new workflow as the default for the test API.</li>
  <li>Use the API and verify that:
<ul>
  <li>The sequence of state transitions is correct.</li>
  <li>The actions displayed are correct for the active state.</li>
  <li>The workflow history is correct (including status).</li>
</ul></li>
  <li>Depending on the test results:
<ul>
<li>If the workflow needs more work, remove it so that it isn't available for selection in the platform.</li>
  <li>When you're completely satisfied that the workflow is functioning as intended, set it as the default, if applicable. For more information, refer to <a href="#01_08_implementing">Implementing a New Custom Workflow</a> below.</li>
</ul></li>
</ol>
<p><a href="#top">Back to top</a></p>



<a name="01_08_implementing"></a><h3>Implementing a New Custom Workflow</h3>
<p>Once a new custom workflow has been fully tested and you're sure it's working as expected, you can upload it to the platform and set it as the default for the resource type. Once you do this, all new resources of that type will use the new workflow.</p>
<p>Only the Site Admin can change the workflow definition for a specific type of resource.</p>
<p>Note that existing resources are not affected. For example, if you change the API version workflow, and have existing APIs, they will still use the workflow that was in use when the API was created.</p>
<ul>
  <li><strong>To upload a custom workflow</strong>: Log in as a Site Admin or Business Admin, go to <strong>Administration</strong> > <strong>Workflows</strong>, and then click <strong>Add Workflow</strong>. Specify Name and Description. In the <strong>Object Type</strong> drop-down list, make sure you choose the correct type of resource. Navigate to the location of the file and upload it.</li>
  <li><strong>To change the workflow for a type of resource</strong>: Log in as a Site Admin, go to Administration > Settings, and then choose the resource type. Update the workflow definition field, choosing the new workflow from the drop-down list, and then save your changes.</li>
</ul>
<p>For additional instruction, if needed, refer to the platform online help.</p>
<p><a href="#top">Back to top</a></p>



<a name="01_09_updating"></a><h3>Updating User Documentation</h3>
<p>It is the Site Admin's responsibility to update the developer documentation to reflect any custom workflow changes.</p>
<p>When developers are using the platform, they are not aware that the sequence of actions in specific processes is governed by workflow; they only know that they must follow those processes to get the desired results.</p>
<p>The online help for the platform guides developers through step-by-step instructions to complete various activities associated with managing apps, API contracts, tickets, and so on.</p>
<p>If you change the process, you have the responsibility to also update the applicable online help content to give developers the additional information they need to comfortably use the platform. App developers are your target audience, and their user experience is very important.</p>
<p><a href="#top">Back to top</a></p>



<a name="01_10_wf_xml"></a><h3>The Workflow Definition XML file</h3>
<p>The workflow process is defined in an XML file that contains:</p>
<ul>
  <li>Initial actions (actions that start the workflow)</li>
  <li>Workflow steps and actions</li>
</ul>
<p>The basic structure of required elements in a workflow XML document is shown below.</p>
<pre>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE workflow PUBLIC 
  &quot;-//OpenSymphony Group//DTD OSWorkflow 2.9//EN&quot;
  &quot;http://www.opensymphony.com/osworkflow/workflow_2_9.dtd&quot;&gt;
&lt;workflow&gt;
  &lt;initial-actions&gt;
    One or more &lt;action&gt; elements
  &lt;/initial-actions&gt;
    &lt;steps&gt;
     One or more &lt;step&gt; elements
  &lt;/steps&gt;
&lt;/workflow&gt;</pre>
<p><a href="#top">Back to top</a></p>



<a name="01_11_ia"></a><h3>Workflow Initial Actions</h3>
<p>The first part of the workflow includes definitions of one or more initial actions that trigger it.</p>
<p>Initial actions are predefined reserved words, such as @Create. Initial actions bring the resource into the workflow at the beginning. In Akana API Platform workflows, initial actions always start with the @ sign.</p>
<p>The specific initial actions for each type of workflow are given in the workflow reference section of this document.</p>
<p>The example below shows the initial action @Create used to start the App Version workflow.</p>
<pre>&lt;initial-actions&gt;
  &lt;action id=&quot;1&quot; name=&quot;@Create&quot;&gt;
    &lt;results&gt;
      &lt;unconditional-result old-status=&quot;Received&quot; status=&quot;Setup&quot; step=&quot;100&quot; owner=&quot;${caller}&quot; /&gt;
    &lt;/results&gt;
  &lt;/action&gt;
&lt;/initial-actions&gt;</pre>
<p><a href="#top">Back to top</a></p>



<a name="01_12_ra"></a><h3>Workflow Reserved Actions</h3>
<p>There are specific actions for each workflow type that are used internally as part of the workflow. These are called reserved actions. Reserved actions are predefined for certain changes that might commonly be made to objects as a result of something else that happens in the system, as distinct from changes that occur as a result of a user's action such as clicking a button. A reserved action is triggered automatically under certain conditions, as defined in the workflow. For example, the app version workflow could be set up so that if the app certificate is updated, an email is sent to your internal system administrator.</p>
<p>The specific initial actions for each type of workflow are given in the workflow reference section of this document.</p>
<p>Within the context of workflow, there are two main purposes for reserved actions:</p>
<ol>
  <li><strong>Limit actions</strong>: To specify the conditions under which certain steps can be performed.
<p>The reserved action is used to verify whether an action is allowed or not, in the current context, before executing. For example, you could specify that an app can have connections in the Production environment only, or in the Sandbox environment only. Reserved actions allow you to define this configurable behavior.</p>
<p>A common use of this type of reserved actions is to check for authorization. For example, a reserved action could check the user's role to make sure the user is a Site Admin or Business Admin before allowing a specific action.</p></li>
  <li><strong>Extend behavior</strong>: To initiate an action internally when something else happens, or to extend what happens as part of another action. This type of reserved action is called an initial-action as covered in the previous section.
<p>The naming of this type of reserved action generally indicates that an action has occurred. For example, in the app workflow, @KeyInfoRemoved indicates that the application security certificate was removed; in the user workflow, @ChallengeQuestionsAnswered indicates that the user has answered the challenge questions. Because these are defined as reserved actions, the workflow can then be built to trigger additional actions.</p>
<p>For example, if a group is deleted, the reserved action <strong>group.membership.action.group.deleted</strong> is invoked. This executes one or more steps to determine what happens with the group members (for example, each is sent a notification). In this scenario, the user doesn't see any buttons or make any choices; when the reserved action is triggered, it executes whatever steps are coded into the workflow.</p></li>
</ol>
<p>As an extension of #2, in some cases custom workflow can be used to <em><strong>replace</strong></em> default behavior. However, in most cases custom workflows extend the default behavior rather than replacing it.</p>
<p>There are specific reserved actions for each type of workflow.</p>
<p>This section includes:</p>
<ul>
  <li>Reserved Actions: Naming Conventions</li>
  <li>Reserved Actions: Examples</li>
</ul>

<h5>Reserved Actions: Naming Conventions</h5>
<p>The platform uses two main formats for naming of reserved actions, with a couple of exceptions. Naming conventions are as follows:</p>

<ul>
  <li>Action name begins with <strong>reserved-</strong>; for example, under certain conditions the <strong>reserved-connect</strong> reserved action is sent to the user interface (UI) so that the UI will display a Connect button. If we use this prefix on a reserved action, the UI uses it to customize the behavior, but doesn't show it as an action the user can invoke. It's internally invoked, or the purpose of it is to check whether an action is valid or not. Nobody invokes the reserved action. It indicates, in the current state, whether the action can be performed or not. It is used to customize the behavior, but not to customize the list of actions that the user can invoke. Example:
<ul>
  <li>reserved-connect-from-app.Sandbox</li>
</ul></li>
  <li>Action name begins with an <strong>@</strong> sign. Internal actions that the user doesn't need to know about, or initialization actions that the product uses for adding an object; for example, when adding a contract or an app, the initial state that the resource is in. Actions that start with an @ sign are never part of the return list of actions when the workflow API is used to get a list of workflow actions that are valid for a resource. They are only used internally. Examples:
<ul>
  <li>@app_switch_to_production</li>
  <li>@Invite</li>
  <li>@Revise (to revise a contract that is in Activated or Suspended state)</li>
</ul></li>
  <li>Action name is neither of the above, but is defined as a workflow action in the name. There are a few legacy workflow action names in the group membership workflow that do not follow the above naming conventions. They are:
<ul>
  <li>group.membership.action.accept</li>
  <li>group.membership.action.decline</li>
  <li>group.membership.action.resend</li>
  <li>group.membership.action.remove</li>
  <li>group.membership.action.make.admin</li>
  <li>group.membership.action.make.leader</li>
  <li>group.membership.action.make.member</li>
  <li>group.membership.action.group.deleted</li>
</ul></li>
</ul>

<p>For more information, refer to <a href="07_group_membership_wf.htm#group_ra_00">Group Membership Workflow: Reserved Actions</a>.</p>

<h5>Reserved Actions: Examples</h5>
<p>Below are some examples of reserved actions from actual workflow documents.</p>
<pre>&lt;action id=&quot;59&quot; name=&quot;@modify&quot;&gt;

&lt;action id=&quot;58&quot; name=&quot;@read&quot;&gt;

&lt;action id=&quot;105&quot; name=&quot;@RegeneratedSecret&quot;&gt;

&lt;action id=&quot;106&quot; name=&quot;reserved-allow-cert-upload&quot;&gt;

&lt;action id=&quot;301&quot; name=&quot;reserved-action.unpublish&quot;&gt;</pre>
<p><a href="#top">Back to top</a></p>



<a name="01_13_steps_actions"></a><h3>Workflow Steps and Actions</h3>
<p>The workflow definition file contains one or more steps. Each step has a unique ID and a name.</p>
<p>Each step can contain one or more Action elements, but they are not required.</p>
<p>Actions can be automatic or manual.</p>
<p>The basic structure of an Action element is shown below.</p>
<pre>&lt;action id=&quot;###&quot; name=&quot;Display name of action&quot;&gt;
  &lt;results&gt;
    Optional conditional &lt;result&gt; elements
    &lt;/unconditional-result old-status=&quot;value&quot; status=&quot;value&quot; step=&quot;###&quot; /&gt; 
  &lt;/results&gt;
&lt;/action&gt;</pre>
<p><strong>Note</strong>: A result step value of -1 causes no workflow state transition.</p>
<p><a href="#top">Back to top</a></p>



<a name="01_14_developing"></a><h3>Developing a Custom Workflow: Steps to Consider</h3>
<p>In developing your custom workflow, here are some planning steps to consider:</p>
<ul>
  <li>Choose the tool you will use to create and modify the XML file.</li>
  <li>Decide what strategy you will follow to adopt unique numbers for each Step ID and Action ID.</li>
  <li>Determine how the workflow will terminate.</li>
  <li>Decide how you will validate and test the workflow.</li>
</ul>
<p><a href="#top">Back to top</a></p>




<div class = "divider1"></div>




<h3 id="related_topics">Related Topics</h3>
<table width="700" border="0" cellspacing="0" cellpadding="2" class="doctable">
  <tr>
  <td width="300"><ul>
  <li><a href="01_overview_cm_wf.htm">Custom Workflows in the Developer Portal</a></li>
  <li><a href="02_general.htm">Workflow General Reference: Functions, Conditions, and Variables</a></li>
  <li><a href="03_app_version_wf.htm">App Version Workflow</a></li>
  <li><a href="04_api_version_wf.htm">API Version Workflow</a></li>
  <li><a href="05_api_contract_wf.htm">API Contract Workflow</a></li>
  </ul>
  </td>
  <td width="400"><ul>
  <li><a href="06_ticket_wf.htm">Ticket Workflow</a></li>
  <li><a href="07_group_membership_wf.htm">Group Membership Workflow</a></li>
  <li><a href="08_user_wf.htm">User Workflow</a></li>
  <li><a href="09_review_wf.htm">Review Workflow</a></li>
  <li><a href="10_discussions_wf.htm">Discussions Workflow</a></li>
  <li><a href="11_comments_wf.htm">Comments Workflow</a></li>
  </ul>
</td>
  </tr>
</table>