---
layout: page
title: Review Workflow | Customizing Workflows in the API Platform
description: Information about initial actions, reserved actions, functions, conditions, and variables for the Review workflow.
product: cm
category: ref
sub-nav-class: Workflows
weight: 09
type: page
nav-title: Review Workflow
---
<h2 id="top">Review Workflow</h2>
<p>This section provides information about functions, conditions, and variable resolvers for the review workflow, as well as initial actions and reserved actions.</p>

<div class = "divider1"></div>


<h3 style="color: gray;">Table of Contents</h3>
<ol class="table_of_contents">
	<li><a href="#rev_ia_00">Review Workflow: Initial Actions</a></li>
	<li><a href="#rev_ra_00">Review Workflow: Reserved Actions</a></li>
	<li><a href="#rev_f_00">Review Workflow: Functions</a></li>
	<li><a href="#rev_c_00">Review Workflow: Conditions</a></li>
	<li><a href="#rev_vr_00">Review Workflow: Variable Resolvers</a> (none)</li>
</ol>
<div class = "divider1"></div>



<h3 id="rev_ia_00">Review Workflow: Initial Actions</h3>
<p>The initial actions valid for Akana API Platform workflows relating to reviews are:</p>
<ul>
	<li><a href="#rev_ia_00">@StartReview</a></li>
</ul>


<h4 id="rev_ia_01">@StartReview</h4>
<p>This is how the reviews get introduced into the workflow. If you are customizing the initial behavior when a review is added, this is where the customization needs to go.</p>
<p><a href="#top">Back to top</a></p>



<h3 id="rev_ra_00">Review Workflow: Reserved Actions</h3>
<p>The following reserved actions are defined for Akana API Platform workflows relating to reviews:</p>
<ul>
	<li><a href="#rev_ra_01">@read</a></li>
	<li><a href="#rev_ra_02">@modify</a></li>
	<li><a href="#rev_ra_03">@cancel</a></li>
</ul>


<h4 id="rev_ra_01">@read</h4>
<p>Applies to unpublished reviews only.</p>
<p>This action controls who can read a review. When the @read action is available, read permission is available for someone to read the review in an unpublished state. If @read is not available for a specific user for the current state of the review, the user cannot see it.</p>
<p>Once the review is published, all users who have visibility of the resource can see it.</p>


<h4 id="rev_ra_02">@modify</h4>
<p>Used to determine whether a review can be modified.</p>


<h4 id="rev_ra_03">@cancel</h4>
<p>Used to cancel the review and end the workflow.</p>
<p><a href="#top">Back to top</a></p>



<h3 id="rev_f_00">Review Workflow: Functions</h3>
<p>The following functions are available for Akana API Platform workflows relating to reviews:</p>
<ul>
	<li><a href="#rev_f_01">markPublished</a></li>
	<li><a href="#rev_f_02">markUnPublished</a></li>
	<li><a href="#rev_f_03">deleteReview</a></li>
	<li><a href="#rev_f_04">cancelOldReviewForTheSubjectBySameUser</a></li>
	<li><a href="#rev_f_05">sendNotification</a></li>
</ul>


<h4 id="rev_f_01">markPublished</h4>
<p>Marks a review as published. This might be used in a scenario where the Moderator has determined that the review meets guidelines, or if reviews are not moderated.</p>

<h5>Parameters</h5>
<p>None.</p>
<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, the workflow is set up so that a review added by an administrator is approved automatically. The workflow checks that the user has a role of Site Admin or Business Admin. If so, the status of the review is automatically changed to Published. The markPublished function is invoked as a post-function.</p>
<pre>&lt;step id="100" name="Route Add New Review"&gt;
  &lt;actions&gt;
    &lt;action id="101" name="Auto Approve Add" auto="TRUE"&gt;
      &lt;restrict-to&gt;
        &lt;conditions type="OR"&gt;
          &lt;condition type="authorizeByAtmosphereRole"&gt;
            &lt;arg name="role"&gt;SiteAdmin,BusinessAdmin&lt;/arg&gt;
          &lt;/condition&gt;
          &lt;condition type="isAutoPublishEnabled"/&gt;
        &lt;/conditions&gt;
      &lt;/restrict-to&gt;
      &lt;results&gt;
        &lt;unconditional-result old-status="none"  status="Published" step="300" owner="${caller}" /&gt;
      &lt;/results&gt;
      &lt;post-functions&gt;
        &lt;function type="markPublished"/&gt;
        &lt;function type="sendNotification"&gt;
          &lt;arg name="subjectType"&gt;apiversion&lt;/arg&gt;
          &lt;arg name="role"&gt;SubjectAdmin&lt;/arg&gt;
          &lt;arg name="notificationType"&gt;com.soa.notification.type.api.review.created&lt;/arg&gt;
        &lt;/function&gt;
        &lt;function type="sendNotification"&gt;
          &lt;arg name="subjectType"&gt;app-version&lt;/arg&gt;
          &lt;arg name="role"&gt;SubjectAdmin&lt;/arg&gt;
          &lt;arg name="notificationType"&gt;com.soa.notification.type.app.review.created&lt;/arg&gt;
        &lt;/function&gt;
      &lt;/post-functions&gt;
    &lt;/action&gt;</pre>


<h4 id="rev_f_02">markUnPublished</h4>
<p>Marks a review as not published. This might be used in a scenario where the Moderator has determined that the review does not meet guidelines.</p>

<h5>Parameters</h5>
<p>None.</p>
<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, an existing, published review is being cancelled because another review on the same subject by the same user was received. The workflow checks that the action is performed by an authorized user, and then changes the status of the original review from Approved to Pending. The <strong>markUnPublished</strong> function is invoked as a post-function.</p>
<pre>&lt;step id="300" name="Published"&gt;
  &lt;pre-functions&gt;
    &lt;function type="cancelOldReviewForTheSubjectBySameUser" /&gt;
  &lt;/pre-functions&gt;
  &lt;actions&gt;
    &lt;action id="301" name="review.action.unpublish"&gt;
      &lt;restrict-to&gt;
        &lt;conditions type="AND"&gt;
          &lt;condition type="authorizeByAtmosphereRole"&gt;
            &lt;arg name="role"&gt;SiteAdmin,BusinessAdmin,Author,SubjectAssociatedApiAdmin&lt;/arg&gt;
          &lt;/condition&gt;
        &lt;/conditions&gt;
      &lt;/restrict-to&gt;
      &lt;results&gt;
        &lt;unconditional-result old-status="Approved" status="Pending" step="200" owner="${caller}" /&gt;
      &lt;/results&gt;
      &lt;post-functions&gt;
        &lt;function type="markUnPublished"/&gt;
      &lt;/post-functions&gt;
    &lt;/action&gt;</pre>


<h4 id="rev_f_03">deleteReview</h4>
<p>Deletes a review.</p>

<h5>Parameters</h5>
<p>None.</p>
<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, the @cancel reserved action is invoked. The workflow first checks that the user is authorized to perform the action. If so, the review is moved from a Published status to a Finished status. As a post-function, the review is deleted.</p>
<pre>&lt;action id="303" name="@cancel"&gt;
  &lt;restrict-to&gt;
    &lt;conditions type="AND"&gt;
      &lt;condition type="authorizeByAtmosphereRole"&gt;
        &lt;arg name="role"&gt;SiteAdmin,BusinessAdmin,SubjectAssociatedApiAdmin&lt;/arg&gt;
      &lt;/condition&gt;
    &lt;/conditions&gt;

  &lt;/restrict-to&gt;
  &lt;results&gt;
    &lt;unconditional-result old-status="Published" status="Finished" step="500" owner="${caller}" /&gt;
  &lt;/results&gt;
  &lt;post-functions&gt;
    &lt;function type="deleteReview"/&gt;
  &lt;/post-functions&gt;
&lt;/action&gt;</pre>


<h4 id="rev_f_04">cancelOldReviewForTheSubjectBySameUser</h4>
<p>Cancels an existing review. This function is generally used in a scenario where a reviewer submits a second review on the same subject. The subsequent review replaces the earlier one, which is cancelled.</p>
<p>When someone publishes a second review for the same subject, the platform does not modify the existing review that was already published. Instead, a new review is created. At that point, there might be two reviews on the same subject by the same author, one in the Published state and one in the Draft state. When the draft review is published, the previous review is automatically deleted.</p>
<p>The states for both reviews are as follows:</p>
<ul>
	<li>First review: published / Second review: draft</li>
	<li>Second review: published / first review: deleted.</li>
</ul>
<h5>Parameters</h5>
<p>None.</p>
<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, a review is published. As a pre-function, the workflow checks for an old review for the same subject by the same user, and cancels it if found. It first checks that the user is authorized to perform the action, changes the old review status from Approved to Pending, and runs the <strong>markUnPublished</strong> function.</p>
<pre>&lt;step id="300" name="Published"&gt;
  &lt;pre-functions&gt;
    &lt;function type="cancelOldReviewForTheSubjectBySameUser" /&gt;
  &lt;/pre-functions&gt;
  &lt;actions&gt;
    &lt;action id="301" name="review.action.unpublish"&gt;
      &lt;restrict-to&gt;
        &lt;conditions type="AND"&gt;
          &lt;condition type="authorizeByAtmosphereRole"&gt;
            &lt;arg name="role"&gt;SiteAdmin,BusinessAdmin,Author,SubjectAssociatedApiAdmin&lt;/arg&gt;
          &lt;/condition&gt;
        &lt;/conditions&gt;
      &lt;/restrict-to&gt;
      &lt;results&gt;
        &lt;unconditional-result old-status="Approved" status="Pending" step="200" owner="${caller}" /&gt;
      &lt;/results&gt;
      &lt;post-functions&gt;
        &lt;function type="markUnPublished"/&gt;
      &lt;/post-functions&gt;
    &lt;/action&gt;</pre>


<h4 id="rev_f_05">sendNotification</h4>
<p>Triggers the specified notification based on an event relating to a review.</p>
<p><strong>Note</strong>: The email isn't sent instantly; it is queued to be sent. It goes to the notifications queue, and the job runs every 60 seconds. There might be a short delay before the user receives the email.</p>

<h5>Parameters</h5>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>subjectType</td>
			<td><p>Indicates the type of resource the notification relates to.  Applicable to anywhere a review can be added. Valid values:</p>
				<ul>
					<li>apiversion</li>
					<li>app-version</li>
					<li>group</li>
				</ul>      </td>
		</tr>
		<tr>
			<td>Role</td>
			<td><p>The role to which the notifications will be sent&#8212;only users who hold this role for the type of resource as specified in the subjectType parameter. Valid values:</p>
				<ul>
					<li>ApiAdmin</li>
					<li>AppAdmin</li>
				</ul>      </td>
		</tr>
		<tr>
			<td>notificationType</td>
			<td><p>The type of notification being sent. Can be any valid notification existing in the platform. For example:</p>
				<ul>
					<li>com.soa.notification.type.api.review.created (for an API)</li>
					<li>com.soa.notification.type.app.review.created (for an app)</li>
				</ul>      </td>
		</tr>
	</tbody>
</table>

<h5>Examples/Notes/Additional Information</h5>
<p>In the example below, the workflow is set up so that a review added by an administrator is approved automatically. When the review is published, a notification is sent to applicable admins. A different notification is sent for an API review versus an app review.</p>
<pre>&lt;step id="100" name="Route Add New Review"&gt;
  &lt;actions&gt;
    &lt;action id="101" name="Auto Approve Add" auto="TRUE"&gt;
      &lt;restrict-to&gt;
        &lt;conditions type="OR"&gt;
          &lt;condition type="authorizeByAtmosphereRole"&gt;
            &lt;arg name="role"&gt;SiteAdmin,BusinessAdmin&lt;/arg&gt;
          &lt;/condition&gt;
          &lt;condition type="isAutoPublishEnabled"/&gt;
        &lt;/conditions&gt;
      &lt;/restrict-to&gt;
      &lt;results&gt;
        &lt;unconditional-result old-status="none"  status="Published" step="300" owner="${caller}" /&gt;
      &lt;/results&gt;
      &lt;post-functions&gt;
        &lt;function type="markPublished"/&gt;
        &lt;function type="sendNotification"&gt;
          &lt;arg name="subjectType"&gt;apiversion&lt;/arg&gt;
          &lt;arg name="role"&gt;SubjectAdmin&lt;/arg&gt;
          &lt;arg name="notificationType"&gt;com.soa.notification.type.api.review.created&lt;/arg&gt;
        &lt;/function&gt;
        &lt;function type="sendNotification"&gt;
          &lt;arg name="subjectType"&gt;app-version&lt;/arg&gt;
          &lt;arg name="role"&gt;SubjectAdmin&lt;/arg&gt;
          &lt;arg name="notificationType"&gt;com.soa.notification.type.app.review.created&lt;/arg&gt;
        &lt;/function&gt;
      &lt;/post-functions&gt;
    &lt;/action&gt;</pre>
<p><a href="#top">Back to top</a></p>



<h3 id="rev_c_00">Review Workflow: Conditions</h3>
<p>The following conditions apply to the reviews workflow:</p>
<ul>
	<li><a href="#rev_c_01">isAutoPublishEnabled</a></li>
</ul>



<h4 id="rev_c_01">isAutoPublishEnabled</h4>
<p>Checks the platform settings to determine whether a review can be automatically published; returns <strong>true</strong> if so. If <strong>false</strong>, new reviews require moderation.</p>
<p><a href="#top">Back to top</a></p>



<h3 id="rev_vr_00">Review Workflow: Variable Resolvers</h3>
<p>There are currently no variable resolvers for Akana API Platform workflows relating to reviews.</p>
<p><a href="#top">Back to top</a></p>




<div class = "divider1"></div>




<h3 id="related_topics">Related Topics</h3>
<div class="relatedlinks" id="cm_workflow">
<ul>
	<li><a href="01_overview_cm_wf.htm">Custom Workflows in the Developer Portal</a></li>
	<li><a href="02_general.htm">Workflow General Reference: Functions, Conditions, and Variables</a></li>
	<li><a href="03_app_version_wf.htm">App Version Workflow</a></li>
	<li><a href="04_api_version_wf.htm">API Version Workflow</a></li>
	<li><a href="05_api_contract_wf.htm">API Contract Workflow</a></li>
	<li><a href="06_ticket_wf.htm">Ticket Workflow</a></li>
</ul>
<ul>
	<li><a href="07_group_membership_wf.htm">Group Membership Workflow</a></li>
	<li><a href="08_user_wf.htm">User Workflow</a></li>
	<li><a href="09_review_wf.htm">Review Workflow</a></li>
	<li><a href="10_discussions_wf.htm">Discussions Workflow</a></li>
	<li><a href="11_comments_wf.htm">Comments Workflow</a></li>
	<li><a href="12_model_wf.htm">Model Object Workflow</a></li>
</ul>
</div>