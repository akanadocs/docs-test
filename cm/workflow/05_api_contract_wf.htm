---
layout: page
title: API Contract Workflow | Customizing Workflows in the API Platform
description: Information about initial actions, reserved actions, functions, conditions, and variables for the API Contract workflow.
product: cm
category: ref
sub-nav-class: Workflows
weight: 05
type: page
nav-title: API Contract Workflow
---
<h1 id="top">API Contract Workflow</h1>
<p>This section provides information about functions, conditions, and variables for the API contract workflow, as well as initial actions and reserved actions.</p>


<hr class="divide_hr" />


<h2 style="color: gray;">Table of Contents</h2>
<ol class="table_of_contents">
	<li><a href="#contract_ia_00">API Contract Workflow: Initial Actions</a></li>
	<li><a href="#contract_ra_00">API Contract Workflow: Reserved Actions</a></li>
	<li><a href="#contract_f_00">API Contract Workflow: Functions</a></li>
	<li><a href="#contract_c_00">API Contract Workflow: Conditions</a></li>
	<li><a href="#contract_vr_00">API Contract Workflow: Variable Resolvers</a></li>
</ol>
<hr class="divide_hr" />



<h2 id="contract_ia_00">API Contract Workflow: Initial Actions</h2>
<p>The initial actions valid for Akana API Platform workflows relating to API contracts are:</p>
<ul>
	<li><a href="#contract_ia_01">@Create</a></li>
	<li><a href="#contract_ia_02">@Revise</a></li>
	<li><a href="#contract_ia_03">@ImportContract</a></li>
	<li><a href="#contract_ia_04">@AutoConnectActivate</a></li>
</ul>


<h3 id="contract_ia_01">@Create</h3>
<p>When a completely new contract is created (the first contract between a specific app version and a specific API version in a specific environment), the @Create initial action is used to start the workflow for the new contract.</p>
<p>For more information, see <a href="01_overview_cm_wf.htm#s01_11_ia">Workflow Initial Actions</a>.</p>


<h3 id="contract_ia_02">@Revise</h3>
<p>When an existing contract is revised, a new contract is created that is a revision of the existing contract, and the existing contract remains in place. In this scenario, the @Revise initial action is used to start the workflow for the revised contract. When there is a revised contract in place, any subsequent requests to create a contract for the app/API/environment combination will fail, since only one revised contract is allowed at one time.</p>


<h3 id="contract_ia_03">@ImportContract</h3>
<p>Used to start the workflow for an imported contract.</p>


<h3 id="contract_ia_04">@AutoConnectActivate</h3>
<p>Used to start the workflow for a new contract that's created as a result of an AutoConnect setting.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="contract_ra_00">API Contract Workflow: Reserved Actions</h2>
<p>The following reserved actions are defined for API contract workflows:</p>
<ul>
	<li><a href="#contract_ra_01">@app_switch_to_production</a></li>
	<li><a href="#contract_ra_02">@AppDeleted</a></li>
	<li><a href="#contract_ra_03">@ApiDeleted</a></li>
	<li><a href="#contract_ra_04">@modify</a></li>
	<li><a href="#contract_ra_05">@Revise</a></li>
	<li><a href="#contract_ra_06">reserved-connect-from-app.Sandbox</a></li>
	<li><a href="#contract_ra_07">reserved-connect-from-app.Production</a></li>
</ul>


<h3 id="contract_ra_01">@app_switch_to_production</h3>
<p>Used to control workflow actions that occur when an app is switched to <!-- #BeginLibraryItem "/Library/environ_live.lbi" -->Live<!-- #EndLibraryItem -->.</p>


<h3 id="contract_ra_02">@AppDeleted</h3>
<p>Used to control workflow actions that occur when an app is deleted.</p>


<h3 id="contract_ra_03">@ApiDeleted</h3>
<p>Used to control workflow actions that occur when an API is deleted.</p>


<h3 id="contract_ra_04">@modify</h3>
<p>Used to control workflow actions that occur when an app is modified.</p>


<h3 id="contract_ra_05">@Revise</h3>
<p>Used to control workflow actions that occur when an app is revised.</p>


<h3 id="contract_ra_06">reserved-connect-from-app.Sandbox</h3>
<p>Used to control workflow actions that occur when an app connects to an API in the Sandbox environment.</p>


<h3 id="contract_ra_07">reserved-connect-from-app.Production</h3>
<p>Used to control workflow actions that occur when an app connects to an API in the <!-- #BeginLibraryItem "/Library/environ_live.lbi" -->Live<!-- #EndLibraryItem --> environment.</p>
<p><a href="#top">Back to top</a></p>




<h2 id="contract_f_00">API Contract Workflow: Functions</h2>
<p>The following functions are available for the API contract workflow:</p>
<ul>
	<li><a href="#contract_f_01">updateAPIContractStatus</a></li>
	<li><a href="#contract_f_02">sendNotification</a></li>
	<li><a href="#contract_f_03">synchronizeAppVersion</a></li>
	<li><a href="#contract_f_04">invokeAppVersionAction</a></li>
	<li><a href="#contract_f_05">invokeApiVersionAction</a></li>
	<li><a href="#contract_f_06">updateContractActiveStatus</a></li>
	<li><a href="#contract_f_07">syncConnectedAppVersionsInOAuthProvider</a></li>
	<li><a href="#contract_f_08">verifyAppAccessLimitedToOnlySandboxOrLiveAPIs</a></li>
</ul>


<h3 id="contract_f_01">updateAPIContractStatus</h3>
<p>Updates the status of an API contract. The new status must be a valid transition from the current status.</p>

<h4>Parameters</h4>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>Status</td>
			<td><p>Updates the status of the connection to a new status. Valid values:</p>
				<ul>
					<li>apicontract.status.approved</li>
					<li>apicontract.status.pending_approval</li>
					<li>apicontract.status.config_pending</li>
					<li>apicontract.status.rejected</li>
					<li>apicontract.status.resubmitted</li>
					<li>apicontract.status.activated</li>
					<li>apicontract.status.cancelled</li>
					<li>apicontract.status.suspended</li>
				</ul>      </td>
		</tr>
	</tbody>
</table>

<h4>Examples/Notes/Additional Information</h4>
<p>The example below shows the workflow when requests for API access in the <!-- #BeginLibraryItem "/Library/environ_live.lbi" -->Live<!-- #EndLibraryItem --> environment are auto-approved. The <strong>updateAPIContractStatus</strong> function is used to update the status.</p>
<pre>&lt;action id="102" name="Auto-Approve Production Requests From Production App" auto="TRUE"&gt;
  &lt;restrict-to&gt;
    &lt;conditions type="AND"&gt;
      &lt;condition type="isAtmosphereProductionApiContract" /&gt;
      &lt;condition type="isAtmosphereProductionAutoApprove" /&gt;
    &lt;/conditions&gt;
  &lt;/restrict-to&gt;
  &lt;results&gt;
    &lt;unconditional-result old-status="Pending" status="Activated" step="600" owner="${caller}"/&gt;
  &lt;/results&gt;
  &lt;post-functions&gt;
    &lt;function type="updateAPIContractStatus"&gt;
      &lt;arg name="status"&gt;apicontract.status.activated&lt;/arg&gt;
    &lt;/function&gt;
    &lt;function type="sendNotification"&gt;
      &lt;arg name="notificationType"&gt;com.soa.notification.type.api.access.requested.both.apiadmin&lt;/arg&gt;
      &lt;arg name="role"&gt;ApiAdmin&lt;/arg&gt;
      &lt;arg name="status"&gt;apicontract.status.activated&lt;/arg&gt;
    &lt;/function&gt;
    &lt;function type="sendNotification"&gt;
      &lt;arg name="notificationType"&gt;com.soa.notification.type.api.access.requested.production.appteam&lt;/arg&gt;
      &lt;arg name="role"&gt;AppAdmin&lt;/arg&gt;
      &lt;arg name="status"&gt;apicontract.status.activated&lt;/arg&gt;
    &lt;/function&gt;
  &lt;/post-functions&gt;
&lt;/action&gt;</pre>


<h3 id="contract_f_02">sendNotification</h3>
<p>Triggers the specified notification based on an event relating to an API contract.</p>
<p><strong>Note</strong>: The email isn't sent instantly; it is queued to be sent. It goes to the notifications queue, and the job runs every 60 seconds. There might be a short delay before the user receives the email.</p>

<h4>Parameters</h4>
<p><strong>Note</strong>: In some cases, some additional parameters are specific to individual notifications. For example, param.contract.oldstate is specific to a notification that identifies a change of state for a contract. Notification-specific parameters begin with "param." as in this example.</p>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>notificationType</td>
			<td><p>The type of notification being sent. Can be any valid notification existing in the platform. For example:</p>
				<ul>
					<li>com.soa.notification.type.api.access.requested.both.apiadmin</li>
					<li>com.soa.notification.type.api.access.requested.sandbox.appteam</li>
					<li>com.soa.notification.type.privateapi.membership.status.changed</li>
					<li>com.soa.notification.type.group.membership.role.changed</li>
					<li>com.soa.notification.type.appteam.member.invited.team</li>
				</ul>
<p><strong>Note</strong>: if either the notificationType.production or notificationType.sandbox argument is provided, it is used to load the message template. If not, the notificationType argument is used to load the message template.</p></td>
		</tr>
		<tr>
			<td>notificationType.production</td>
			<td><p>If the connection is for the <!-- #BeginLibraryItem "/Library/environ_live.lbi" -->Live<!-- #EndLibraryItem --> environment, the notificationType.production argument is used to load the message template.</p>
<p>If this argument is not provided, the notificationType argument is used for loading the message template.</p></td>
		</tr>
		<tr>
			<td>notificationType.sandbox</td>
			<td><p>If the connection is for the sandbox environment, the notificationType.sandbox argument is used to load the message template.</p>
<p>If this argument is not provided, the notificationType argument is used for loading the message template.</p></td>
		</tr>
		<tr>
			<td>Role</td>
			<td><p>The role to which the notifications will be sent; only users who hold this role for the specified API contract. Valid values:</p>
				<ul>
					<li>ApiAdmin</li>
					<li>AppAdmin</li>
				</ul>      </td>
		</tr>
		<tr>
			<td>Any parameter with name prefixed with "param"</td>
			<td>Some specific notifications have additional parameters. These parameters always begin with "param". For example, ${contract.oldstate} is used in some cases to indicate the old state of the API contract, in scenarios where the state has changed.</td>
		</tr>
	</tbody>
</table>

<h4>Examples/Notes/Additional Information</h4>
<p>In the example below, two notifications are sent when an API access request is auto-approved. Each notification goes to a different group of users as specified in the role argument.</p>
<pre>&lt;post-functions&gt;
  &lt;function type="autoApproveAccessRequest"&gt;
    &lt;arg name="status"&gt;apicontract.status.activated&lt;/arg&gt;
  &lt;/function&gt;
  &lt;function type="sendNotification"&gt;
     &lt;arg name="notificationType"&gt;com.soa.notification.type.api.access.requested.both.apiadmin&lt;/arg&gt;
     &lt;arg name="role"&gt;ApiAdmin&lt;/arg&gt;
  &lt;/function&gt;
  &lt;function type="sendNotification"&gt;
      &lt;arg name="notificationType"&gt;com.soa.notification.type.api.access.requested.sandbox.appteam&lt;/arg&gt;
      &lt;arg name="role"&gt;AppAdmin&lt;/arg&gt;
  &lt;/function&gt;
&lt;/post-functions&gt;</pre>


<h3 id="contract_f_03">synchronizeAppVersion</h3>
<!--<p>{Comment In a federation scenario, this function allows you to synchronize the app identity information (app identity and shared secret) stored on the local tenant with the app identity information for the system of record, which is the remote federation member. This ensures that the app identity information is up to date for the local tenant.}</p>-->

<p>If the app version for which the connection is set up is a remote federation member app, this function synchronizes the app identity with its system of record (home instance record). This ensures that the app identity information is up to date for the local tenant.</p>

<h4>Parameters</h4>
<p>None.</p>

<h4>Examples/Notes/Additional Information</h4>
<p>In the example below, the app version is synchronized as a last action, after the main function, to make sure the data is up to date before moving on to the next step in the workflow.</p>
<pre>&lt;action id="311" name="apicontract.action.sync.app.version"&gt;
  &lt;restrict-to&gt;
    &lt;conditions type="AND"&gt;
      &lt;condition type="authorizeByAtmosphereRole"&gt;
        &lt;arg name="role"&gt;ApiAdmin&lt;/arg&gt;
      &lt;/condition&gt;
      &lt;condition type="isRemoteFedMemberApp"/&gt;
    &lt;/conditions&gt;
  &lt;/restrict-to&gt;
  &lt;results&gt;
    &lt;unconditional-result old-status="Pending Approval" status="Pending Approval" step="-1"/&gt;
  &lt;/results&gt;
  &lt;post-functions&gt;
    &lt;function type="synchronizeAppVersion"/&gt;
  &lt;/post-functions&gt;
&lt;/action&gt;</pre>


<h3 id="contract_f_04">invokeAppVersionAction</h3>
<p>Invokes the workflow action specified on the app version workflow.</p>
<p><strong>Note</strong>: This function is not part of the default contract workflow. It's a custom function that you can use to modify the default behavior in the developer portal. For information about using custom workflows, see <a href="01_overview_cm_wf.htm">Custom Workflows in the Developer Portal</a>.</p>
<p>By default, the workflow action is invoked on the app version associated with the connection unless the AppVersionDN argument is provided.</p>
<p>If the AppVersionDN argument is provided, the action is executed on the specified app version.</p>

<h4>Parameters</h4>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>AppVersionDN (optional)</td>
			<td><p>A specified app version the workflow action will be invoked on.</p>
<p>If this parameter is not included, the workflow action is invoked on the app version associated with the connection.</p></td>
		</tr>
		<tr>
			<td>ActionName</td>
			<td>The workflow action to be invoked.</td>
		</tr>
	</tbody>
</table>

<h3 id="contract_f_05">invokeApiVersionAction</h3>
<p>Invokes the workflow action specified on the API version workflow.</p>
<p><strong>Note</strong>: This function is not part of the default contract workflow. It's a custom function that you can use to modify the default behavior in the developer portal. For information about using custom workflows, see <a href="01_overview_cm_wf.htm">Custom Workflows in the Developer Portal</a>.</p>
<p>By default, the workflow action is invoked on the API version associated with the connection unless the ApiVersionDN argument is provided.</p>
<p>If the ApiVersionDN argument is provided, the action is executed on the specified API version.</p>

<h4>Parameters</h4>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>ApiVersionDN (optional)</td>
			<td><p>A specified API version the workflow action will be invoked on.</p>
<p>If this parameter is not included, the workflow action is invoked on the API version associated with the connection.</p></td>
		</tr>
		<tr>
			<td>ActionName</td>
			<td>The workflow action to be invoked.</td>
		</tr>
	</tbody>
</table>

<h3 id="contract_f_06">updateContractActiveStatus</h3>
<p>Updates the status of an active contract. The new status must be a valid transition from the current status.</p>

<h4>Parameters</h4>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>status</td>
			<td><p>The new status for the contract. Possible values:</p>
				<ul>
					<li>com.soa.apicontract.inforce: used when the contract is activated. Indicates that the contract is currently in use when the app is invoking the API calls.</li>
					<li>com.soa.apicontract.archived: used when the contract is cancelled or the app or API version is deleted. Indicates that the contract was in use but is no longer in use.</li>
					<li>com.soa.apicontract.draft: used when the contract hasn't yet reached the state in which it can be used in runtime requests; for example, pending acceptance.</li>
				</ul>      </td>
		</tr>
	</tbody>
</table>

<h4>Examples/Notes/Additional Information</h4>
<p>In the example below, the API contract active status is updated to a status of com.soa.apicontract.inforce after the contract is activated.</p>
<pre>&lt;action id="2" name="@AutoConnectActivate"&gt;
  &lt;results&gt;
    &lt;unconditional-result old-status="Received" status="Activated" step="600" owner="${caller}"/&gt;
  &lt;/results&gt;
  &lt;post-functions&gt;
      &lt;function type="updateAPIContractStatus"&gt;
        &lt;arg name="status"&gt;apicontract.status.activated&lt;/arg&gt;
      &lt;/function&gt;
      &lt;function type="updateContractActiveStatus"&gt;
        &lt;arg name="status"&gt;com.soa.apicontract.inforce&lt;/arg&gt;
      &lt;/function&gt;
      &lt;function type="addAPIContractToHistory"/&gt;
      &lt;function type="sendNotification"&gt;
        &lt;arg name="notificationType"&gt;com.soa.notification.type.api.access.state.change.apiadmin&lt;/arg&gt;
        &lt;arg name="role"&gt;ApiAdmin&lt;/arg&gt;
        &lt;arg name="param.contract.oldstate"&gt;apicontract.status.pending_approval&lt;/arg&gt;
      &lt;/function&gt;
      &lt;function type="sendNotification"&gt;
        &lt;arg name="notificationType"&gt;com.soa.notification.type.api.access.activated.production.appteam&lt;/arg&gt;
        &lt;arg name="role"&gt;AppAdmin&lt;/arg&gt;
        &lt;arg name="param.contract.oldstate"&gt;${contract.oldstate}&lt;/arg&gt;
      &lt;/function&gt;
  &lt;/post-functions&gt;
&lt;/action&gt;</pre>


<h3 id="contract_f_07">syncConnectedAppVersionsInOAuthProvider</h3>
<p>For an app that is contracted with an API, this function takes the App ID and Shared Secret and adds them to the app provisioning table. These values are then picked up by a scheduled job, which runs every 10 minutes (not configurable). The scheduled job synchronizes the values via the Client Registration endpoint, so that client registration stays current.</p>
<p>Certain workflow actions would typically trigger this function in the API Contract workflow, as listed for the Action parameter. For example, a new app version or updated description would trigger this function to make sure that client registration stays current. See examples below.</p>

<h4>Parameters</h4>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>Action</td>
			<td><p>The specific workflow action. Valid values:</p>
				<ul>
					<li>@ApiDeleted</li>
					<li>@AppDeleted</li>
					<li>@AutoConnectActivate</li>
					<li>@ImportContract</li>
					<li>apicontract.action.activate</li>
					<li>apicontract.action.approve</li>
					<li>Auto-Approve Production Requests From Sandbox</li>
					<li>auto-approve sandbox requests</li>
				</ul>      </td>
		</tr>
	</tbody>
</table>

<h4>Examples/Notes/Additional Information</h4>
<p>The examples below show this function used with each of the workflow actions listed above.</p>
<p>@ApiDeleted:</p>
<pre>&lt;function type="syncConnectedAppVersionsInOAuthProvider"&gt;
  &lt;arg name="action"&gt;Delete&lt;/arg&gt;
&lt;/function&gt;</pre>

<p>@AppDeleted:</p>
<pre>&lt;function type="syncConnectedAppVersionsInOAuthProvider"&gt;
  &lt;arg name="action"&gt;Delete&lt;/arg&gt;
&lt;/function&gt;</pre>

<p>@AutoConnectActivate:</p>
<pre>&lt;function type="syncConnectedAppVersionsInOAuthProvider"&gt;
  &lt;arg name="action"&gt;Reset&lt;/arg&gt;
&lt;/function&gt;</pre>

<p>@ImportContract:</p>
<pre>&lt;function type="syncConnectedAppVersionsInOAuthProvider"&gt;
  &lt;arg name="action"&gt;Reset&lt;/arg&gt;
&lt;/function&gt;</pre>

<p>apicontract.action.activate:</p>
<pre>&lt;function type="syncConnectedAppVersionsInOAuthProvider"&gt;
  &lt;arg name="action"&gt;Reset&lt;/arg&gt;
&lt;/function&gt;</pre>

<p>apicontract.action.approve:</p>
<pre>&lt;function type="syncConnectedAppVersionsInOAuthProvider"&gt;
  &lt;arg name="action"&gt;Reset&lt;/arg&gt;
&lt;/function&gt;</pre>
<p>Auto-Approve Production Requests From Sandbox:</p>
<pre>&lt;function type="syncConnectedAppVersionsInOAuthProvider"&gt;
  &lt;arg name="action"&gt;Reset&lt;/arg&gt;
&lt;/function&gt;</pre>
<p>auto-approve sandbox requests:</p>
<pre>&lt;function type="syncConnectedAppVersionsInOAuthProvider"&gt;
  &lt;arg name="action"&gt;Reset&lt;/arg&gt;
&lt;/function&gt;</pre>


<h3 id="contract_f_08">verifyAppAccessLimitedToOnlySandboxOrLiveAPIs</h3>
<p><strong>Valid in version: 2018.0.10 and later, 2019.0.0 and later</strong></p>
<p><strong>Note</strong>: This function is not part of the default contract workflow. It's a custom function that you can use to modify the default behavior in the developer portal. For information about using custom workflows, see <a href="01_overview_cm_wf.htm">Custom Workflows in the Developer Portal</a>.</p>
<p>For information about setting up a custom workflow in the developer portal, see <a href="../learnmore/site_admin_workflows.htm#howto_workflow_custom">How do I set up and manage custom workflows?</a></p>
<p>By default, an app version can request a contract with an API in any API environments that are available.</p>
<p>If you want to implement custom behavior so that an app version can only have contracts in one environment, you can use this function. If you add this function into your contract workflow, and then assign the revised workflow as your default, when an app requests a contract with an API in a specific environment (Sandbox or Live), the function checks that the app doesn't already have one or more contracts in a different environment. With this function in place, one app version can have contracts in the Sandbox environment, or in the Live environment, but not both.</p>
<p><strong>Note</strong>: The limitation to only allow access in one environment is applied at the app version level, not the app level.</p>
<p>If custom workflow is implemented that includes this function, existing app versions that already have contracts in both environments are not affected.</p>
<h4>Parameters</h4>
<p>None.</p>
<h4>Examples/Notes/Additional Information</h4>
<p>An example of one instance of where this function is added into the Contracts workflow is shown below (line 11). In this example, the check is done in a scenario where a manual approval is needed for a Sandbox API, which is controlled by platform API configuration settings. In this scenario, when a contract is requested with an API in the Sandbox environment and manual approval is needed, the function would check that the app version making the request doesn't already have a contract with any API in the Live environment. If you're modifying the workflow, you would need to add the function in as many parts of the workflow as needed to make sure that you get the expected results.</p>
<pre>01 &lt;action id="104" name="Manual Approval Needed for Production API" auto="TRUE"&gt;
02   &lt;restrict-to&gt;
03     &lt;conditions type="AND"&gt;
04       &lt;condition type="isAtmosphereProductionApiContract" /&gt;
05     &lt;/conditions&gt;
06   &lt;/restrict-to&gt;
07    &lt;results&gt;
08     &lt;unconditional-result old-status="Pending" status="Pending Approval" step="300" owner="${caller}"/&gt;
09   &lt;/results&gt;
10   &lt;post-functions&gt;
11     &lt;function type="verifyAppAccessLimitedToOnlySandboxOrLiveAPIs" /&gt;
12     
13     &lt;function type="updateAPIContractStatus"&gt;
14       &lt;arg name="status"&gt;&amp;AtmoContractStatusPendingApproval;&lt;/arg&gt;
15     &lt;/function&gt;
16     &lt;function type="sendNotification"&gt;
17         &lt;arg name="notificationType"&gt;com.soa.notification.type.api.access.requested.both.apiadmin&lt;/arg&gt;
18         &lt;arg name="role"&gt;ApiAdmin&lt;/arg&gt;
19       &lt;arg name="status"&gt;&amp;AtmoContractStatusPendingApproval;&lt;/arg&gt;
20     &lt;/function&gt;
21     &lt;function type="sendNotification"&gt;
22       &lt;arg name="notificationType"&gt;com.soa.notification.type.api.access.requested.production.appteam&lt;/arg&gt;
23       &lt;arg name="role"&gt;AppAdmin&lt;/arg&gt;
24       &lt;arg name="status"&gt;&amp;AtmoContractStatusPendingApproval;&lt;/arg&gt;
25     &lt;/function&gt;
26   &lt;/post-functions&gt;
27 &lt;/action&gt;</pre>
<p><a href="#top">Back to top</a></p>



<h2 id="contract_c_00">API Contract Workflow: Conditions</h2>
<p>The following conditions apply to the API contract workflow:</p>
<ul>
	<li><a href="#contract_c_01">isAtmosphereApiContract</a></li>
	<li><a href="#contract_c_02">isAtmosphereSandboxApiContract</a></li>
	<li><a href="#contract_c_03">isAtmosphereProductionApiContract</a></li>
	<li><a href="#contract_c_04">isAtmosphereSandboxAutoApprove</a></li>
	<li><a href="#contract_c_05">isAtmosphereProductionAutoApprove</a></li>
	<li><a href="#contract_c_06">isRemoteFedMemberApp</a></li>
	<li><a href="#contract_c_07">apiContractUsesRestrictedScope</a></li>
	<li><a href="#contract_c_08">apiVersionSupportsResourceLevelPermissions</a></li>
	<li><a href="#contract_c_09">isAPIContractScopeNotEmpty</a></li>
	<li><a href="#contract_c_10">checkAppVersionStateMatches</a></li>
	<li><a href="#contract_c_11">checkAppVersionFedMemberMatches</a></li>
</ul>
<!--<p>{com.soa.atmosphere.impl\src\com\soa\apicontract\workflow\APIContractWorkflowConditions.java}</p>-->


<h3 id="contract_c_01">isAtmosphereApiContract</h3>
<p>Returns <strong>true</strong> if used in the API contract workflow.</p>

<h4>Parameters</h4>
<p>None.</p>


<h3 id="contract_c_02">isAtmosphereSandboxApiContract</h3>
<p>Returns <strong>true</strong> if the API contract is for the Sandbox environment.</p>

<h4>Parameters</h4>
<p>None.</p>


<h3 id="contract_c_03">isAtmosphereProductionApiContract</h3>
<p>Returns <strong>true</strong> if the API contract is for the <!-- #BeginLibraryItem "/Library/environ_live.lbi" -->Live<!-- #EndLibraryItem --> environment.</p>

<h4>Parameters</h4>
<p>None.</p>


<h3 id="contract_c_04">isAtmosphereSandboxAutoApprove</h3>
<p>Returns <strong>true</strong> if the API contract is with an API version that has  connections to the sandbox environment set up to be auto-approved.</p>

<h4>Parameters</h4>
<p>None.</p>


<h3 id="contract_c_05">isAtmosphereProductionAutoApprove</h3>
<p>Returns <strong>true</strong> if the API contract is with an API version that has connections to the <!-- #BeginLibraryItem "/Library/environ_live.lbi" -->Live<!-- #EndLibraryItem --> environment set up to be auto-approved.</p>

<h4>Parameters</h4>
<p>None.</p>


<h3 id="contract_c_06">isRemoteFedMemberApp</h3>
<p>Returns <strong>true</strong> if the API contract is with an app that belongs to a federation member and the federation member is not in the same deployment.</p>

<h4>Parameters</h4>
<p>None.</p>


<h3 id="contract_c_07">apiContractUsesRestrictedScope</h3>
<p>Returns <strong>true</strong> if the API contract is not unrestricted (restricted to one or more licenses/scopes). If the API contract is unrestricted, with full access to the API version, this condition returns false.</p>

<h4>Parameters</h4>
<p>None.</p>


<h3 id="contract_c_08">apiVersionSupportsResourceLevelPermissions</h3>
<p>Returns <strong>true</strong> if the API contract is with an API version that supports resource-level permissions.</p>

<h4>Parameters</h4>
<p>None.</p>





<h3 id="contract_c_09">isAPIContractScopeNotEmpty</h3>
<p>Tests to make sure that the contract gives the app access to at least one operation in the API; returns <strong>true</strong> if the contract doesn't give access to any operations in the app.</p>
<p>Tests whether the API contract is restricted AND either of the following is true:</p>
<p>The API contract does not include any licenses in the scope.</p>
<p>The aggregate of all licenses does not give it access to any of the operations based on how scope mapping is configured (mapping of <strong>License</strong> > <strong>Scope</strong> and mapping of <strong>Operation</strong> > <strong>Scope</strong>).</p>

<h4>Parameters</h4>
<p>None.</p>


<h3 id="contract_c_10">checkAppVersionStateMatches</h3>
<p>Returns <strong>true</strong> if the app version state is one of the states specified in the State parameter.</p>

<h4>Parameters</h4>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>AppVersionDN (optional)</td>
			<td>A specified app version. If AppVersionDN is not defined, it will be the AppVersionID that the API contract is for.</td>
		</tr>
		<tr>
			<td>State</td>
			<td>A comma-separate list of State values.</td>
		</tr>
	</tbody>
</table>

<h3 id="contract_c_11">checkAppVersionFedMemberMatches</h3>
<p>Returns <strong>true</strong> if the app version belongs to one of the federation members specified.</p>

<h4>Parameters</h4>
<table class="doctable">
	<thead>
		<tr>
			<th>Name</th>
			<th>Description/Values</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>AppVersionDN (optional)</td>
			<td>A specified app version. If AppVersionDN is not defined, it will be the AppVersionID that the API contract is for.</td>
		</tr>
		<tr>
			<td>FedMemberID</td>
			<td>A comma-separated list of federation members.</td>
		</tr>
	</tbody>
</table>
<p><a href="#top">Back to top</a></p>



<h2 id="contract_vr_00">API Contract Workflow: Variable Resolvers</h2>
<p>The following variables are available for the API contract workflow:</p>
<ul>
	<li><a href="#contract_vr_01">${contract.api.dn}</a></li>
	<li><a href="#contract_vr_02">${contract.api.version.dn}</a></li>
	<li><a href="#contract_vr_03">${contract.app.dn}</a></li>
	<li><a href="#contract_vr_04">${contract.app.version.dn}</a></li>
	<li><a href="#contract_vr_05">${contract.dn}</a></li>
	<li><a href="#contract_vr_06">${contract.state}</a></li>
	<li><a href="#contract_vr_07">${contract.old.state}</a></li>
</ul>


<h3 id="contract_vr_01">${contract.api.dn}</h3>
<p>The API ID for the API version that the contract applies to. Note this is the API ID, not the API Version ID.</p>


<h3 id="contract_vr_02">${contract.api.version.dn}</h3>
<p>The APIVersionID of the API version that the connection is for.</p>


<h3 id="contract_vr_03">${contract.app.dn}</h3>
<p>The AppID of the app version that the connection is for.</p>


<h3 id="contract_vr_04">${contract.app.version.dn}</h3>
<p>The AppVersionID of the app version that the connection is for.</p>


<h3 id="contract_vr_05">${contract.dn}</h3>
<p>The APIContractID of the contract.</p>


<h3 id="contract_vr_06">${contract.state}</h3>
<p>Returns the current state of the API contract.</p>

<p class="apidoc_note"><strong>Note</strong>: there are two sets of values relating to contracts; contract state and contract status. Contract state indicates what point in the contract lifecycle the contract is currently in; for example, pending approval, approved, activated. Contract status indicates whether the contract is active, not yet active, or archived, and determines which workflow actions are valid for the contract.</p>


<h3 id="contract_vr_07">${contract.old.state}</h3>
<p>When using the updateContractStatus function, the contract.old.state variable will be set for the subsequent functions/actions to use.</p>
<p><a href="#top">Back to top</a></p>




<hr class="divide_hr" />




<h2 id="related_topics">Related Topics</h2>
<div class="relatedlinks" id="cm_workflow">
<ul>
	<li><a href="01_overview_cm_wf.htm">Custom Workflows in the Developer Portal</a></li>
	<li><a href="02_general.htm">Workflow General Reference: Functions, Conditions, and Variables</a></li>
	<li><a href="03_app_version_wf.htm">App Version Workflow</a></li>
	<li><a href="04_api_version_wf.htm">API Version Workflow</a></li>
	<li><a href="05_api_contract_wf.htm">API Contract Workflow</a></li>
	<li><a href="06_ticket_wf.htm">Ticket Workflow</a></li>
</ul>
<ul>
	<li><a href="07_group_membership_wf.htm">Group Membership Workflow</a></li>
	<li><a href="08_user_wf.htm">User Workflow</a></li>
	<li><a href="09_review_wf.htm">Review Workflow</a></li>
	<li><a href="10_discussions_wf.htm">Discussions Workflow</a></li>
	<li><a href="11_comments_wf.htm">Comments Workflow</a></li>
	<li><a href="12_model_wf.htm">Model Object Workflow</a></li>
</ul>
</div>