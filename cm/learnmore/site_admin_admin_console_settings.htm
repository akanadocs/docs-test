---
layout: page
title: Admin Console Settings | Site Administration | Community Manager Help
description: Managing the configuration settings relating to Community Manager, in the Policy Manager Admin Console.
product: cm
category: learn
sub-nav-class: Site Administration
weight: 5000
type: page
nav-title: Admin Console Settings
---
<h2 id="top">Admin Console Settings</h2>

<p>When you install Community Manager, some additional settings become available in the Configuration section for the admin console of the container. This document provides information you can use to customize these settings for your installation.</p>
<p>Note that although the configuration settings in Community Manager apply to the developer portal, the Admin Console settings apply only to the container, not the entire deployment. In some cases, configuration settings might need to be set differently in specific containers based on factors such as the Community Manager features installed in the container and the container's network access.</p>
<p>The Site Admin for the developer portal might not have access to the Admin Console for the container; if you do not have access, work with the deployment operator and/or Administrator to change the configuration properties as needed.</p>
<p>For general information regarding the Akana Administration Console, please refer to the applicable online help.</p>
<p>For information about the configuration settings defined by the Community Manager Site Admin within the developer portal, refer to the <a href="site_admin_config.htm">Site Admin help, Config section</a>.</p>

<div class = "divider1"></div>

<h3 style="color: gray;">Table of Contents</h3>



<ol class="table_of_contents">
  <li><a href="#cm_settings_navigation">How do I get to the Community Manager Configuration Settings in the Akana Administration Console?</a></li>
  <li><a href="#cm_settings_explanation">What are the Community Manager Configuration Settings in the Akana Administration Console?</a></li>
</ol>



<div class = "divider1"></div>



<a name="cm_settings_navigation"></a>
<h3>How do I get to the Community Manager Configuration Settings in the Akana Administration Console?</h3>
<p>To modify the Community Manager settings in the Admin Console, you must be a Site Admin for the Admin Console.</p>
<h5>To navigate to the CM configuration settings:</h5>
<ol>
<li>Log in to the Akana Administration Console.</li>
<li>Click the <strong>Configuration</strong> tab.</li>
<li>On the left, under Configuration Categories, scroll down to find the applicable category.</li>
<li>Change the values as needed, and then click <strong>Apply Changes</strong>.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<a name="cm_settings_explanation"></a>
<h3>What are the Community Manager Configuration Settings in the Akana Administration Console?</h3>
<p>The configuration settings allow you to set values for the specific container. They are in these categories:</p>
<ul>
  <li><a href="#com_soa_api_security">com.soa.api.security</a></li>
  <li><a href="#com_soa_api_atmosphere">com.soa.atmosphere</a></li>
  <li><a href="#com_soa_atmosphere_console">com.soa.atmosphere.console</a></li>
  <li><a href="#com_soa_atmosphere_forwardproxy">com.soa.atmosphere.forwardproxy</a></li>
  <li><a href="#com_soa_oauth">com.soa.oauth</a></li>
  <li><a href="#com_soa_oauth_provider">com.soa.oauth.provider</a></li>
  <li><a href="#com_soa_oauth_agent_client_cache">com.soa.oauth.agent.client.cache</a></li>
  <li><a href="#com_soa_oauth_client_cache">com.soa.oauth.client.cache</a></li>
  <li><a href="#com_soa_oauth_provider">com.soa.oauth.provider</a></li>
</ul>
<p>Some of the settings are explained below.</p>



<h4><a name="com_soa_api_security"></a>com.soa.api.security</h4>
<p>When the request comes in, the API Security Policy validates whether the request has the correct security values. To do that, it must retrieve the app's shared secret or certificate. This policy caches the app's shared secret, app certificate, or both; these configuration properties manage the caching of these values.</p>
<dl>
<dt>com.soa.api.security.cache.expirationPeriod</dt>
<dd>Indicates how long an app's shared secret, certificate, or both are stored in the cache, once they are retrieved, if they are not used again. When the expiration time has passed, if the values were not used again, they are removed from the local cache.</dd>
<dd>Default: 86400000 milliseconds (1 day)</dd>


<dt>com.soa.api.security.cache.refreshTime</dt>
<dd>Indicates how long an app's shared secret, certificate, or both are stored in the cache without checking whether the cached data is out of date. </dd>
<dd>If values are used, they are kept in the cache, but the refresh time governs how often the platform checks to make sure the cached values are still current.</dd>
<dd>Default: 900000 milliseconds (15 minutes)</dd></dl>
<p><a href="#top">Back to top</a></p>



<h4><a name="com_soa_api_atmosphere"></a>com.soa.atmosphere</h4>
<dl>
  <dt>atmosphere.config.authTokenMaxLength</dt>
  <dd>Because the <a href="basics_glossary.htm#gl_atmoauthtoken">AtmoAuthToken cookie</a> includes a lot of information about the user, in some cases the auth token is long, and could potentially cause requests to fail if the server has a limitation on HTTP header length. For this reason, container configuration properties include Auth Token Max Length. When the auth token would be greater than the max length, the platform creates a mini auth token, and saves the full auth token in the database.</dd>
  <dd>This causes a slight additional overhead on performance, therefore it is configurable.</dd>
  <dd>Default: 512k</dd>
  <dt>atmosphere.config.businessSettingsCacheRefreshOnChange</dt>
  <dd>Allows security configuration changes to be implemented immediately. When set to false, configuration settings might take up to 5 minutes to take effect due to caching.</dd>
  <dd><strong>Note</strong>: The configuration only works when there is no load balancing set up, since the in-memory configuration update is limited to the container instance, not all the instances in the cluster.</dd>
  <dd>Default: false</dd>


<!--<dt>atmosphere.config.contentPath</dt>
<dd>(Doc not needed)</dd>-->


  <dt>atmosphere.config.csrfHttpWriteSkipUserAgents</dt>
  <dd>Allows you to specify values for the user-agent request header that will be allowed to use POST, PUT, and DELETE operations without providing the custom <a href="basics_glossary.htm#gl_xcsrf_token_fedmemberidheader">X-Csrf-Token_fedmemberID</a> header. If one of the specified values is in the user-agent request header, Community Manager does not check for the custom header. Separate multiple values with commas; use wildcard if needed. Example: Mozilla* allows all Mozilla Firefox versions.</dd>
  <dd>Default: No default.</dd>


  <dt>atmosphere.config.enterpriseInstall</dt>
  <dd>Indicates whether it is an enterprise install (true) or a multi-tenant install (false).</dd>
  <dd>In an enterprise install, the user identity and the user profile name are the same; for example, <strong>johnsmith</strong>.</dd>
  <dd>In a multi-tenant install, the user identity name is formatted as tenantid-username, for example, <strong>acmepaymentscorp-johnsmith</strong>.</dd>
  <dd>This helps ensure that if the same user has an account on two different tenants there is no conflict and each account is treated separately.</dd>



<!--<dt>atmosphere.config.loadContentFromWorkspace</dt>
<dd>(debug option used internally)</dd>-->


<!--<dt>atmosphere.config.loadResourcesFromWorkspace</dt>
<dd>(debug option used internally)</dd>-->


<!--<dt>atmosphere.config.resourcePath</dt>
<dd>(Doc not needed)</dd>-->


  <dt>atmosphere.config.userRolesDenied</dt>
  <dd>Allows you to set up one or more roles that cannot use this implementation. For example, you might want to dedicate a special container for administrator use only.</dd>
  <dd>Use comma separators as needed. For example:
  <pre>Site Administrator,Business Administrator,ApiAdmin, BusinessAdmin,SiteAdmin</pre></dd>
  <dd>For more information, see <a href="site_admin_users.htm#how_do_i_exclude_roles">How do I exclude specific roles from platform access?</a> (Site Admin help for managing users).</dd>
  <dt>openid.provider.proxy</dt>
  <dd>Used in scenarios where there is a federation with a proxy in front of Community Manager. This setting is valid for legacy purposes only.</dd>
</dl>
<p><a href="#top">Back to top</a></p>



<h4><a name="com_soa_atmosphere_console"></a>com.soa.atmosphere.console</h4>
<dl>
<dt>atmosphere.console.config.xFrameOptions</dt>
<dd>Allows you to use the X-Frame-Options HTTP response header to indicate whether the browser is allowed to render the Community Manager developer portal URL in a &lt;frame&gt; or
&lt;iframe&gt; which could be embedded in another site.</dd>
<dd>If this entry is set to Deny, prevention is turned on.</dd>
<dd>This preventive measure helps protect the platform against a clickjacking attack where the content would be embedded in another site.</dd>
<dd>Default: No value set.</dd>
</dl>
<p><a href="#top">Back to top</a></p>



<h4><a name="com_soa_atmosphere_forwardproxy"></a>com.soa.atmosphere.forwardproxy</h4>
<dl>
<dt>forward.proxy.allowedHosts</dt>
<dd>Allows you to specify one or more hosts that are allowed for forward proxy. Any other hosts are rejected as unauthorized, with a message that the host is not allowed. To allow all, use the asterisk wildcard (*). To allow multiple hosts, use a comma separator; for example, host1,host2,host3.</dd>
<dd><strong>Note</strong>: This setting applies only to the current container. If you want to set the same value for all containers that are running Community Manager, there is a database script you can run to change the setting in the database. For help, <a href="basics_support.htm#how_do_i_contact_technical_support">contact Technical Support</a>.</dd>
<dd>Default value: * (allow all).</dd>
</dl>
<p><a href="#top">Back to top</a></p>



<h4><a name="com_soa_oauth"></a>com.soa.oauth</h4>
<p>Indicates settings applicable when the platform is used as an OAuth Resource Server.</p>
<p><strong>Note</strong>: These caching properties are node-specific. In a load balancing environment, the properties must be applied individually to each container. Each Network Director has a local cache, and the cache settings apply to that container property only. You must change the property on each Network Director container. The same property is applicable to all containers but must be manually applied on each container.</p>
<dl>
<dt>com.soa.oauth.resourceserver.grant.cacheMaxCapacity</dt>
<dd>Maximum cache size for OAuth Resource Server grants. See note above re cache settings.</dd>
<dt>com.soa.oauth.resourceserver.grant.expirationPeriod</dt>
<dd>Expiration period for OAuth Resource Server grants.</dd>
<dt>com.soa.oauth.resourceserver.grant.refreshTime</dt>
<dd>Refresh time for OAuth Resource Server grants: the length of time for which a refresh token is valid.</dd>
</dl>
<p><a href="#top">Back to top</a></p>



<h4><a name="com_soa_oauth_provider"></a>com.soa.oauth.provider</h4>
<p>Indicates settings are applicable when the platform is used as an OAuth Provider. Tuning the settings to your installation can help you achieve better performance and make the OAuth Provider more scalable. To access the settings, log in to the Policy Manager console and go to <strong>Configuration</strong> > <strong>com.soa.oauth.provider</strong>.</p>
<p>The following settings are available:</p>
<dl>
<dt>com.soa.oauth.provider.config.grantAttributesCacheExpirationTime</dt>
<dd>The expiration time for grant attributes stored in the cache, in milliseconds. A scheduler takes care of refreshing the cache entries depending upon their expiration, as follows:</dd>
</dl>
<ul>
  <li>Value = 0: the cache is not cleared. Cache entries are retained.</li>
  <li>Value &lt; 0 (negative number): the cache is deleted.</li>
  <li>Value &gt; 0 (positive number): the scheduler checks the last access time of the entry. If the last access time is greater than the expiration time, the cache entry is expired since this indicates that probably the grant attributes are no longer required. If they are required, they are retrieved from the database.</li>
</ul>
<dl>
  <dt>com.soa.oauth.provider.config.grantAttributesCacheMaxSize</dt>
  <dd>Maximum cache size for OAuth Provider grants. The cache cannot exceed the max size. The scheduler uses the cache max size and cache expiration time to refresh and update the cache data.</dd>
  <dt>com.soa.oauth.provider.config.grantSequenceIDCacheExpirationTime</dt>
  <dd>The cache expiration time for the Grant sequence ID (seqID) in the cache, in milliseconds. This property works in the same way as grantAttributesCacheExpirationTime above, for the grant seqID. The scheduler takes care of refreshing the cache entries depending upon their expiration, as follows:</dd>
  </dl>
<ul>
  <li>Value = 0: the cache is not cleared. Cache entries are retained.</li>
  <li>Value &lt; 0 (negative number): the cache is deleted.</li>
  <li>Value > 0 (positive number): the scheduler checks the last access time of the entry . If the last access time is greater than the expiration time, the cache entry is expired since this indicates that probably the grant sequence ID is no longer required. If it is required, it is retrieved from the database.</li>
</ul>
<dl>
  <dt>com.soa.oauth.provider.config.grantSequenceIDCacheCacheMaxSize</dt>
  <dd>Maximum cache size for OAuth grantSeqID values. The grantSeqID represents a unique OAuth grant or token, and is the primary key of the OAUTH_GRANTS table as well as the OAUTH_TOKENS table. When doing a lookup for a grant or grant-related properties, instead of querying on huge grants or the tokens table it is faster to fetch it from cache.</dd>
</dl>

<p><a href="#top">Back to top</a></p>



<h4><a name="com_soa_oauth_agent_client_cache"></a>com.soa.oauth.agent.client.cache</h4>
<p>The platform's OAuth provider and provider agent can add/retrieve OAuth client details to/from an in-memory cache. Configure the settings below in all containers where the OAuth provider and OAuth provider agent features are installed.</p>
<p><strong>Note</strong>: These caching properties are node-specific. In a load balancing environment, the properties must be applied individually to each container. Each Network Director has a local cache, and the cache settings apply to that container property only. You must change the property on each Network Director container. The same property is applicable to all containers but must be manually applied on each container.</p>
<dl>
  <dt>com.soa.oauth.agent.client.cache.dirtyCheckEnabled</dt>
  <dd>Enable/Disable dirty checking of cached client objects.</dd>
  <dd>When this property is enabled, each time the platform retrieves client details from cache it also retrieves the last updated timestamp of the OAuth client/application from the database and compares to see if the application has been modified since it was added to the cache. If there is a change, it retrieves the specific details from the database and returns them to the caller, and updates the cache.</dd>
  <dd>True if enabled, false otherwise.</dd>
  <dt>com.soa.oauth.agent.client.cache.lifeTime</dt>
  <dd>The number of seconds for which the client details can be stored in cache. After this, the client details must be refreshed in the cache during the next scheduled job run.</dd>
</dl>
<p><a href="#top">Back to top</a></p>



<h4><a name="com_soa_oauth_client_cache"></a>com.soa.oauth.client.cache</h4>
<p>The platform's OAuth provider and provider agent can add/retrieve OAuth client details to/from an in-memory cache. Configure the settings below in all containers where the OAuth provider and OAuth provider agent features are installed.</p>
<p><strong>Note</strong>: These caching properties are node-specific. In a load balancing environment, the properties must be applied individually to each container. Each Network Director has a local cache, and the cache settings apply to that container property only. You must change the property on each Network Director container. The same property is applicable to all containers but must be manually applied on each container.</p>
<dl>
  <dt>com.soa.oauth.client.cache.dirtyCheckEnabled</dt>
  <dd>Enable/Disable dirty checking of cached client objects.</dd>
  <dd>When this property is enabled, each time the platform retrieves client details from cache it also retrieves the last updated timestamp of the OAuth client/application from the database and compares to see if the application has been modified since it was added to the cache. If there is a change, it retrieves the specific details from the database and returns them to the caller, and updates the cache.</dd>
  <dd>True if enabled, false otherwise.</dd>
  <dt>com.soa.oauth.client.cache.lifeTime</dt>
  <dd>The number of seconds for which the client details can be stored in cache. After this, the client details must be refreshed in the cache during the next scheduled job run.</dd>
</dl>
<p><a href="#top">Back to top</a></p>



<h4><a name="com_soa_oauth_provider"></a>com.soa.oauth.provider</h4>

<dl>
<dt>com.soa.oauth.provider.config.allowedClockSkewInSecondsForJWT</dt>
<dd>Indicates the allowable <a href="basics_glossary.htm#gl_clock_skew">clock skew</a> value, in seconds, for <a href="basics_glossary.htm#gl_jsonwebkey">JSON web key</a> tokens.</dd>
<dt><a name="com_soa_oauth_provider_jwk_validityinseconds" id="com_soa_oauth_provider_jwk_validityinseconds"></a>com.soa.oauth.provider.jwk.validityInSeconds</dt>
<dd>When asymmetric signature keys are used to sign ID tokens, the keys are rolled over by periodically adding new keys to the JWK Set. By default, All JSON Web Keys that the developer portal's OpenID Connect provider create will have a validity of 24 hours (86400 seconds). This setting allows you to modify the validity period.</dd>
<dt>com.soa.oauth.provider.config.maxRedirectURLLength</dt>
<dd>Indicates the maximum allowable length of a redirect URL when the platform is used as an OAuth Resource Server.</dd>
<dt>com.soa.oauth.provider.config.rsaJwkKeySize</dt>
<dd>Indicates the RSA JSON Web Key size when the platform is used as an OAuth Resource Server.</dd>
</dl>
<p><a href="#top">Back to top</a></p>



