---
layout: page
title: Test Your App | App Development | Community Manager Help
description: Test your app.
product: cm
category: learn
subcategory: Test
weight: 13
type: page
nav-title: Test Your App
---
<h2 id="top">Test Your App</h2>
<p>Test your app.</p>

<div class = "divider1"></div>

<h3 style="color: gray;">Table of Contents</h3>
<ol class="table_of_contents">
  <li><a href="#what_app_testing_tools_does_the_platform_provide">What app testing tools does the platform provide?</a></li>
  <li><a href="#how_do_i_test_my_app_in_my_sandbox">How do I test my app in my sandbox?</a></li>
  <li><a href="#what_are_some_sample_rest_clients_i_can_use_to_test_my_api">What are some sample REST clients I can use to test my API?</a></li>
  <li><a href="#what_is_the_developer_console">What is the Developer Console (Dev Console)?</a></li>
  <li><a href="#how_do_i_test_my_app_in_the_dev_console">How do I test my app in the Dev Console?</a></li>
  <li><a href="#how_do_i_get_dev_console_to_stop_caching">How can I make sure I always see the latest results in Dev Console?</a></li>
  <li><a href="#how_do_i_test_authorization_of_my_app_with_oauth_using_the_dev_console">How do I test authorization of my app with OAuth using the Dev Console?</a></li>
</ol>
<div class = "divider1"></div>



<a name="what_app_testing_tools_does_the_platform_provide"></a><h3>What app testing tools does the platform provide?</h3>
<p>The platform provides the following app testing tools:</p>
<p><strong>Dev Console</strong></p>
<p>The Developer Console (Dev Console) is a web-based REST client that allows you to test different APIs in the context of an application. It is accessible on the <em>Apps &gt; Dev Console</em> page of all apps you add to the platform.</p>
<p><strong>Performance Monitoring</strong></p>
<p>The <em>My Apps &gt; Monitor</em> section includes reporting tools for monitoring performance of your app. Based on real-time data reported through the monitoring tools, you can troubleshoot potential problems with your app and/or API.</p>
<ul>
  <li>The <em>Charts</em> reporting tool allows you to monitor and view service response time, adherence to defined API Access Contracts and transaction faults.</li>
  <li>The <em>Usage Logs</em> reporting tool allows you to query and view information about request and response message data for API, App, and Contract activity.</li>
  <li>See <a href="app_monitoring.htm#how_do_i_monitor_app_performance">How do I monitor app performance?</a></li>
</ul>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_test_my_app_in_my_sandbox"></a><h3>How do I test my app in my sandbox?</h3>
<p>When you submit an API Access Request and receive an approval from the Admin Team, you are given access to a Sandbox endpoint that you can use in your testing environment. Common areas to test include testing the behavior of apps with API calls to verify that the app is behaving as expected, testing an app with simulated transactions and data, checking that the flow of information to the app is predictable (i.e., the expected information in the expected format), check that the app is processing the API results correctly, and test error handling and usability.</p>
<p>By using a testing environment, you can experiment with different scenarios and make adjustments as needed to make sure that your app works as expected with the API.</p>
<p><a href="#top">Back to top</a></p>



<a name="what_are_some_sample_rest_clients_i_can_use_to_test_my_api"></a><h3>What are some sample REST clients I can use to test my API?</h3>
<p>Examples of test clients you can use to send REST requests include: <a href="http://code.google.com/p/rest-client/" target="_blank">Google rest-client</a>, <a href="https://addons.mozilla.org/en-US/firefox/addon/restclient/" target="_blank">RESTClient Firefox Add-on</a>, and <a href="http://www.soapui.org/" target="_blank">soapUI</a>.</p>
<p><a href="#top">Back to top</a></p>



<a name="what_is_the_developer_console"></a><h3>What is the Developer Console (Dev Console)?</h3>
<p>The Developer Console (Dev Console) is a web-based REST client that allows you to test different APIs in the context of an application. It is accessible on the <em>Apps &gt; Dev Console</em> page of all apps you add to the platform.</p>
<p>When an API is added to the platform it is assigned an &quot;API Consumer Application Security Policy&quot; that is used to identify (authenticate) the application that is attempting to consume an API to determine if it is authorized or not. This policy type supports multiple mechanisms for the App to present its identity, including plain text App Id, signed header with x.509 or a shared secret, or OAuth (1.0a or 2.0). This is the default policy assigned to all APIs. Your policy administrator can add additional custom security policies based on your requirements.</p>
<p>When your application is connected to an API (through the <strong>API Access Request </strong>process), the application security credentials you've assigned to your app (via <em>App Details &gt; Security Credentials</em>) work in conjunction with the API security policies. The request message that is sent to the API must obey the security policies assigned to the API or the request will be rejected.</p>
<p><em><strong>Note: If your App is contracted with an API (API Access Request) that includes one or more licenses, the Dev Console will only display the operations that the App is allowed to access in the API based on the API License configuration.</strong></em></p>
<p>The <em>Dev Console</em> allows you to test different APIs in the context of an application so you can verify if you can use the API with your app.</p>
<p>For example, you may want to:</p>
<ol>
  <li>Determine what is needed to send a request to an API.</li>
  <li>Verify if you can successfully send a request to an API.</li>
  <li>If your application is failing, verify if there is an issue in either the API or app. <br />
   <br />
For example, if your app sends a request message to the API and it is rejected, you could receive errors if the security credentials in your app do not match those configured in the API policy (i.e., your app is configured with a SHA1 - Shared Secret, but the API Policy is configured with SHA with RSA - PKI). In this instance the security credential types would need to match.</li>
  <li>Test different operations in your app.</li>
</ol>
<p>Before using the <em>Dev Console</em>, you must:</p>
<ol>
  <li>Identity an API you would like to test with your app. This API can be one that is already available in the platform, or can be one that you've added using the <strong>Add a New API </strong>function via the <em>Plus Menu</em>.</li>
  <li>Add an app to the platform. This can be done using the <strong>Add a New App</strong> function via the <em>Plus Menu</em>. Make sure that you've assigned the desired security credentials in the <em>App Details &gt; Security Credentials</em> section.</li>
  <li>Submit an API Access Request (via the <strong>Access</strong> link on the <em>API Details</em> page) for the API you would like to test with your app. The API Access Request must be approved by the API Administrator and activated before you can begin testing the API with the <em>Dev Console</em>. After your API Access Request has been approved and activated it will be available for use via the <em>Dev Console</em>.</li>
</ol>
<p>The <em>Dev Console</em> includes an API drop-down that displays a list of the APIs that your app is currently connected to. When you select an API from the drop-down, the platform analyzes the API configuration and the security policies assigned to the API and populates the fields with the appropriate information. After the <em>Dev Console</em> is populated, you configure each test case and click <strong>Run It</strong>.</p>
<p>The following illustration shows the <em>Dev Console</em> with the Bing VirtualEarth API loaded. Continue to <a href="#how_do_i_test_my_app_in_the_dev_console">How do I test my app in the Dev Console?</a> for an example walkthrough that illustrates how to test your app with the <em>Dev Console</em>.</p>
<p><img src="images/devconsole_example.jpg" width="629" height="448" alt="" /></p>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_test_my_app_in_the_dev_console"></a>
<h3>How do I test my app in the Dev Console?</h3>
<p>The following procedure provides a typical example of how to use the <em>Dev Console</em> to test your app. For more examples of how to test your app using the Dev Console, you can experiment with many of the popular APIs that are currently available on this site. Many APIs include &quot;Getting Started&quot; documentation in the <em>API &gt; Documentation</em> section that includes custom <em>Dev Console</em> testing procedures illustrating a variety of different test scenarios.</p>



<h4>Part 1: Run REST Operation with Params:</h4>
<p>The following example illustrates how to establish a GET request and verify the response header and content. The example uses the Facebook&reg; API.</p>
<p><strong><u>Pre-conditions</u></strong></p>
<ol>
  <li>Add the &quot;API User Security Policy&quot; and &quot;API Consumer Application Security Policy&quot; to the Operational Policies folder of the Policy Manager Tenant Organization for your platform.
   <ul>
      <li>Use the Policy Manager <strong>Copy Policy</strong> function, change the policy key, and then use <strong>Change Organization</strong> to move the policy to the Tenant Organization for your platform.</li>
</ul>
</li>
  <li>Add a REST API to the platform that includes an Operation with a GET Method. Specify the following parameters:
<table cellspacing="0px" class="doctable" style="width: 98%;">
  <thead>
  <tr>
        <th width="20%">Field Name</th>
        <th width="80%">Description</th>
  </tr>
</thead>
<tbody>
  <tr class="t2row">
    <td>API Name</td>
     <td>Facebook</td>
  </tr>
      <tr class="t1row">
        <td>Version</td>
        <td>1.0</td>
  </tr>
      <tr class="t2row">
        <td>Tag</td>
        <td>REST, 1.0, v1, Facebook</td>
  </tr>
      <tr class="t1row">
        <td>API Description</td>
        <td>Connect to the social network with Graph API.</td>
  </tr>
      <tr class="t2row">
        <td>Target URL</td>
        <td>https://graph.facebook.com</td>
  </tr>
      <tr class="t1row">
        <td>Environment</td>
        <td>Production</td>
  </tr>
      <tr class="t2row">
        <td>Advanced Option</td>
        <td>User REST operation, add an operation called &quot;get_photo_album&quot; with GET method and path=/{album}</td>
  </tr>
      <tr class="t1row">
        <td>Advanced Option</td>
        <td>Select the two policies added in Step #1.</td>
  </tr>
      <tr class="t2row">
        <td>CNAME</td>
        <td>Facebook.&lt;host&gt;</td>
  </tr>
  </tbody>
</table>
<ul>
  <li>See <a href="api_admin_api_publishing.htm#how_do_i_add_a_rest_service">How do I add a REST service?</a> for an example walkthrough.</li>
</ul>
</li>
<li>Add an app and request access the API added in the Step #2.
    <ul>
      <li>See <a href="app_create_app_creation.htm#how_do_i_create_a_new_app">How
  do I create a new app?</a> for instructions on creating an app in the platform.</li>
      <li>See <a href="app_access_apis_api_access.htm#how_do_i_get_api_access_for_my_app">How do I get API access for my app?</a> for instructions on submitting an API Access Request. After request is approved and activated, proceed to the next step.</li>
</ul>
</li>
</ol>
<p><u><strong>Procedure</strong></u></p>
<ol>
  <li>Use the Target URL (https://graph.facebook.com) of the API and open an existing Facebook account (using your login information)</li>
  <li>Copy the Album ID from the URL, and then use <a href="#what_are_some_sample_rest_clients_i_can_use_to_test_my_api">Rest Client</a> to run this URL: https://graph.facebook.com/&lt;album_id&gt;
    <ul>
      <li>A set of response Header and Body will be returned.</li>
    </ul>
</li>
  <li>Go to <em>App &gt; App Name &gt; Dev Console</em>, and select the requested API from the API drop-down menu.
    <ul>
      <li>Note that the details of the API (End Point, Operation, Method, Accept, Content-Type, Path, Proxy URL, and Target URL) will be automatically filled in.</li>
  </ul>
</li>
  <li>Fill in the &quot;Value&quot; field with the &lt;album_id&gt; that was grabbed in Step #2.
    <ul>
      <li>Verify that the &lt;album_id&gt; is added to the Proxy and Target.</li>
  </ul>
</li>
  <li>Go to https://developers.facebook.com/apps, and create an app in Facebook.</li>
  <li>Copy the App ID and App Secret and paste to the App &gt; Dev Console. Click on <strong>Get Token</strong>.
    <ul>
      <li>Note that the Access Token is generated.</li>
    </ul>
</li>
  <li>Click <strong>Run It</strong>.
<ul>
      <li>Verify that a set of response Header and Body is returned.</li>
    </ul>
</li>
  <li>Compare result in Step #7 with Step #2.
    <ul>
      <li>Content for Header and Body should be consistent.</li>
    </ul>
</li>
</ol>



<h4>Part 2: Run REST Operation with Full URL:</h4>
<p>The following example illustrates how to establish a GET request with Params and verify the response header and content. The example uses the Facebook API.</p>
<p><strong><u>Pre-conditions</u></strong></p>
<ol>
  <li>Edit the API created in <em>Example #1: Run REST Operation with Params </em>by adding in the parameter &lt;album_id&gt; to the Target URL. Note, grab &lt;album_id&gt; from <em>Example #1: Run REST Operation with Params &gt; Procedure &gt; Step #2</em>.</li>
</ol>
<p><strong><u>Procedure</u></strong></p>
<ol>
  <li>Go to <em>My Apps &gt; App Name &gt; Dev Console</em> and select the API from the API drop-down menu.
<ul>
      <li>Note that the details of the API (End Point, Operation, Method, Accept, Content-Type, Path, Proxy URL) are automatically filled in.</li>
    </ul>
</li>
  <li>Go to https://developers.facebook.com/apps, and create an app in Facebook. Copy the App ID and App Secret and paste to <em>App &gt; Dev Console</em>. Click on <strong>Get Token</strong>.
    <ul>
      <li>Note that the Access Token is generated.</li>
  </ul>
</li>
  <li>Leave the &quot;Value&quot; field blank and then click <strong>Run It</strong>.
<ul>
      <li>Verify that a set of response Header and Body returned.</li>
    </ul>
</li>
  <li>Verify the results.
    <ul>
      <li>Content for Header and Body are valid.</li>
      </ul>
</li>
</ol>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_get_dev_console_to_stop_caching"></a>
<h3>How can I make sure I always see the latest results in Dev Console?</h3>
<p>If the API you're using sets the cache-control response header, the response message is cached. This could mean that when you send a subsequent request, the response you see is from the cache, not from the server. </p>
<p>When you send multiple requests, the first response is cached for the time specified as the value in the API's cache-control response header, and you may see the same response for all subsequent requests until the cache expires. There will only be one transaction log, even if you click the Run button multiple times, until the cache expires or is cleared.</p>
<p>To make sure you are always seeing the latest information, always clear your browser cache before sending subsequent requests.</p>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_test_authorization_of_my_app_with_oauth_using_the_dev_console"></a><h3>How do I test authorization of my app with OAuth using the Dev Console?</h3>
<p>The following procedure provides a simple example of how to use the <em>Dev Console</em> to test authorizing your app with OAuth and then subsequently sending a request.</p>
<p><strong><u>Pre-conditions</u></strong></p>
<ol>
  <li>Your app must be connected to the API. See <a href="app_access_apis_api_access.htm#how_do_i_get_api_access_for_my_app">How do I get API access for my app?</a></li>
  <li>The API the app is connected to must be configured with an OAuth Provider.</li>
  <li>Your app security credentials must be configured to correctly support the OAuth Provider configuration that the API is using.</li>
</ol>
<p><u><strong>Procedure</strong></u></p>
<ol>
  <li>Go to <em>App &gt; App Name &gt; Dev Console</em>, and select the API from the API drop-down menu.
    <ul>
      <li>Note that the details of the API (End Point, Operation, Method, Accept, Content-Type, Path, Proxy URL, and Target URL) will be automatically filled in.</li>
      <li>The &quot;Security Method&quot; will display the OAuth version the API is configured with (i.e., OAuth 1.0a or 2.0)</li>
    </ul>
</li>
  <li>If the API OAuth configuration does <em>NOT</em> use the Authentication Code grant, copy the App ID and App Secret and paste to the <em>App &gt; Dev Console</em>. If the API OAuth configuration <em>DOES</em> use the Authentication Code grant, you do not have to copy in the App ID and App Security. Click on <strong>Get Token</strong>.
    <ul>
      <li>The Access Token is generated and the login screen associated with the OAuth Provider the API is configured with displays.</li>
      </ul>
</li>
  <li>Enter the login credentials and submit. An app authorization screen displays that typically includes some type of authorize option and can optionally include fields for entering any custom grant properties data. These screens are unique for each application.</li>
  <li>Enter any grant property values, and click <strong>Authorize</strong>. A token is given to the application and an authorization successful message is returned. The application can then use this token to start sending requests.</li>
  <li>To test sending a request to the application, click <strong>Run It</strong>.
    <ul>
      <li>Verify that a set of response Header and Body is returned.</li>
    </ul>
</li>
</ol>
<p><a href="#top">Back to top</a></p>



