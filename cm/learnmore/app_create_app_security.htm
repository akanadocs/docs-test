---
layout: page
title: Configure App Credentials | Create App | App Development | Akana API Platform Help
description: Learn how to configure app credentials.
product: cm
category: learn
sub-nav-class: Apps
weight: 1214
type: page
nav-title: Configure App Credentials
---
<h1 id="top">Configure App Credentials</h1>
<p>Learn how to configure app credentials.</p>
<p><strong>Note</strong>: This topic relates to setting up managing app security within the platform. For detailed information about how to set up your app to authenticate with an API hosted on the platform, refer to <a href="app_security.htm">App Security Options and Setup</a>.</p>
<hr class="divide_hr" />



<h2 style="color: gray;">Table of Contents</h2>

<h4 style="color: gray;"><a href="#h_appsecurity_generalinfo">App Security General Information:</a></h4>
<ol class="table_of_contents">
	<li><a href="#how_do_app_credentials_work">How do app credentials work?</a></li>
	<li><a href="#what_are_the_options_in_the_security_section_of_the_app_details_page">What are the options in the Security section of the app's <strong>Details</strong> page?</a></li>
	<li><a href="#how_do_i_transfer_an_app_defined_on_another_system_to_the_developer_portal">How do I transfer an app defined on another system to the Community Manager developer portal?</a></li>
</ol>



<h4 style="color: gray;"><a href="#h_appsecurity_sharedsecret">Shared Secret:</a></h4>
<ol class="table_of_contents">
	<li><a href="#what_is_a_shared_secret">What is a Shared Secret?</a></li>
	<li><a href="#how_do_i_regenerate_a_shared_secret">How do I regenerate a shared secret?</a></li>
	<li><a href="#ss_encrypted">What do I do if the shared secret is encrypted?</a></li>
	<li><a href="#ss_decrypt_java">How do I decrypt an encrypted shared secret using Java?</a></li>
	<li><a href="#ss_decrypt_command_line">How do I decrypt an encrypted shared secret using the command-line decryption tool?</a></li>
	<li><a href="#what_rules_apply_to_generating_an_appid_and_shared_secret">What rules apply to generating an App ID and Shared Secret?</a></li>
	<li><a href="#ss_view">How do I view a shared secret?</a></li>
</ol>


<h4 style="color: gray;"><a href="#h_appsecurity_certificates">App Credentials (Certificates/CSRs):</a></h4>


<ol class="table_of_contents">
	<li><a href="#how_does_public_key_integration_work">How does public key integration work?</a></li>
	<li><a href="#what_is_a_certificate_signing_request">What is a Certificate Signing Request (CSR)?</a></li>
	<li><a href="#what_is_a_trusted_ca_certificate">What is a Trusted CA Certificate?</a></li>
	<li><a href="#where_are_the_certificate_authorit_and_trusted_ca_certificate_files_stored">Where are the Certificate Authority and Trusted CA Certificate files stored?</a></li>
	<li><a href="#how_do_i_select_a_tool_for_generating_a_certificate_signing_request_csr">How do I select a tool for generating a Certificate Signing Request (CSR)?</a></li>
	<li><a href="#how_do_i_import_a_certificate_signing_request">How do I import a certificate signing request?</a></li>
	<li><a href="#how_do_i_import_an_x509_certificate">How do I import an X.509 certificate?</a></li>
	<li><a href="#how_do_i_modify_my_app_credentials">How do I modify my app's credentials?</a></li>
	<li><a href="#how_do_i_remove_app_credentials">How do I remove app credentials?</a></li>
	<li><a href="#how_do_i_export_credentials">How do I export app credentials?</a></li>
</ol>




<hr class="divide_hr" />
<h2 id="h_appsecurity_generalinfo">App Security General Information:</h2>




<h2 id="how_do_app_credentials_work">How do app credentials work?</h2>
<p>When your app sends messages to an API, your app's credentials identify it as the sender of the message. Very few APIs accept anonymous messages; in general, you'll need to set identify your app with every message.</p>
<p>As part of setting up your app, you must set up your app security on the app's <strong>Details</strong> page, following these high-level steps (more details provided below):</p>
<ol>
	<li>Select App Protocol / Determine Credential Approach.</li>
	<li>Configure Security Credentials.</li>
	<li>Set Values in App Details &gt; Security.</li>
</ol>


<h3>Select App Protocol / Determine Credential Approach:</h3>
<p>There are several choices available to you in terms of security configuration for your app. You'll need to make sure you choose a security mechanism that's acceptable for the API or APIs you want your app to use.</p>
<p>The choices are:</p>
<ul>
	<li>Plain text App ID</li>
	<li>HMAC Signature with Shared Secret</li>
	<li>Hash/Digest with Shared Secret</li>
	<li>RSA Signature with PKI</li>
	<li>OAuth 1.0a</li>
	<li>OAuth 2.0</li>
</ul>
<p>For more detailed information about application security options, refer to <a href="app_security.htm">App Security Options and Setup</a>.</p>
<p>Each API is pre-configured as follows:</p>
<ul>
	<li>Each API is assigned either an &quot;API Consumer Application Security Policy&quot; or &quot;OAuthSecurity Policy&quot; that is defined in the Tenant.</li>
	<li>If the API supports OAuth, the API's OAuth Provider configuration is set to the OAuth version and grant types it supports.</li>
</ul>
<p>The credential approach configured in the app must match the protocol supported by the API as defined in these policies. Review the API documentation to verify the supported protocols.</p>
<pre><strong>Configure Security Credentials:</strong></pre>
<p>To authenticate your app when placing API calls, you must include your App ID and either a Shared Secret or your Public Key for PKI-based authentication (in the form of a CER or CSR).</p>
<p>Notes:</p>
<ul>
	<li>Each version of your app requires a separate set of security credentials.</li>
	<li>You'll need to obtain access to an API and you must configure credentials correctly in order to make a successful call to the API.</li>
</ul>


<h3>Set Values in App Details &gt; Security:</h3>
<p>On the app's <strong>Details</strong> page, the <strong>Security</strong> section includes the <strong>Show Keys</strong> function that displays the Shared Secret and Public Key options for generating or importing the credentials required to authenticate your app in the Sandbox or Live implementations. When deciding on the type of security credentials you'll use for your app, it's a good idea to review the API documentation for APIs you'll want your app to use, to verify what the API supports and any requirements it might have.</p>
<p>When an app is initially created using the <strong>Add New App</strong> function, a shared secret is either provided, or is generated automatically. You can view the Shared Secret in the <strong>App Details</strong> &gt; <strong>Security</strong> section by clicking <strong>Show Keys</strong> and selecting <strong>Click to View</strong>. You can use the <strong>Regenerate Key</strong> option to issue a new shared secret.</p>
<p><strong>Note</strong>: Depending on the platform settings specified by your Administrator, the shared secret displayed on the app's <strong>Details</strong> page might be encrypted. If the shared secret is encrypted and you need the actual value, you can decrypt it using the app's private key.</p>
<p>If you would like to use PKI-based encryption, you can use the <strong>Public Key</strong> option. The <strong>Import Credentials</strong> function allows you to upload a Certificate Signing Request (CSR) with your public key embedded or an X.509 Certificate (CER).</p>
<ul>
	<li>After you have uploaded the CSR, the Certificate Authority associated with Tenant generates a certificate and associates the certificate with your app.</li>
	<li>If you uploaded an X.509 Certificate, it is verified against the Trusted CA Certificate store on the Tenant.</li>
</ul>


<h3>OAuth 1.0a and 2.0:</h3>
<p>If you are using OAuth 1.0a and the Authentication Code and Resource Owner Password Credentials grant, or OAuth 2.0 and the Authentication Code and Implicit grant, you must specify a Redirect URL and Application Type, then configure an authorization page. This task is performed in addition to configuring security credentials and is optional based on your requirements.</p>
<p>All settings relating to OAuth for the app are set up on the app's OAuth Profile page. See <a href="app_create_app_oauth_profile.htm">App OAuth Profile</a>.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="what_are_the_options_in_the_security_section_of_the_app_details_page">What are the options in the Security section of the app's <strong>Details</strong> page?</h2>
<p>Once you've created your app, you can manage app security via the Security section of the app's <strong>Details</strong> page.</p>
<p>By default, only the App ID is displayed. Clicking <strong>Show Keys</strong> provides access to multiple buttons, allowing you to complete the following activities relating to your app's security:</p>
<ul>
	<li><strong>Regenerate Shared Secret</strong>. See <a href="#how_do_i_regenerate_a_shared_secret">How do I regenerate a shared secret?</a></li>
	<li><strong>Click to view</strong> shared secret</li>
	<li>Import Credentials: click to import app credentials.</li>
	<li>Modify Credentials: See <a href="#how_do_i_modify_my_app_credentials">How do I modify my app's credentials?</a></li>
	<li>Remove Credentials: See <a href="#how_do_i_remove_app_credentials">How do I remove app credentials?</a> </li>
	<li>Export Credentials: See <a href="#how_do_i_export_credentials">How do I export app credentials?</a></li>
</ul>
<p>When the buttons are visible, you can click Hide Keys to collapse the display again.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="how_do_i_transfer_an_app_defined_on_another_system_to_the_developer_portal">How do I transfer an app defined on another system to the Community Manager developer portal?</h2>
<p>If you have an app that you have defined on another system that includes an App ID or Shared Secret you can transfer it to the platform based on the following scenarios:</p>
<ul>
	<li><strong>New App&#8212;</strong>If this is the first version for your app, go to <strong>Apps</strong> &gt; <strong>Add App</strong>. In the <strong>App ID</strong> and <strong>Shared Secret</strong> fields, specify the existing values for your app. For more information, see <a href="app_create_app_add.htm#add_app">How do I add an app?</a></li>
	<li><strong>New app version&#8212;</strong>You can add a new version of an app already set up on the developor portal, and specify the existing values for your app there, in the <strong>App ID</strong> and <strong>Shared Secret</strong> fields. For more information, see <a href="app_create_app_add.htm#add_app_version">How do I add an app version?</a></li>
</ul>
<p><a href="#top">Back to top</a></p>




<hr class="divide_hr" />
<h2 id="h_appsecurity_sharedsecret">Shared Secret:</h2>




<h2 id="what_is_a_shared_secret">What is a Shared Secret?</h2>
<p>When you register your app, you have the option to specify an App Runtime ID and Shared Secret. If you do not specify values, they are generated for you.</p>
<p>These two values are used to identify your app when using the platform.</p>
<p>The Shared Secret is a binary hashed value known only to you and to the platform. In the app's <strong>Details</strong> page, in the <strong>Security Credentials</strong> section, you'll see an option to view and manage your app's Shared Secret.</p>
<p>The Shared Secret approach follows the WS-Security digest authentication mechanism.</p>
<p id="example_sharedsecret">When generated by the platform for the app, the Shared Secret is a 40-character alphanumeric value. An example is shown below.</p>
<pre>1008877afabf32efb31f9c974dbeaa688bed0769</pre>
<p>For information about viewing the shared secret, see <a href="#ss_view">How do I view a shared secret?</a></p>
<p><a href="#top">Back to top</a></p>



<h2 id="how_do_i_regenerate_a_shared_secret">How do I regenerate a shared secret?</h2>
<p>When you initially create an app, either you provide a value for the shared secret or it is automatically generated. If for any reason it becomes necessary, you can regenerate or update the shared secret later.</p>
<p><strong>Note</strong>: Depending on the platform settings specified by your Administrator, the shared secret displayed on the app's <strong>Details</strong> page might be encrypted. If the shared secret is encrypted and you need the actual value, you can decrypt it using the app's private key.</p>
<h4>To regenerate a shared secret</h4>
<ol>
	<li>Go to<!-- #BeginLibraryItem "/Library/hdr_myapps_nav_all.lbi" -->&#160;<strong>Apps</strong> &gt; <strong>My Apps</strong> &gt; choose app &gt;&#160;<!-- #EndLibraryItem --><strong>Details</strong>.</li>
	<li>Go to the <strong>Security</strong> section and click <strong>Show Keys</strong> to display the key generation options.</li>
	<li>In the <strong>Shared Secret</strong> section, click <strong>Regenerate Shared Secret.</strong></li>
	<li>Enter a comment regarding why you are regenerating the shared secret for the app. Share any relevant information.</li>
	<li>Click <strong>Confirm</strong>. The shared secret is regenerated and you'll see a confirmation message. Use <strong>Click to View</strong> to see the new shared secret key.
		<p><strong>Note</strong>: Depending on the platform settings specified by your Administrator, the shared secret displayed on the app's <strong>Details</strong> page might be encrypted. You can decrypt it using the app's private key.</p>
	</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="ss_encrypted">What do I do if the shared secret is encrypted?</h2>
<p>If the version of the platform that you're using is set to display the shared secret as an encrypted value, you'll need to decrypt to get your app's actual shared secret value so you can use it when sending request messages to platform APIs.</p>
<p>If you uploaded a certificate/CSR for your app, the platform uses your app's public key to encrypt the plain text shared secret. You can then use your app's private key to decrypt and arrive at the plain text key.</p>
<p>It's important that you make sure you use the private key that corresponds to your app's public key that was uploaded to the platform. If the keys don't match, decryption will not give you the correct plain text value, or will fail completely.</p>
<p>If you have any doubt that the keys match, there are a couple of things you could do:</p>
<ul>
	<li>Save the app private key and certificate together in a standard keystore format that supports both of them. Then, use the certificate serial number (or hash) with the hash/serial number that can be exported from the Community Manager developer portal.</li>
	<li>Upload the certificate to make sure the platform has the latest public key, then display the value again and decrypt the new value.</li>
</ul>
<p>The approach you use to decrypting the encrypted shared secret value will depend on the tools and technologies you're using for your app. Basically you'll need to accomplish these steps:</p>
<ol>
	<li>Copy the encrypted shared secret value from the app's <strong>Details</strong> page. If it's not visible, click <strong>Show Keys</strong>, and then click the <strong>Click to view</strong> button and copy the displayed value. For more information, see <a href="#ss_view">How do I view a shared secret?</a></li>
	<li>Apply base64 decoding to take away the encoding cover and arrive at the encrypted bytes that are the shared secret.</li>
	<li>Make sure you are using the private key that corresponds to the certificate uploaded for the app.</li>
	<li>Use the appropriate cypher to decrypt a value encrypted using the RSA algorithm with PKCS1 padding. The decrypted bytes are an ASCII representation of the plain text shared secret.</li>
	<li>Retrieve the result and use it for your app's runtime.</li>
</ol>
<p><strong>Note</strong>: If there is no certificate/CSR for your app, and the shared secret is set to be encrypted, it isn't displayed in the platform. In this scenario, you'll need to contact your Administrator to get the shared secret value.</p>
<p>Below are two examples of approaches you can use to decrypt an encrypted shared secret:</p>
<ul>
	<li><a href="#ss_decrypt_java">How do I decrypt an encrypted shared secret using Java?</a></li>
	<li><a href="#ss_decrypt_command_line">How do I decrypt an encrypted shared secret using the command-line decryption tool?</a></li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="ss_decrypt_java">How do I decrypt an encrypted shared secret using Java?</h2>
<p>Below is an example of a decryption approach that would work if you have access to the Java runtime environment.</p>

<pre>import java.io.FileInputStream;
import java.security.KeyStore;
import java.security.PrivateKey;

import javax.crypto.Cipher;

/**
*  Akana, Inc. Copyright (C) 2000-2015, All rights reserved
*
*  This software is the confidential and proprietary information of Akana, Inc.
*  and is subject to copyright protection under laws of the United States of America and
*  other countries. The use of this software must be in accordance with the license
*  agreement terms you entered into with Akana, Inc.
*/

/**
* Copyright (c) 2015, Akana, Inc. All rights reserved.
*/

public class AppSharedSecretDecryptionTest {

  /**
   * @param args
   */
  public static void main(String[] args) {
    try {
      // Copy encrypted shared secret from portal's App <strong>Details</strong> page using View Shared Secret button "Click to View" button
      String encryptedSharedSecret = "--copy--encrypted--shared--secret--from--portal--here";
      
      // base64 decode to take away encoding cover to get encrypted bytes
      byte[] encryptedSharedSecretBytes = org.apache.commons.codec.binary.Base64.decodeBase64(encryptedSharedSecret);
      
      // make sure you are using the private key that corresponds to the certificate uploaded for the app
      KeyStore ks = KeyStore.getInstance("PKCS12");
      FileInputStream fis = new FileInputStream("/path/to/keystore");
      try {
        ks.load(fis, "keystore-password".toCharArray());
      } finally {
        fis.close();
      }
      PrivateKey pvtkey = (PrivateKey)ks.getKey("key-alias", "key-password".toCharArray());
      
      // Shared Secret was encrypted with RSA algorithm with PKCS1 padding.
      Cipher cipher = Cipher.getInstance("RSA/ECB/OAEPWithSHA-1AndMGF1Padding");
      cipher.init(Cipher.DECRYPT_MODE, pvtkey);
      // Decode
      byte[] sharedSecret = cipher.doFinal(encryptedSharedSecretBytes);
      
      // prints the shared secret on the page. Use this shared secret in the app runtime
      System.out.println("Shared Secret = " + new String(sharedSecret));
    } catch (Throwable t) {
      t.printStackTrace();
    }
  }
}</pre>
<p><a href="#top">Back to top</a></p>



<h2 id="ss_decrypt_command_line">How do I decrypt an encrypted shared secret using the command-line decryption tool?</h2>
<p>The platform includes a tool that you can run at the command line to decrypt the shared secret, if you have Java installed. Follow the instructions below.</p>
<h4 id="to_use_the_command_line_decryption_tool">To use the command-line decryption tool to decrypt the shared secret</h4>
<ol>
	<li>Download the <a href="assets/sharedsecret_decrypt.zip">sharedsecret_decrypt.zip</a> file to a folder on your local machine.</li>
	<li>Unzip the file. It includes the following:
			<ul>
			<li>AppSharedSecretDecryptionTest.jar</li>
			<li>project.properties</li>
		</ul>
	</li>
	<li>In the project.properties file, specify valid values (placeholders are shown as {value} below; remove value plus brackets and replace with actual value) for the following properties:
		<ul>
			<li><strong>encrypted_shared_secret</strong>={value} (value copied from App's <strong>Details</strong> page). 
<p>Example:</p>
<pre>Yeog3Mh5+9wY6mC9Udad4yU62U1PujYE5LEoD2fKYgPXTtkbij9rU/Vm3NrjL55/eG0Qn3r4ZAj46HY94YwvtvjKuG4
MX2sOFiWb2V2Afz54yUuGPXfsQ/E4UC+VXl3KeMMCQZ5X94/CwmukjpjiZ/q0zFp/pyBXs9fNAyzkDWk</pre></li>
			<li><strong>keystore_path_filename</strong>={value}
<p>Example:</p>
<pre>C:\\temp\\Hermosa.jks</pre></li>
			<li><strong>keystore_alias</strong>={value}
<p>Example:</p>
<pre>hermosa</pre></li>
			<li><strong>keystore_pass</strong>={value}
<p>Example:</p>
<pre>abc123</pre></li>
			<li><strong>keystore_type</strong>={value}
<p>Example:</p>
<pre>JKS</pre></li>
		</ul>
	</li>
	<li>Open up a command window and Go to the folder where you have the downloaded files.</li>
	<li>At the command prompt, run the following:
	<pre>java -jar AppSharedSecretDecryptionTest.jar project.properties</pre>
	</li>
	<li>The plain text shared secret value is displayed at the command prompt. Copy it for use with your app.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="what_rules_apply_to_generating_an_appid_and_shared_secret">What rules apply to generating an App ID and Shared Secret?</h2>
<p>Before you add an app to the platform, review the following rules for generating an App ID or Shared Secret to determine the best approach for adding and managing your apps.</p>
<p><strong>App ID:</strong></p>
<ul>
	<li>When an app is created, you can specify a custom App ID. If the App ID field is left blank, the app is randomly assigned an App ID (identity) in the format {fedmember} - {random-hex}.</li>
	<li>You can set a unique App ID for each app version.</li>
	<li>You can change the App ID&#160;later, for an app or an app version.</li>
</ul>

<p><strong>Shared Secret:</strong></p>

<ul>
	<li>When you create a new app or app version, you can specify a custom Shared Secret. If the Shared Secret field is left blank, a shared secret is automatically generated and can be viewed using the <strong>Show Keys</strong> function on the app's <strong>Details</strong> page.</li>
	<li>You can change the custom Shared Secret later, or specify a custom Shared Secret if you didn't before, in the <strong>Edit App Version</strong> page.</li>
	<li>You can regenerate a generated Shared Secret later, on the <strong>Details</strong> page for the app version. Choose the app version, click <strong>Show Keys</strong>, and then click <strong>Regenerate Shared Secret</strong>.</li>
	<li>Depending on the platform settings specified by your Administrator, the shared secret displayed on the <strong>Details</strong> page for the app version might be encrypted. If the shared secret is encrypted and you need the actual value, you can decrypt it using the app's private key.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="ss_view">How do I view a shared secret?</h2>
<p>Display of the app's shared secret, in Test Client and on the App Details page, is affected by one of the security settings for the Community Manager developer portal, controlled by the Site Admin. Shared Secret display can be <strong>Plain Text</strong> or <strong>Encrypted</strong>. See <a href="site_admin_settings.htm#settings_config_apps_01">General App Settings</a> (Site Admin help).</p>
<p>The behavior is one of the following:</p>
<table class="doctable">
	<thead>
		<tr>
			<th>App setting...</th>
			<th>Certificate...</th>
			<th>Behavior...</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td id="ss_view_01"><strong>Plain Text</strong></td>
			<td>Not needed</td>
			<td> The shared secret is displayed, both in the App Details page and in Test Client, and can be copied to the clipboard. See <a href="#ss_display_plaintext">Shared secret display: Plain text</a> below.</td>
		</tr>
		<tr>
			<td id="ss_view_02"><strong>Encrypted</strong></td>
			<td>Not available/not trusted</td>
			<td><p>The shared secret is not displayed. You'll see the following message:</p>
				<pre>Shared Secret available, but configuration restricts display to encrypted value. Upload app certificate, view encrypted value, copy, and decrypt.</pre>
				<p>In this scenario, you'll need to upload the app certificate before you can copy the encrypted shared secret. This is an additional security measure. In addition, if the certificate authority isn't set up as a trusted certificate authority for the platform, you'll need to get the Site Admin to set up the certificate authority in Policy Manager. The Site Admin will need to follow the instructions in <a href="../../ag/security_config/trusted_ca_certificates.htm" title="Link to Policy Manager help, Configure Certificate Authority">Trusted CA Certificates</a> (Policy Manager help). See <a href="#ss_display_enc_nocert">Shared secret display: Encrypted, no certificate uploaded/available</a> below.</p></td>
		</tr>
		<tr>
			<td id="ss_view_03"><strong>Encrypted</strong></td>
			<td>Available and trusted</td>
			<td><p>You can copy the encrypted shared secret, then decrypt it. See <a href="#ss_display_enc_cert">Shared secret display: Encrypted, certificate available</a> below. For more information, see <a href="#ss_encrypted">What do I do if the shared secret is encrypted? </a></p></td>
		</tr>
	</tbody>
</table>


<h4>To view the current shared secret</h4>
<ol>
	<li>Go to the app's <strong>Details</strong> page.
	</li>
	<li>In the <strong>Security</strong> section, click <strong>Show Keys</strong> to display the key generation options.</li>
	<li>Select <strong>Click to View</strong> to display the current shared secret.</li>
	<li>Conditional: if the shared secret is encrypted but there is no certificate available, follow the instructions in <a href="#ss_view_02">Encrypted, certificate not available/not trusted</a> above.</li>
	<li>Copy the shared secret. If it's encrypted, follow the instructions in <a href="#ss_encrypted">What do I do if the shared secret is encrypted?</a> above.</li>
</ol>

<h4 id="ss_display_options">Shared secret display options</h4>
<p>The examples below illustrate the different scenarios you might encounter in viewing your app's shared secret.</p>

<p id="ss_display_plaintext"><strong>Plain text:</strong></p>
<p>In this scenario, you can just copy the shared secret.</p>
<p><img src="assets/ss_display_plaintext.jpg" alt="Shared secret display, plain text" /></p>

<p id="ss_display_enc_nocert"><strong>Encrypted, no certificate uploaded/available:</strong></p>
<p>Click <strong>Import Credentials</strong> to upload the certificate. For more information, see <a href="#ss_view_02">Encrypted, certificate not available/not trusted</a> above.</p>
<p><img src="assets/ss_display_encrypted_no_cert.jpg" alt="Shared secret display, encrypted, certificate not available" /></p>

<p id="ss_display_enc_cert"><strong>Encrypted, certificate available:</strong></p>
<p>Copy the shared secret and then decrypt it: see <a href="#ss_encrypted">What do I do if the shared secret is encrypted?</a></p>
<p><img src="assets/ss_display_encrypted_cert.jpg" alt="Shared secret display, encrypted, certificate available" /></p>
<p><a href="#top">Back to top</a></p>




<hr class="divide_hr" />
<h2 id="h_appsecurity_certificates">App Credentials (Certificates/CSRs):</h2>




<h2 id="how_does_public_key_integration_work">How does public key integration work?</h2>
<p>If you use the <strong>Public Key</strong> option, you must import an existing X.509 Certificate (CER) or Certificate Signing Request (CSR). Usage of either public key option is based on your requirements. The Tenant can be configured with an internal Certificate Authority, and could also be configured with a set of Trusted CA Certificates apart from the internal Certificate Authority.</p>
<p>The following rules apply:</p>
<p><strong>Prerequisites:</strong></p>
<p>Based on the established public key strategy for your platform at least one of the following Public Key options must be established on the Tenant before you can successfully import a Certificate Signing Request (CSR) or X.509 Certificate (CER).</p>
<ul>
	<li>A Certificate Authority (CA) (internal or third-party) that can issue and renew X.509 certificates must be previously configured in the Tenant. See <a href="#what_is_a_certificate_signing_request">What is a Certificate Signing Request (CSR)?</a> for more information.</li>
	<li>Trusted CA Certificates that may be required must be uploaded to the <strong>Trusted CA Certificates</strong> section of the Tenant. See <a href="#what_is_a_trusted_ca_certificate">What is a Trusted CA Certificate?</a> for more information.</li>
</ul>
<p>Configuring an internal Platform Certificate Authority is a post installation task that is performed by the Site Administrator. In most cases, a formal CA (for example, VeriSign) that aligns with the security policy requirements is uploaded, in addition to any Trusted CA Certificates that may be required.</p>
<p>If you receive an error message indicating that the X.509 Certificate or Certificate Signing Request (CSR) you are attempting to import is not trusted or that a Certificate Authority does not exist.</p>
<p><strong>Import Certificate Signing Request (CSR):</strong></p>
<ul>
	<li>If the Tenant is configured with a Certificate Authority, you can generate a Certificate Signing Request (CSR) using an online tool, and import it: on the app's <strong>Details</strong> page, click <strong>Show Keys</strong> and choose <strong>Import Credentials</strong>.</li>
	<li>If the import is successful, the CSR and the Certificate Authority (CA) associated with the platform are used to generate the certificate for the app.</li>
	<li>See <a href="#how_do_i_select_a_tool_for_generating_a_certificate_signing_request_csr">How do I select a tool for generating a Certificate Signing Request (CSR)?</a> and <a href="#how_do_i_import_a_certificate_signing_request">How do I import a certificate signing request?</a> for more information.</li>
</ul>
<p><strong>X.509 Certificates (CER):</strong></p>
<ul>
	<li>If your Tenant is configured with Trusted CA Certificates, you can import an X.509 Certificate (CER) for the current app: on the app's <strong>Details</strong> page, click <strong>Show Keys</strong> and choose <strong>Import Credentials</strong>.</li>
	<li>The CER import will be successful if it matches the certificate that was uploaded to the <strong>Trusted CA Certificates</strong> section of the tenant.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="what_is_a_certificate_signing_request">What is a Certificate Signing Request (CSR)?</h2>
<p>A Certificate Signing Request (CSR) is a file that includes encoded information generated by a web server. It is sent from an applicant to Certificate Authority to request a digital certificate. The CSR contains information identifying the applicant and the public key chosen by the applicant. Before creating a CSR, the applicant first generates a key pair, keeping the private key secret. The corresponding private key is not included in the CSR, but is used to digitally sign the entire request.</p>
<p>A CSR file typically has a&#160;.CSR extension, but might have a different extension depending on the source application that generated the file. The tenant supports the PEM (which is a BASE64 encoded PKCS10) for Certificate Signing Requests.</p>
<p>In the platform, a CSR is used to send a request to the Certificate Authority stored on the Tenant to request an X.509 Certificate.</p>
<p>The Tenant must be configured with a Certificate Authority prior to importing a CSR. This task is performed by the Site Administrator.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="what_is_a_trusted_ca_certificate">What is a Trusted CA Certificate?</h2>
<p>A Trusted Certificate Authority (CA) is a third-party identity that is qualified with a specified level of trust. Trusted CA Certificates are used when an identity is being validated as the entity it claims to be. Certificates imported into Tenant must be issued by a Trusted CA Authority.</p>
<p>Trusted CA Certificates must be configured prior to importing X.509 certificates for platform apps. This task is performed by the Site Administrator.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="where_are_the_certificate_authorit_and_trusted_ca_certificate_files_stored">Where are the Certificate Authority and Trusted CA Certificate files stored?</h2>
<p>The platform Certificate Authority and Trusted CA Certificate files are stored on the Tenant. The Tenant is a distinct Community Manager developer portal and community that is logical separated from any other communities that may be hosted in the same product instance. The Tenant is managed by the Site Administrator.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="how_do_i_select_a_tool_for_generating_a_certificate_signing_request_csr">How do I select a tool for generating a Certificate Signing Request (CSR)?</h2>
<p>There are a variety of different tools you can you can use to generate a Certificate Signing Request (CSR). For example, Keytool and OpenSSL are popular CSR generation tools.</p>
<ul>
	<li>Perform an online inquiry using search strings like <strong>tools, certificate signing request</strong> or <strong>How do I generate a certificate signing request externally?</strong></li>
	<li>The results will provide all the information you need to select a tool that will work for you and meet your requirements.</li>
</ul>
<p>In the context of the platform the process is as follows:</p>
<ol>
	<li>Generate a public and private key using an external tool. Use your private key to sign your API call. Use your public key to generate the Certificate Signing Request.</li>
	<li>Generate the Certificate Signing Request (CSR) using an external tool as well.</li>
	<li>Import the CSR into the platform. This is done using the <strong>Import Credentials</strong> function. See <a href="#how_do_app_credentials_work">How do app credentials work?</a></li>
	<li>Obtain a copy of the generated certificate. This is done using the <strong>Export Credentials</strong> function. See <a href="#how_do_i_export_credentials">How do I export app credentials?</a></li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="how_do_i_import_a_certificate_signing_request">How do I import a certificate signing request?</h2>
<p>For your app's credentials, you can import either a certificate signing request (CSR) or an X.509 certificate (CER).</p>
<p>If you import a CSR file, the platform uses its internal Certificate Authority to create the CER from the request.</p>
<h4>To import a certificate signing request (CSR)</h4>
<ol>
	<li>Go to the app's <strong>Details</strong> page.</li>
	<li>Go to the <strong>Security</strong> section and click <strong>Show Keys</strong> to display the key generation options. In the <strong>Public Key</strong> section, click <strong>Import Credentials</strong>. The <strong>Import Credentials</strong> pop-up displays.</li>
	<li>Click <strong>Browse</strong> and then Go to the location of your CSR file and select it.</li>
	<li>Enter a comment regarding why you are importing the CSR. Share any relevant information.</li>
	<li>Click <strong>Save</strong>.</li>
	<li>The Certificate Signing Request (CSR) is imported and the certificate is generated if it meets the platform's requirements. If the CSR you are attempting to upload is expired or invalid, or a Certificate Authority does not exist on the Tenant, you will see an error message.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="how_do_i_import_an_x509_certificate">How do I import an X.509 certificate?</h2>
<p>For your app's credentials, you can import either a certificate signing request (CSR) or an X.509 certificate (CER).</p>
<h4>To import an X.509 certificate (CER)</h4>
<ol>
	<li>Go to the app's <strong>Details</strong> page.</li>
	<li>Go to the <strong>Security</strong> section and click <strong>Show Keys</strong> to display the key generation options. In the <strong>Public Key</strong> section, click <strong>Import Credentials</strong>. The <strong>Import Credentials</strong> pop-up is displayed.</li>
	<li>Click <strong>Browse</strong> and then Go to the location of your CER file and select it.</li>
	<li>Enter a comment regarding why you are importing the certificate. Share any relevant information.</li>
	<li>Click <strong>Save</strong>.</li>
	<li>The X.509 Certificate is imported if it meets platform requirements. You will see an error message if:
		<ul>
			<li>The CER you are attempting to upload is expired or invalid.</li>
			<li>The certificate is not issued by a Trusted CA.</li>
			<li>The Certificate Authority does not exist on the Tenant.</li>
		</ul>
		</li>
</ol>
<p><a href="#top">Back to top</a></p>




<h2 id="how_do_i_modify_my_app_credentials">How do I modify my app's credentials?</h2>
<p>You can modify your app's credentials as needed. Remember to enter some meaningful comment regarding why you are changing the credentials.</p>
<h4>To modify your app's certificate</h4>
<ol>
	<li>Go to the app's <strong>Details</strong> page.</li>
	<li>From the <strong>Current Version</strong> drop-down at the top right, choose the app version you want to modify.</li>
	<li>In the <strong>Security</strong> section of the page, click <strong>Show Keys</strong>.</li>
	<li>Click <strong>Modify Credentials</strong>.</li>
	<li>Browse to the location of the CER/CSR file and upload it.</li>
	<li>Enter a comment regarding why you are modifying the credentials. Share any relevant information.</li>
	<li>Click <strong>Save</strong>.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="how_do_i_remove_app_credentials">How do I remove app credentials?</h2>
<p>If necessary, you can remove the credentials for your app. You'll need to provide information about why you are making the change.</p>
<h4>To remove your app's credentials</h4>
<ol>
	<li>Go to the app's <strong>Details</strong> page.</li>
	<li>From the <strong>Current Version</strong> drop-down at the top right, choose the app version you want to modify.</li>
	<li>In the <strong>Security</strong> section of the page, click <strong>Show Keys</strong>.</li>
	<li>In the <strong>Public Key</strong> section, click <strong>Remove Credentials</strong>.</li>
	<li>Enter a comment regarding why you are removing the credentials. Share any relevant information.</li>
	<li>Click <strong>Save</strong>.</li>
	</ol>
<p>Later, you can use the <strong>Import Credentials</strong> function to import a new Certificate Signing Request (CSR) or certificate (CER). See <a href="#how_do_i_import_a_certificate_signing_request">How do I import a certificate signing request?</a></p>
<p><a href="#top">Back to top</a></p>



<h2 id="how_do_i_export_credentials">How do I export app credentials?</h2>
<p>After the Certificate Signing Request is imported and the certificate is generated, you can export the app credentials if needed.</p>
<h4>To export the app certificate</h4>
<ol>
	<li>Go to<!-- #BeginLibraryItem "/Library/hdr_myapps_nav_all.lbi" -->&#160;<strong>Apps</strong> &gt; <strong>My Apps</strong> &gt; choose app &gt;&#160;<!-- #EndLibraryItem --><strong>Details</strong>.</li>
	<li>Click the <strong>Export</strong> button.</li>
	<li>Choose a specific version or leave the default, which is All.</li>
	<li>Click the <strong>Export App PKI</strong> box.</li>
	<li>Click <strong>Export</strong>, choose whether to open or save the file, and specify file location if needed.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<hr class="divide_hr" />



<h2 id="related_topics">Related Topics</h2>
<div class="relatedlinks" id="cmhelp_app_create">
<ul>
	<li><a href="app_create_app__toc.htm">Create App Summary Page</a></li>
	<li><a href="app_getting_started_for_app_developers.htm">Getting Started for App Developers</a></li>
	<li><a href="app_create_app_tutorial.htm">Tutorial</a></li>
	<li><a href="app_create_app_add.htm">Creating and Managing Apps</a></li>
</ul>
<ul>
	<li><a href="app_create_app_oauth_profile.htm">App OAuth Profile</a></li>
	<li><a href="app_create_app_security.htm">App Security</a></li>
	<li><a href="app_details.htm">App Details</a></li>
	<li><a href="app_promotion.htm">Promoting an App to the Next Environment</a></li>
	<li><a href="basics_glossary.htm">Glossary of Terms</a></li>
</ul>
</div>