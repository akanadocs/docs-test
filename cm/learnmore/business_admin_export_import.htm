---
layout: page
title: Export and Import | Business Administration | Community Manager Help
description: Export/import business information in Community Manager.
product: cm
category: learn
subcategory: Business Administration
weight: 20
type: page
nav-title: 
no-nav: true
no-catalog: true
---
<h2 id="top">Export/Import</h2>
<p>Export and import platform information.</p>



<div class = "divider1"></div>



<h3 style="color: gray;">Table of Contents</h3>
<ol class="table_of_contents">
  <li><a href="#what_business_information_can_i_export">What business information can I export?</a></li>
  <li><a href="#how_do_i_export_business_information">How do I export business information?</a></li>
  <li><a href="#how_do_i_export_a_license">How do I export a license?</a></li>
  <li><a href="#how_do_i_export_a_scope">How do I export a scope?</a></li>
  <li><a href="#what_are_the_contents_of_the_business_export_file">What are the contents of the business export file?</a></li>
  <li><a href="#how_do_i_import_site_app_or_api_information_from_an_export_file">How do I import site, app, or API information from an export file?</a></li>
  <li><a href="#what_is_the_import_properties_file_and_when_do_i_need_it">What is the import properties file and when do I need it?</a></li>
</ol>
<div class = "divider1"></div>



<a name="what_business_information_can_i_export"></a><h3>What business information can I export?</h3>
<p>You can export business information to an external file. You can then import that file to another instance of the platform. One use of this feature is to move the entire set of resources associated with a business from one environment to another, such as from a development environment to a testing or production environment.</p>
<p>You can choose whether or not to include the following information:</p>
<ul>
  <li>API:
    <ul>
      <li>Private Key + Certificate</li>
      <li>Resources / Documentation</li>
      <li>API Contracts</li>
      <li>Export API Administrators<br />
        <strong>Note</strong>: the relationship of the user as an API admin is exported, but the user is not exported. The user must exist in the target environment. If the user does not exist when the information is imported, the API is created without that admin. From there, either a) the user can sign up and be invited to be an admin, b) the user can sign up and the API data can be reimported, c) another individual can be designated as an API admin.</li>
    </ul>
  </li>
  <li>Policy:
    <ul>
      <li>Operational Policies</li>
      <li>QoS Policies</li>
      <li>Compliance Policies</li>
    </ul>
  </li>
  <li>Scopes</li>
  <li>Licenses</li>
  <li>Apps:
    <ul>
      <li>Certificate / Shared Secret</li>
      <li>Export App Team Members<br />
        <strong>Note</strong>: the relationship of the user as an app team member is exported, but the user is not exported. The user must exist in the target environment. If the user does not exist when the information is imported, the app is created without that team member. From there, either a) the user can sign up and be invited to be an app team member, b) the user can sign up and the app data can be reimported, c) another individual can be designated as an app team member. </li>
    </ul>
  </li>
  <li>Site Configuration:
    <ul>
      <li>Site Settings</li>
      <li>Workflow Definitions</li>
      <li>Custom Styles</li>
      <li><a href="basics_glossary.htm#gl_securitydomain">Security Domains</a></li>
      <li>Login Domains</li>
<!--      <li>Site Administrators</li>-->
<!--      <li>Business Administrators</li>-->
      <li>Notification Templates (Email and Dashboard)</li>
    </ul>
  </li>
  </ul>
<p>For instructions, see <a href="#how_do_i_export_business_information">How do I export business information?</a> below.</p>
<p>You can also export an individual license, scope, or API. For instructions, see:</p>
<ul>
  <li><a href="#how_do_i_export_a_license">How do I export a license?</a></li>
  <li><a href="#how_do_i_export_a_scope">How do I export a scope?</a></li>
  <li><a href="api_admin_api_publishing.htm#how_do_i_export_an_api">How do I export an API?</a></li>
</ul>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_export_business_information"></a><h3>How do I export business information?</h3>
<p>You can export business information to an external file. You can then import that file to another instance of the platform to replicate the entire set of information. You can use this feature to move the entire set of resources associated with a business from one environment to another, such as from a development environment to a testing or production environment.</p>
<p>There are many configuration options, so you can determine exactly what you want to include in the export file.</p>
<h5>To export business information:</h5>
<ol>
  <li>Log in as the Business Admin and click the <em>Administration</em> quick filter (wrench icon).</li>
  <li>Click <strong>Actions</strong>.</li>
  <li>Click <strong>Export</strong>.</li>
  <li>In the Export overlay, choose the information you want to include in the export file. For information about the options, see <a href="#what_business_information_can_i_export">What business information can I export?</a> above. </li>
  <li>Choose to save or open the export file.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_export_a_license"></a><h3>How do I export a license?</h3>
<p>You can export information about a specific license to an external file. You can then import that file to another instance of the platform. One use of this feature is to move data from one environment to another, such as from a development environment to a testing or production environment.</p>
<p>You can also choose to export additional data associated with the license.</p>
<h5>To export a license:</h5>
<ol>
  
  <li>Log in as the Business Admin and click the <em>Administration</em> quick filter (wrench icon).</li>
  <li>Click <strong>Licenses</strong>.</li>
  <li>On the list of licenses, find the license you want to export and click the license name.</li>
  <li>Click <strong>Export</strong>.</li>
  <li>In the Export overlay, choose whether to include the following data associated with the license:
    <ul>
      <li>QoS Policies</li>
      <li>Scopes</li>
    </ul>
  </li>
  <li>Click <strong>Export</strong>.</li>
  <li>Choose to save or open the <strong>license-export.zip</strong> export file.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_export_a_scope"></a><h3>How do I export a scope?</h3>
<p>You can export information about a specific scope to an external file. You can then import that file to another instance of the platform. One use of this feature is to move data from one environment to another, such as from a development environment to a testing or production environment.</p>
<p>You can also choose to export additional data associated with the scope.</p>
<h5>To export a scope:</h5>
<ol>
  <li>Log in as the Business Admin and click the <em>Administration</em> quick filter (wrench icon).</li>
  <li>Click <strong>Scopes</strong>.</li>
  <li>On the list of scopes, find the scope you want to export and click the scope name. The details are displayed to the right.</li>
  <li>Click <strong>Export</strong>.</li>
  <li>At the prompt, click <strong>Export</strong> again.</li>
  <li>Choose to save or open the <strong>resourse-export.zip</strong> export file.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<a name="what_are_the_contents_of_the_business_export_file"></a><h3>What are the contents of the business export file?</h3>
<p>The business export file includes all the core information about the business, as well as any of the optional additional information you specified.</p>
<p>The file has a very specific structure. It will look something like the image below:</p>
<p><img src="images/export_file_business.jpg" alt="File structure for a business export file" /></p>
<p>The export file will generally include the following:</p>
<ul>
   <li>Files at root level: 
     <ul>
       <li><strong>objectgraph.xml</strong>: An XML file that shows the relationships between resources.</li>
       <li><strong>objectdata.xml</strong>: An XML-based summary of all the data in the export file.</li>
       <li><strong>exportproperties.properties</strong>: a properties file showing which options were included in the export file.</li>
      </ul>
   </li>
   <li><strong>bpels</strong>: a folder containing XML business process files (<a href="basics_glossary.htm#gl_bpel_file">bpel files</a>); one for each operation, for each environment. So, for example, if the API has five operations, and runs in Sandbox and Production environments, there are 10 bpel files.</li>
   <li><strong>services</strong>: a folder containing a subfolder for each environment, each subfolder containing a bpel.xml file for the applicable service/environment.</li>
   <li><strong>styles</strong>: a folder containing the custom.less file with the business-specific styles (only present if custom styles were uploaded).</li>
   <li><strong>workflow</strong>: custom workflow information specific to the business (only present if custom workflows were uploaded).</li>
  <li><strong>wsdls</strong>: a folder containing WSDL files for the service.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_import_site_app_or_api_information_from_an_export_file"></a>
<h3>How do I import site, app, or API information from an export file?</h3>
<p>You can export site, app, or API information to an external file. You can then import that file to another instance of the platform to replicate the entire set of information. You can use this feature to move the entire set of resources and associations from one environment to another, such as from a development environment to a testing or production environment.</p>
<p>The import file must be a valid package file previously exported from a platform instance.</p>
<p class="apidoc_note"><strong>Note</strong>: If you export from one tenant and import to another tenant in the same installation, services that exist in both instances are cloned. This is because two APIs cannot share the same service, and two tenants cannot share the same API.</p>
<p>Only a Business Admin can import.</p>
<h5>To import site, app, or API information:</h5>
<ol>
  <li>Log in as the Business Admin.</li>
  <li>Navigate to <em>Administration &gt; Actions</em>.</li>
  <li>Click <em>Import.</em></li>
  <li>Browse to the location of the export package file (ZIP file) and choose it.</li>
  <li>Optional: browse to the location of the configuration migration properties file and choose it. For more information, see <a href="#what_is_the_import_properties_file_and_when_do_i_need_it">What is the import properties file and when do I need it?</a></li>
  <li>Click <strong>Import</strong>.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<a name="what_is_the_import_properties_file_and_when_do_i_need_it"></a>
<h3>What is the import properties file and when do I need it?</h3>
<p>When you import a file, you can also provide an optional configuration migration properties file.</p>
<p>Migration properties allow for URL mapping of physical service endpoints between the source environment that the information was exported from and the target environment you're importing it to.</p>
<p>If the URL mapping is not specified, physical service endpoint URLs are migrated without any change. It is possible that the source environment URLs might not apply to the target environment, and in this case the migration properties file is needed.</p>
<p>URL mapping is done by URL prefix. The backslash character (\) is used to escape any special characters in the properties file, such as the colon that might appear in the URL.</p>
<p>If you import the package file without a properties file, APIs included in the package that are Managed Services in the source environment become Unmanaged Services in the target environment, unless the target environment contains <a href="basics_glossary.htm#gl_container">SOA Software container instances</a> with the same container key as in the source environment.</p>
<p>The migration properties file is used to handle the differences between the source environment and the target environment by transforming the contents of the export package to be suitable for the target environment.</p>
<p>Here are some examples of instances in which the migration properties file can be used:</p>
<ul>
  <li>The target API endpoint is not the same in the source and target environments.</li>
  <li>Proxy API is hosted in an SOA Software container.</li>
</ul>


<h5>Different source and target endpoints</h5>
<p>Instances where the target API endpoint is not the same in the source environment and target environment include:</p>
<ul>
  <li><strong>Different hostname</strong>&#8212;It is likely that the path portion of the URL might be the same, but with a different hostname.</li>
  <li><strong>Multiple source environment endpoints</strong>&#8212;The migration properties file allows one or more source environment URL prefixes to match to one or more target environment URL prefixes. You can use this to map one endpoint of the target API to multiple endpoints for the same API in the target environment.</li>
  <li><strong>Multiple target environment endpoints</strong>&#8212;Conversely, you can use the migration properties file to map multiple endpoints of the API in the source environment to a single endpoint of the API in the target environment.</li>
  <li><strong>JMS</strong>&#8212;If the target API endpoint is JMS, migration properties file allows mapping to the JNDI URL.</li>
</ul>
<p>The sample file below illustrates this scenario.</p>
<pre>#With the properties below, all target APIs with an endpoint address of 
#http://apihost-source-env:8900 will be imported with a URL of 
#http://apihost-target-env:8900, keeping the path portion the same 
#in both environments.

migration.url.source.http\://apihost-source-env\:8900=DiscussionAPI
migration.url.target.http\://apihost-target-env\:8900=DiscussionAPI</pre>


<h5>Proxy API hosted in an SOA Software container</h5>
<p>Proxy APIs are hosted in SOA Software containers. It is possible that the container key in the source environment might be different from the container key in the target environment.</p>
<p> It is also possible that the proxy API might be hosted in a different number of ND containers in the source environment versus the target environment. However, this is rare, because most users want to host the Proxy API in an ND cluster rather than hosting in multiple NDs.</p>
<p> The migration properties file allows the user to map a set of ND container keys in the source environment to an alias to which multiple target environment ND containers are also mapped. This scenario allows the proxy APIs that are exported/imported to be imported into the appropriate ND containers in the target environment.</p>
<p>The sample file below illustrates this scenario.</p>
<pre>#With the properties below, source-env-container-key in the source environment 
#is mapped to target-env-container-key in the target environment. All proxy 
#services that were hosted in source-env-container-key in the export file 
#will be hosted in target-env-container-key in the target environment.

migration.container.source.source-env-container-key=acmebroker
migration.container.target.target-env-container-key=acmebroker</pre>


<h4>Additional Migration Properties: QName Matching</h4>
<p>You can use an additional property to allow service QName matching in the migration properties file.</p>
<p>This property is used in cases where the databases used for package import and export include services, interfaces, and bindings with the same QName but different keys. It allows update of the existing objects based on matching QNames.</p>
<p>For example, if you create a physical service in both the exporting and importing databases using the same WSDL, the QNames will match, but the service keys will be different. Then, if you try to import the service from one database to another with QName matching disabled, the import process will attempt to create a new service, and will fail because duplicate QNames are not allowed.</p>
<p>With QName matching enabled, the import process will update the existing service, behaving exactly the same as if service keys were matching.</p>
<p>The sample file below illustrates use of this property in the migration properties file.</p>
<pre>#Sets QName matching for the import environment.

migration.service.qname.matching=true</pre>
<h4>Creating the properties file</h4>
<p>You can use any text editor to create the properties file for import.</p>
<p><a href="#top">Back to top</a></p>



</div>
