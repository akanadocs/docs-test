---
layout: page
title: API Documentation Maintenance | API Administration | Community Manager Help
description: Add / maintain API documentation and restrict visibility of documentation files.
product: cm
category: learn
subcategory: API Admin
weight: 20
type: page
nav-title: 
no-nav: true
no-catalog: true
---
<h2 id="top">API Documentation Maintenance</h2>
<p> Add / maintain API documentation and restrict visibility of documentation files.</p>
<p><strong>Note</strong>: For more information about API documentation tagging, see <a href="ov_doctagging.htm">Documentation Tagging</a></p>
<div class = "divider1"></div>



<h3 style="color: gray;">Table of Contents</h3>
<ol class="table_of_contents">
  <li><a href="#what_is_the_api_documentation_maintenace_process">What is the API documentation maintenance process?</a></li>
  <li><a href="#who_can_update_api_documentation_content">Who can update API documentation content?</a></li>
  <li><a href="#how_do_i_add_api_documentation">How do I add API documentation?</a></li>
  <li><a href="#can_i_link_to_api_documentation_on_a_different_site">Can I link to API documentation on a different site?</a></li>
  <li><a href="#what_are_the_content_guidelines_for_api_documentation">What are the content guidelines for API documentation?</a></li>
  <li><a href="#how_do_i_upload_my_api_documentation_files">How do I upload my API documentation files?</a></li>
</ol>



<h5 style="color: gray;"><a href="#h_doc_tagging">Doc Tagging:</a></h5>



<ol class="table_of_contents">
  <li><a href="#what_are_the_visibility_rules_for_api_documentation">What are the visibility rules for API documentation?</a></li>
  <li><a href="#how_do_i_control_visibility_of_api_documentation_files">How do I control visibility of API documentation files?</a></li>
</ol>



<div class = "divider1"></div>



<a name="what_is_the_api_documentation_maintenace_process"></a><h3>What is the API documentation maintenance process?</h3>
<p>All API documentation must be developed and maintained outside the platform in your own HTML editor. Once your HTML content is ready you can upload it to the site.</p>
<p>If you add a new API version, you can update the existing documentation or create an entirely different set of documents. By default, all documentation files reside in the same folder. Here are a couple of approaches you could take to maintain files from different versions within the same folder structure:</p>
<ul>
  <li>Use unique names for new files. For example, if you have two versions, with some files shared between versions and some files different for each version, you could name the unique files <strong>operationname_v1.htm</strong>, <strong>operationname_v2.htm</strong>, and so on. You could have one main index page that links to files for each version, or you could have a separate index page for each version.</li>
  <li>Use version-specific subfolders. For example, you could store version-specific files in v1 and v2 subfolders and keep shared files in the main documentation folder. In this scenario, you would need to have at least one file for each version in the main folder that would reference the version-specific files in the subfolders, or a single index page providing access to both versions.</li>
</ul>
<p>For more detailed information about working with API documentation files, see <a href="api_admin_content_guidelines.htm">Content Development Guidelines</a>.</p>
<p><a href="#top">Back to top</a></p>



<a name="who_can_update_api_documentation_content"></a><h3>Who can update API documentation content?</h3>
<p>API documentation can be updated by:</p>
<ul>
  <li>An API Admin for the API. This could be the person who set up the API on the platform or any other person who is a member of the API Admin team.</li>
  <li>A Business Admin</li>
</ul>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_add_api_documentation"></a><h3>How do I add API documentation?</h3>
<p>You can add documentation for your API to the <em>API &gt; Documents</em> section in two ways:</p>
<ul>
  <li>By uploading content using the platform <em>File Explorer</em>.</li>
  <li>By using the Swagger documentation tool that is integrated with the platform.</li>
  </ul>
<p>For details, see <a href="api_admin_content_guidelines.htm">Content Development Guidelines</a>.</p>
<p><a href="#top">Back to top</a></p>



<a name="can_i_link_to_api_documentation_on_a_different_site"></a><h3>Can I link to API documentation on a different site?</h3>
<p>Yes. If you already have a website established for your API and/or your documentation, you can upload a file with some introductory text and a link to your website.</p>
<p>Remember to use the "target="_blank" attribute on the link so that the documentation site opens in a new window rather than replacing the platform user interface. For details, see <a href="api_admin_content_guidelines.htm">Content Development Guidelines</a>.</p>
<p><a href="#top">Back to top</a></p>



<a name="what_are_the_content_guidelines_for_api_documentation"></a><h3>What are the content guidelines for API documentation?</h3>
<p>The platform provides a detailed set of content development guidelines for API documentation, including publishing, editing, styles, content organization, file upload, testing, and updating. For details, see <a href="api_admin_content_guidelines.htm">Content Development Guidelines</a>.</p>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_upload_my_api_documentation_files"></a><h3>How do I upload my API documentation files?</h3>
<p>You can upload HTML files and associated images, PDF files, or other content to the <em>API &gt; Documents</em> section of the platform using the <strong>File Manager</strong>.</p>
<p>There are two upload options:</p>
<ul>
  <li>Upload files individually.</li>
  <li>Upload multiple files at once using a ZIP archive file.
  <p>If you use a ZIP file, make sure the files within the ZIP don't include extra folders that you don't want in the path. When you upload, the file is unzipped automatically using the paths, if any, specified within the ZIP file. At minimum, the file that is the entry point to your documentation should be in the /documents folder.</p></li>
</ul>
<h5>To upload your files via the <em>File Explorer</em>:</h5>
<ol>
  <li>Navigate to <em>API &gt; API Name &gt; Documents</em>.</li>
  <li>Click the <em>File Explorer</em> icon in the upper-left corner of the documentation panel. The File Explorer appears.
  <p><img src="images/upload metadata xml.jpg" width="358" height="243" alt="Upload metadata file to /documents folder" /></p></li>
  <li>Click <strong>Upload a File</strong> or <strong>Upload a Zip Archive</strong>.</li>
  <li>In the <strong>File Upload</strong> box, navigate to the location of the individual file or ZIP file you want to upload. Choose the file, and then click <strong>Open</strong>.</li>
  <li>Click <strong>Upload</strong>.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h3><a name="h_doc_tagging"></a>Doc Tagging:</h3>



<a name="what_are_the_visibility_rules_for_api_documentation"></a><h3>What are the visibility rules for API documentation?</h3>
<p>The visibility rules for API documentation are shown in the table below.</p>
<table cellspacing="0px" class="doctable" style="width: 98%;">
  <thead>
  <tr>
    <th width="20%">API Visibility</th>
    <th width="20%">Use Licenses?</th>
    <th width="60%">Documentation Visibility</th>
  </tr>
</thead>
<tbody>
    <tr class="t2row">
      <td>Public</td>
      <td>No</td>
      <td>Documentation is visible to all users, including <a href="basics_glossary.htm#gl_anonymoususer">anonymous users</a>.</td>
    </tr>
    <tr class="t1row">
      <td>Public</td>
      <td>Yes</td>
      <td>Documentation must be tagged for the appropriate licenses. If appropriately tagged, documentation associated with public scopes is visible to all users, including <a href="basics_glossary.htm#gl_anonymoususer">anonymous users</a>. Documentation associated with private scopes is only visible to users who have visibility to the private scopes.</td>
    </tr>
    <tr class="t2row">
      <td>Registered Users</td>
      <td>No</td>
      <td>Documentation is visible to all users who are logged in.</td>
    </tr>
    <tr class="t1row">
      <td>Registered Users</td>
      <td>Yes</td>
      <td>Documentation must be tagged for the appropriate licenses. If appropriately tagged, documentation associated with public scopes is visible to all users who are logged in. Documentation associated with private scopes is only visible to users who have visibility to the private scopes.</td>
    </tr>
    <tr class="t2row">
      <td>Private</td>
      <td>No</td>
      <td>Documents are visible only to API Admins, Business Admins, and users who are members of a group that has visibility into the API (Private API Group or invited independent group).</td>
    </tr>
    <tr class="t1row">
      <td>Private</td>
      <td>Yes</td>
      <td>API documentation mapped to a private license or scope is available only to users who have visibility into the applicable license or a license that includes the applicable scope. Visibility is based on group membership. Note that the API documentation must be tagged according to the tagging rules as explained in <a href="#how_do_i_control_visibility_of_api_documentation_files">How do I control visibility of API documentation files?</a> below. If an API uses licenses, whatever the <a href="basics_glossary.htm#gl_visibility">visibility</a> setting is for the API, documentation tagging <strong>must</strong> be used.</td>
    </tr>
</tbody>
</table>

<p><a href="#top">Back to top</a></p>



<a name="how_do_i_control_visibility_of_api_documentation_files"></a><h3>How do I control visibility of API documentation files?</h3>
<p>If an API uses licenses, visibility of API documentation files is restricted to users who are authorized, based on their access to licenses, scopes, or operations and the way that the documentation is tagged.</p>
<p>The platform offers a series of visibility filters that can be used to display applicable API documentation files, or portions of content within individual files, to authorized users. If the API uses licenses, API documentation tagging must be used.</p>
<p> When API documentation is tagged appropriately, the platform displays documentation to users who are authorized, based on membership of one or more groups that have visibility of the API. Other users do not see the documentation.</p>
<p>When you elect to use licenses, you must also tag your documentation to let the platform know which portions of your documentation set should be visible to which users, according to the user's visibility permissions to your API.</p>
<p>When a user who has full or partial visibility to an API selects the <em>Documents</em> menu link in the <em>APIs</em> section to view the documentation, the user sees the designated portion of the API documentation based on permissions, as determined by group membership and the group's visibility of the API. Content for all other licenses is hidden.</p>
<p>When using this feature, make sure that all links associated with documentation sections being filtered are also tagged accordingly. If there are visible links to hidden content, from the user's perspective the links will appear to be broken.</p>
<p>There are two approaches to tagging of documentation:</p>
<ul>
  <li><strong>File-based</strong>: In your documents directory, set up the <strong>metadata.xml</strong> file to match your installation. In this file you can specify files, file types, or folders that have restricted visibility.
<p>The settings in the <strong>metadata.xml</strong> file determine not only visibility but authorization. If file restrictions are set up in metadata.xml, a user cannot access those files even if the user has the URL for the file.</p>
  <p>File-based tagging is the recommended approach for most content.</p>
  <p>For instructions on how to set up the <strong>metadata.xml</strong> file, see <a href="#using_metadata_xml">File-based tagging: Using the metadata.xml file</a> below.</p>
  </li>
  <li><strong>Content-based</strong>: This is tagging at a more granular level, by applying tags to specific pieces of content within a file.
<p>We recommend that you use this approach judiciously. Because permissions vary by user, and documentation projects often include links between files, a simple tagging approach is most efficient. Refer to the example use case below for some ideas.</p>
<p>Content-based tagging is controlled by referencing the<strong> jquery.js</strong> and <strong>dynamic_docs.js</strong> files within the &lt;head&gt; tag of your HTML files. See <a href="#reference_js_file">Content-based tagging: setting up the file</a> for an example.</p>
<p><strong>Note</strong>: Unlike file-based authorization, content-based visibility filters are implemented on the browser side only. This feature is considered a &quot;personalization&quot; feature rather than authorization.</p>

</li>
</ul>
<p>Activities relating to documentation tagging and visibility include:</p>
<ul>
  <li><a href="#using_metadata_xml">File-based tagging: using the metadata.xml file</a></li>
  <li><a href="#setup_doc_toc">Setting up the documentation Table of Contents</a></li>
  <li><a href="#using_doc_tags">Content-based tagging: using documentation tags</a></li>
  <li><a href="#using_multiple_tags">Using multiple tags</a></li>
  <li><a href="#how_do_i_upload_my_api_documentation_files">Uploading your API documentation files</a></li></ul>
<a name="using_metadata_xml"></a>
<h4>File-based tagging: using the metadata.xml file</h4>
<p>You can control the visibility of API documentation and downloadable files in the <em>API &gt; Documents</em> folder by creating a <strong>metadata.xml </strong>file that includes one or more regular expressions that specify which files can be seen, via tagging, for one or more of the following:</p>
<ul>
  <li><a href="#docfilter_bylicense">License</a></li>
  <li><a href="#docfilter_byscope">Scope</a></li>
  <li><a href="#docfilter_byoperation">Operation</a></li>
  <li><a href="#docfilter_bydocumenttype">Document type (file extension)</a></li>
  <li><a href="#docfilter_byfile">File</a></li>
  <li><a href="#docfilter_byapiversion">API version</a></li>
</ul>
<p>If you do not specify a <strong>metadata.xml file</strong> with permissions to your content, your users will not see your documentation. This is always true when the API uses licenses, even if the API is public.</p>
<p> To apply filters, apply the desired filters to the complete documentation set. You can then add additional filters on a per-version basis (See <a href="#docfilter_byapiversion">Filter by API Version</a> below).</p>


<p>In the <strong>metadata.xml</strong> file, include each filter you would like to apply in &lt;metadata&gt; &lt;/metadata&gt; tags. Examples of each are given in the sections below.</p>
<p>The filters are executed in sequential order. In the file, organize your filters in this order:</p>
<ul>
  <li>First, filters that apply to all documents</li>
  <li>Next, API Version filters</li>
</ul>
<p>The example below shows a simple <strong>metadata.xml</strong> file with one API version, apiversion12345.acmecorp; one operation, addPayment; one scope, fullscope-public; and one license, Gold. There is one file within each tag.</p>
<p>In this scenario, users will only see the link to a specific file if they have permission to the applicable API version, scope, operation, or license. Users who do not have the applicable visibility permissions will not see the links (and would not be able to access the files even if they had the URLs).</p>
<p><strong>Note</strong>: In setting up your <strong>metadata.xml</strong>, make sure you represent the names of referenced objects, such as license, scope, or file names, exactly. Make sure the case matches.<a name="sample_metadata_xml"></a></p>
<pre>
&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;metadataconfig xmlns="http://soa.com/xsd/metadataconfig/1.0"&gt;
  &lt;metadata&gt;
    &lt;APIVersionID xmlns="http://soa.com/xsd/api/1.0"&gt;apiversion12345.acmecorp&lt;/APIVersionID&gt;
    &lt;target&gt;documents/index.htm&lt;/target&gt;
    &lt;roles&gt;
      &lt;role name="InvitedUser"/&gt;
    &lt;/roles&gt;
  &lt;/metadata&gt;
  &lt;metadata&gt;
    &lt;target&gt;documents/addPayment.htm&lt;/target&gt;
    &lt;operations&gt;
      &lt;operation name="addPayment"/&gt;
    &lt;/operations&gt;
  &lt;/metadata&gt;
  &lt;metadata&gt;
    &lt;target&gt;documents/fullscope-public.htm&lt;/target&gt;
    &lt;scopes&gt;
      &lt;scope name="fullscope-public"/&gt;
    &lt;/scopes&gt;
  &lt;/metadata&gt;
  &lt;metadata&gt;
    &lt;target&gt;documents/license_public_gold.htm&lt;/target&gt;
    &lt;licenses&gt;
      &lt;license name="Gold"/&gt;
    &lt;/licenses&gt;
  &lt;/metadata&gt;
&lt;/metadataconfig&gt;
</pre>


<a name="docfilter_bylicense"></a>
<h5>Filter by license</h5>
<p>The &lt;licenses&gt; filter in the <strong>metadata.xml</strong> file allows you to specify one or more target documents and one or more license names. Users must have visibility of <strong>all</strong> specified licenses in order to have visibility of the specified documents.</p>
<pre>
&lt;metadata&gt;
  &lt;target&gt;documents/license1.htm&lt;/target&gt;
  &lt;licenses&gt;
    &lt;license name="license1"&gt;
    &lt;/license&gt;
  &lt;/licenses&gt;
&lt;/metadata&gt;
</pre>



<a name="docfilter_byscope"></a>
<h5>Filter by scope</h5>
<p>The &lt;scopes&gt; filter in the <strong>metadata.xml</strong> file allows you to specify one or more target documents and one or more scope names. Users must have visibility of <strong>all</strong> specified scopes (via licenses that they have visibility of) in order to have visibility of the specified documents. Scopes are mapped to API operations using the <strong>Scope Mapping</strong> function on the <em>API &gt; Details</em> page.</p>
<pre>
&lt;metadata&gt;
  &lt;target&gt;documents/scope1.htm&lt;/target&gt;
  &lt;target&gt;documents/scope2.htm&lt;/target&gt;
  &lt;scopes&gt;
    &lt;scope name="scope1"&gt;
    &lt;/scope&gt;
    &lt;scope name="scope2"&gt;
    &lt;/scope&gt;
  &lt;/scopes&gt;
&lt;/metadata&gt;
</pre>



<a name="docfilter_byoperation"></a>
<h5>Filter by operation</h5>
<p>The &lt;operations&gt; filter in the <strong>metadata.xml</strong> file allows you to specify one or more target documents and one or more operation names. Users must have visibility of all specified operations (via licenses that they have visibility of, that include scopes the operations are mapped to) in order to have visibility of the specified documents. Scopes are mapped to API operations using the <strong>Scope Mapping</strong> function on the <em>API &gt; Details</em> page.</p>
<pre>
&lt;metadata&gt;
  &lt;target&gt;documents/operation1.htm&lt;/target&gt;
  &lt;target&gt;documents/operation2.htm&lt;/target&gt;
  &lt;operations&gt;
    &lt;operation name="operation1"&gt;
    &lt;/operation&gt;
    &lt;operation name="operation2"&gt;
    &lt;/operation&gt;
  &lt;/operations&gt;
&lt;/metadata&gt;
</pre>




<a name="docfilter_byfile"></a>
<h5>Specifying target files: filter by file</h5>
<p>You can filter documents based on a specific file by specifying a regular expression, as shown in the examples above.</p>
<p>For example, you might want to define a filtering rule that applies to a specific PDF file, <strong>sample.pdf</strong>. Using this example you would specify the following in the &lt;target&gt; node:</p>
<pre>
&lt;target&gt;apis/sample.pdf&lt;/target&gt;
</pre>



<a name="docfilter_bydocumenttype"></a>
<h5>Specifying target files: filter by document type (file extension)</h5>
<p>In the <strong>metadata.xml</strong> file, you can specify a filtering rule that applies to all files of a specific file type by specifying a regular expression in the &lt;target&gt; node.</p>
<p>For example, if you want to define a specific rule to apply to all .htm files in the /Documents folder you could define the &lt;target&gt; node as follows:</p>
<pre>
&lt;target&gt;.*\.htm&lt;/target&gt;
</pre>
<p>The example below defines a rule that all .htm files in the documents folder for this API are only visible to invited users:</p>
<pre>&lt;metadata&gt;
  &lt;APIVersionID xmlns=&quot;http://soa.com/xsd/api/1.0&quot;&gt;apiversion12345.acmecorp&lt;/APIVersionID&gt;
  &lt;target&gt;documents/*\.htm&lt;/target&gt;
  &lt;roles&gt;
    &lt;role name=&quot;InvitedUser&quot;/&gt;
  &lt;/roles&gt;
&lt;/metadata&gt;</pre>

<p><strong>Multiple roles</strong>: The example below defines a rule that all .htm files in the documents folder for this API are only visible to users with either of two roles:</p>
<pre>&lt;metadata&gt;
  &lt;APIVersionID xmlns=&quot;http://soa.com/xsd/api/1.0&quot;&gt;apiversion12345.acmecorp&lt;/APIVersionID&gt;
  &lt;target&gt;documents/*\.htm&lt;/target&gt;
  &lt;roles&gt;
    &lt;role name="SiteAdmin"&gt;
    &lt;/role&gt;
    &lt;role name="ApiAdmin"&gt;
    &lt;/role&gt;
  &lt;/roles&gt;
&lt;/metadata&gt;</pre>
<p></p>
<p>Or, you might want to filter so that a rule applies to all Microsoft Word .docx files in the /documents folder:</p>
<pre>
&lt;target&gt;.*\.docx&lt;/target&gt;
</pre>


<p>You can also specify multiple &lt;target&gt; filters. If you want to specify a rule that applies to all .htm and .jpg files in the /Documents folder you could include two &lt;target&gt; nodes:</p>
<pre>
&lt;target&gt;.*\.htm&lt;/target&gt;
&lt;target&gt;.*\.jpg&lt;/target&gt;
</pre>



<p>This expression should be placed after the &lt;metadata&gt; tag if your XML file does not include an API Version filter. If it does include an API Version filter, the expression should be placed before the filter. Refer to the <a href="#sample_metadata_xml">sample metadata.xml file</a> above.</p>



<a name="docfilter_byapiversion"></a>
<h5>Specifying target files: filter by API version</h5>
<p>In addition to applying filters to all API documentation, you can further filter an API version using the &lt;api:APIVersionID&gt; filter. You configure this filter by extracting the API Version ID plus tenant name (for example, apiversion400.acmecorp) from the <em>API &gt; Documents</em> URL of your platform.</p>
<p><strong>Example URL:</strong></p>
<pre>/api100.acmecorp/versions/apiversion400.acmecorp/documents</pre>


<p>In your <strong>metadata.xml</strong> file the resulting entry might look similar to the following, which limits access to all .htm files for the specified version so that it is only visible to users with visibility of the Gold license:</p>
<pre>
&lt;metadata&gt;
  &lt;api:APIVersionID&gt;apiversion400.acmecorp&lt;/api:APIVersionID&gt;
  &lt;target&gt;.*\.htm&lt;/target&gt;
  &lt;licenses&gt;
    &lt;license name=&quot;Gold&quot;/&gt;
  &lt;/licenses&gt;
&lt;/metadata&gt;
</pre>



<p>This example illustrates filtering by API Version plus a specific document:</p>
<pre>
&lt;metadata&gt;
  &lt;api:APIVersionID&gt;apiversion400.acmecorp&lt;/api:APIVersionID&gt;
    &lt;target&gt;apis/sample.htm&lt;/target&gt;
      [API documentation filter goes here]
&lt;/metadata&gt;
</pre>


<p>This example illustrates filtering by API Version plus a specific document type:</p>
<pre>
&lt;metadata&gt;
  &lt;api:APIVersionID&gt;apiversion400.acmecorp&lt;/api:APIVersionID&gt;
    &lt;target&gt;apis/*\.html&lt;/target&gt;
      [API documentation filter goes here]
&lt;/metadata&gt;
</pre>



<a name="setup_doc_toc"></a><h4>Table of Contents</h4>
<p>If you have selected a set of files to display in the Table of Contents that displays in the left navigation in the <em>API &gt; Document</em>s section of the platform, the content dynamically displays based on the filters specified for all API documentation or for a specified API version.</p>



<a name="using_doc_tags"></a>
<h4>Content-based tagging: using documentation tags</h4>
<p>It's best to organize your content so that entire files are viewed or hidden based on a user's visibility settings. However, in some cases you'll also need to show or hide different sections of content within one file. At minimum, you'll probably want to organize your documentation index page to include links to the different files that are tagged in the <strong>metadata.xml</strong> file and make the links visible only to users with access to the applicable licenses, scopes, or operations.</p>
<p>You can use the content-based tagging feature to show or hide sections of a specific document based on the visibility access rights of the viewing user. To use this feature you'll need to do two things:</p>
<ul>
  <li>Add some lines of code at the top of the HTML file. See <a href="#reference_js_file">Content-based tagging: Setting up the file</a>.</li>
  <li>Tag the applicable content within the file. The following tags are supported:
    <ul>
      <li><a href="#doctags_showforlicense">showforlicense</a></li>
      <li><a href="#doctags_showforscope">showforscope</a></li>
      <li><a href="#doctags_showforoperation">showforoperation</a></li>
      <li><a href="#doctags_showforanonymoususer">showforanonymoususer</a></li>
      <li><a href="#doctags_showforloggedinuser">showforloggedinuser</a></li>
    </ul>
    </li>
</ul>
<p> <strong>Note</strong>: Tags are mutually exclusive and cannot be nested.</p>



<h5><a name="reference_js_file"></a>Content-based tagging: Setting up the file</h5>
<p>If you want to use the content-based documentation tagging feature to control the visibility of specific pieces of content within a file so that they are displayed to the viewing user based on the user's visibility access rights, you'll need to set up some lines of code in the &lt;head&gt; tag of the HTML file, as shown below.</p>

<ol>
  <li>To the HTML tag at the very top of the file, add <strong>xmlns:soa=&quot;http://soa.com</strong>. Your entry should look similar to the following:
    <pre>
&lt;html lang=&quot;en&quot; xmlns:soa=&quot;http://soa.com&gt;</pre>
</li>
  <li>Within the &lt;head&gt; tag, after the &lt;title&gt; tag, add the following lines:
    <pre>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/resources/style/base.css&quot;/&gt;
&lt;script language=&quot;javascript&quot; src=&quot;/ui/apps/atmosphere/{resource.version}/resources/uiframework/jquery/jquery.js&quot;
  type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;script language=&quot;javascript&quot; src=&quot;/ui/apps/atmosphere/{resource.version}/resources/console/javascript/dynamic_docs.js&quot;
  type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</pre>
<p><strong>Note</strong>: See important note below with regard to the {resource.version} variable above.</p>
</li>
<li>Repeat for each file that will have content-based tagging.</li>
</ol>
<p><strong>Important</strong>: if you want to use dynamic content in your files you must reference the above two JavaScript files. In the second link above, you can use whatever value you want to use in the /{resource.version}/ part of the path. For example, you could use the platform version (recommended) or your API version or API doc version. The importance of this value is in controlling the version of the <strong>dynamic_docs.js</strong> file that is served to your users. This file is cached by the browser, for efficiency. However, if there is a new version with increased capabilities, and you use those new capabilities in a new version of your documentation, you'll want your users to have the new version of the <strong>dynamic_docs.js</strong> file, not an earlier, cached version. In this scenario, all you need to do is update the value of the {resource.version} variable in the file path. Changing the value ensures that when a user accesses your documentation, their browser will reference the latest version of the file. If you see in the release notes for a new version that there are updates to the dynamic documentation capabilities, it's best to update your version to make sure you and your users get the full functionality of the new features.</p>



<a name="doctags_showforlicense"></a>
<h5>showforlicense</h5>
<p>To restrict documentation visibility by license, specify the license names in the <strong>showforlicense</strong> tag, adding one or more license names separated by commas. When an App developer has visibility of the Gold license, based on the license's privacy settings and the developer's visibility access, the developer can view the API documentation.</p>
<pre>&lt;soa:showforlicense licenseNames=&quot;Gold Level&quot;&gt;
  &lt;div class=&quot;soa-ui-cm-dynamic-docs&quot;&gt;
    &lt;p&gt;&lt;a href=&quot;about_gold_license.htm&quot;&gt;About the Gold-Level License&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/soa:showforlicense&gt;
</pre>



<a name="doctags_showforscope"></a>
<h5>showforscope</h5>
<p>To restrict documentation visibility by scope, select the API-wide Mapping option or Operation-specific Mapping option in <em>API Details > Scope Mapping >Edit Scope Details</em>. In the API documentation HTML file, configure the tags as follows, adding one or more operation names separated by commas.</p>


<pre>&lt;soa:showforscope scopeNames=&quot;public-scope-1, public-scope-2&quot;&gt;
  &lt;div class=&quot;soa-ui-cm-dynamic-docs&quot;&gt;
    &lt;a href=&quot;two-public-scopes.html&quot;&gt;two-public-scopes.html&lt;/a&gt;&lt;br&gt;&lt;br&gt;
  &lt;/div&gt;
&lt;/soa:showforscope&gt;
</pre>



<a name="doctags_showforoperation"></a>
<h5>showforoperation</h5>
<p>To restrict documentation visibility by operation, select the Operation-specific Mapping option in <em>API Details > Scope Mapping > Edit Scope Details</em>. In the API documentation HTML file, configure the tags as follows, adding one or more operation names separated by commas.</p>
<pre>
&lt;soa:showforoperation operationNames=&quot;addPayment&quot;&gt;
  &lt;div class=&quot;soa-ui-cm-dynamic-docs&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;addPayment.html&quot;&gt;Documentation for addPayment operation&lt;/a&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/soa:showforoperation&gt;</pre>



<a name="doctags_showforanonymoususer"></a>
<h5>showforanonymoususer</h5>
<p>If there is some content in your documentation that you want to share broadly to all viewers, whether logged in or not, you can apply the showforanonymoususer tag, as shown below.</p>
<pre>
&lt;soa:showforanonymoususer&gt;
  &lt;div class=&quot;soa-ui-cm-dynamic-docs&quot;&gt;
    &lt;div class=&quot;get-started&quot;&gt;
      &lt;p&gt;&lt;a class=&quot;button soa-ui-cm-button&quot; href=&quot;#/home/signup&quot;&gt;Sign Up&lt;/a&gt;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/soa:showforanonymoususer&gt;</pre>



<a name="doctags_showforloggedinuser"></a>
<h5>showforloggedinuser</h5>
<p>If there is some content in your documentation that you want to share with all platform users who are logged in, you can apply the showforloggedinuser tag, as shown below.</p>
<pre>
&lt;soa:showforloggedinuser&gt;
  &lt;div class="soa-ui-cm-dynamic-docs"&gt;
    &lt;div class="get-started"&gt;
      &lt;p&gt;&lt;a class="button soa-ui-cm-button" href="#/home/signup"&gt;Sign Up&lt;/a&gt;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/soa:showforloggedinuser&gt;
</pre>



<a name="using_multiple_tags"></a>
<h5>Using Multiple Tags</h5>
<p> You can specify multiple entries of the same type (licenses, scopes, or operations) and separate them with a comma. An example for scopes is shown below.</p>
<pre>&lt;soa:showforscope scopeNames=&quot;public-scope-1, private-scope-1&quot;&gt;
&lt;div class=&quot;soa-ui-cm-dynamic-docs&quot;&gt;
  &lt;p&gt;&lt;a href=&quot;public-and-private-scope.html&quot;&gt;public-and-private-scope.html&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/soa:showforscope&gt;</pre>


<h4>Test</h4>
<p>After you have finished tagging, test your documentation by performing the following checks:</p>
<ul>
  <li>Verify that the &lt;html&gt; tag, &lt;head&gt; tag, &lt;div&gt; tags, and visibility tags are properly configured in any applicable HTML files.</li>
  <li>Make sure that the API version is correctly specified. When you go to your API in the platform, the API version is in the URL path. It is in the format <strong>apiversion{nnnnn}.{tenant}</strong>. For example, apiversion10368.acmecorp.</li>
  <li>Verify that links to tagged sections are also tagged.</li>
  <li>Verify that the scope and operation names you specified in the visibility tags are valid. Scopes are mapped to operations on the <em>Scope Mapping &gt; Edit API Scope</em> page. If scope names are missing or incorrect, consult with your Business Administrator.</li>
  <li>Verify that the license names you specified in the visibility tags are available to your app developer audience via the <em>API Access Wizard</em>. To do this you can create a new app and submit an API Access Request by selecting <strong>Access</strong> at the top right of the <em>API &gt; Details</em> page.</li>
  <li>Upload your files. See <a href="#how_do_i_upload_my_api_documentation_files">How do I upload my API documentation files?</a></li>
  <li>Create several test user accounts and request API access using various scenarios that will illustrate visibility and restricted visibility of API documentation in the <em>API &gt; Documents</em> section.</li>
  <li>If you make changes to licenses, scopes, or operations, update the API documentation HTML files accordingly.</li>
</ul>
<p><a href="#top">Back to top</a></p>
<div class = "divider1"></div>



</div>
