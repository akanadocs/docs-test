---
layout: page
title: API Documentation Maintenance | API Admin | Akana API Platform Help
description: Add and maintain authored API documentation and/or generated API documentation.
product: cm
category: learn
sub-nav-class: API Documentation
weight: 2624
type: page
nav-title: API Documentation Maintenance
---
<h1 id="top">API Documentation Maintenance</h1>
<p>Add and maintain authored API documentation and/or generated API documentation.</p>
<p><strong>Note</strong>: For information about tagging API documentation for visibility by different audiences, see <a href="api_admin_documentation_tagging.htm">API Documentation Visibility Tagging</a>.</p>
<p><strong>Video content</strong>:</p>
<ul>
	<li>Authored API documentation: <a href="https://www.akana.com/video-tutorials/document-api" title="Learn how to use Akana to create and edit API documentation to deliver technical content and instructions for easy integration." target="_blank">Learn how to use Akana to create and edit API documentation to deliver technical content and instructions for easy integration.</a></li>
	<li>Inline Test Client: <a href="https://www.akana.com/video-tutorials/review-document-and-test-api" title="Learn how to use Akana for API orchestration to perform complex processes when an API resource is called." target="_blank">Learn how to use Akana to review documentation and test an API by using Test Client within the context of the API documentation.</a></li>
</ul>
<hr class="divide_hr" />



<h2 style="color: gray;">Table of Contents</h2>

<h4 style="color: gray;"><a href="#h_apidoc_authored">Authored API Documentation:</a></h4>
<ol class="table_of_contents">
	<li><a href="#what_is_the_api_documentation_maintenace_process">What is the API documentation maintenance process?</a></li>
	<li><a href="#who_can_upload_api_documentation_content">Who can upload API documentation content?</a></li>
	<li><a href="#api_doc_add">How do I add API documentation?</a></li>
	<li><a href="#api_doc_multiple_api_versions">How do I manage documentation for more than one API version?</a></li>
	<li><a href="#api_doc_link_to_external_site">Can I link to API documentation on a different site?</a></li>
	<li><a href="#api_doc_content_guidelines">What are the content development guidelines for API documentation?</a></li>
	<li><a href="#api_doc_upload">How do I upload my API documentation files?</a></li>
	<li><a href="#api_doc_download">How do I download my API documentation files?</a></li>
	<li><a href="#why_do_i_still_need_metadata_xml">I'm not using doc tagging; why do I still need a metadata.xml file?</a></li>
	<li><a href="#ie_9_compatibility">How do I make sure my API documentation is rendered correctly for users of Internet Explorer 9 and below?</a></li>
	<li><a href="#site_content_code_links_download">How do I code download links in my documentation on the Community Manager developer portal so that users can download files?</a></li>
	<li><a href="#site_content_code_links_external">How do I code external links in my documentation on the Community Manager developer portal?</a></li>
	<li><a href="#api_doc_access_external_portal">Can my API documentation be rendered on a third-party portal?</a> (2019.1.31 and later)</li>
</ol>


<h4 style="color: gray;"><a href="#h_apidoc_inline_tc_in_authored">Inline Test Client in Authored API Documentation:</a></h4>


<ol class="table_of_contents">
	<li><a href="#inline_tc_in_authored_api_doc">How do I include inline Test Client in my authored API documentation?</a></li>
	<li><a href="#config_js_inline_tc_authored_doc">How do I set up the config.js file to show inline Test Client in my authored API doc?</a></li>
	<li><a href="#config_js_inline_tc_content_eg">How do I set up the config.js file to include body content in the inline Test Client example?</a></li>
	<li><a href="#config_js_inline_tc_predefine_apps">How do I set up the config.js file to predefine the list of apps available for testing in inline Test Client?</a></li>
	<li><a href="#inline_tc_policy_security">How do I set up the config.js file to automatically populate security policy values in inline Test Client?</a></li>
	<li><a href="#reference_config_js_file_inline_tc_api_doc_authored">How do I set up my authored API doc file to show inline Test Client?</a></li>
	<li><a href="#inline_tc_test_in_authored_doc">How do I view/test that inline Test Client is working in my authored API doc content?</a></li>
	<li><a href="#inline_tc_edit_config_js_file">How do edit the config.js file for the inline Test Client feature?</a></li>
	<li><a href="#api_specific_test_client_link">How do I link to the API-specific Test Client for my API, so developers can click through from my API documentation in Simple Dev theme?</a></li>
	<li><a href="#inline_tc_with_operation_specific_policies">Does inline Test Client support policies assigned at the operation level?</a> (2020.2.0 and later)</li>
</ol>


<h4 style="color: gray;"><a href="#h_apidoc_generated">Generated API Documentation:</a></h4>


<ol class="table_of_contents">
	<li><a href="#generated_api_doc_overview">What is the generated API documentation feature and how does it work?</a></li>
	<li><a href="#generated_api_doc_add_to_toc_dt">How do I add generated API doc to the documentation Table of Contents?</a></li>
</ol>


<h4 style="color: gray;"><a href="#h_apidoc_combined">Combined Authored and Generated API Documentation:</a></h4>


<ol class="table_of_contents">
	<li><a href="#generated_api_doc_inline_in_authored_api_doc">How do I include generated API doc inline in my authored API doc?</a></li>
	<li><a href="#config_js_inline_swagger_authored_doc">How do I set up the config.js file to show generated API doc inline in my authored API doc?</a></li>
	<li><a href="#how_do_i_reference_config_js_inline_swagger_authored_doc">How do I reference the config.js file to show generated API doc inline in my authored API doc content?</a></li>
	<li><a href="#generated_api_doc_test_inline_in_authored_doc">How do I view/test that the generated API doc is showing up inline in my authored API doc content?</a></li>
</ol>




<hr class="divide_hr" />
<h2 id="h_apidoc_authored">Authored API Documentation:</h2>




<h2 id="what_is_the_api_documentation_maintenace_process">What is the API documentation maintenance process?</h2>
<p>You'll need to develop your API documentation outside the platform in your own HTML editor. Once your content is ready you can upload it to the site.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="who_can_upload_api_documentation_content">Who can upload API documentation content?</h2>
<p>In Hermosa Theme, you can upload documentation for a specific API if you are logged in and have one of the following roles:</p>
<ul>
	<li>An API Admin for the API. This could be the person who set up the API on the platform or any other person who is a member of the API Admin team.</li>
	<li>A Business Admin</li>
</ul>
<p>API documentation for Simple Dev Theme must be uploaded by the Site Admin in Hermosa Theme.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="api_doc_add">How do I add API documentation?</h2>
<p>You can add documentation for your API to the <strong>API</strong> &gt; <strong>Documentation</strong> section in two ways:</p>
<ul>
	<li>By uploading content using the platform <strong>File Manager</strong>. See <a href="api_admin_content_guidelines.htm#h_using_file_manager">Using File Manager</a>.</li>
	<li>By using the Swagger documentation tool that is integrated with the platform. See <a href="api_admin_content_guidelines.htm#h_using_swagger">Using Swagger</a>.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="api_doc_multiple_api_versions">How do I manage documentation for more than one API version?</h2>
<p>If you add a new API version, you can update the existing documentation or create an entirely different set of documents. By default, all documentation files reside in the same folder.</p>
<p>Here are a couple of approaches you could take to maintain files from different versions within the same folder structure:</p>
<ul>
	<li><strong>Differentiate file names by version</strong>. For example, if you have two versions, with some files shared between versions and some files different for each version, you could name the files <strong>operationname_v1.htm</strong>, <strong>operationname_v2.htm</strong>, and so on. You could have one main index page that links to files for each version, or you could have a separate index page for each version.</li>
	<li><strong>Use version-specific subfolders</strong>. For example, you could store version-specific files in v1 and v2 subfolders and keep shared files in the main documentation folder. In this scenario, you would need to have at least one file for each version in the main folder that would reference the version-specific files in the subfolders, or a single index page providing access to both versions.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="api_doc_link_to_external_site">Can I link to API documentation on a different site?</h2>
<p>You can link to any external site from your API documentation. For example, if you already have a website established for your API and/or your documentation, you could upload a file with some introductory text and a link to direct users to your website for the information about your API.</p>
<p>Remember to use the "target="_blank" attribute on the link so that the documentation site opens in a new window rather than replacing the platform user interface. For examples, see <a href="api_admin_content_guidelines.htm#an_i_link_to_external_site">Can I link to an external site?</a></p>
<p><a href="#top">Back to top</a></p>



<h2 id="api_doc_content_guidelines">What are the content development guidelines for API documentation?</h2>
<p>The platform provides a detailed set of content development guidelines for API documentation, including publishing, editing, styles, content organization, file upload, testing, and updating. For details, see <a href="api_admin_content_guidelines.htm">Content Development Guidelines for API Admins</a>.</p>
<p><a href="#top">Back to top</a></p>




<h2 id="api_doc_upload">How do I upload my API documentation files?</h2>
<p>You can upload HTML files and associated images, PDF files, or other content to the <strong>API</strong> &gt; <strong>Documentation</strong> section of the platform using the <strong>File Manager</strong>.</p>

<p>At minimum, you should provide the following files that are the entry point to your API documentation:</p>
<ul>
	<li><strong>Hermosa Theme</strong>: index page in the /documents folder.</li>
	<li><strong>Simple Dev Theme</strong>: main documentation page accessed via Documentation link at top of Simple Dev main page. </li>
</ul>

<p>There are two approaches to file upload:</p>
<ul>
	<li><strong>ZIP file</strong>: 
		<ul>
			<li><strong>Hermosa Theme</strong>: Zip all the documentation files and upload them following the instructions in <a href="#proc_upload_api_doc">To upload API documentation files via the File Manager (Hermosa Theme):</a> below.</li>
			<li><strong>Simple Dev</strong>: Zip all the documentation files into one zip file named <strong>documentation.zip</strong>, and upload it from the Content folder using the <strong>Upload a File</strong> option which uploads and unzips the file (<em>not</em> the <strong>Upload a Zip Archive</strong> option, which uploads without unzipping). The documentation folder is created automatically, and the files are placed in that folder. If you use a ZIP file, make sure that you are in the right folder when you upload it, and that it doesn't include extra folders that you don't want. When you upload, the file is unzipped as part of the upload process, using the paths, if any, specified within the ZIP file.</li>
		</ul>
	</li>
	<li><strong>Individual file uploads</strong>:
		<ul>
			<li><strong>Hermosa Theme</strong>: Follow the instructions in <a href="#proc_upload_api_doc">To upload API documentation files via the File Manager (Hermosa Theme):</a> below.</li>
			<li><strong>Simple Dev</strong>: Get the Site Admin to create a <strong>documentation</strong> folder if there isn't one (exact name and case as given here), change directory into the <strong>documentation</strong> folder, and then upload the files individually.</li>
		</ul>
	</li>
	</ul>
<p>For Hermosa Theme, the API Admin can upload the files following the procedure below.</p>
<p>For Simple Dev theme, the Site Admin must upload the files in Hermosa Theme: <strong>More</strong> &gt; <strong>Admin</strong> &gt;<strong>File Manager</strong> and then choose <strong>Content File Manager</strong>, in a folder below the <strong>content</strong> folder. The Site Admin must use or create a folder named <strong>documentation</strong> (so the path is <strong>content/documentation</strong>). As soon as the files are uploaded in Hermosa Theme, they are immediately visible in Simple Dev theme. Just log in and click the Documentation page to view the API documentation. For more information, see <a href="site_admin_content_guidelines_sd.htm#where_do_i_upload_api_doc_for_sd">Where do I upload API documentation for Simple Dev?</a> (Site Admin help).</p>
<h4 id="proc_upload_api_doc" >To upload API documentation files via the File Manager (Hermosa Theme):</h4>
<ol>
	<li>Go to <strong>API</strong> &gt; <strong>Documentation</strong>.</li>
	<li>Click the <strong>File Manager</strong> button.</li>
	<li>In File Manager, click <strong>Upload a File</strong> (to upload and unzip your documentation) or <strong>Upload a Zip Archive</strong> (to upload a static ZIP file, such as an SDK file that users might want to download).</li>
	<li>In the <strong>File Upload</strong> box, navigate to the location of the individual file or ZIP file you want to upload. Choose the file, and then click <strong>Open</strong>.</li>
	<li>Click <strong>Upload</strong>.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="api_doc_download">How do I download my API documentation files?</h2>
<p>You can download a ZIP file of the documents directory for your API, including all files in the directory and all subfolders and their contents. You can download a ZIP of any content you are authorized to view and edit. Follow the instructions below.</p>
<h4>To download your API documentation files via the File Manager</h4>
<ol>
	<li>Go to <strong>API</strong> &gt; <strong>Documentation</strong>.</li>
	<li>Click the <strong>File Manager</strong> button.</li>
	<li>In <strong>File Manager</strong>, click <strong>Download Directory</strong>.</li>
	<li>Choose to open or save the file.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="why_do_i_still_need_metadata_xml">I'm not using doc tagging; why do I still need a metadata.xml file?</h2>
<p>If your API uses licenses, you <strong>must</strong> include the <strong>metadata.xml</strong> file with appropriate tagging. If you don't specify a <strong>metadata.xml</strong> file with permissions to your content, or if you include a <strong>metadata.xml</strong> file but don't add the information about your files, your users will not see your documentation, other than the properties file and any legal agreements. This includes a custom CSS file, or any other assets associated with your documentation.</p>
<p>This is always true when the API uses licenses, even if the API is public.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="ie_9_compatibility">How do I make sure my API documentation is rendered correctly for users of Internet Explorer 9 and below?</h2>
<p>If your documentation might be viewed by users of IE version 9 or earlier, you'll need to add the conditional comment shown below into the &lt;head&gt; tag of your documentation.</p>
<p>This also affects the display of the inline Test Client, so if you're using inline Test Client and your users might be using IE version 9 or earlier, be sure to include the lines below:</p>
<pre>&lt;!--[if lte IE 9]&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;/resources/style/ie.css&quot;&gt;
&lt;![endif]--&gt;</pre>
<p>Add this conditional comment below the stylesheet references for <strong>base.css</strong> and <strong>reset.css</strong>. For example:</p>
<pre>&lt;html <strong>lang=&quot;en&quot; xmlns:soa=&quot;http://soa.com</strong>&quot;&gt;
&lt;head&gt;
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;
&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;

&lt;title&gt;API Documentation Overview&lt;/title&gt;

&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/resources/style/reset.css&quot;/&gt;  
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/resources/style/base.css&quot;/&gt; 
&lt;!--[if lte IE 9]&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;/resources/style/ie.css&quot;&gt;
&lt;![endif]--&gt;

&lt;script language=&quot;javascript&quot; src=&quot;/ui/apps/atmosphere/123456/resources/uiframework/jquery/jquery.js&quot;
  type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;script language=&quot;javascript&quot; src=&quot;/ui/apps/atmosphere/123456/resources/console/javascript/dynamic_docs.js&quot;
  type=&quot;text/javascript&quot;&gt;&lt;/script&gt;<strong>
</strong>
&lt;/head&gt;</pre>
<p><a href="#top">Back to top</a></p>



<h2 id="site_content_code_links_download">How do I code download links in my documentation on the Community Manager developer portal so that users can download files?</h2>
<h4 class="stamp">Valid in Version: 2020.1.0 and later</h4>
<p>Normally, in HTML authoring, to code a link that allows users to download a file, you might use something like this:</p>
<pre>&lt;a href=&quot;files.zip?download=true&quot; target=&quot;_blank&quot;&gt;Download ZIP file&lt;/a&gt;</pre>
<p>In documentation within the Community Manager developer portal, whether authored API documentation or site content, you'll need to take an extra step to make sure that file download works for your users.</p>
<p>In addition to the normal coding, just add the following class into your download link: <strong>soa-control-cm-inline-do-not-process-link</strong>.</p>
<p>In the above example, where the download file is in the same folder as the HTML file that contains the link, you'd code it like this:</p>
<pre>&lt;a class=&quot;soa-control-cm-inline-do-not-process-link&quot; href=&quot;./files.zip?download=true&quot; target=&quot;_blank&quot;&gt;Download ZIP file&lt;/a&gt;</pre>
<p>In the above:</p>
<ul>
	<li>The class, <strong>soa-control-cm-inline-do-not-process-link</strong>, is on the &lt;a&gt; tag.</li>
	<li>The download file is in the same folder as the HTML file, but you must include the <strong>./</strong> designation, as shown above, rather than just the filename.  In the Community Manager developer portal API doc, a link in the same folder must always include this, to indicate that it's the current folder.</li>
</ul>
<p>The example below shows the same link if the download file is in a subfolder:</p>
<pre>&lt;a class=&quot;soa-control-cm-inline-do-not-process-link&quot; href=&quot;assets/files.zip?download=true&quot; target=&quot;_blank&quot;&gt;Download ZIP file&lt;/a&gt;</pre>
<p>The example below shows the same link if the download file is in a parent folder:</p>
<pre>&lt;a class=&quot;soa-control-cm-inline-do-not-process-link&quot; href=&quot;../files.zip?download=true&quot; target=&quot;_blank&quot;&gt;Download ZIP file&lt;/a&gt;</pre>
<p><a href="#top">Back to top</a></p>



<h2 id="site_content_code_links_external">How do I code external links in my documentation on the Community Manager developer portal?</h2>
<p>There are two ways to code an external link in your Community Manager developer portal content or authored API documentation:</p>
<ul>
	<li><a href="#site_content_code_link_newtab">External link to open in a new browser tab</a></li>
	<li><a href="#site_content_code_link_samepage">External link to replace existing content</a></li>
</ul>


<h3 id="site_content_code_link_newtab">External link to open in a new browser tab</h3>
<p>Normally, in HTML authoring, to code a link to an external site you might use something like this:</p>
<pre>&lt;a href=&quot;http://example.com&quot;&gt;Example website&lt;/a&gt;</pre>
<p>If you wanted the content to open in a new browser tab, you would specify <span class="apidoc_code">target="_blank"</span> as shown below:</p>
<pre>&lt;a href=&quot;http://example.com&quot; target=&quot;_blank&quot;&gt;Example website&lt;/a&gt;</pre>

<p>In the Community Manager developer portal, a link to an external site is automatically opened in a new page. Do not specify the target. </p>
<p>All you need is the &lt;a&gt; tag is the URL and the link text, as shown in the first example above.</p>


<h3 id="site_content_code_link_samepage">External link to replace existing content</h3>
<p>Normally, in HTML authoring, if you want to include a link to an external site, and you want it to replace the existing content, you might use something like this:</p>
<pre>&lt;a href=&quot;http://example.com&quot;&gt;Example website&lt;/a&gt;</pre>
<p>In documentation within the Community Manager developer portal, with the above example, the external site is displayed in a new browser tab.</p>
<p>if you want to link to an external site and you want the external page to replace the existing content page, you'll need to add the following class into your download link:</p>
<ul>
	<li> soa-control-cm-inline-external-link</li>
</ul>
<p>Using the same example as above, if you want the external page to replace your Community Manager developer portal content page, code it like this:</p>
<pre>&lt;a class=&quot;soa-control-cm-inline-external-link&quot; href=&quot;http://example.com&quot;&gt;Example website&lt;/a&gt;</pre>
<p>In the above:</p>
<ul>
	<li>The class, <strong>soa-control-cm-inline-external-link</strong>, is on the &lt;a&gt; tag.</li>
	<li>Do not include the <span class="apidoc_code">target</span> attribute, which forces the content to be displayed in a new page.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="api_doc_access_external_portal">Can my API documentation be rendered on a third-party portal?</h2>
<h4 class="stamp">Valid in Version: 2019.1.31 and later</h4>
<p>A third-party portal can be configured to display API documentation files from the Community Manager developer portal, including inline Swagger documentation, inline OpenAPI documentation, and inline Test Client.</p>
<p>This requires some setup which would be done by a site administrator. No additional configuration is required from the API Admin developing the API documentation.</p>
<p>Configuring third-party portal access is a customization task. For additional information, see <a href="../customization/cm_customization_202020.htm#s_external_portal_integration">Rendering API documentation in a third-party portal</a>.</p>
<p><strong>Note</strong>: Valid in Version: 2019.1.35 and later: In some cases, a user might get an HTTP 401 Unauthorized message, and not be able to view the API documentation in the third-party portal, because of how the user's browser interprets the platform cookie. There are some settings that the Site Admin can modify to address this (<strong>Admin</strong> &gt; <strong>Settings</strong> &gt; <strong>Security</strong>). The two settings are <a href="site_admin_settings.htm#settings_security_domain">Authentication and CSRF Token Cookie Attribute - Domain</a> and <a href="site_admin_settings.htm#settings_security_samesite">Authentication and CSRF Token Cookie Attribute - SameSite</a>.</p>
<p><a href="#top">Back to top</a></p>




<hr class="divide_hr" />
<h2 id="h_apidoc_inline_tc_in_authored">Inline Test Client in Authored API Documentation:</h2>




<h2 id="inline_tc_in_authored_api_doc">How do I include inline Test Client in my authored API documentation?</h2>
<p>You can modify your authored API documentation with a special tag so that when users are viewing the API documentation in the Community Manager developer portal, they can access Test Client inline, in the context of the API documentation. This helps make it easy for your users to test out your API, each operation, with their app (or without any app context, if the API supports anonymous access).</p>
<p>To set this up, you'll need to:</p>
<ol>
	<li>Create a <strong>config.js</strong> file (a different filename is fine too as long as you reference the correct filename). For instructions on creating this file, refer to <a href="#config_js_inline_tc_authored_doc">How do I set up the config.js file to show inline Test Client in my authored API doc?</a> below. For Simple Dev, this file must include the correct API Version ID for your API; in Hermosa Theme, it's not necessary to include the API Version ID since you upload the API documentation in the context of a specific API.</li>
	<li>In your authored documentation content file, do two things (see <a href="#reference_config_js_file_inline_tc_api_doc_authored">How do I set up my authored API doc file to show inline Test Client?</a> below):
		<ul>
			<li>Reference <strong>config.js</strong> (or whatever filename you used) in the &lt;head&gt; tag, as well as other files needed for this feature to work.</li>
			<li>Include the <strong>&lt;soa:testclient config=&quot;{MYAPP.profile_name}&quot;&gt;</strong> tag in the body.</li>
		</ul>
	</li>
	<li>Upload the files. See <a href="#api_doc_upload">How do I upload my API documentation files?</a></li>
	<li>Test. See <a href="#inline_tc_test_in_authored_doc">How do I view/test that inline Test Client is working in my authored API doc content?</a> below.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="config_js_inline_tc_authored_doc">How do I set up the config.js file to show inline Test Client in my authored API doc?</h2>
<p><strong>Note</strong>: these instructions include procedures for all themes.</p>
<p>If you want readers of your API documentation to be able to view and use Test Client inline in your authored API doc, you'll need to:</p>
<ul>
	<li>Set up a <strong>config.js</strong> file.</li>
	<li>Upload it to the platform with your documentation files.</li>
	<li>Reference it within the &lt;head&gt; section of any authored file in which you want to display inline Test Client.</li>
</ul>
<p>Then, you can use special tags in your authored documentation file, and the API-specific, operation-specific Test Client will appear at runtime, inline in the authored HTML file.</p>
<h4>To set up the config.js file to show inline Test Client</h4>
<ol>
	<li>Create a file called <strong>config.js</strong> and paste the content, using the examples given below as a starting point. Refer to the appropriate example for the theme you are using:
		<ul>
			<li><strong>Hermosa Theme</strong>: <a href="#config_js_inline_tc_dt">Config.js file for inline Test Client in Hermosa Theme</a></li>
			<li><strong>Simple Dev</strong>: <a href="#config_js_inline_tc_sd">Config.js file for inline Test Client in Simple Dev Theme</a></li>
		</ul>
		</li>
	
	<li>Customize the values in the sample file to match your own API, using the information in <a href="#config_js_inline_tc_customizing">Customizing the config.js file</a> below.</li>
</ol>
<p>Note that the file content is a little different depending on the theme you are using:</p>
<ul><li><strong>Hermosa Theme</strong>: since API documentation is already in the context of a specific API, the APIVersionID is not needed. See <a href="#config_js_inline_tc_sd">Config.js file for inline Test Client in Simple Dev Theme</a> below.</li>
	<li><strong>Simple Dev</strong>: Since API documentation is stored in a general location for all APIs, the valid APIVersionID is included in the JSON object in the <strong>config.js</strong> file. See <a href="#config_js_inline_tc_dt">Config.js file for inline Test Client in Hermosa Theme</a> below.</li>
</ul>
<p><strong>Note</strong>: The file is quite long, so the sample files below use only two operations. You can expand for multiple operations as needed. This example is based on a scenario where a platform API is set up to reference the Swagger Petstore API, and the sample files below reference two operations from that API, getPetById and addPet. The section for each operation is named profile_{operationname}. You can find these API definitions at <a href="http://petstore.swagger.io" title="Swagger Petstore page" target="_blank">http://petstore.swagger.io</a> (external link).</p>
<h4 id="config_js_inline_tc_sd">Config.js file for inline Test Client in Simple Dev Theme</h4>
<p><strong>Note</strong>: Simple Dev theme is deprecated in version 2020.2.0, and will be removed in a future release.</p>
	<pre>window.MYAPP = {
  "profile_getPetById" : {
    "general" : {
      "showItText" : "Click here to try getting a pet with the Pet ID",
      "hideItText" : "Click here to close",
      "summary" : "Get pet by ID"
    },
    "target" : {
      "apiVersion" : {
        "defaultValue" : "ae85330c-6562-4abc-86fd-1ea42f6d3f22.acmepaymentscorp"
      },
      "environment" : {
        "display" : false,
        "defaultValue" : "Live"
      },
      "operation" : {
        "display" : false,
        "defaultValue" : "getPetById"
      },
      "headers" : {
        "display" : false,

        "Content-Type" : "None",
        "Accept" : "application/json",

        "items" : [{
          "name" : "header1",
          "value" : "value1"
        }]
      },
      "parameters" : {
        "display" : false,
        "items" : [{
          "name" : "petId",
          "value" : "1434747602017",
          "nameIsChangeable" : false,
          "type" : "path"
        }, {
          "name" : "name1",
          "value" : "value1",
          "nameIsChangeable" : true,
          "type" : "query"
        }]
      }
    }
  },

  "profile_addPet" : {
    "general" : {
      "showItText" : "Click here to try adding a pet",
      "hideItText" : "Click here to close",
      "summary" : "Add a pet to the petstore"
    },
    "target" : {
      "apiVersion" : {
        "defaultValue" : "ae85330c-6562-4abc-86fd-1ea42f6d3f22.acmepaymentscorp"
      },
      "environment" : {
        "display" : false,
        "defaultValue" : "Live"
      },
      "operation" : {
        "display" : false,
        "defaultValue" : "addPet"
      },
      "headers" : {
        "display" : true,

        "Content-Type" : "application/json",
        "Accept" : "application/json",

        "items" : []
      },
      "parameters" : {
        "display" : true,
        "items" : [{
          "name" : "petId",
          "value" : "1",
          "nameIsChangeable" : false,
          "type" : "path"
        }, {
          "name" : "name",
          "value" : "fluffy puppy",
          "nameIsChangeable" : false,
          "type" : "form"
        }, {
          "name" : "status",
          "value" : "available",
          "nameIsChangeable" : false,
          "type" : "form"
        }]
      }
    }
  }
};
</pre>

<h4 id="config_js_inline_tc_dt">Config.js file for inline Test Client in Hermosa Theme</h4>
<p><strong>Note</strong>: This example includes line numbers, for easy reference to different sections of the file. The line numbers are not part of the actual file.</p>
<pre>01)  window.MYAPP = {
01)   "profile_getPetById" : {
02)     "general" : {
03)       "showItText" : "Show: getPetById",
04)       "hideItText" : "Hide: getPetById",
05)       "summary" : "Get pet by ID"
06)     },
07)     "target" : {
08)       "environment" : {
09)         "display" : false,
10)         "defaultValue" : "Live"
11)       },
12)       "operation" : {
13)         "display" : false,
14)         "defaultValue" : "getPetById"
15)       },
16)       "headers" : {
17)         "display" : false,
18) 
19)         "Content-Type" : "None",
20)         "Accept" : "application/json",
21) 
22)         "items" : [{
23)           "name" : "header1",
24)           "value" : "value1"
25)         }]
26)       },
27)       "parameters" : {
28)         "display" : false,
29)         "items" : [{
30)           "name" : "petId",
31)           "value" : "1434747602017",
32)           "nameIsChangeable" : false,
33)           "type" : "path"
34)         }, {
35)           "name" : "name1",
36)           "value" : "value1",
37)           "nameIsChangeable" : true,
38)           "type" : "query"
39)         }]
40)       }
41)     }
42)   },
43) 
44)   "profile_addPet" : {
45)     "general" : {
46)       "showItText" : "(Show) Adds a Pet",
47)       "hideItText" : "(Hide) Add a Pet",
48)       "summary" : "Adds a pet to the petstore"
49)     },
50)     "target" : {
51)       "environment" : {
52)         "display" : false,
53)         "defaultValue" : "Live"
54)       },
55)       "operation" : {
56)         "display" : false,
57)         "defaultValue" : "addPet"
58)       },
59)       "headers" : {
60)         "display" : true,
61) 
62)         "Content-Type" : "application/json",
63)         "Accept" : "application/json",
64) 
65)         "items" : []
66)       },
67)       "parameters" : {
68)         "display" : true,
69)         "items" : [{
70)           "name" : "petId",
71)           "value" : "1",
72)           "nameIsChangeable" : false,
73)           "type" : "path"
74)         }, {
75)           "name" : "name",
76)           "value" : "Armadillo",
77)           "nameIsChangeable" : false,
78)           "type" : "form"
79)         }, {
80)           "name" : "status",
81)           "value" : "available",
82)           "nameIsChangeable" : false,
83)           "type" : "form"
84)         }]
85)       }
86)     }
87)   }
88) };</pre>


<h4 id="config_js_inline_tc_customizing">Customizing the config.js file</h4>
<p>The above is your starter file. Within this file, you'll need to set up the specific values applicable to your API on the platform. The core values that you set up for the inline Test Client feature are explained below. The first two are key, because without them the feature will not work. The others are cosmetic, controlling the text your users will see when viewing the feature.</p>
<ul>
	<li><strong>Line 02, profile name</strong>: Choose a profile name that's intuitive. For example, you could use {profile_operationname}.</li>
	<li><strong>Line 04, showItText</strong>: Displayed inline in the API documentation when the user first views the documentation, before the user clicks. Modify as needed.</li>
	<li><strong>Line 05, hideItText</strong>: Displayed when the user clicks the link to try out the inline Test Client feature. Modify as needed.</li>
	<li><strong>Line 06, summary</strong>: Displayed in both views. A short description of your API.</li>
	<li>Simple Dev only: <strong>Line 10, APIVersion</strong>: use the correct APIVersionID for your API.</li>
	<li><strong>API-specific values</strong>: update API-specific values, such as environment, headers, and parameters, as needed.</li>
</ul>
<p>The examples below show where the text that you add will display to your users:</p>
<p><strong>Default display before user clicks Show It. ShowitText and summary are visible.</strong></p>
<p><img src="assets/tc_inline_in_authored_doc_01_dt.jpg" alt="Test Client inline in authored doc: collapsed view" /></p>
<p><strong>Display when user clicks the Show It link. ShowitText and summary are visible, plus the inline Test Client.</strong></p>
<p><img src="assets/tc_inline_in_authored_doc_02_dt.jpg" alt="Test Client inline in authored doc: expanded view" /></p>
<p>Remember that you also need to reference the <strong>config.js</strong> file in your documentation file or file in order to view the above results. See <a href="#reference_config_js_file_inline_tc_api_doc_authored">How do I set up my authored API doc file to show inline Test Client?</a> below.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="config_js_inline_tc_content_eg">How do I set up the config.js file to include body content in the inline Test Client example?</h2>
<p>If you have an API that passes body content, such as a POST or PUT operation, you might want to include sample body content in your API documentation example in inline Test Client.</p>
<p>You can do this by adding a parameter with name <strong>body</strong>, in the parameters section of the <strong>config.js</strong> file.</p>
<p>The example below shows a snippet of a config.js file showing how you can define default body content in your API documentation example, in inline Test Client. This fits into the parameters section of the file (line 67 for the second operation in <a href="#config_js_inline_tc_dt">Config.js file for inline Test Client in Hermosa Theme</a>, which is a POST operation).</p>
<pre>{
  "parameters":{
    "display":true,
    "items":[
      {
        "name":"body",
        "value":"This is the sample body content for the API documentation example",
        "nameIsChangeable":false,
        "type":"entity"
      }
    ]
  }
}</pre>
<p><a href="#top">Back to top</a></p>



<h2 id="config_js_inline_tc_predefine_apps">How do I set up the config.js file to predefine the list of apps available for testing in inline Test Client?</h2>
<p>In your API documentation, in your inline Test Client, you might want to limit the list of apps that users can test against your API. By providing one or more apps that users can test against, you can help ensure that customers have a good testing experience with your API; you might also want to do this for security reasons.</p>
<p>You can hard-code a list of one or more apps, in the <strong>config.js</strong> file. When you do this, when the user clicks the <strong>Security</strong> button in the inline Test Client in your API documentation, the user can only test with an app that's on the list.</p>
<p>You must make sure that:</p>
<ul>
	<li>The AppID values you provide are valid.</li>
	<li>Each of the apps you add to the list has a valid contract with your API.</li>
</ul>

<h4 id="proc_tc_hardcode_apps">To hard-code a list of apps available for testing in inline Test Client</h4>
<ol>
	<li>Open up the <strong>config.js</strong> file. For instructions on locating or creating this file, see <a href="#config_js_inline_tc_authored_doc">How do I set up the config.js file to show inline Test Client in my authored API doc?</a></li>
	<li>For the first <strong>&lt;soa:testclient&gt;</strong> include tag in your API documentation, for which you want to predefine the apps list, find the <strong>connectedAppsList</strong> section of the file, or add one if there isn't one already existing, using the example below.</li>
	<li>Add in the array of AppID values, as shown in the example below.
		<p>It doesn't matter where this appears in the <strong>connectedAppsList</strong> section of the file.</p>
	<p><strong>Note</strong>: If you're not sure where to get the AppID values, see <a href="#proc_appid_get">To get the AppID in the Community Manager developer portal</a> below.</p>
	</li>
	<li>Validate the JSON to make sure your change is well-formed.</li>
	<li>Repeat steps 2 through 4 for every <strong>&lt;soa:testclient&gt;</strong> include tag defined in your API documentation file. For example, if you have one tag for each operation in your API, you'll need to add the <strong>connectedAppsList</strong> element for each operation.</li>
	<li>Save the file, import it into your API documentation, and test.</li>
</ol>
<p>The example below shows how you should construct the list, and where it should go in the file:</p>
<pre>{
  ...
  &quot;connectedAppsList&quot;:[
    {
      &quot;label&quot;:&quot;Config 1 - 124434324332234&quot;,
      &quot;value&quot;:&quot;7LBMrITq7oijeSdIElEIw8gh.open&quot;
    },
    {
      &quot;label&quot;:&quot;Config 2 - 124434324332234&quot;,
      &quot;value&quot;:&quot;9UwkGGycG2d9NKCPCkuEs3Al.open&quot;
    },
    {
      &quot;label&quot;:&quot;Config 3 - 124434324332234&quot;,
      &quot;value&quot;:&quot;7LBMrITq7oijeSdIElEIw8gh.open&quot;
    }
  ],
  ...
}</pre>
<p>For an example of a complete config.js file, see <a href="assets/config.js">config.js</a>.</p>

<h4 id="proc_appid_get">To get the AppID in the Community Manager developer portal</h4>
<p>If you're not sure where to get the AppID values, go to the <strong>App Details page</strong> in the Community Manager developer portal. The URL will be something like this:</p>
<pre>{hostname:port}/acmepaymentscorp/#/app/3c1a1bce-b0b7-4665-9d43-144a94fff6ca.acmepaymentscorp/details</pre>
<p>In the above, <strong>3c1a1bce-b0b7-4665-9d43-144a94fff6ca.acmepaymentscorp</strong> is the AppID. Save out the value and use it in the <strong>config.js</strong> file.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="inline_tc_policy_security">How do I set up the config.js file to automatically populate security policy values in inline Test Client?</h2>
<p>When testing an API in Test Client, certain policies that might be attached to the API require the user to provide certain values. For example:</p>
<ul>
	<li>If the API uses the <a href="api_admin_policy_list.htm#pl_AtmosphereApplicationSecurityPolicy">Atmosphere Application Security Policy</a>, users must provide Token Location and Token Algorithm. See <a href="api_admin_testing_tc.htm#tc_configsettings_atmoappsecuritypolicy">Test Client security settings: AtmosphereApplicationSecurityPolicy</a>.</li>
	<li>If the API uses the <a href="api_admin_policy_list.htm#pl_oauthsecurity">OAuth security policy</a>, users must choose OAuth Version, Grant Type, and Authentication Method. See <a href="api_admin_testing_tc.htm#tc_configsettings_oauthpolicy">Test Client security settings: OAuth policy</a>.</li>
</ul>
<p>In your API documentation, you can set up the inline Test Client to provide values for one or more of these policies that are attached to the API, by adding content to the <strong>config.js</strong> file.</p>

<h4 id="proc_inline_tc_policy">To set up inline Test Client with security policy values</h4>
<ol>
	<li>Open up the <strong>config.js</strong> file. For instructions on locating or creating this file, see <a href="#config_js_inline_tc_authored_doc">How do I set up the config.js file to show inline Test Client in my authored API doc?</a></li>
	<li>Find the <strong>securityPolicies</strong> section of the file, or add one if there isn't one. Use the example below as a guide.</li>
	<li>Validate the JSON to make sure your change is well-formed.</li>
	<li>Save the file, import it into your API documentation, and test.</li>
</ol>
<p>The example below shows this section of the file, with values configured for the <strong>AtmosphereApplicationSecurityPolicy</strong> and <strong>OAuth</strong> policies:</p>
<pre>{
  ...
  "securityPolicies" : {
    "AtmosphereApplicationSecurityPolicy" : {
      "tokenAlgorithm" : "HmacSHA1",
      "tokenLocation" : "Header"
    },
    "OAuth" : {
      "oAuthVersion": "OAuth 2.0",
      "grantType": "authorization_code",
      "authMethod": "SharedSecret"
    }
  },
  ...
}</pre>
<p>For an example of a complete config.js file, see <a href="assets/config.js">config.js</a>.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="reference_config_js_file_inline_tc_api_doc_authored">How do I set up my authored API doc file to show inline Test Client?</h2>
<p><strong>Note</strong>: These instructions are valid for all themes.</p>
<p>Once you have the <strong>config.js</strong> file set up with the correct values for your specific API, as explained in <a href="#config_js_inline_tc_authored_doc">How do I set up the config.js file to show inline Test Client in my authored API doc?</a> above, you'll need to modify your API documentation HTML files to correctly reference <strong>config.js</strong> to implement this functionality. In each file where you want to implement inline functionality, do these two things:</p>
<ol>
	<li>Add specific &lt;script&gt; tags in the &lt;head&gt; tag to reference <strong>config.js</strong> and any other needed files, as shown in the example below, so that the feature will work.</li>
	<li>Add the special tag, <strong>soa:testclient</strong>, inline in the body of the authored API documentation file.</li>
</ol>
<p id="s1_script_tag_tc"><strong>1: Adding &lt;script&gt; tags in the head of your API doc file</strong></p>
<p>In the &lt;head&gt; tag, reference the <strong>tag_lib.min.js</strong> file. For details, see <a href="api_admin_content_guidelines.htm#how_do_i_reference_taglibminjs">How do I reference the tag_lib.min.js file?</a> An example is shown below.</p>
<pre>&lt;html lang="en" xmlns:soa="http://soa.com"&gt;
  &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"/&gt;

&lt;!-- The css files below are needed for the inline testing feature to be displayed correctly --&gt;
    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/resources/style/reset.css&quot;/&gt; 
    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/resources/style/base.css&quot;/&gt; 

    &lt;!--[if lte IE 9]&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;/resources/style/ie.css&quot;&gt;
    &lt;![endif]--&gt;

&lt;!-- The script files below are needed for the inline testing feature to work correctly --&gt;
    &lt;script language="javascript" src="config.js" type="text/javascript"&gt;&lt;/script&gt;
    &lt;script language=&quot;javascript&quot; src=&quot;/ui/apps/atmosphere/123/resources/console/SOA/console/common/tag_lib/dist/tag_lib.min.js&quot;type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</pre>
<p><strong>Note</strong>: when you reference reset.css, as in the above example, you must also define styles in your custom css. For more information, see <a href="api_admin_content_guidelines.htm#platform_reset_css">What are reset.css and base.css and why would I use them?</a></p>
<p id="s2_tag_testclient"><strong>2: Including the soa:testclient tag in the body of the API doc file</strong></p>
<p>In the part of the document where you want the generated documentation to appear, add something along the lines of the below, making sure you have the correct operation name in place of <strong>addPet</strong> below:</p>
<pre>&lt;div&gt;
  &lt;soa:testclient config=&quot;{MYAPP.profile_addPet}&quot;&gt;
  &lt;/soa:testclient&gt;
&lt;/div&gt;</pre>
<p>Once each file is updated as needed, get all the files uploaded, as explained in <a href="site_admin_content_guidelines_sd.htm#where_do_i_upload_api_doc_for_sd">Where do I upload API documentation for Simple Dev?</a> (Site Admin help).</p>
<p><a href="#top">Back to top</a></p>



<h2 id="inline_tc_test_in_authored_doc">How do I view/test that inline Test Client is working in my authored API doc content?</h2>
<p><strong>Video content</strong>: <a href="https://www.akana.com/video-tutorials/review-document-and-test-api" title="Learn how to use Akana for API orchestration to perform complex processes when an API resource is called." target="_blank">Learn how to use Akana to review documentation and test an API by using Test Client within the context of the API documentation.</a></p>
<p>Once you have your files set up, you can upload the files and test to make sure everything is correct, and that Test Client is now displayed inline in your authored API content.</p>
<p>The procedures below include all the steps you'll need to take to view the final product.</p>
<p>The process for Hermosa Theme and the process for Simple Dev theme are slightly different.</p>

<h4>To test that Test Client is displayed inline in authored API content, in Simple Dev Theme</h4>
<p><strong>Note</strong>: Simple Dev theme is deprecated in version 2020.2.0, and will be removed in a future release.</p>
<ol>
	<li>If you don't already know it, get the API Version ID for your API (in Hermosa Theme, API's <strong>Details</strong> page, last part of the URL before /details).</li>
	<li>Set up the <strong>config.js</strong> file for Simple Dev implementation, including the API Version ID from Step 1 and all properties for your API operations. See <a href="#config_js_inline_tc_sd">Config.js file for inline Test Client in Simple Dev Theme</a>.</li>
	<li>Set up an authored HTML content file with:
		<ul>
			<li>The necessary &lt;script&gt; tags in the &lt;head&gt; tag of the file, including the reference to your <strong>config.js</strong> file. See <a href="#s1_script_tag_tc">Adding &lt;script&gt; tags in the head of your API doc file</a>.</li>
			<li>The doc tag that causes Test Client to be displayed inline. See <a href="#s2_tag_testclient">Including the soa:testclient tag in the body of the API doc file</a>.</li>
			</ul>
		</li>
	<li>Get the Site Admin to do the following:
		<ol>
			<li>Go to <strong>More</strong> &gt; <strong>Admin</strong> &gt;<strong>File Manager</strong>. Choose <strong>Content</strong>, click the <strong>File Manager</strong> button, and create a <strong>documentation</strong> folder.</li>
			<li>Navigate into the <strong>documentation</strong> folder.</li>
			<li>Upload the <strong>config.js</strong> file and the authored HTML documentation file, along with your CSS file or any other files you might want.</li>
		</ol>
		</li>
	<li>Log into Simple Dev theme and click Documentation.</li>
	<li>Scroll to the location of the doc tag and click the heading. Test Client is generated and displayed inline. Users can then specify values and test the operation in the context of the documentation. Depending on how the API is set up, users might need to choose an app and specify other settings such as OAuth version.</li>
</ol>

<h4>To test that Test Client is displayed inline in authored API content, in Hermosa Theme</h4>
<ol>
	<li>Set up the <strong>config.js</strong> file for Hermosa Theme implementation. See <a href="#config_js_inline_tc_dt">Config.js file for inline Test Client in Hermosa Theme</a>.</li>
	<li>Set up an authored HTML content file with:
		<ul>
			<li>The necessary &lt;script&gt; tags in the &lt;head&gt; tag of the file, including the reference to your <strong>config.js</strong> file. See <a href="#s1_script_tag_tc">Adding &lt;script&gt; tags in the head of your API doc file</a>.</li>
			<li>The doc tag that causes the generated doc to be displayed inline. See <a href="#s2_tag_testclient">Including the soa:testclient tag in the body of the API doc file</a>.</li>
			</ul>
		</li>
	<li>Create an empty file named <strong>default.swg</strong>. When you add it to the documentation TOC in Hermosa Theme, this allows users to click directly to the generated documentation even when authored documentation is in the documentation TOC.</li>
	<li>In Hermosa Theme, go to your <strong>API</strong> &gt; <strong>Documentation</strong> page.</li>
	<li>In File Manager, upload the following files:
		<ul>
			<li>The <strong>config.js</strong> file from Step 1.</li>
			<li>The content file from Step 2.</li>
			<li>The <strong>default.swg</strong> file from Step 3.</li>
			<li>Optionally, any supporting files you might want, such as your CSS file or any other files.</li>
		</ul>
		</li>
	<li>In File Manager, for your content file:
		<ul>
			<li>Check the Show in TOC check box</li>
			<li>Choose a display name (Set Display Name icon).</li>
		</ul>
	</li>
	<li>In File Manager, for your <strong>default.swg</strong> file:
<ul>
			<li>Check the Show in TOC check box</li>
			<li>Choose a display name (Set Display Name icon).</li>
		</ul>
	</li>
	<li>On the left menu bar, click the menu item for your authored documentation file. Scroll to the location of the doc tag and click the heading. The documentation is generated and displayed inline.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="inline_tc_edit_config_js_file">How do edit the config.js file for the inline Test Client feature?</h2>
<p>To get the inline Test Client working correctly inline in your authored API documentation, you'll need to edit many of the values in the config.js file to match the values set up for your API. This includes such things as operation name, path, Content-Type (request header), Accept header (response header), and other values.</p>
<p>It's best to work with one operation first, and when you have that working, model the rest on that. The example given in <a href="#config_js_inline_tc_authored_doc">How do I set up the config.js file to show inline Test Client in my authored API doc?</a> has two operations.</p>
<p>The values at the top of the file determine how the inline Test Client feature is displayed, but the rest of the file content determines whether the inline Test Client actually works as expected.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="api_specific_test_client_link">How do I link to the API-specific Test Client for my API, so developers can click through from my API documentation in Simple Dev theme?</h2>
<p>Platform app developers have access to the Test Client tool, which allows them to test out different APIs. Test Client includes a drop-down list, where app developers can choose from a list of available APIs that the current app has a contract with.</p>
<p>In Simple Developer theme, an API-specific version of the new Test Client testing tool is available, to facilitate testing of an individual API from the API page of the Community Manager developer portal. The API Admin can also use this to include an API-specific link to Test Client within the API documentation. When using Test Client in the context of a specific API, developers can invoke APIs that support anonymous access, use the credentials for one of their apps, or use a custom app identity.</p>
<p>The API-specific version of Test Client is not part of the standard user interface, but you can construct the URL and include it in your API documentation. App developers reading your API documentation can click through and test out your API. This API-specific version of Test Client does not give access to all the app developer's APIs, just the one that's in the URL.</p>
<p>The URL is:</p>
<pre>{protocol}//{hostname}/#!apis/{APIID}/versions/{APIVersionID}/testclient</pre>
<p>For example:</p>
<pre>http://acmepaymentscorp.com/acmepaymentscorp/#!apis/12770263-e036-4222-b8eb-87d33676d3ad.acmepaymentscorp/
versions/9e3846ee-bbbf-4982-82ca-5a2411ec619b.acmepaymentscorp/testclient</pre>
<p>To construct the URL for your specific API, follow the instructions below. You can then link to this page from your platform API documentation. For information on including links in platform API documentation, see <a href="site_admin_content_guidelines_sd.htm#how_do_i_code_links_in_sd">How do I code links in Simple Dev?</a></p>
<h4>To construct the URL for an API-specific version of Test Client</h4>
<ol>
	<li>Go to the URL for your implementation of Simple Developer theme and log in.</li>
	<li>At the Welcome page, copy the URL up to <strong>#!</strong>, omitting the <strong>welcome</strong> from the end of the URL. It will look something like the below:
	<pre>http://acmepaymentscorp.com/acmepay/</pre>
	</li>
	<li>Get the APIID and APIVersionID for your API. For example, you could:
		<ul>
			<li>Go to the URL for your implementation of Hermosa Theme and log in.</li>
			<li>Go to the <strong>Details</strong> page for your API and copy the URL. It will look something like the below:
<pre>http://acmepaymentscorp.com/#/api/21bfe816-5260-4444-ae77-bd2c047174f8.acmepaymentscorp/versions/
7ba40d5f-3c22-4b8f-ac9d-317cbee4b83f.acmepaymentscorp/details</pre></li>
			<li>In the above, the first ID, after /api/, is the APIID, then /details/, and then the APIVersionID. Copy that whole portion of the URL, beginning with the APIID and ending with the APIVersionID, to use in constructing the URL for your API-specific Test Client.</li>
		</ul>
	</li>
	<li>Join together the part of the URL from Step 2, and the part from Step 3, and add /testclient at the end.</li>
	<li>Test the URL to make sure you have it right.</li>
</ol>
<h4>To reference the URL for an API-specific version of Test Client in your API documentation</h4>
<p>Once you have the URL, you can reference it with a direct inline link from your API documentation. To have the Test Client display in a separate browser tab, use the Target attribute <strong>_blank</strong>, as shown below.</p>
<pre>&lt;p&gt;To test your app with our API, try out the 
&lt;a href=&quot;{protocol}//{hostname}/{Tenantname}/#!apis/{APIID}/versions/{APIVersionID}/testclient&quot; target=&quot;_blank&quot;&gt;
Test Client testing tool&lt;/a&gt;.&lt;/p&gt;
</pre>
<p>To upload your file to the API documentation folder in Simple Dev theme, see <a href="site_admin_content_guidelines_sd.htm#where_do_i_upload_api_doc_for_sd">Where do I upload API documentation for Simple Dev?</a></p>
<p><a href="#top">Back to top</a></p>



<h2 id="inline_tc_with_operation_specific_policies">Does inline Test Client support policies assigned at the operation level?</h2>
<h4 class="stamp">Valid in Version: 2020.2.0 and later</h4>
<p>Policies assigned at the operation level work when testing an operation with inline Test Client embedded in authored API documentation, just as they do when testing in Test Client in the context of an app or API.</p>
<p>For information on Test Client support of policies attached to an individual operation, rather than to the entire API service, see <a href="api_admin_testing_tc.htm#tc_with_operation_specific_policies_api">Does Test Client support policies assigned at the operation level?</a></p>
<p><a href="#top">Back to top</a></p>




<hr class="divide_hr" />
<h2 id="h_apidoc_generated">Generated API Documentation:</h2>




<h2 id="generated_api_doc_overview">What is the generated API documentation feature and how does it work?</h2>
<p>When you set up your API definition, either in the platform or by referencing an existing service in the API Gateway, the platform automatically generates API documentation based on your API definition.</p>
<p>Within the context of the platform in Hermosa Theme, you and your users can test your API, in the context of an app (or anonymously if the API supports anonymous access).</p>
<p>This generated API documentation testing functionality is essentially the same as the Test Client feature, but Test Client is available inline, in the context of your API.</p>
<p>Some of the things you and your users can do with the generated API documentation:</p>
<ul>
	<li>Test each operation.</li>
	<li>Test with different variables, including app context, token location, OAuth version, grant type (for OAuth 2.0), and authentication method.</li>
</ul>
<p>You can use this feature to test and monitor the usability of your API; your developer audience can use it to discover the great capabilities of your API.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="generated_api_doc_add_to_toc_dt">How do I add generated API doc to the documentation Table of Contents?</h2>
<p>In Hermosa Theme, after you've set up your API definition, you can view generated API documentation immediately: from your API's <strong>Details</strong> page, click <strong>Documentation</strong> on the left menu.</p>
<p>By default, if you haven't uploaded any authored API documentation, the generated API documentation is displayed.</p>
<p>However, If you upload authored documentation and add one of the files to the Documentation table of contents so that users will see that content (see <a href="api_admin_content_guidelines.htm#api_doc_file_manager_doc_toc_add_file">How do I add a file to the API documentation table of contents?</a> and subsequent topics), the generated API documentation is no longer displayed, by default.</p>
<p>In this scenario, you'll need to take a couple of extra steps to make sure that both authored and generated API documentation is visible to your users. You'll need to:</p>
<ol>
	<li>Create an empty file named <strong>default.swg</strong> and upload it to your documents folder (<strong>API</strong> &gt; <strong>Documentation</strong> &gt; File Manager).</li>
	<li>In File Manager, check <strong>Show in TOC</strong> and set a display name for the file: for example, <strong>Generated</strong>.</li>
</ol>
<p>Now, both sets of documentation are accessible to your users on the Documentation Table of Contents.</p>
<p>For detailed instruction for working with File Manager, refer to <a href="api_admin_content_guidelines.htm#h_using_file_manager">Using File Manager</a>.</p>
<p><a href="#top">Back to top</a></p>




<hr class="divide_hr" />
<h2 id="h_apidoc_combined">Combined Authored and Generated API Documentation:</h2>




<h2 id="generated_api_doc_inline_in_authored_api_doc">How do I include generated API doc inline in my authored API doc?</h2>
<p>If you upload authored HTML API documentation, the authored documentation is shown to users by default, in both themes. If you want to offer both types of documentation to your users, you'll need to take a couple of extra steps to make the generated API documentation available to your users. </p>
<p>To set this up, you'll need to:</p>
<ul>
	<li>Create a <strong>config.js</strong> file (a different filename is fine too as long as you reference the correct filename). For instructions on creating this file, refer to <a href="#config_js_inline_swagger_authored_doc">How do I set up the config.js file to show generated API doc inline in my authored API doc?</a> below. For Simple Dev, this file must include the correct API Version ID for your API; in Hermosa Theme, it's not necessary to include the API Version ID since you upload the API documentation in the context of a specific API.</li>
	<li>In your authored documentation content file, do two things:
		<ul>
			<li>Reference <strong>config.js</strong> (or whatever filename you used) in the &lt;head&gt; tag.</li>
			<li><strong>For inline API doc in Swagger 2.0 format</strong>: Include the <strong>&lt;soa:generatedoc config=&quot;{MYAPP.tag1}&quot;&gt;</strong> tag in the body of the file.</li>
			<li><strong>For inline API doc in OAS 3.0 format</strong>: Include the <strong>&lt;soa:generateopenapidoc config=&quot;{MYAPP.tag1}&quot;&gt;</strong> tag in the body of the file.</li>
		</ul>
	</li>
	</ul>
<p>For information on how to set these files up, refer to the topics below.</p>
<h4>To make generated API documentation available along with authored HTML API documentation (Hermosa Theme)</h4>
<ol>
	<li>Upload the API documentation, if you didn't do so already. See <a href="api_admin_content_guidelines.htm#h_using_file_manager">Using File Manager</a>.</li>
	<li>In File Manager, add the main documentation index page to the documentation TOC so that users can click into it.</li>
	<li id="file_default_swg">In File Manager, upload an empty file named <strong>default.swg</strong> and add it to the documentation TOC. This allows users to click directly to the generated documentation even when authored documentation is in the documentation TOC.</li>
	<li>Upload the <strong>config.js</strong> file.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="config_js_inline_swagger_authored_doc">How do I set up the config.js file to show generated API doc inline in my authored API doc?</h2>
<p><strong>Note</strong>: these instructions include procedures for all themes.</p>
<p>If you want readers of your API documentation to be able to see the generated doc for your API, inline within your authored documentation, you'll need to set up a <strong>config.js</strong> file, upload it to the platform with your documentation files, and reference it within the &lt;head&gt; section of any authored file in which you want to display generated API doc inline in the file.</p>
<p>Then, you can use special tags in your authored documentation file, and the generated API documentation will appear at runtime, inline in the authored HTML file.</p>
<p>As a starting point, create a file called <strong>config.js</strong> and paste the content as shown below.</p>
<p>Note that the file content is a little different depending on the theme you are using:</p>
<ul>
	<li><strong>Hermosa Theme</strong>: since API documentation is already in the context of a specific API, the APIVersionID is not needed.</li>
	<li><strong>Simple Dev</strong>: Since API documentation is stored in a general location for all APIs, you must include the valid APIVersionID in the <strong>config.js</strong> file.</li>
</ul>
<h4 id="config_js_inline_generated_api_doc_sd">Config.js file for inline generated API doc in Simple Dev Theme</h4>
<p><strong>Note</strong>: Simple Dev theme is deprecated in version 2020.2.0, and will be removed in a future release.</p>
<pre>01  window.MYAPP = {
02    "tag1" : {
03      "general" : {
04        "showItText" : "Swagger Petstore API",
05        "hideItText" : "Swagger Petstore API",
06        "summary" : "summary text: Generated documentation for Swagger Petstore API"
07      },
08      "target" : {
09        "apiVersion" : {
10          "defaultValue" : "ea61269e-8a8f-4949-970c-c4af5d7fb7c5.acmepaymentscorp"
11        }
12      }
13    }
14  };</pre>

<h4 id="config_js_inline_generated_api_doc_default">Config.js file for inline generated API doc in Hermosa Theme</h4>
<pre>01  window.MYAPP = {
02    "tag1" : {
03      "general" : {
04        "showItText" : "Swagger Petstore API",
05        "hideItText" : "Swagger Petstore API",
06        "summary" : "summary text: Generated documentation for Swagger Petstore API"
07      },
08    }
09  };</pre>


<h4>Information general to both versions</h4>
<p>The above is your starter file. Within this file, you'll need to set up the specific values applicable to your API on the platform. The values that you set up are listed and explained below. The first two are key, because without them the feature will not work. The others are cosmetic, controlling the text your users will see when viewing the feature.</p>
<ul>
	<li><strong>Line 10, apiVersion</strong>: (Simple Dev only) paste the API Version ID for the specific API. If you're not sure of the ID, go to the API's <strong>Details</strong> page in Hermosa Theme. The API Version ID is after /versions/ in the URL. The URL is constructed like this: {protocol}://{hostname}/{tenantid}/#/APIID/versions/{APIVersionID}/details.</li>
	<li><strong>Line 04, showItText</strong>: Displayed by default when user first views the documentation.</li>
	<li><strong>Line 05, hideItText</strong>: Displayed when user clicks the link to try out the inline generated documentation feature.</li>
	<li><strong>Line 06, summary</strong>: Displayed in both views. A short description of your API.</li>
</ul>
<p>The examples below show where the text that you add will display to your users:</p>
<p><strong>Default display before user clicks Show It. ShowitText and summary are visible.</strong></p>
<p><img src="assets/tc_inline_in_authored_doc_01_sd.jpg" alt="Test Client inline in authored API doc" /></p>
<p><strong>Display when user clicks the Show It link. ShowitText and summary are visible, plus the inline testing feature.</strong></p>
<p><img src="assets/tc_inline_in_authored_doc_02_sd.jpg" alt="Test Client inline in authored API doc" /></p>
<p>Remember that you also need to reference the <strong>config.js</strong> file in your documentation file or file in order to view the above results. See <a href="#how_do_i_reference_config_js_inline_swagger_authored_doc">How do I reference the config.js file to include inline generated doc in my authored API doc content?</a> below.</p>
<p>When your documentation files are ready, including any authored API documentation and the accompanying <strong>config.js</strong> file, you'll need to upload the files.</p>
<h4>For Simple Dev:</h4>
<p><strong>Note</strong>: Simple Dev theme is deprecated in version 2020.2.0, and will be removed in a future release.</p>
<p>Get the Site Admin to upload it in Hermosa Theme: <strong>More</strong> &gt; <strong>Admin</strong> &gt;<strong>File Manager</strong>. In the <strong>Content</strong> section, click <strong>File Manager</strong>.</p>
<p>From here, there are two approaches to uploading the content:</p>
<ul>
	<li><strong>ZIP file</strong>: Zip all the documentation files into one zip file named documentation.zip, and upload it from the Content folder. The documentation folder is created automatically, and the files are placed in that folder.</li>
	<li><strong>Individual file uploads</strong>: Create a <strong>documentation</strong> folder if there isn't one (exact name and case as given here). Change directory into the <strong>documentation</strong> folder, and from there, upload the files individually.</li>
</ul>
<p>As soon as the files are uploaded in Hermosa Theme, they are immediately visible in Simple Dev theme. Just log in and click the Documentation page to view the API documentation with inline testing capability. </p>
<p>For more information, see <a href="site_admin_content_guidelines_sd.htm#where_do_i_upload_api_doc_for_sd">Where do I upload API documentation for Simple Dev?</a> (Site Admin help).</p>
<h4>For Hermosa Theme:</h4>
<p>Go to <strong>API</strong> &gt; <strong>Documentation</strong> and use the File Manager to upload the files.</p>
<p><a href="#top">Back to top</a></p>




<h2 id="how_do_i_reference_config_js_inline_swagger_authored_doc">How do I reference the config.js file to show generated API doc inline in my authored API doc content?</h2>
<p><strong>Note</strong>: These instructions are valid for all themes.</p>
<p>Once you have the <strong>config.js</strong> file set up with the correct API version and other values for your API, you'll need to modify your API documentation HTML files to correctly reference <strong>config.js</strong> to implement this functionality. In each file where you want to implement inline functionality, do these two things:</p>
<ol>
	<li>Add specific &lt;script&gt; tags in the &lt;head&gt; tag to reference <strong>config.js</strong> and any other needed files, as shown in the example below, so that the feature will work.</li>
	<li>Add the special tag, inline in the body of the authored API documentation file:
		<ul>
			<li>For inline generated Swagger 2.0 API documentation within authored API documentation: <strong>soa:generatedoc</strong></li>
			<li>For inline generated OAS 3.0 API documentation within authored API documentation: <strong>soa:generateopenapidoc</strong></li>
		</ul>
	</li>
</ol>
<p id="s1_script_tag_swagger"><strong>1: Adding &lt;script&gt; tags in the head of your API doc file</strong></p>
<p>In the &lt;head&gt; tag, add the lines of code shown below.</p>
<pre>&lt;html lang="en" xmlns:soa="http://soa.com"&gt;
  &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"/&gt;

&lt;!-- The css files below are needed for the inline testing feature to be displayed correctly --&gt;
    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/resources/style/reset.css&quot;/&gt; 
    &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/resources/style/base.css&quot;/&gt; 

    &lt;!--[if lte IE 9]&gt;
    &lt;link rel=&quot;stylesheet&quot; href=&quot;/resources/style/ie.css&quot;&gt;
    &lt;![endif]--&gt;

&lt;!-- The script files below are needed for the inline testing feature to work correctly --&gt;
    &lt;script language="javascript" src="config.js" type="text/javascript"&gt;&lt;/script&gt;
    &lt;script language=&quot;javascript&quot; src=&quot;/ui/apps/atmosphere/123/resources/console/SOA/console/common/tag_lib/dist/tag_lib.min.js&quot;type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</pre>
		<p><strong>Note</strong>: when you reference reset.css, as in the above example, you must also define styles in your custom css. For more information, see <a href="api_admin_content_guidelines.htm#platform_reset_css">What are reset.css and base.css and why would I use them?</a></p>
<p id="s2_tag_generatedoc_generateopenapidoc"><strong>2: Including the generatedoc or generateopenapidoc tag in the body of the API doc file</strong></p>
<p>In the part of the document where you want the generated documentation to appear, add something along the lines of the examples below:</p>
<p>For Swagger 2.0:</p>
<pre>&lt;h5&gt;Try it!&lt;/h5&gt;
  &lt;div&gt;
    &lt;soa:generatedoc config="{MYAPP.tag1}"&gt;
    &lt;/soa:generatedoc&gt;
  &lt;/div&gt;
</pre>
<p>For OAS 3.0:</p>
<pre>&lt;h5&gt;Try it!&lt;/h5&gt;
  &lt;div&gt;
    &lt;soa:generateopenapidoc config="{MYAPP.tag1}"&gt;
    &lt;/soa:generateopenapidoc&gt;
  &lt;/div&gt;
</pre>
<p>Once each file is updated, get all the files uploaded, as explained in <a href="site_admin_content_guidelines_sd.htm#where_do_i_upload_api_doc_for_sd">Where do I upload API documentation for Simple Dev?</a> (Site Admin help).</p>
<p><a href="#top">Back to top</a></p>



<h2 id="generated_api_doc_test_inline_in_authored_doc">How do I view/test that the generated API doc is showing up inline in my authored API doc content?</h2>
<p>Once you have your files set up, you can upload the files and test to make sure everything is set up correctly and the generated API documentation is now displayed inline in your authored API content.</p>
<p>The procedures below include all the steps you'll need to take to view the final product.</p>
<p>The process for Hermosa Theme and the process for Simple Dev theme are slightly different.</p>

<h4>To test that the generated API doc is displayed inline in authored API content, in Simple Dev Theme</h4>
<p><strong>Note</strong>: Simple Dev theme is deprecated in version 2020.2.0, and will be removed in a future release.</p>
<ol>
	<li>If you don't already know it, get the API Version ID for your API (Hermosa Theme, API Details page, last part of the URL before /details).</li>
	<li>Set up the <strong>config.js</strong> file:</li>
	<li>For Simple Dev implementation, include the API Version ID from Step 1. See <a href="#config_js_inline_generated_api_doc_sd">Config.js file for inline generated API doc in Simple Dev Theme</a>.</li>
	<li>Set up an authored HTML content file with:
		<ul>
			<li>The necessary &lt;script&gt; tags in the &lt;head&gt; tag of the file, including the reference to your <strong>config.js</strong> file. See <a href="#s1_script_tag_swagger">Adding &lt;script&gt; tags in the head of your API doc file</a>.</li>
			<li>The doc tag that causes the generated doc to be displayed inline. See <a href="#s2_tag_generatedoc_generateopenapidoc">Including the generatedoc or generateopenapidoc tag in the body of the API doc file</a>.</li>
			</ul>
	</li>
	<li>Get the Site Admin to do the following:
		<ol>
			<li>Go to <strong>More</strong> &gt; <strong>Admin</strong> &gt;<strong>File Manager</strong>. In the <strong>Content</strong> section, click <strong>File Manager</strong> and create a <strong>documentation</strong> folder.</li>
			<li>Navigate into the <strong>documentation</strong> folder.</li>
			<li>Upload the <strong>config.js</strong> file and the authored HTML documentation file, along with your CSS file or any other files you might want.</li>
		</ol>
		</li>
	<li>Log into Simple Dev theme and click Documentation.</li>
	<li>Scroll to the location of the doc tag and click the heading. The documentation is generated and displayed inline.</li>
</ol>

<h4>To test that the generated API doc is displayed inline in authored API content, in Hermosa Theme</h4>
<ol>
	<li>Set up the <strong>config.js</strong> file for Hermosa Theme implementation. See <a href="#config_js_inline_generated_api_doc_default">Config.js file for inline generated API doc in Hermosa Theme</a>.</li>
	<li>Set up an authored HTML content file with:
		<ul>
			<li>The necessary &lt;script&gt; tags in the &lt;head&gt; tag of the file, including the reference to your <strong>config.js</strong> file. See <a href="#s1_script_tag_swagger">Adding &lt;script&gt; tags in the head of your API doc file</a>.</li>
			<li>The doc tag that causes the generated doc to be displayed inline. See <a href="#s2_tag_generatedoc_generateopenapidoc">Including the generatedoc or generateopenapidoc tag in the body of the API doc file</a>.</li>
			</ul>
		</li>
	<li>Create an empty file named <strong>default.swg</strong>. When you add it to the documentation TOC in Hermosa Theme, this allows users to click directly to the generated documentation even when authored documentation is in the documentation TOC.</li>
	<li>In Hermosa Theme, go to your <strong>API</strong> &gt; <strong>Documentation</strong> page.</li>
	<li>In File Manager, upload the following files:
		<ul>
			<li>The <strong>config.js</strong> file from Step 1.</li>
			<li>The content file from Step 2.</li>
			<li>The <strong>default.swg</strong> file from Step 3.</li>
			<li>Optionally, any supporting files you might want, such as your CSS file or any other files.</li>
		</ul>
		</li>
	<li>In File Manager, for your content file:
		<ul>
			<li>Check the Show in TOC check box</li>
			<li>Choose a display name (Set Display Name icon).</li>
		</ul>
	</li>
	<li>In File Manager, for your <strong>default.swg</strong> file:
<ul>
			<li>Check the Show in TOC check box</li>
			<li>Choose a display name (Set Display Name icon).</li>
		</ul>
	</li>
	<li>On the left menu bar, click the menu item for your authored documentation file. Scroll to the location of the doc tag and click the heading. The documentation is generated and displayed inline.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<hr class="divide_hr" />



<h2 id="related_topics">Related Topics</h2>
<div class="relatedlinks" id="api_admin">
<ul>
	<li><a href="apiadmin_getting_started.htm">Getting Started for API Developers</a></li>
	<li><a href="apiadmin_overview.htm">API Administration: Overview</a></li>
	<li><a href="api_admin_tutorial.htm">Tutorial (API Provider)</a></li>
	<li><a href="api_admin_management.htm">API Admin Management</a></li>
	<li><a href="bus_api_admin_forum.htm">Forum Moderation</a></li>
	<li><a href="apiadmin_promotion.htm">Promoting an API</a></li>
	<li><a href="apiadmin_api_add.htm">Adding an API</a></li>
	<li><a href="apiadmin_api_design.htm">Add or Modify an API Using API Designer</a></li>
</ul>
<ul>
	<li><a href="apiadmin_a_d_d_support.htm">API Description Language Support</a></li>
	<li><a href="apiadmin_implementations.htm">Manage API Implementations</a></li>
	<li><a href="api_admin_testing_tc.htm">API Testing with Test Client</a></li>
	<li><a href="uc_tc_okta.htm">Use Case: API testing in Test Client with Okta</a></li>
	<li><a href="api_admin_managing_contracts.htm">Managing Contracts for your API</a></li>
	<li><a href="apiadmin_monitoring.htm">Monitoring API Analytics</a></li>
	<li><a href="apiadmin_mydashboard.htm">Monitoring APIs with the My Dashboard Feature</a></li>
</ul>
<ul>
	<li><a href="api_admin_api_publishing.htm">API Settings and Visibility</a></li>
	<li><a href="apiadmin_manage_licensing.htm">API Licenses and Scopes</a></li>
	<li><a href="apiadmin_api_phys_svc.htm">Working with Physical Services</a></li>
	<li><a href="api_admin_oauth_support.htm">OAuth Support</a></li>
	<li><a href="api_admin_content_guidelines.htm">Content Development Guidelines for API Admins</a></li>
	<li><a href="api_admin_documentation_maintenance.htm">API Documentation Maintenance</a></li>
	<li><a href="api_admin_documentation_tagging.htm">API Documentation Visibility Tagging</a></li>
	<li><a href="api_admin_legal_agreement_maintenance.htm">Legal Agreement Maintenance</a></li>
	<li><a href="basics_glossary.htm">Glossary of Terms</a></li>
</ul></div>