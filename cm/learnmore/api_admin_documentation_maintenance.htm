---
layout: page
title: API Documentation Maintenance | API Administration | Akana API Platform Help
description: Add and maintain authored API documentation and/or generated API documentation..
product: cm
category: learn
sub-nav-class: API Admin
weight: 2624
type: page
nav-title: API Documentation Maintenance
---
<h2 id="top">API Documentation Maintenance</h2>
<p>Add and maintain authored API documentation and/or generated API documentation.</p>
<p><strong>Note</strong>: For information about tagging API documentation for visibility by different audiences, see <a href="api_admin_documentation_tagging.htm">API Documentation Tagging</a>.</p>
<div class = "divider1"></div>



<h3 style="color: gray;">Table of Contents</h3>

<h5 style="color: gray;"><a href="#h_apidoc_authored">Authored API Documentation:</a></h5>


<ol class="table_of_contents">
  <li><a href="#what_is_the_api_documentation_maintenace_process">What is the API documentation maintenance process?</a></li>
  <li><a href="#who_can_upload_api_documentation_content">Who can upload API documentation content?</a></li>
  <li><a href="#how_do_i_add_api_documentation">How do I add API documentation?</a></li>
  <li><a href="#how_do_i_manage_documentation_for_more_than_one_api_version">How do I manage documentation for more than one API version?</a></li>
  <li><a href="#can_i_link_from_api_documentation_to_doc_on_external_site">Can I link to API documentation on a different site?</a></li>
  <li><a href="#what_are_the_content_guidelines_for_api_documentation">What are the content development guidelines for API documentation?</a></li>
  <li><a href="#how_do_i_upload_my_api_documentation_files">How do I upload my API documentation files?</a></li>
  <li><a href="#how_do_i_download_my_api_documentation_files">How do I download my API documentation files?</a></li>
  <li><a href="#why_do_i_still_need_metadata_xml">I'm not using doc tagging; why do I still need a metadata.xml file?</a></li>
  </ol>


<h5 style="color: gray;"><a href="#h_apidoc_tc">Test Client in API Documentation:</a></h5>


<ol class="table_of_contents">
  <li><a href="#inline_tc_in_authored_api_doc">How do I include inline Test Client in my authored API documentation?</a></li>
  <li><a href="#config_js_inline_tc_authored_doc">How do I set up the config.js file to show inline Test Client in my authored API doc?</a></li>
  <li><a href="#reference_config_js_file_inline_tc_api_doc_authored">How do I set up my authored API doc file to show inline Test Client?</a></li>
  <li><a href="#how_do_i_test_inline_tc_in_authored_doc">How do I view/test that inline Test Client is working in my authored API doc content?</a></li>
  <li><a href="#how_do_i_edit_config_js_file_for_inline_tc">How do edit the config.js file for the inline Test Client feature?</a></li>
  <li><a href="#how_do_i_link_to_api_specific_test_client">How do I link to the API-specific Test Client for my API, so developers can click through from my API documentation in Simple Dev theme?</a></li>
  </ol>


<h5 style="color: gray;"><a href="#h_apidoc_generated">Generated API Documentation:</a></h5>


<ol class="table_of_contents">
  <li><a href="#what_is_the_generated_api_doc_feature">What is the generated API documentation feature and how does it work?</a></li>
  <li><a href="#generated_api_doc_add_to_toc_dt">How do I add generated API doc to the documentation Table of Contents?</a></li>
</ol>


<h5 style="color: gray;"><a href="#h_apidoc_combined">Combined Authored and Generated API Documentation:</a></h5>


<ol class="table_of_contents">
  <li><a href="#generated_api_doc_inline_in_authored_api_doc">How do I include generated API doc inline in my authored API doc?</a></li>
  <li><a href="#config_js_inline_swagger_authored_doc">How do I set up the config.js file to show generated API doc inline in my authored API doc?</a></li>
  <li><a href="#how_do_i_reference_config_js_inline_swagger_authored_doc">How do I reference the config.js file to show generated API doc inline in my authored API doc content?</a></li>
  <li><a href="#how_do_i_test_generated_api_doc_inline_in_authored_doc">How do I view/test that the generated API doc is showing up inline in my authored API doc content?</a></li>
</ol>



<div class = "divider1"></div>



<h3><a name="h_apidoc_authored"></a>Authored API Documentation:</h3>



<a name="what_is_the_api_documentation_maintenace_process"></a><h3>What is the API documentation maintenance process?</h3>
<p>You'll need to develop your API documentation outside the platform in your own HTML editor. Once your content is ready you can upload it to the site.</p>
<p><a href="#top">Back to top</a></p>



<a name="who_can_upload_api_documentation_content"></a><h3>Who can upload API documentation content?</h3>
<p>In Default Theme, you can upload documentation for a specific API if you are logged in and have one of the following roles:</p>
<ul>
  <li>An API Admin for the API. This could be the person who set up the API on the platform or any other person who is a member of the API Admin team.</li>
  <li>A Business Admin</li>
</ul>
<p>API documentation for  Simple Dev Theme must be uploaded by the Site Admin in Default Theme.</p>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_add_api_documentation"></a><h3>How do I add API documentation?</h3>
<p>You can add documentation for your API to the <em>API &gt; Documents</em> section in two ways:</p>
<ul>
  <li>By uploading content using the platform <em>File Explorer</em>. See <a href="api_admin_content_guidelines.htm#h_using_file_explorer">Using File Explorer</a>.</li>
  <li>By using the Swagger documentation tool that is integrated with the platform. See <a href="api_admin_content_guidelines.htm#h_using_swagger">Using Swagger</a>.</li>
  </ul>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_manage_documentation_for_more_than_one_api_version"></a><h3>How do I manage documentation for more than one API version?</h3>
<p>If you add a new API version, you can update the existing documentation or create an entirely different set of documents. By default, all documentation files reside in the same folder.</p>
<p>Here are a couple of approaches you could take to maintain files from different versions within the same folder structure:</p>
<ul>
  <li><strong>Differentiate file names by version</strong>. For example, if you have two versions, with some files shared between versions and some files different for each version, you could name the files <strong>operationname_v1.htm</strong>, <strong>operationname_v2.htm</strong>, and so on. You could have one main index page that links to files for each version, or you could have a separate index page for each version.</li>
  <li><strong>Use version-specific subfolders</strong>. For example, you could store version-specific files in v1 and v2 subfolders and keep shared files in the main documentation folder. In this scenario, you would need to have at least one file for each version in the main folder that would reference the version-specific files in the subfolders, or a single index page providing access to both versions.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<a name="can_i_link_from_api_documentation_to_doc_on_external_site"></a><h3>Can I link to API documentation on a different site?</h3>
<p>You can link to any external site from your API documentation. For example, if you already have a website established for your API and/or your documentation, you could upload a file with some introductory text and a link to direct users to your website for the information about your API.</p>
<p>Remember to use the "target="_blank" attribute on the link so that the documentation site opens in a new window rather than replacing the platform user interface. For examples, see <a href="api_admin_content_guidelines.htm#can_i_link_to_external_site">Can I link to an external site?</a></p>
<p><a href="#top">Back to top</a></p>



<a name="what_are_the_content_guidelines_for_api_documentation"></a><h3>What are the content development guidelines for API documentation?</h3>
<p>The platform provides a detailed set of content development guidelines for API documentation, including publishing, editing, styles, content organization, file upload, testing, and updating. For details, see <a href="api_admin_content_guidelines.htm">Content Development Guidelines</a>.</p>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_upload_my_api_documentation_files"></a>
<h3>How do I upload my API documentation files?</h3>
<p>You can upload HTML files and associated images, PDF files, or other content to the <em>API &gt; Documents</em> section of the platform using the <strong>File Manager</strong>.</p>

<p>At minimum, you should provide the following files that are the entry point to your API documentation:</p>
<ul>
  <li><strong>Default Theme</strong>: index page in the /documents folder.</li>
  <li><strong>Simple Dev Theme</strong>: main documentation page accessed via Documentation link at top of Simple Dev main page. </li>
</ul>

<p>There are two approaches to file upload:</p>
<ul>
  <li><strong>ZIP file</strong>: 
    <ul>
      <li><strong>Default Theme</strong>: Zip all the documentation files and upload them following the instructions in <a href="#proc_upload_api_doc">To upload API documentation files via the File Explorer (Default Theme):</a> below.</li>
      <li><strong>Simple Dev</strong>: Zip all the documentation files into one zip file named <strong>documentation.zip</strong>, and upload it from the Content folder using the <strong>Upload a File</strong> option which uploads and unzips the file (<em>not</em> the Upload a Zip Archive option, which uploads without unzipping). The documentation folder is created automatically, and the files are placed in that folder. If you use a ZIP file, make sure that you are in the right folder when you upload it, and that it doesn't include extra folders that you don't want. When you upload, the file is unzipped as part of the upload process, using the paths, if any, specified within the ZIP file.</li>
    </ul>
  </li>
  <li><strong>Individual file uploads</strong>:
    <ul>
      <li><strong>Default Theme</strong>:  Follow the instructions in <a href="#proc_upload_api_doc">To upload API documentation files via the File Explorer (Default Theme):</a> below.</li>
      <li><strong>Simple Dev</strong>: Get the Site Admin to create a <strong>documentation</strong> folder if there isn't one (exact name and case as given here), change directory into the <strong>documentation</strong> folder, and then upload the files individually.</li>
    </ul>
  </li>
  </ul>
<p>For Default Theme, the API Admin can upload the files following the procedure below.</p>
<p>For Simple Dev theme, the Site Admin must upload the files in Default Theme: <strong>Administration</strong> &gt; <strong>Config</strong> &gt; <strong>Resources</strong> &gt; <strong>Content File Manager</strong>, in a folder below the <strong>content</strong> folder. The Site Admin must use or create a folder named <strong>documentation</strong> (so the path is <strong>content/documentation</strong>). As soon as the files are uploaded in Default Theme, they are immediately visible in Simple Dev theme. Just log in and click the Documentation page to view the API documentation. For more information, see <a href="site_admin_content_guidelines_sd.htm#where_do_i_upload_api_doc_for_sd">Where do I upload API documentation for Simple Dev?</a> (Site Admin help).</p>
<h5><a name="proc_upload_api_doc" ></a>To upload API documentation files via the File Explorer (Default Theme):</h5>
<ol>
  <li>Navigate to <em>API &gt; API Name &gt; Documents</em>.</li>
  <li>Click the <em>File Explorer</em> icon in the upper-left corner of the documentation panel. The File Explorer appears.</li>
  <li>Click <strong>Upload a File</strong> (to upload and unzip your documentation) or <strong>Upload a Zip Archive</strong> (to upload a static ZIP file, such as an SDK file users might want to download).</li>
  <li>In the <strong>File Upload</strong> box, navigate to the location of the individual file or ZIP file you want to upload. Choose the file, and then click <strong>Open</strong>.</li>
  <li>Click <strong>Upload</strong>.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_download_my_api_documentation_files"></a><h3>How do I download my API documentation files?</h3>
<p>You can download a ZIP file of the documents directory for your API, including all files in the directory and all subfolders and their contents. You can download a ZIP of any content you are authorized to view and edit. Follow the instructions below.</p>
<h5>To download your API documentation files via the File Explorer:</h5>
<ol>
  <li>Navigate to <em>API &gt; API Name &gt; Documents</em>.</li>
  <li>Click the <em>File Explorer</em> icon in the upper-left corner of the documentation panel. The File Explorer appears.</li>
  <li>Click <strong>Download </strong><strong>Directory</strong>.</li>
  <li>Choose to open or save the file.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<a name="why_do_i_still_need_metadata_xml"></a><h3>I'm not using doc tagging; why do I still need a metadata.xml file?</h3>
<p>If your API uses licenses, you <strong>must</strong> include the <strong>metadata.xml</strong> file with appropriate tagging. If you don't specify a <strong>metadata.xml</strong> file with permissions to your content, or if you include a <strong>metadata.xml</strong> file but don't add the information about your files, your users will not see your documentation, other than the properties file and any legal agreements. This includes a custom CSS file or any other assets associated with your documentation.</p>
<p>This is always true when the API uses licenses, even if the API is public.</p>
<p><a href="#top">Back to top</a></p>



<div class = "divider1"></div>


<h3><a name="h_apidoc_tc"></a>Test Client in API Documentation:</h3>



<a name="inline_tc_in_authored_api_doc"></a><h3>How do I include inline Test Client in my authored API documentation?</h3>
<!--<p>{{ATMO-14944 12/3/15}}</p>-->
<p>You can modify your authored API documentation with a special tag so that when users are viewing the API documentation in the developer portal, they can access Test Client inline, in the context of the API documentation, to test out your API, each operation, with their app (or without any app context, if the API supports anonymous access).</p>
<p>To set this up, you'll need to:</p>
<ol>
  <li>Create a <strong>config.js</strong> file (a different filename is fine too as long as you reference the correct filename). For instructions on creating this file, refer to <a href="#config_js_inline_tc_authored_doc">How do I set up the config.js file to show inline Test Client in my authored API doc?</a> below. For Simple Dev, this file must include the correct API Version ID for your API; in Default Theme, it's not necessary to include the API Version ID since you upload the API documentation in the context of a specific API.</li>
  <li>In your authored documentation content file, do two things (see <a href="#reference_config_js_file_inline_tc_api_doc_authored">How do I set up my authored API doc file to show inline Test Client?</a> below):
    <ul>
      <li>Reference <strong>config.js</strong> (or whatever filename you used) in the &lt;head&gt; tag, as well as other files needed for this feature to work.</li>
      <li>Include the <strong>&lt;soa:testclient config=&quot;{MYAPP.profile_name}&quot;&gt; </strong>tag in the body.</li>
    </ul>
  </li>
  <li>Upload the files. See <a href="#how_do_i_upload_my_api_documentation_files">How do I upload my API documentation files?</a></li>
  <li>Test. See <a href="#how_do_i_test_inline_tc_in_authored_doc">How do I view/test that inline Test Client is working in my authored API doc content?</a> below.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<a name="config_js_inline_tc_authored_doc"></a><h3>How do I set up the config.js file to show inline Test Client in my authored API doc?</h3>
<!--<p>{{ATMO-14944 12/3/15}}</p>-->
<p><strong>Note</strong>: these instructions include procedures for both Simple Dev and Default themes.</p>
<p>If you want readers of your API documentation to be able to view and use Test Client inline in your authored API doc, you'll need to set up a <strong>config.js</strong> file, upload it to the platform with your documentation files, and reference it within the &lt;head&gt; section of any authored file in which you want to display inline Test Client.</p>
<p>Then, you can use special tags in your authored documentation file, and the API-specific, operation-specific Test Client will appear at runtime, inline in the authored HTML file.</p>
<h5>To set up the config.js file to show inline Test Client</h5>
<ol>
  <li>Create a file called <strong>config.js</strong> and paste the content, using the examples given below as a starting point. Refer to the appropriate example for the theme you are using:
    <ul>
      <li>Simple Dev: <a href="#config_js_inline_tc_sd">Config.js file for inline Test Client in Simple Dev Theme</a> </li>
      <li>Default Theme: <a href="#config_js_inline_tc_dt">Config.js file for inline Test Client in Default Theme</a>.</li>
    </ul>
    </li>
  
  <li>Customize the values in the sample file to match your own API, using the information in <a href="#config_js_inline_tc_customizing">Customizing the config.js file</a> below.</li>
</ol>
<p>Note that the file content is a little different depending on the theme you are using:</p>
<ul>
  <li><strong>Default Theme</strong>: since API documentation is already in the context of a specific API, the APIVersionID is not needed. See <a href="#config_js_inline_tc_sd">Config.js file for inline Test Client in Simple Dev Theme</a> below.</li>
  <li><strong>Simple Dev</strong>: Since API documentation is stored in a general location for all APIs, the valid APIVersionID is included in the JSON object in the <strong>config.js</strong> file. See <a href="#config_js_inline_tc_dt">Config.js file for inline Test Client in Default Theme</a> below.</li>
</ul>
<p><strong>Note</strong>: The file is quite long, so the sample files below use only two operations. You can expand for multiple operations as needed. This example is based on a scenario where a platform API is set up to reference the Swagger Petshop API, and the sample files below reference two operations from that API, getPetById and addPet. The section for each operation is named profile_{operationname}. You can find these API definitions at <a href="http://petstore.swagger.io" title="Swagger Petstore page" target="_blank">http://petstore.swagger.io</a> (external link).</p>
<h5><a name="config_js_inline_tc_sd"></a>Config.js file for inline Test Client in Simple Dev Theme</h5>
<pre>window.MYAPP = {
  "profile_getPetById" : {
    "general" : {
      "showItText" : "Click here to try getting a pet with the Pet ID",
      "hideItText" : "Click here to close",
      "summary" : "Get pet by ID"
    },
    "target" : {
      "apiVersion" : {
        "defaultValue" : "ae85330c-6562-4abc-86fd-1ea42f6d3f22.acmepaymentscorp"
      },
      "environment" : {
        "display" : false,
        "defaultValue" : "Production"
      },
      "operation" : {
        "display" : false,
        "defaultValue" : "getPetById"
      },
      "headers" : {
        "display" : false,

        "Content-Type" : "None",
        "Accept" : "application/json",

        "items" : [{
          "name" : "header1",
          "value" : "value1"
        }]
      },
      "parameters" : {
        "display" : false,
        "items" : [{
          "name" : "petId",
          "value" : "1434747602017",
          "nameIsChangeable" : false,
          "type" : "path"
        }, {
          "name" : "name1",
          "value" : "value1",
          "nameIsChangeable" : true,
          "type" : "query"
        }]
      }
    }
  },

  "profile_addPet" : {
    "general" : {
      "showItText" : "Click here to try adding a pet",
      "hideItText" : "Click here to close",
      "summary" : "Add a pet to the petstore"
    },
    "target" : {
      "apiVersion" : {
        "defaultValue" : "ae85330c-6562-4abc-86fd-1ea42f6d3f22.acmepaymentscorp"
      },
      "environment" : {
        "display" : false,
        "defaultValue" : "Production"
      },
      "operation" : {
        "display" : false,
        "defaultValue" : "addPet"
      },
      "headers" : {
        "display" : true,

        "Content-Type" : "application/json",
        "Accept" : "application/json",

        "items" : []
      },
      "parameters" : {
        "display" : true,
        "items" : [{
          "name" : "petId",
          "value" : "1",
          "nameIsChangeable" : false,
          "type" : "path"
        }, {
          "name" : "name",
          "value" : "fluffy puppy",
          "nameIsChangeable" : false,
          "type" : "form"
        }, {
          "name" : "status",
          "value" : "available",
          "nameIsChangeable" : false,
          "type" : "form"
        }]
      }
    }
  }
};
</pre>

<h5><a name="config_js_inline_tc_dt"></a>Config.js file for inline Test Client in Default Theme</h5>
<pre>window.MYAPP = {
  "profile_getPetById" : {
    "general" : {
      "showItText" : "Show: getPetById",
      "hideItText" : "Hide: getPetById",
      "summary" : "Get pet by ID"
    },
    "target" : {
      "environment" : {
        "display" : false,
        "defaultValue" : "Production"
      },
      "operation" : {
        "display" : false,
        "defaultValue" : "getPetById"
      },
      "headers" : {
        "display" : false,

        "Content-Type" : "None",
        "Accept" : "application/json",

        "items" : [{
          "name" : "header1",
          "value" : "value1"
        }]
      },
      "parameters" : {
        "display" : false,
        "items" : [{
          "name" : "petId",
          "value" : "1434747602017",
          "nameIsChangeable" : false,
          "type" : "path"
        }, {
          "name" : "name1",
          "value" : "value1",
          "nameIsChangeable" : true,
          "type" : "query"
        }]
      }
    }
  },

  "profile_addPet" : {
    "general" : {
      "showItText" : "(Show) Adds a Pet",
      "hideItText" : "(Hide) Add a Pet",
      "summary" : "Adds a pet to the petstore"
    },
    "target" : {
      "environment" : {
        "display" : false,
        "defaultValue" : "Production"
      },
      "operation" : {
        "display" : false,
        "defaultValue" : "addPet"
      },
      "headers" : {
        "display" : true,

        "Content-Type" : "application/json",
        "Accept" : "application/json",

        "items" : []
      },
      "parameters" : {
        "display" : true,
        "items" : [{
          "name" : "petId",
          "value" : "1",
          "nameIsChangeable" : false,
          "type" : "path"
        }, {
          "name" : "name",
          "value" : "Armadillo",
          "nameIsChangeable" : false,
          "type" : "form"
        }, {
          "name" : "status",
          "value" : "available",
          "nameIsChangeable" : false,
          "type" : "form"
        }]
      }
    }
  }
};</pre>


<h5><a name="config_js_inline_tc_customizing"></a>Customizing the config.js file</h5>
<p>The above is your starter file. Within this file, you'll need to set up the specific values applicable to your API on the platform. The core values that you set up for the inline Test Client feature are explained below. The first two are key, because without them the feature will not work. The others are cosmetic, controlling the text your users will see when viewing the feature.</p>
<ul>
  <li><strong>Line 02, profile name</strong>: Choose a profile name that's intuitive. For example, you could use {profile_operationname}.</li>
  <li><strong>Line 04, showItText</strong>: Displayed inline in the API documentation when the user first views the documentation, before the user clicks. Modify as needed.</li>
  <li><strong>Line 05, hideItText</strong>: Displayed when the user clicks the link to try out the inline Test Client feature. Modify as needed.</li>
  <li><strong>Line 06, summary</strong>: Displayed in both views. A short description of your API.</li>
  <li>Simple Dev only: <strong>Line 10, APIVersion</strong>: use the correct APIVersionID for your API.</li>
  <li><strong>API-specific values</strong>: update API-specific values, such as environment, headers, and parameters, as needed.</li>
</ul>
<p>The examples below show where the text that you add will display to your users:</p>
<p><strong>Default display before user clicks Show It. ShowitText and summary are visible.</strong></p>
<p><img src="assets/tc_inline_in_authored_doc_01_dt.jpg" alt="Test Client inline in authored doc: collapsed view" /></p>
<p><strong>Display when user clicks the Show It link. ShowitText and summary are visible, plus the inline Test Client.</strong></p>
<p><img src="assets/tc_inline_in_authored_doc_02_dt.jpg" alt="Test Client inline in authored doc: expanded view" /></p>
<p>Remember that you also need to reference the <strong>config.js</strong> file in your documentation file or file in order to view the above results. See <a href="#reference_config_js_file_inline_tc_api_doc_authored">How do I set up my authored API doc file to show inline Test Client?</a> below.</p>
<p><a href="#top">Back to top</a></p>



<a name="reference_config_js_file_inline_tc_api_doc_authored"></a><h3>How do I set up my authored API doc file to show inline Test Client?</h3>
<!--<p>{{ATMO-14944 12/3/15}}</p>-->
<p><strong>Note</strong>: These instructions are valid for both Simple Dev and Default themes.</p>
<p>Once you have the <strong>config.js</strong> file set up with the correct values for your specific API, as explained in <a href="#config_js_inline_tc_authored_doc">How do I set up the config.js file to show inline Test Client in my authored API doc?</a> above, you'll need to modify your API documentation HTML files to correctly reference <strong>config.js</strong> to implement this functionality. In each file where you want to implement inline functionality, do these two things:</p>
<ol>
  <li>Add specific &lt;script&gt; tags in the &lt;head&gt; tag to reference <strong>config.js</strong> and any other needed files, as shown in the example below, so that the feature will work.</li>
  <li>Add the special tag, <strong>soa:testclient</strong>, inline in the body of the authored API documentation file.</li>
</ol>
<p><strong><a name="1_script_tag_tc"></a>1: Adding &lt;script&gt; tags in the head of your API doc file</strong></p>
<p>In the &lt;head&gt; tag, reference the <strong>tag_lib.min.js</strong> file. For details, see <a href="api_admin_content_guidelines.htm#how_do_i_reference_taglibminjs">How do I reference the tag_lib.min.js file?</a> An example is shown below.</p>
<pre>&lt;html lang="en" xmlns:soa="http://soa.com"&gt;
  &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"/&gt;

&lt;!-- The css files below are needed for the inline testing feature to be displayed correctly --&gt;
    &lt;link rel="stylesheet" type="text/css" href="/resources/style/reset.css"/&gt;
    &lt;link rel="stylesheet" type="text/css" href="/resources/style/base.css"/&gt;

&lt;!-- The script files below are needed for the inline testing feature to work correctly --&gt;
    &lt;script language="javascript" src="config.js" type="text/javascript"&gt;&lt;/script&gt;
    &lt;script language=&quot;javascript&quot; src=&quot;/ui/apps/atmosphere/123/resources/console/SOA/console/common/tag_lib/dist/tag_lib.min.js&quot;type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</pre>
<p><strong><a name="2_tag_testclient"></a>2: Including the soa:testclient tag in the body of the API doc file</strong></p>
<p>In the part of the document where you want the generated documentation to appear, add something along the lines of the below, making sure you have the correct operation name in place of <strong>addPet</strong> below:</p>
<pre>&lt;div&gt;<br />  &lt;soa:testclient config=&quot;{MYAPP.profile_addPet}&quot;&gt;<br />  &lt;/soa:testclient&gt;<br />&lt;/div&gt;</pre>
<p>Once each file is updated as needed, get all the files uploaded, as explained in <a href="site_admin_content_guidelines_sd.htm#where_do_i_upload_api_doc_for_sd">Where do I upload API documentation for Simple Dev?</a> (Site Admin help).</p>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_test_inline_tc_in_authored_doc"></a><h3>How do I view/test that inline Test Client is working in my authored API doc content?</h3>
<p>Once you have your files set up, you can upload the files and test to make sure everything is correct and Test Client is now displayed inline in your authored API content.</p>
<p>The procedures below include all the steps you'll need to take to view the final product.</p>
<p>The processes for Simple Dev and Default Theme are slightly different.</p>

<h5>To test that Test Client is displayed inline in authored API content, in Simple Dev Theme</h5>
<ol>
  <li>If you don't already know it, get the API Version ID for your API (Default Theme, API Details page, last part of the URL before /details).</li>
  <li>Set up the <strong>config.js</strong> file for Simple Dev implementation, including the API Version ID from Step 1 and all properties for your API operations. See <a href="#config_js_inline_tc_sd">Config.js file for inline Test Client in Simple Dev Theme</a>.</li>
  <li>Set up an authored HTML content file with:
    <ul>
      <li>The necessary &lt;script&gt; tags in the &lt;head&gt; tag of the file, including the reference to your <strong>config.js</strong> file. See <a href="#1_script_tag_tc">Adding &lt;script&gt; tags in the head of your API doc file</a>.</li>
      <li>The doc tag that causes Test Client to be displayed inline. See <a href="#2_tag_testclient">Including the soa:testclient tag in the body of the API doc file</a>.</li>
      </ul>
    </li>
  
  <li>Get the Site Admin to do the following:
    <ol>
      <li>In Administration &gt; Config &gt; Resources &gt; Content &gt; File Manager, create a <strong>documentation</strong> folder.</li>
      <li>Navigate into the <strong>documentation</strong> folder.</li>
      <li>Upload the <strong>config.js</strong> file and the authored HTML documentation file, along with your CSS file or any other files you might want.</li>
    </ol>
    </li>
  
  <li>Log into Simple Dev theme and click Documentation.</li>
  <li>Scroll to the location of the doc tag and click the heading. Test Client is generated and displayed inline. Users can then specify values and test the operation in the context of the documentation. Depending on how the API is set up, users might need to choose an app and specify other settings such as OAuth version.</li>
</ol>

<h5>To test that Test Client is displayed inline in authored API content, in Default Theme</h5>
<ol>
  <li>Set up the <strong>config.js</strong> file for Default Theme implementation. See <a href="#config_js_inline_tc_dt">Config.js file for inline Test Client in Default Theme</a>.</li>
  <li>Set up an authored HTML content file with:
    <ul>
      <li>The necessary &lt;script&gt; tags in the &lt;head&gt; tag of the file, including the reference to your <strong>config.js</strong> file. See <a href="#1_script_tag_tc">Adding &lt;script&gt; tags in the head of your API doc file</a>.</li>
      <li>The doc tag that causes the generated doc to be displayed inline. See <a href="#2_tag_testclient">Including the soa:testclient tag in the body of the API doc file</a>.</li>
      </ul>
    </li>
  
  <li>Create an empty file named <strong>default.swg</strong>. When you add it to the documentation TOC in Default Theme, this allows users to click directly to the generated documentation even when authored documentation is in the documentation TOC.</li>
  <li>In Default Theme, go to your API &gt; Documents page.</li>
  <li>In File Manager, upload the following files:
    <ul>
      <li>The <strong>config.js</strong> file from Step 1.</li>
      <li>The content file from Step 2.</li>
      <li>The <strong>default.swg</strong> file from Step 3.</li>
      <li>Optionally, any supporting files you might want, such as your CSS file or any other files.</li>
    </ul>
    </li>
  
  <li>In File Manager, for your content file:
    <ul>
      <li>Check the Show in TOC checkbox</li>
      <li>Choose a display name (Set Display Name icon).</li>
    </ul>
  </li>
  <li>In File Manager, for your <strong>default.swg</strong> file:
<ul>
      <li>Check the Show in TOC checkbox</li>
      <li>Choose a display name (Set Display Name icon).</li>
    </ul>
  </li>
  <li>On the left menubar, click the menu item for your authored documentation file. Scroll to the location of the doc tag and click the heading. The documentation is generated and displayed inline.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_edit_config_js_file_for_inline_tc"></a><h3>How do edit the config.js file for the inline Test Client feature?</h3>
<p>To get the inline Test Client working correctly inline in your authored API documentation, you'll need to edit many of the values in the config.js file to match the values set up for your API. This includes such things as operation name, path, Content-Type (request header), Accept header (response header), and other values.</p>
<p>It's best to work with one operation first, and when you have that working, model the rest on that. The example given in <a href="#config_js_inline_tc_authored_doc">How do I set up the config.js file to show inline Test Client in my authored API doc?</a> has two operations.</p>
<p>The values at the top of the file determine how the inline Test Client feature is displayed, but the rest of the file content determines whether the inline Test Client actually works as expected.</p>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_link_to_api_specific_test_client"></a><h3>How do I link to the API-specific Test Client for my API, so developers can click through from my API documentation in Simple Dev theme?</h3>
<p>Platform app developers have access to the Test Client tool, which allows them to test out different APIs. Test Client includes a drop-down list, where app developers can choose from a list of available APIs that the current app has a contract with.</p>
<p>In Simple Developer theme, an API-specific version of the new Test Client testing tool is available, to facilitate testing of an individual API from the API page of the Developer Portal. The API Admin can also use this to include an API-specific link to Test Client within the API documentation. When using Test Client in the context of a specific API, developers can invoke APIs that support anonymous access, use the credentials for one of their apps, or use a custom app identity.</p>
<p>The API-specific version of Test Client is not part of the standard user interface, but you can construct the URL and include it in your API documentation. App developers reading your API documentation can click through and test out your API. This API-specific version of Test Client does not give access to all the app developer's APIs, just the one that's in the URL.</p>
<p>The URL is:</p>
<pre>{protocol}//{hostname}/#!apis/{APIID}/versions/{APIVersionID}/testclient</pre>
<p>For example:</p>
<pre>http://acmepaymentscorp.com/acmepaymentscorp/#!apis/12770263-e036-4222-b8eb-87d33676d3ad.acmepaymentscorp/
versions/9e3846ee-bbbf-4982-82ca-5a2411ec619b.acmepaymentscorp/testclient</pre>
<p>To construct the URL for your specific API, follow the instructions below. You can then link to this page from your platform API documentation. For information on including links in platform API documentation, see <a href="site_admin_content_guidelines_sd.htm#how_do_i_code_links_in_sd">How do I code links in Simple Dev?</a></p>
<h5>To construct the URL for an API-specific version of Test Client<em>:</em></h5>
<ol>
  <li>Go to the URL for your implementation of  Simple Developer theme and log in.</li>
  <li>At the Welcome page, copy the URL up to <strong>#!</strong>, omitting the <strong>welcome</strong> from the end of the URL. It will look something like the below:
  <pre>http://acmepaymentscorp.com/acmepay/</pre>
  </li>
  <li>Get the APIID and APIVersionID for your API. For example, you could:
    <ul>
      <li>Go to the URL for your implementation of Default Theme and log in.</li>
      <li>Go to the API Details page for your API and copy the URL. It will look something like the below:
      <pre>http://acmepaymentscorp.com/#/api/21bfe816-5260-4444-ae77-bd2c047174f8.acmepaymentscorp/versions/
7ba40d5f-3c22-4b8f-ac9d-317cbee4b83f.acmepaymentscorp/details</pre></li>
      <li>In the above, the first ID, after /api/, is the APIID, then /details/, and then the APIVersionID. Copy that whole portion of the URL, beginning with the APIID and ending with the APIVersionID, to use in constructing the URL for your API-specific Test Client.</li>
    </ul>
  </li>
  <li>Join together the part of the URL from Step 2, and the part from Step 3, and add /testclient at the end.</li>
  <li>Test the URL to make sure you have it right.</li>
</ol>
<h5>To reference the URL for an API-specific version of Test Client in your API documentation:</h5>
<p>Once you have the URL, you can reference it with a direct inline link from your API documentation. To have the Test Client display in a separate browser tab, use the Target attribute <strong>_blank</strong>, as shown below.</p>
<pre>&lt;p&gt;To test your app with our API, try out the 
&lt;a href=&quot;{protocol}//{hostname}/{Tenantname}/#!apis/{APIID}/versions/{APIVersionID}/testclient&quot; target=&quot;_blank&quot;&gt;
Test Client testing tool&lt;/a&gt;.&lt;/p&gt;
</pre>
<p>To upload your file to the API documentation folder in Simple Dev theme, see <a href="site_admin_content_guidelines_sd.htm#where_do_i_upload_api_doc_for_sd">Where do I upload API documentation for Simple Dev?</a></p>
<p><a href="#top">Back to top</a></p>



<div class = "divider1"></div>



<h3><a name="h_apidoc_generated"></a>Generated API Documentation:</h3>



<a name="what_is_the_generated_api_doc_feature"></a><h3>What is the generated API documentation feature and how does it work?</h3>
<p>When you set up your API definition, either in the platform or by referencing an existing service in the API Gateway, the platform automatically generates API documentation based on your API definition.</p>
<p>Within the context of the platform in Default Theme, you and your users can test your API, in the context of an app (or anonymously if the API supports anonymous access).</p>
<p>This generated API documentation testing functionality is essentially the same as the Test Client feature, but Test Client is available inline, in the context of your API.</p>
<p>Some of the things you and your users can do with the generated API documentation:</p>
<ul>
  <li>Test each operation.</li>
  <li>Test with different variables, including app context, token location, OAuth version, grant type (for OAuth 2.0), and authentication method.</li>
</ul>
<p>You can use this feature to test and monitor the usability of your API; your developer audience can use it to discover the great capabilities of your API.</p>
<p><a href="#top">Back to top</a></p>



<a name="generated_api_doc_add_to_toc_dt"></a><h3>How do I add generated API doc to the documentation Table of Contents?</h3>
<p>In Default Theme, after you've set up your API definition, you can view generated API documentation immediately: from your API Details page, click Documents on the left menu.</p>
<p>By default, if you haven't uploaded any authored API documentation, the generated API documentation is displayed.</p>
<p>However, If you upload authored documentation and add one of the files to the Documentation table of contents so that users will see that content (see <a href="api_admin_content_guidelines.htm#how_do_i_add_a_file_to_the_api_documentation_table_of_contents">How do I add a file to the API documentation table of contents?</a> and subsequent topics), the generated API documentation is no longer displayed, by default.</p>
<p>In this scenario, you'll need to take a couple of extra steps to make sure that both authored and generated API documentation is visible to your users. You'll need to:</p>
<ol>
  <li>Create an empty file named <strong>default.swg</strong> and upload it to your documents folder (API Details &gt; Documents &gt; File Explorer).</li>
  <li>In File Explorer, check <strong>Show in TOC</strong> and set a display name for the file: for example, <strong>Generated</strong>.</li>
</ol>
<p>Now, both sets of documentation are accessible to your users on the Documentation Table of Contents.</p>
<p>For detailed instruction for working with File Explorer, refer to <a href="api_admin_content_guidelines.htm#h_using_file_explorer">Using File Explorer</a>.</p>
<p><a href="#top">Back to top</a></p>



<div class = "divider1"></div>



<h3><a name="h_apidoc_combined"></a>Combined Authored and Generated API Documentation:</h3>



<a name="generated_api_doc_inline_in_authored_api_doc"></a><h3>How do I include generated API doc inline in my authored API doc?</h3>
<p>If you<strong> </strong>upload authored HTML API documentation, the authored documentation is shown to users by default, in both themes. If you want to offer both types of documentation to your users, you'll need to take a couple of extra steps to make the generated API documentation available to your users. </p>
<p>To set this up, you'll need to:</p>
<ul>
  <li>Create a <strong>config.js</strong> file (a different filename is fine too as long as you reference the correct filename). For instructions on creating this file, refer to <a href="#config_js_inline_swagger_authored_doc">How do I set up the config.js file to show generated API doc inline in my authored API doc?</a> below. For Simple Dev, this file must include the correct API Version ID for your API; in Default Theme, it's not necessary to include the API Version ID since you upload the API documentation in the context of a specific API.</li>
  <li>In your authored documentation content file, do two things:
    <ul>
      <li>Reference <strong>config.js</strong> (or whatever filename you used) in the &lt;head&gt; tag.</li>
      <li>Include the <strong>&lt;soa:generatedoc config=&quot;{MYAPP.tag1}&quot;&gt; </strong>tag in the body of the file.</li>
    </ul>
  </li>
  </ul>
<p>For information on how to set these files up, refer to the topics below.</p>
<h5>To make generated API documentation available along with authored HTML API documentation (Default Theme)</h5>
<ol>
  <li>Upload the API documentation, if you didn't do so already. See <a href="api_admin_content_guidelines.htm#h_using_file_explorer">Using File Explorer</a>.</li>
  <li>In File Explorer, add the main documentation index page to the documentation TOC so that users can click into it.</li>
  <li><a name="file_default_swg"></a>In File Explorer, upload an empty file named <strong>default.swg</strong> and add it to the documentation TOC. This allows users to click directly to the generated documentation even when authored documentation is in the documentation TOC.</li>
  <li>Upload the <strong>config.js</strong> file.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<a name="config_js_inline_swagger_authored_doc"></a><h3>How do I set up the config.js file to show generated API doc inline in my authored API doc?</h3>
<!--<p>{{ATMO-14944 12/3/15}}</p>-->
<p><strong>Note</strong>: these instructions include procedures for both Simple Dev and Default themes.</p>
<p>If you want readers of your API documentation to be able to see the generated doc for your API, inline within your authored documentation, you'll need to set up a <strong>config.js</strong> file, upload it to the platform with your documentation files, and reference it within the &lt;head&gt; section of any authored file in which you want to display generated API doc inline in the file.</p>
<p>Then, you can use special tags in your authored documentation file, and the generated API documentation will appear at runtime, inline in the authored HTML file.</p>
<p>As a starting point, create a file called <strong>config.js</strong> and paste the content as shown below.</p>
<p>Note that the file content is a little different depending on the theme you are using:</p>
<ul>
  <li><strong>Default Theme</strong>: since API documentation is already in the context of a specific API, the APIVersionID is not needed.</li>
  <li><strong>Simple Dev</strong>: Since API documentation is stored in a general location for all APIs, you must include the valid APIVersionID in the <strong>config.js</strong> file.</li>
</ul>
<h5><a name="config_js_inline_generated_api_doc_sd"></a>Config.js file for inline generated API doc in Simple Dev Theme</h5>
<pre>01  window.MYAPP = {
02    "tag1" : {
03      "general" : {
04        "showItText" : "Swagger Petstore API",
05        "hideItText" : "Swagger Petstore API",
06        "summary" : "summary text: Generated documentation for Swagger Petstore API"
07      },
08      "target" : {
09        "apiVersion" : {
10          "defaultValue" : "ea61269e-8a8f-4949-970c-c4af5d7fb7c5.acmepaymentscorp"
11        }
12      }
13    }
14  };</pre>

<h5><a name="config_js_inline_generated_api_doc_default"></a>Config.js file for inline generated API doc in Default Theme</h5>
<pre>01  window.MYAPP = {
02    "tag1" : {
03      "general" : {
04        "showItText" : "Swagger Petstore API",
05        "hideItText" : "Swagger Petstore API",
06        "summary" : "summary text: Generated documentation for Swagger Petstore API"
07      },
08    }
09  };</pre>


<h5>Information general to both versions</h5>
<p>The above is your starter file. Within this file, you'll need to set up the specific values applicable to your API on the platform. The values that you set up are listed and explained below. The first two are key, because without them the feature will not work. The others are cosmetic, controlling the text your users will see when viewing the feature.</p>
<ul>
  <li><strong>Line 10, apiVersion</strong>: (Simple Dev only) paste the API Version ID for the specific API. If you're not sure of the ID, go to the API Details page in Default Theme. The API Version ID is after /versions/ in the URL. The URL is constructed like this: {protocol}://{hostname}/{tenantid}/#/APIID/versions/{APIVersionID}/details.</li>
  <li><strong>Line 04, showItText</strong>: Displayed by default when user first views the documentation.</li>
  <li><strong>Line 05, hideItText</strong>: Displayed when user clicks the link to try out the inline generated documentation feature.</li>
  <li><strong>Line 06, summary</strong>: Displayed in both views. A short description of your API.</li>
</ul>
<p>The examples below show where the text that you add will display to your users:</p>
<p><strong>Default display before user clicks Show It. ShowitText and summary are visible.</strong></p>
<p><img src="assets/tc_inline_in_authored_doc_01_sd.jpg" width="577" height="283" alt="Test Client inline in authored API doc" /></p>
<p><strong>Display when user clicks the Show It link. ShowitText and summary are visible, plus the inline testing feature.</strong></p>
<p><img src="assets/tc_inline_in_authored_doc_02_sd.jpg" width="786" height="337" alt="Test Client inline in authored API doc" /></p>
<p>Remember that you also need to reference the <strong>config.js</strong> file in your documentation file or file in order to view the above results. See <a href="#how_do_i_reference_config_js_inline_swagger_authored_doc">How do I reference the config.js file to include inline generated doc in my authored API doc content?</a> below.</p>
<p>When your documentation files are ready, including any authored API documentation and the accompanying <strong>config.js</strong> file, you'll need to upload the files.</p>
<h5>For Simple Dev:</h5>
<p>Get the Site Admin to upload it in Default Theme: Administration &gt; Config &gt; Resources &gt; Content File Manager.</p>
<p>From here, there are two approaches to uploading the content:</p>
<ul>
  <li><strong>ZIP file</strong>: Zip all the documentation files into one zip file named documentation.zip, and upload it from the Content folder. The documentation folder is created automatically, and the files are placed in that folder.</li>
  <li><strong>Individual file uploads</strong>: Create a <strong>documentation</strong> folder if there isn't one (exact name and case as given here). Change directory into the <strong>documentation</strong> folder, and from there, upload the files individually.</li>
</ul>
<p>As soon as the files are uploaded in Default Theme, they are immediately visible in Simple Dev theme. Just log in and click the Documentation page to view the API documentation with inline testing capability. </p>
<p>For more information, see <a href="site_admin_content_guidelines_sd.htm#where_do_i_upload_api_doc_for_sd">Where do I upload API documentation for Simple Dev?</a> (Site Admin help).</p>
<h5>For Default Theme:</h5>
<p>Navigate to <strong>API</strong> &gt; <strong>Documents</strong> and use the File Explorer to upload the files.</p>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_reference_config_js_inline_swagger_authored_doc"></a>
<h3>How do I reference the config.js file to show generated API doc inline in my authored API doc content?</h3>
<!--<p>{{ATMO-14944 12/3/15}}</p>-->
<p><strong>Note</strong>: These instructions are valid for both Simple Dev and Default themes.</p>
<p>Once you have the <strong>config.js</strong> file set up with the correct API version and other values for your API, you'll need to modify your API documentation HTML files to correctly reference <strong>config.js</strong> to implement this functionality. In each file where you want to implement inline functionality, do these two things:</p>
<ol>
  <li>Add specific &lt;script&gt; tags in the &lt;head&gt; tag to reference <strong>config.js</strong> and any other needed files, as shown in the example below, so that the feature will work.</li>
  <li>Add the special tag, <strong>soa:generatedoc</strong>, inline in the body of the authored API documentation file.</li>
</ol>
<p><strong><a name="1_script_tag_swagger"></a>1: Adding &lt;script&gt; tags in the head of your API doc file</strong></p>
<p>In the &lt;head&gt; tag, add the lines of code shown below.</p>
<pre>&lt;html lang="en" xmlns:soa="http://soa.com"&gt;
  &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"/&gt;

&lt;!-- The css files below are needed for the inline testing feature to be displayed correctly --&gt;
    &lt;link rel="stylesheet" type="text/css" href="/resources/style/reset.css"/&gt;
    &lt;link rel="stylesheet" type="text/css" href="/resources/style/base.css"/&gt;
&lt;!-- The script files below are needed for the inline testing feature to work correctly --&gt;
    &lt;script language="javascript" src="config.js" type="text/javascript"&gt;&lt;/script&gt;
    &lt;script language=&quot;javascript&quot; src=&quot;/ui/apps/atmosphere/123/resources/console/SOA/console/common/tag_lib/dist/tag_lib.min.js&quot;type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</pre>
<p><strong><a name="2_tag_generatedoc"></a>2: Including the generatedoc tag in the body of the API doc file</strong></p>
<p>In the part of the document where you want the generated documentation to appear, add something along the lines of the below:</p>
<pre>&lt;h5&gt;Try it!&lt;/h5&gt;
  &lt;div&gt;
    &lt;soa:generatedoc config="{MYAPP.tag1}"&gt;
    &lt;/soa:generatedoc&gt;
  &lt;/div&gt;
</pre>
<p>Once each file is updated, get all the files uploaded, as explained in <a href="site_admin_content_guidelines_sd.htm#where_do_i_upload_api_doc_for_sd">Where do I upload API documentation for Simple Dev?</a> (Site Admin help).</p>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_test_generated_api_doc_inline_in_authored_doc"></a><h3>How do I view/test that the generated API doc is showing up inline in my authored API doc content?</h3>
<p>Once you have your files set up, you can upload the files and test to make sure everything is set up correctly and the generated API documentation is now displayed inline in your authored API content.</p>
<p>The procedures below include all the steps you'll need to take to view the final product.</p>
<p>The processes for Simple Dev and Default Theme are slightly different.</p>

<h5>To test that the generated API doc is displayed inline in authored API content, in Simple Dev Theme</h5>
<ol>
  <li>If you don't already know it, get the API Version ID for your API (Default Theme, API Details page, last part of the URL before /details).</li>
  <li>Set up the <strong>config.js</strong> file:</li>
  <li>For Simple Dev implementation, include the API Version ID from Step 1. See <a href="#config_js_inline_generated_api_doc_sd">Config.js file for inline generated API doc in Simple Dev Theme</a>.</li>
  <li>Set up an authored HTML content file with:
    <ul>
      <li>The necessary &lt;script&gt; tags in the &lt;head&gt; tag of the file, including the reference to your <strong>config.js</strong> file. See <a href="#1_script_tag_swagger">Adding &lt;script&gt; tags in the head of your API doc file</a>.</li>
      <li>The doc tag that causes the generated doc to be displayed inline. See <a href="#2_tag_generatedoc">Including the generatedoc tag in the body of the API doc file</a>.</li>
      </ul>
  </li>
  
  <li>Get the Site Admin to do the following:
    <ol>
      <li>In Administration &gt; Config &gt; Resources &gt; Content &gt; File Manager, create a <strong>documentation</strong> folder.</li>
      <li>Navigate into the <strong>documentation</strong> folder.</li>
      <li>Upload the <strong>config.js</strong> file and the authored HTML documentation file, along with your CSS file or any other files you might want.</li>
    </ol>
    </li>
  
  <li>Log into Simple Dev theme and click Documentation.</li>
  <li>Scroll to the location of the doc tag and click the heading. The documentation is generated and displayed inline.</li>
</ol>

<h5>To test that the generated API doc is displayed inline in authored API content, in Default Theme</h5>
<ol>
  <li>Set up the <strong>config.js</strong> file for Default Theme implementation. See <a href="#config_js_inline_generated_api_doc_default">Config.js file for inline generated API doc in Default Theme</a>.</li>
  <li>Set up an authored HTML content file with:
    <ul>
      <li>The necessary &lt;script&gt; tags in the &lt;head&gt; tag of the file, including the reference to your <strong>config.js</strong> file. See <a href="#1_script_tag_swagger">Adding &lt;script&gt; tags in the head of your API doc file</a>.</li>
      <li>The doc tag that causes the generated doc to be displayed inline. See <a href="#2_tag_generatedoc">Including the generatedoc tag in the body of the API doc file</a>.</li>
      </ul>
    </li>
  
  <li>Create an empty file named <strong>default.swg</strong>. When you add it to the documentation TOC in Default Theme, this allows users to click directly to the generated documentation even when authored documentation is in the documentation TOC.</li>
  <li>In Default Theme, go to your API &gt; Documents page.</li>
  <li>In File Manager, upload the following files:
    <ul>
      <li>The <strong>config.js</strong> file from Step 1.</li>
      <li>The content file from Step 2.</li>
      <li>The <strong>default.swg</strong> file from Step 3.</li>
      <li>Optionally, any supporting files you might want, such as your CSS file or any other files.</li>
    </ul>
    </li>
  
  <li>In File Manager, for your content file:
    <ul>
      <li>Check the Show in TOC checkbox</li>
      <li>Choose a display name (Set Display Name icon).</li>
    </ul>
  </li>
  <li>In File Manager, for your <strong>default.swg</strong> file:
<ul>
      <li>Check the Show in TOC checkbox</li>
      <li>Choose a display name (Set Display Name icon).</li>
    </ul>
  </li>
  <li>On the left menubar, click the menu item for your authored documentation file. Scroll to the location of the doc tag and click the heading. The documentation is generated and displayed inline.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<div class = "divider1"></div>


