---
layout: page
title: Akana OAuth/OIDC Provider Domain | Business Admin | Akana API Platform Help
description: Configure an Akana OAuth/OIDC Provider domain on the platform.
product: cm
category: learn
sub-nav-class: Business Administration
weight: 3216
type: page
nav-title: Akana OAuth/OIDC Provider Domain
---
<h1 id="top">Akana OAuth/OIDC Provider Domain</h1>
<p>Configure an Akana OAuth/OIDC Provider domain on the platform.</p>
<p><strong>Note</strong>: For general information about platform domains, or specific information on a different domain, refer to <a href="bus_admin_domains.htm">Domains</a>.</p>
<hr class="divide_hr" />



<h2 style="color: gray;">Table of Contents</h2>
<ol class="table_of_contents">
	<li><a href="#oauth_provider_domain_which_type">Which type of OAuth Provider domain should I set up?</a></li>
	<li><a href="#akana_oauth_provider">How do I set up an Akana OAuth/OIDC Provider domain?</a></li>
	<li><a href="#how_does_the_authentication_provider_configuration_process_work">How does the Akana OAuth/OIDC Provider domain configuration process work?</a></li>
	<li><a href="#oauth_third_party_provider">How do I set up a platform deployment to support a third-party OAuth provider?</a></li>
	<li><a href="#how_do_i_set_up_my_deployment_to_support_oauth">How do I set up my deployment to support OAuth?</a></li>
	<li><a href="#domain_oauth_provider_configure">How do I set up and configure an Akana OAuth/OIDC Provider domain?</a> </li>
	<li><a href="#domain_oauth_provider_grant_types_page">Akana OAuth/OIDC Provider Domain: Tab 2, Grant Types - Configuration Values</a></li>
	<li><a href="#domain_oauth_provider_grant_types_authcode_pkce">What is PKCE?</a></li>
	<li><a href="#domain_oauth_provider_token_page">What are the settings on the Akana OAuth/OIDC Provider Token page and what options should I choose?</a></li>
	<li><a href="#should_i_choose_reference_bearer_or_jwt_bearer">Should I choose Referenced Bearer or JWT Bearer Access token?</a></li>
	<li><a href="#resource_owner_userinfo_in_bearer_token_why">Why choose to include resource owner userinfo in the Bearer Access token?</a></li>
	<li><a href="#what_jwt_signing_algorithms_are_supported">What JWT signing algorithms are supported?</a></li>
	<li><a href="#should_i_choose_verify_jwt_token_with_auth_server">Should I choose to verify the access token with the Authorization Server?</a></li>
	<li><a href="#what_is_a_grant_property">What is a Grant Property?</a></li>
	<li><a href="#domain_oauth_provider_oidc_page">What are the settings on the Akana OAuth/OIDC Provider OpenID Connect page and what options should I choose?</a></li>
	<li><a href="#domain_oauth_provider_branding">What are the settings on the Akana OAuth/OIDC Provider Branding page and what options should I choose?</a></li>
	<li><a href="#domain_oauth_provider_support_sso_login">How can I set up my Akana OAuth/OIDC Provider domain to support end-user login from an external identity provider?</a></li>
	<li><a href="#auth_server_url_define">What is an Authorization Server URL?</a></li>
	<li><a href="#auth_server_url_platform">What is the OAuth Authorization Server URL for the platform?</a></li>
	<li><a href="#platform_oauth_endpoints">What are the OAuth endpoints for the platform?</a></li>
	<li><a href="#what_are_the_oauth_custom_headers">What are the OAuth custom headers?</a></li>
	<li><a href="#what_is_a_jwt_bearer_assertion">What is a Bearer Assertion, and what does the platform support for Bearer Assertions?</a></li>
	<li><a href="#what_token_types_should_i_support">What token types should I support?</a></li>
	<li><a href="#how_does_token_encryption_work">How does token encryption work?</a></li>
	<li><a href="#how_manage_grant_revoked_cancelled">How does the platform manage validation of the JWT access tokens in the resource server when the grant is revoked or cancelled?</a></li>
</ol>
<hr class="divide_hr" />



<h2 id="oauth_provider_domain_which_type">Which type of OAuth Provider domain should I set up?</h2>
<p>The platform offers two options for setting up an OAuth Provider domain:</p>
<ul>
	<li><strong>Akana OAuth/OIDC Provider Domain</strong>
		<p>Choose this option if you are using the Akana API platform as your OAuth/OIDC provider. You can set up a separate provider that you want to use for authentication, such as Google or Facebook, and the platform manages the process of authenticating via the separate provider and manages authorization, token issuance, and API access. For more information, see <a href="#domain_oauth_provider_configure">How do I set up and configure an Akana OAuth/OIDC Provider domain?</a> below.</p></li>
	<li><strong>External OAuth Provider Domain</strong>
	<p>Choose this option if you want to use an entity other than the Akana API platform as your OAuth/OIDC provider; for example, PingFederate or Google. For more information, see <a href="bus_admin_domains_eoap.htm">External OAuth Provider Domain</a>.</p></li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="akana_oauth_provider">How do I set up an Akana OAuth/OIDC Provider domain?</h2>
<p>If you're using Akana as the OAuth Provider, use the Akana OAuth/OIDC Provider Domain option. See <a href="#domain_oauth_provider_configure">How do I set up and configure an Akana OAuth/OIDC Provider domain?</a> below.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="how_does_the_authentication_provider_configuration_process_work">How does the Akana OAuth/OIDC Provider domain configuration process work?</h2>
<p>Here's how Akana OAuth/OIDC Provider domain configuration works:</p>
<ul>
	<li>The Administrator installs the feature into the platform container via the <strong>Akana Administration Console</strong>. This process is covered in the installation guide for the platform.</li>
	<li>After the feature is installed, the Business Admin can configure the domain via <strong>More</strong> &gt; <strong>Admin</strong> &gt; <strong>Domains</strong> &gt; <strong>Akana OAuth/OIDC Provider</strong>.</li>
	<li>Once the Akana OAuth/OIDC Provider domain is set up, it is available to the API Admin when configuring the API's OAuth details (<strong>API</strong> &gt; <strong>Details</strong> &gt; on right, <strong>OAuth Details</strong>). The API Admin chooses the Akana OAuth/OIDC Provider domain and OAuth version, selects one or more grant types, and specifies resources relative to the specified OAuth version. If multiple OAuth Provider domains are defined, the API Admin can choose different OAuth providers for different APIs.</li>
	<li>At runtime, the OAuth Provider manages the OAuth process in the background, directing the app client and the app's user and ensuring authentication and authorization, issuing tokens, and providing API access.</li>
</ul>
<p>For instructions on setting up the platform as an OAuth Provider, see <a href="#domain_oauth_provider_configure">How do I set up and configure an Akana OAuth/OIDC Provider domain?</a></p>
<p>To set up an external OAuth Provider, see <a href="bus_admin_domains_eoap.htm#domain_add_eoap">How do I add an External OAuth Provider domain?</a></p>
<p><a href="#top">Back to top</a></p>



<h2 id="oauth_third_party_provider">How do I set up a platform deployment to support a third-party OAuth provider?</h2>
<p>The <strong>OAuth Details</strong> function (<strong>API</strong> &gt; <strong>Details</strong> &gt; on right, <strong>OAuth Details</strong>) includes a pre-defined &quot;third-party provider&quot; domain that allows the API Admin to configure grants and resource mapping for OAuth versions 1.0a and 2.0. No setup is required by the Business Admin for this option. The purpose of this option is so that the API Admin can reference an external OAuth provider, if needed, rather than use one of the OAuth provider configurations provided by the platform implementation.</p>
<p>For more information, see <a href="api_admin_oauth_support.htm#api_oauth_config">How do I configure OAuth Details for my API?</a> in the API Admin help.</p>
<p>Alternatively, you can set up an <a href="bus_admin_domains_eoap.htm">External OAuth Provider Domain</a>.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="how_do_i_set_up_my_deployment_to_support_oauth">How do I set up my deployment to support OAuth?</h2>
<p>If you are a Business Admin you can set up one or more OAuth Provider domains by choosing <strong>More</strong> &gt; <strong>Admin</strong> &gt; <strong>Domains</strong>. There are two choices: use the platform as your OAuth/OIDC provider, or set up an external OAuth Provider. For help in determining which one is right for your installation, see <a href="#oauth_provider_domain_which_type">Which type of OAuth Provider domain should I set up?</a></p>
<p>Create a domain for each OAuth Provider scenario you want to support. </p>
<p>API Admins can then choose an OAuth Provider domain in the API OAuth setup page.</p>
<p>For instructions, see:</p>
<ul>
	<li>Platform as an OAuth Provider: <a href="#domain_oauth_provider_configure">How do I set up and configure an Akana OAuth/OIDC Provider domain?</a></li>
	<li>External OAuth Provider: <a href="bus_admin_domains_eoap.htm#domain_add_eoap">How do I add an External OAuth Provider domain?</a></li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="domain_oauth_provider_configure">How do I set up and configure an Akana OAuth/OIDC Provider domain?</h2>
<p>The <strong>Akana OAuth Provider</strong> feature is an add-on. This domain type allows you to use the platform as your OAuth/OIDC provider; you can specify a resource owner authentication domain and configure grant types, access tokens, grant properties, and branding.</p>
<p>Essentially, there are two steps:</p>
<ol>
	<li>Administrator: In the <strong>Akana Administration Console</strong>, install the <strong>Akana OAuth Provider</strong> feature. This installs the Akana OAuth/OIDC Provider domain option. The Business Admin can then create and configure the domain in the Community Manager developer portal user interface.</li>
	<li>Business Admin: Set up the domain in the Akana API Platform (see below).</li>
</ol>
<p><strong>Note</strong>: When you install the <strong>Akana OAuth Provider</strong> add-on, it is added to the list of choices in <strong>More</strong> &gt; <strong>Admin</strong> &gt; <strong>Domains</strong> &gt; <strong>Add Domain</strong>. It is not available as a Login option in the <strong>More</strong> &gt; <strong>Admin</strong> &gt; <strong>Logins</strong> page.</p>


<h4 id="to_configure_domain_oauth_provider">To configure an Akana OAuth/OIDC provider domain</h4>
<ol>
	<li>Log in as a Business Admin and <a href="bus_admin_overview.htm#admin_menu_busadmin">go to the Admin section</a>.</li>
	<li>On the left menu bar, click <strong>Domains</strong>. The <strong>Domains Summary</strong> page displays.</li>
	<li>Click <strong>Add Domain</strong> and choose <strong>Akana OAuth/OIDC Provider</strong>. The <strong>Add Akana OAuth/OIDC Provider</strong> wizard opens at the <strong>Details</strong> page. This wizard has seven pages:
<ul>
			<li>1 Details</li>
			<li>2 <a href="#domain_oauth_provider_grant_types_page">Grant Types</a></li>
			<li>3 <a href="#domain_oauth_provider_token_page">Token</a></li>
			<li>4 <a href="#domain_oauth_provider_oidc_page">OpenID Connect</a></li>
			<li>5 Scopes</li>
			<li>6 Properties</li>
			<li>7 <a href="#domain_oauth_provider_branding">Branding</a></li>
			</ul>
		</li>
	<li>In the <strong>Details</strong> page, enter a name and description for your Akana OAuth/OIDC provider (for example, Name=OAuth 2-Legged, Description=OAuth 2-Legged Domain).</li>
	<li>Click <strong>Next</strong> to go to the <strong>Grant Types</strong> page, where you can specify information about one or more <a href="basics_glossary.htm#gl_oauth_granttypes">OAuth Grant Types</a> that you want the Akana OAuth/OIDC Provider domain to support. Specify values or choose options.
<p>For more information, see <a href="#domain_oauth_provider_grant_types_page">Akana OAuth/OIDC Provider Domain: Tab 2, Grant Types - Configuration Values</a></p></li>
	<li>Click <strong>Next</strong> to go to the <strong>Token</strong> page, where you can specify information about one or more token types that you want the Akana OAuth/OIDC Provider domain to support. Specify values or choose options.
<p>For more information, see <a href="#domain_oauth_provider_token_page">What are the settings on the Akana OAuth/OIDC Provider Token page and what options should I choose?</a></p></li>
<li>Click <strong>Next</strong> to go to the <strong>OpenID Connect</strong> page. Here, you'll set up the necessary values if you want your Akana OAuth/OIDC Provider domain to use an OpenID Connect Identity Provider for authentication. If not, you can skip this tab.
<p>For more information, see <a href="#domain_oauth_provider_oidc_page">What are the settings on the Akana OAuth/OIDC Provider OpenID Connect page and what options should I choose?</a></p></li>
	<li>Click <strong>Next</strong> to go to the <strong>Scopes</strong> page. Here you will define OAuth scopes; later, API Admins for APIs that are using this OAuth domain can map specific operations in the API to these scopes and thus control the functions that OAuth will be requesting access to. For example, you might define a scope called Read-Only and map all GET operations to it. For more information, see <a href="api_admin_oauth_support.htm#how_does_scope_mapping_work">How does Scope Mapping work?</a> Define one or more scopes, with the following values for each:
		<ul>
			<li><strong>Name</strong>, <strong>short description</strong>, and <strong>full description</strong>.</li>
			<li><strong>Default scope</strong> check box: indicates whether this scope is always requested.</li>
			<li><strong>User Authorization Required</strong>: indicates whether user authorization is required for scope access. Usually, it is. However, if an OAuth grant includes all scopes with this option disabled, the provider does not require the resource owner to authorize the grant request.</li>
			</ul>
	</li>
	<li>Click <strong>Next</strong> to go to the <strong>Properties</strong> page. If you want to set up grant properties, click <strong>+Add</strong> and specify details. For more information, see <a href="#what_is_a_grant_property">What is a Grant Property?</a> For each property, specify the following values:
		<ul>
			<li><strong>Property Label</strong>: a text description, used only within the platform.</li>
			<li><strong>Property ID</strong>: the object ID that references the property file.</li>
			</ul>
	</li>
	<li>Click <strong>Next</strong> to go to the <strong>Branding</strong> page. Here you can customize the page that app users will see when an API that is using this OAuth domain is requesting access to the user's resources.
<p>For more information, see <a href="#domain_oauth_provider_branding">What are the settings on the Akana OAuth/OIDC Provider Branding page and what options should I choose?</a></p></li>
	<li>Click <strong>Save</strong>.
<p>The Akana OAuth/OIDC Provider domain is saved, and is now available for selection by API Admins when setting up OAuth details (<strong>API</strong> &gt; <strong>Details</strong> &gt; on right, <strong>OAuth Details</strong>).</p></li>
</ol>
<p><strong>Note</strong>: If your implementation will have a load balancer in front of the OAuth Provider container, there is an additional setup step for the Administrator. As well as setting up the OAuth domain, the load balancer settings on your implementation must be set to the below two headers on the outbound request from the load balancer to the platform containers:</p>
<ul>
	<li><strong>X-Forwarded-Host</strong>: the hostname used to access the load balancer. You could also keep the Host header as is rather than setting this header.</li>
	<li><strong>X-Forwarded-Proto</strong>: the protocol used to access the load balancer; HTTPS if the <a href="basics_glossary.htm#gl_vip">VIP</a> (virtual address for the load balancer) is an HTTPS address, HTTP if the VIP is an HTTP address. You can skip this step if the protocol used from the load balancer to the container is the same as the protocol used from the client to the load balancer.</li>
</ul>
<p>If needed, get help from the Policy Manager Administrator to make sure these settings are correct.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="domain_oauth_provider_grant_types_page">Akana OAuth/OIDC Provider Domain: Tab 2, Grant Types - Configuration Values</h2>
<p>When you're setting up an Akana OAuth/OIDC Provider domain to use the platform as an OAuth/OIDC Provider, the Grant Types page allows you to specify details about the grants your domain will support, including such things as the OAuth grant types and their associated settings, and resource owner authentication domain.</p>
<p>For information about the values set up on the <strong>Grant Types</strong> page (Tab 2), refer to the table below.</p>
<table class="doctable">
	<thead>
		<tr>
			<th>Option...</th>
			<th>Meaning...</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>Supported Grant Types</td>
			<td>Choose one or more grant types you want your domain to support, and then set values for each.</td>
		</tr>
		<tr>
			<td>Supported Grant Types: 3-Legged</td>
			<td><p>Specify values, depending on the grant types you support.</p>
				<p><a href="basics_glossary.htm#gl_oauth_grant_authorizationcode">3-legged, Authorization Code</a>:</p>
				<ul>
					<li><strong>Grant Validity Period (Days)</strong>: specify the <a href="basics_glossary.htm#gl_grantvalidityperiod">grant validity period</a>.</li>
					<li><strong>Authorization Code Timeout (seconds)</strong>: specify the <a href="basics_glossary.htm#gl_oauth_authorizationcode">authorization code</a> timeout.</li>
					<li><strong>Access Token Timeout (seconds)</strong>: specify <a href="basics_glossary.htm#gl_oauth_accesstoken">access token</a> timeout.</li>
					<li><strong>Issue Refresh Tokens</strong>: Check the box if <a href="basics_glossary.htm#gl_oauth_refreshtoken">refresh tokens</a> will be issued.</li>
					<li><strong>PKCE Support</strong>: Check the box if the <a href="basics_glossary.htm#gl_pkce">PKCE</a> security extension will be supported. Two additional options become available: <strong>Enforce PKCE</strong>, which makes PKCE required, and <strong>Support Plain Transformation</strong>, a setting that allows compatibility for deployments already existing or that can't use the S256 transformation.
				<p>	For more information, see <a href="#domain_oauth_provider_grant_types_authcode_pkce">What is PKCE?</a></p></li>
				</ul>
				<p><a href="basics_glossary.htm#gl_oauth_grant_implicit">3-legged, Implicit</a>:</p>
				<ul>
					<li>Grant Validity Period (Days): specify the <a href="basics_glossary.htm#gl_grantvalidityperiod">grant validity period</a>.</li>
					<li>Access Token Timeout (seconds): specify <a href="basics_glossary.htm#gl_oauth_accesstoken">access token</a> timeout.</li>
				</ul></td>
		</tr>
		<tr>
			<td>Supported Grant Types: 2-Legged</td>
			<td><p>Specify values:</p>
				<ul>
					<li><a href="basics_glossary.htm#gl_oauth_grant_clientcredentials">2-legged, Client Credentials</a>: specify <a href="basics_glossary.htm#gl_grantvalidityperiod">grant validity period</a> and <a href="basics_glossary.htm#gl_oauth_accesstoken">access token</a> timeout.</li>
					<li><a href="basics_glossary.htm#gl_oauth_grant_passwordcredentials">2-legged, Resource Owner Password Credentials</a>: specify <a href="basics_glossary.htm#gl_grantvalidityperiod">grant validity period</a> and <a href="basics_glossary.htm#gl_oauth_accesstoken">access token</a> timeout, and choose whether or not to issue <a href="basics_glossary.htm#gl_oauth_refreshtoken">refresh tokens</a>.</li>
				</ul></td>
		</tr>
		<tr>
			<td>Supported Grant Types: Extensions</td>
			<td><p>The platform supports the <strong>JWT Bearer Assertion</strong> extension grant type. If you choose this, specify the following:</p>
				<ul>
			<li>Check or leave the <strong>Assertions Issued by This Provider</strong> box.
				<p><strong>Note</strong>: If you clear the box, you <strong>must</strong> choose an OpenID Connect provider as the Resource Owner Authentication domain.</p></li>
			<li>Specify <strong>Grant Validity Period</strong> (in days).</li>
			<li>Specify <strong>Access Token Timeout</strong> (in seconds).</li>
			<li>Specify <a href="basics_glossary.htm#gl_clock_skew">clock skew</a>, in seconds. The default is 600 (10 minutes).</li>
			<li>Specify whether or not to issue <a href="basics_glossary.htm#gl_oauth_refreshtoken">refresh tokens</a>.</li>
		</ul>
		<p>For more information, see <a href="#what_is_a_jwt_bearer_assertion">What is a Bearer Assertion, and what does the platform support for Bearer Assertions?</a></p></td>
		</tr>
		<tr>
			<td>Client Restriction Settings</td>
			<td><p>This field allows you to add a restriction for which clients a token can be issued to, as an added security precaution.</p>
				<p>With the default value, <strong>All clients</strong>, the platform issues an OAuth token even if the app doesn't have an active contract with the API. However, you can choose to limit this to apps that have an active contract with the API. Options:</p>
				<ul>
					<li><strong>All clients</strong>: Default value. Tokens are issued to all clients with a valid ID.</li>
					<li><strong>Clients with activated connections to secured API implementations</strong>: Change to this value if you want to add a restriction so that tokens are issued only to clients that have a valid connection.</li>
			</ul>
			</td>
		</tr>
		<tr>
			<td>Grant Scope Setting</td>
			<td><p>These settings control how scopes are processed. Choose <strong>Provider Scope</strong> or <strong>Client Default Scope</strong>. </p>
				<p>Provider Scope is the default. With this option, the client app can request any scope configured for the access grant. </p>
				<p><strong>Provider Scope</strong>: the scope value to be used for a grant is processed as follows:</p>
	<ol>
		<li>If the authorization request/token request has a <strong>scope</strong> parameter and values (space-delimited string values), the Authorization Server validates whether the scopes are defined in the Akana OAuth/OIDC Provider domain. If they are, it uses the scope value as the grant scope.</li>
					<li>If the authorization/token request does not have a <strong>scope</strong> parameter, the Authorization Server takes the default scopes that are set in the Akana OAuth/OIDC Provider domain and uses them as the grant scope. If no default scopes are defined, the Authorization Server rejects the request and sends an error response.</li>
	</ol>
<p><strong>Client Default Scope</strong>: the scope value to be used for a grant is processed as follows:</p>
				<ol>
					<li>If the authorization request/token request has a <strong>scope</strong> parameter and values (space-delimited string values), the Authorization Server first validates whether the scopes are defined in the Akana OAuth/OIDC Provider domain. It then checks that the scopes are valid for the OAuth client. First it scans the APIs connected to the client, and then cumulatively collects all the OAuth scopes defined for these APIs. If the requested scopes are a subset of the app connection scopes, the request is valid and the request scope becomes the value of the grant scope.</li>
					<li>If the authorization/token request does not have a <strong>scope</strong> parameter, the Authorization Server scans the APIs connected to the client, and cumulatively all the OAuth scopes defined for these APIs are collected. These scopes are validated against the scope defined in the OAuth/OpenID Connect provider. If they are valid scopes, the request is valid. If they are not valid scopes, the Authorization Server rejects the request and sends an error message.</li>
	</ol>
</td>
		</tr>
		<tr>
			<td>Grant Provisioning Timeout (seconds)</td>
			<td>The length of time for which the grant provisioning session is valid. By default, during grant provisioning, the authentication token is created upon successful resource owner authentication, and is valid until authorization (approval/rejection) is complete, or until the token expires, whichever happens first. By default, the token expires after 600 seconds (10 minutes). You can use this field to extend (or reduce) this default time. The token still expires after authorization is complete.</td>
		</tr>
		<tr>
			<td>Resource Owner Authentication Domain</td>
			<td><p>This is the domain your Akana OAuth/OIDC Provider domain will use for end-user authentication as part of the OAuth process. It can be any domain set up on the platform. Choose from the drop-down list. If the domain you want isn't on the list, it must be installed and configured (see notes above). Some possible choices:</p>
				<ul>
			<li>Google: choose this for authentication with Google.</li>
			<li>Facebook</li>
			<li>LDAP</li>
		</ul></td>
		</tr>
	</tbody>
</table>
<p><a href="#top">Back to top</a></p>



<h2 id="domain_oauth_provider_grant_types_authcode_pkce">What is PKCE?</h2>
<h4 class="stamp">Valid in Version: 2020.2.0 and later</h4>
<p>In version 2020.2.0, the Akana API platform supports the optional PKCE security extension for OAuth, with the Authorization Code grant type.</p>
<p>In an OAuth exchange, when the authorization code is returned to the client, it could be intercepted by a malicious attacker if it not on a secure channel such as TLS. The attacker could then exchange the authorization code for an access token and gain access to resources.</p>
<p>PKCE helps make sure that the authorization code is not intercepted, by adding an additional key that is sent with the authorization code request, and again with the token request. The key is called a Proof Key for Code Exchange (PKCE). </p>
<p>With PKCE, for each authorization request the client generates two additional values:</p>
<ul>
	<li><strong>Code verifier</strong>&#8212;A unique key, generated by the client according to specific rules laid out in the PKCE standard.</li>
	<li><strong>Code challenge</strong>&#8212;The transformed value of the code verifier. There are two options:
		<ul>
			<li><strong>plain</strong>: Adds no transformation (code challenge is the same as the code verifier).</li>
			<li><strong>S256</strong>: Adds ASCII encoding, then SHA256 hashing, then Base-64 encoding, according to the following formula:
				<pre>BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))</pre>
			</li>
		</ul>
	</li>
</ul>
<p>In the authorization request, the client sends one or two additional parameters for PKCE:</p>
<ul>
	<li><strong>code_challenge</strong>: The code challenge value.</li>
	<li><strong>code_challenge_method</strong>: Indicates the method used to create the code challenge. If included, the value is either <strong>S256</strong> (see the formula above) or <strong>plain</strong>. If not included, defaults to <strong>plain</strong>.</li>
</ul>
<p>The authorization server generates the unique authorization code, associates the <strong>code_challenge</strong> and <strong>code_challenge_method</strong> values with it, and sends it to the client.</p>
<p>Next, the client sends the authorization code to the token endpoint, and also sends one additional value:</p>
<ul>
	<li><strong>code_verifier</strong>: The code verifier value.</li>
</ul>
<p>The token endpoint takes the authorization code and the <strong>code_verifier</strong>, and validates the <strong>code_verifier</strong> against the <strong>code_challenge</strong> that it got previously. If the values match, the token endpoint issues the token.</p>
<p>In the Akana OAuth/OIDC Provider domain setup, if PKCE is enabled, the platform supports the following additional options:</p>
<ul>
	<li><strong>Enforce PKCE</strong>&#8212;Per the PKCE standard, the code challenge can be required or optional. This setting, checked, corresponds to code challenge required.</li>
	<li><strong>Support Plain Transformation</strong>&#8212;Adds PKCE, but with <strong>code_challenge_method</strong> of <strong>plain</strong> only. In this scenario, <strong>S256</strong> is not supported.</li>
</ul>
<p>For more information, refer to the specification: <a href="https://tools.ietf.org/html/rfc7636" title="Link to PKCE specification, Proof Key for Code Exchange by OAuth Public Clients" target="_blank">https://tools.ietf.org/html/rfc7636</a>.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="domain_oauth_provider_token_page">What are the settings on the Akana OAuth/OIDC Provider Token page and what options should I choose?</h2>
<p>When you're setting up an Akana OAuth/OIDC Provider domain to use the platform as an OAuth Provider, the Token page allows you to specify details about the types of access token your domain will support.</p>
<p>The platform supports these token types:</p>
<ul>
	<li><strong>Bearer</strong>: Two types of bearer tokens (bearer tokens are sent as-is in the API request, in the Authorization header):
		<ul>
			<li><strong>Referenced Bearer</strong></li>
			<li><strong>JWT Bearer Access Token</strong></li>
</ul>
</li>
	<li><strong>MAC</strong></li>
</ul>
<p>For information about the values set up on the <strong>Token</strong> page (Tab 3), refer to the table below.</p>
<table class="doctable">
	<thead>
		<tr>
			<th>Option...</th>
			<th>Meaning...</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>Referenced Bearer</td>
			<td><p>A short random token that uniquely identifies the grant, sent as-is in the API request, in the Authorization header. If you enable this token type, you can specify the length of the bearer access token that will be generated. A longer token is stronger. Default: 40.</p>
<p>For more information, see <a href="#should_i_choose_reference_bearer_or_jwt_bearer">Should I choose Referenced Bearer or JWT Bearer Access token?</a></p></td>
		</tr>
		<tr>
			<td> JWT Bearer Access Token</td>
			<td><p>An access token that uses the standard and contain all the information the resource server needs to confirm the user&rsquo;s grant to the application, sent as-is in the API request, in the Authorization header. An advantage of the JWT Bearer Access Token is that the Resource Server can validate by itself without having to go back to the Authorization Server. A JWT Bearer Access Token includes more information and can be significantly longer than a referenced bearer token. For more information, see <a href="#should_i_choose_reference_bearer_or_jwt_bearer">Should I choose Referenced Bearer or JWT Bearer Access token?</a> If you choose this option, specify values associated with support of this token type:</p>
				<ul>
					<li><strong>Issuer</strong>: The ID of the OAuth Provider that will be included in the access token.</li>
					<li><strong>ClientID Claim Name</strong>: Claim name the OAuth Provider uses for the Client ID in the access token.</li>
					<li><strong>Scope Claim Name</strong>: Claim name the OAuth Provider uses for a scope in the access token. This claim contains space-delimited scopes that are in the grant scope.</li>
					<li><strong>Resource Owner UID Claim Name</strong>: Claim name the OAuth Provider uses for the Resource Owner ID in the access token.</li>
					<li><strong>Include Resource Owner UserInfo</strong>: Indicates whether the resource owner UserInfo should be included in the JWT Bearer Access Token. For more information, see <a href="#resource_owner_userinfo_in_bearer_token_why">Why choose to include resource owner userinfo in the Bearer Access token?</a></li>
					<li><strong>JWT Signing Algorithm</strong>: The algorithm used to sign the JWT Bearer access token. For choices, see <a href="#what_jwt_signing_algorithms_are_supported">What JWT signing algorithms are supported?</a> below.</li>
					<li><strong>Reference Signing Key from Platform Identity</strong>: Indicates that the signing key is stored in Policy Manager, associated with a platform identity. Enter the platform identity name exactly as it is set up in Policy Manager. For shared secret, setting up a platform identity is optional but recommended. However, if you are using an asymmetric signature algorithm for signing the access token, you must use a platform identity, and make sure the certificate and private key are set up for this identity. For more information, see <a href="bus_admin_domains.htm#why_platform_identity">Should I set up a platform identity, or provide the credentials in the domain configuration?</a></li>
					<li><strong>Encrypt JWT Access Token</strong>: Indicates that the JWT Bearer access token should be encrypted. Check the box and specify applicable values. Indicates that the token should be encrypted. If resource owner user information is included in the access token, encryption is important. If you check this box, the following additional fields are available:
<ul>
<li><strong>Reference Encryption Key from Platform Identity</strong>: Indicates that the encryption key is stored in Policy Manager, associated with a platform identity. Enter the platform identity name exactly as it is set up in Policy Manager. This identity represents the identity of the application that will be decrypting the access token. To support multiple resource servers, check the <strong>Verify JWT Access Token with Authorization Server</strong> option and enter the same identity used for signing. For more information, see <a href="bus_admin_domains.htm#why_platform_identity">Should I set up a platform identity, or provide the credentials in the domain configuration?</a></li>
<li><strong>JWT Encryption Key Management Algorithm</strong>: The algorithm used to encrypt the encryption key. If you are using symmetric encryption, and when using the shared secret as the encryption key, choose <strong>Direct</strong>.</li>
<li><strong>JWT Content Encryption Algorithm</strong>: The algorithm used to encrypt the token body.</li>
</ul>
</li>
				</ul></td>
		</tr>
		<tr>
			<td>MAC</td>
			<td>The <a href="basics_glossary.htm#gl_oauth_mactoken">MAC token</a> type. A MAC token includes a digital signature and a <a href="basics_glossary.htm#gl_nonce">nonce</a>, and is more secure than a bearer token. Use of a MAC token by a client is more complex than using a Bearer token; however, the MAC token offers non-repudiation and message replay attack prevention options to the API requests.</td>
		</tr>
		<tr>
			<td>Default Access Token Type</td>
			<td>The access token type that will be used if more than one type is enabled and the client doesn&rsquo;t select the preferred access token type.</td>
		</tr>
		<tr>
			<td>Can Client Override Access Token Type</td>
			<td>If checked, the app developer can select the specific type of access token for the application's grants.</td>
		</tr>
		<tr>
			<td>Access Token Validation</td>
			<td><p>Specify general values relating to validating all types of access tokens. This configuration is used when the resource server validates the access token received in the requests. Values:</p>
				<ul>
					<li><strong>Clock Skew (seconds)</strong>: The grace period an access token is allowed before effective timestamp and after expired timestamp, expressed in seconds; for example, 120 seconds. This is to accommodate the clock setting difference between the issuing machine and validating machine. At runtime, if clock skew is exceeded, validation fails.</li>
					<li><strong>Verify JWT Access Token with Authorization Server</strong>: As an alternative to including userinfo in the token, you might choose to verify the token with the Authorization Server. This adds a processing step, but means that you can keep the token size fairly small, without the userinfo and the associated encryption that might be needed to protect it. There are other advantages. For more information, see <a href="#should_i_choose_verify_jwt_token_with_auth_server">Should I choose to verify the access token with the Authorization Server?</a></li>
				</ul></td>
		</tr>
	</tbody>
</table>
<p><a href="#top">Back to top</a></p>



<h2 id="should_i_choose_reference_bearer_or_jwt_bearer">Should I choose Referenced Bearer or JWT Bearer Access token?</h2>
<p>A key advantage of the Bearer token is that the Resource Server can validate the token, without having to go to the Authorization Server. This is more efficient in terms of performance, especially when the Resource Server and OAuth Provider are different vendors.</p>
<p>If you have different vendors for Authorization Server and Resource Server, and want to be able to validate the token at the Resource Server, that is a key reason to choose JWT Bearer Access Token, so there is no need for a proprietary call to the OAuth Provider. In this scenario, you can write a piece of code to decrypt the message, verify the signature, and then validate.</p>
<p>The Referenced Bearer token is much smaller in size. If header size might be an issue, that would be a reason to choose Referenced Bearer, or at least to support it so that API Admins can choose this option if they want to.</p>
<p>If you want to validate the token at the Authorization Server, you can choose to do that with your access tokens by checking the check box, <strong>Verify JWT Access Token with Authorization Server</strong>. However, by doing so you lose some of the advantage of using an access token and might therefore prefer to go with the smaller Referenced Bearer token.</p>
<p><a href="#top">Back to top</a></p>




<h2 id="resource_owner_userinfo_in_bearer_token_why">Why choose to include resource owner userinfo in the Bearer Access token?</h2>
<p>When you're setting up the Akana OAuth/OIDC Provider domain, Token tab, and choose the <strong>Bearer Access</strong> token type, you have the option to include resource owner userinfo in the Bearer access token.</p>
<ul>
	<li><strong>Choose yes if</strong>:
		<ul>
			<li>You want the resource owner userinfo to be available either to the resource server or to the downstream service (target endpoint), and do not want to place an additional call to the Authorization Server (see <a href="#should_i_choose_verify_jwt_token_with_auth_server">Should I choose to verify the access token with the Authorization Server?</a>).</li>
			<li>Your network is completely secure and you have no concerns about the userinfo being compromised. In this scenario, it might be acceptable to include userinfo without encryption. However, if there is any possibility that userinfo might be exposed in an insecure environment, encryption is extremely important.</li>
		</ul>
	</li>
	<li><strong>Choose no if</strong>:
		<ul>
			<li>You have concerns about the size of the bearer token. The user information increases the size of the bearer token, which is already larger than a Referenced Bearer token would be. In addition, if you include the userinfo in the token you should encrypt the information, which further increases the message size.</li>
			<li>It's acceptable in your implementation for the Resource Server to make an additional call to the Authorization Server for the userinfo.</li>
			</ul>
	</li>
	</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="what_jwt_signing_algorithms_are_supported">What JWT signing algorithms are supported?</h2>
<p>The platform supports the following algorithms for signing Bearer tokens:</p>
<ul>
	<li>HmacSHA256</li>
	<li>HmacSHA384</li>
	<li>HmacSHA512</li>
	<li>SHA256withRSA</li>
	<li>SHA384withRSA</li>
	<li>SHA512withRSA</li>
	<li>SHA256withECDSA</li>
	<li>SHA384withECDSA</li>
	<li>SHA512withECDSA</li>
	<li>SHA256withRSAandMGF1</li>
	<li>SHA384withRSAandMGF1</li>
	<li>SHA512withRSAandMGF1</li>
</ul>
<p>The first three are symmetric; the rest are asymmetric.</p>
<p>For more information on the algorithms, refer to the glossary: <a href="basics_glossary.htm#gl_hmac">HMAC</a>, <a href="basics_glossary.htm#gl_sha256">SHA-256</a>, <a href="basics_glossary.htm#gl_rsa">RSA</a>, <a href="basics_glossary.htm#gl_ecdsa">ECDSA</a>, <a href="basics_glossary.htm#gl_mgf1">MGF1</a>.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="should_i_choose_reference_bearer_or_jwt_bearer">Should I choose Referenced Bearer or JWT Bearer Access token?</h2>
<p>The answer is, &quot;it depends.&quot; The type of bearer token to choose depends on how you want to validate the access token. Do you want to validate access token locally or remotely? Both of these methods to validate access tokens offer different benefits in terms of ease of use, cost, and performance. Security is also a key factor. It's important to find a good balance between security, operational efficiency, and cost, that will meet the security standards of your enterprise.</p>
<p>Some differences between the two are shown in the table below.</p>
<table class="doctable">
	<thead>
		<tr>
			<th>JWT Bearer access token</th>
			<th>Referenced Bearer access token</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>The token has readable content. You can decode the token and read the information in it.</td>
			<td><p>The token is just a string that is used for authorization, with no intrinsic meaning (otherwise known as an opaque token). The format is not intended to be read by a person.</p></td>
		</tr>
		<tr>
			<td>Size: Much larger than Referenced Bearer.</td>
			<td>Size: Much smaller in side than JWT.</td>
		</tr>
		<tr>
			<td>JWT format is standard and well known.</td>
			<td>Only the issuer knows the format.</td>
		</tr>
		<tr>
			<td><p>Can be validated locally / </p>
				<p>Optionally, can be validated remotely by calling the Authorization server that issued the token.</p></td>
			<td>Cannot be validated locally. For token validation, the recipient must call the Authorization server that issued the token. This comes with the cost of adding latency in the application because an HTTP request to the Authorization server is needed each time the token is validated.</td>
		</tr>
		<tr>
			<td>You can write a piece of code to decrypt the message, verify the signature, and then validate.</td>
			<td>{<span class="apidoc_red">DK what is the comparable text here? Maybe something like: &quot;The token cannot be decrypted and can only be validated by the Authorization server&quot;?</span>}</td>
		</tr>
	</tbody>
</table>
<p><a href="#top">Back to top</a></p>



<h2 id="domain_oauth_provider_oidc_page">What are the settings on the Akana OAuth/OIDC Provider OpenID Connect page and what options should I choose?</h2>
<p>When you're setting up an Akana OAuth/OIDC Provider domain, and want to use OpenID Connect as the identity provider, the OpenID Connect page allows you to set up the values that will be needed to act as an OpenID Connect Relying Party to your Identity Provider.</p>
<p>For information about the values set up on the <strong>OpenID Connect</strong> page (Tab 4), refer to the table below.</p>
<table class="doctable">
	<thead>
		<tr>
			<th>Option...</th>
			<th>Meaning...</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>OpenID Connect 1.0 Enabled</td>
			<td>If your Akana OAuth/OIDC Provider Domain will be a relying party for an OpenID Connect Identity Provider, check the box. If not, skip this tab.</td>
		</tr>
		<tr>
			<td>Reserved Scopes</td>
			<td><p>Scopes defined by OpenID Connect. Two are selected by default as required:</p>
				<ul>
					<li><strong>openid</strong>: Every OpenID Connect request must have this scope.</li>
					<li><strong>scope</strong>: The ID token doesn't normally include information about OAuth grant scopes. However, when this scope is present, it enables the client to request that when the domain issues an ID token the grant scope is included in the ID token. If an app's grant access request does not specify scopes, all scopes that have the Default scope option checked are included in the scope of the grant. If the app developer wants the scope information returned, he/she can include the <strong>scope</strong> parameter as part of the authorization request (<strong>API</strong> &gt; <strong>Details</strong> &gt; on right, <strong>OAuth Details</strong>).</li>
<li>profile</li>
<li>email</li>
<li>address</li>
<li>phone</li>
				</ul></td>
		</tr>
		<tr>
			<td>ID Token Signing Algorithm</td>
			<td>Defaults to SHA256withRSA, but many other algorithms are supported. For more information on available options, see <a href="bus_admin_domains_oidc.htm#openidconnect_oauthprovider_signature_algorithms">What signature algorithms are supported by the platform's Akana OAuth/OIDC Provider?</a></td>
		</tr>
		<tr>
			<td>ID Token Encryption Key Management Algorithm</td>
			<td>Select the encryption algorithm that the provider will use to encrypt the ID token key.</td>
		</tr>
		<tr>
			<td>ID Token Content Encryption Algorithm</td>
			<td>Select the encryption algorithm that the provider will use to encrypt the ID token content.</td>
		</tr>
		<tr>
			<td>ID Token Validity (seconds)</td>
			<td>The expiration time on or after which the ID Token <strong>must not</strong> be accepted for processing. Defaults to 3600 seconds.</td>
		</tr>
		<tr>
			<td>JSON Web Key Validity (seconds)</td>
			<td>The time, in seconds, indicating how often the asymmetric signature/encryption keys are rotated.</td>
		</tr>
	</tbody>
</table>
<p><a href="#top">Back to top</a></p>



<h2 id="what_is_a_grant_property">What is a Grant Property?</h2>
<p>Grant Properties are custom values that you can define at the domain level to support collecting information from resource owners (end users) that could be used in the context of giving the app access to the user's resources.</p>
<p>Grant properties are not exposed to apps. They can be used to enhance the user experience when an app invokes the API using the grant.</p>
<p>Examples of grant properties might be: &quot;Notify me when the app uses this grant,&quot; or &quot;Only allow withdrawals up to $500.&quot;</p>
<p>Downstream from the domain, grant properties allow the API to configure how an app will use the API access permissions that are granted to it. For example, in a banking app, grant properties could be used to allow access to transaction details or current balance, but not allow a withdrawal.</p>
<p>Grant properties are set up in the Akana OAuth/OIDC Provider domain, <strong>Tab 6, Properties</strong>.</p>
<p>At runtime, the end-user authenticates with the API and then sees the app authorization page. Typically, if there are grant properties, this page will include fields where the end-user can authorize specific access options to the app.</p>
<p>Based on the user's specific authorization, an access token is sent to the app, allowing access to the user's resources that are accessible via the API, as authorized by the user. Any limitations determined by the grant properties are part of the access token.</p>
<p>The app can then use this token to start sending requests. The grant properties are sent back to the client application for validation.</p>
<p><strong>Example (money transfer API):</strong></p>
<p>If the API being secured is a money transfer API, the resource owner might want a restriction to limit the maximum value of a transaction to $100, with a maximum of only one transaction per month (for example, magazine subscription application).</p>
<ul>
	<li>To support this, the OAuth provider could define a &quot;Maximum transaction amount&quot; property and a &ldquo;Maximum number of transactions&quot; per month property in the application, and specify the Property ID (tag) for each of these in the Akana OAuth/OIDC Provider domain definition on Tab 6, <strong>Properties</strong>.</li>
	<li>As part of the OAuth approval process, the end-user first authenticates with the identity provider. The user then sees the Authorization page for authorization of the client app to access the user's resources protected by the API. The grant property labels are displayed with text entry fields. The user enters the values for the grant properties and clicks <strong>Authorize</strong>.</li>
	<li>The app is granted the requested permissions, but the specific limitations specified by the end-user are applied to the app's permission to limit the app's access to the user's resources.</li>
</ul>
<p>Navigation: <strong>More</strong> &gt; <strong>Admin</strong> &gt; <strong>Domains</strong> &gt; add or modify Akana OAuth/OIDC Provider domain &gt; <strong>Tab 6, Properties</strong></p>
<p><a href="#top">Back to top</a></p>



<h2 id="domain_oauth_provider_branding">What are the settings on the Akana OAuth/OIDC Provider Branding page and what options should I choose?</h2>
<p>When an end-user logs into an app that's connected to an API that uses the Akana OAuth/OIDC Provider domain configuration, the user sees a Resource Owner Authentication page (login page) that is custom branded for the app and for the OAuth provider. That page is configured in the Akana OAuth/OIDC Provider domain setup, on the <strong>Branding</strong> page.</p>
<p>For information about the values set up on the <strong>Branding</strong> page (Tab 7), refer to the table below.</p>
<table class="doctable">
	<thead>
		<tr>
			<th>Option...</th>
			<th>Meaning...</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>Site Logo</td>
			<td>Optionally, you can upload a logo to display on the login page. It should be 50px high. For more information, see <a href="basics_account_management.htm#icon_upload_crop">How do I upload and crop icons?</a></td>
		</tr>
		<tr>
			<td>Footer Text</td>
			<td>Custom text for the footer of the login page.</td>
		</tr>
		<tr>
			<td>Requires SSL</td>
			<td>Select this check box if your OAuth provider should only accept requests over HTTPS.</td>
		</tr>
		<tr>
			<td id="domain_oauth_provider_authserverurl">Authorization Server URL</td>
			<td><p>The <a href="basics_glossary.htm#gl_oauth_authorizationserverurl">Authorization Server URL</a> set up in your Akana OAuth/OIDC Provider domain configuration; for example, https://www.myauthorizationserver:9800. This is the public URL that apps will use to access this OAuth provider. Can be HTTP or HTTPS. If the <strong>Requires SSL</strong> box is checked (see above), must be HTTPS.</p>
				<p>Based on the Authorization Server URL specified, the platform derives these endpoints:</p>
				<ul>
					<li>Authorization Endpoint (for OAuth 1.0a and OAuth 2.0): {Authorization Server URL}/oauth/auz/authorize</li>
					<li>OAuth 2.0 Token Endpoint: {Authorization Server URL}/oauth/oauth20/token</li>
					<li>OAuth 1.0 Token Endpoint: {Authorization Server URL}/oauth/oauth10/token</li>
				</ul>
				<p>If the Akana OAuth/OIDC Provider domain uses OpenID Connect for authentication (OpenID Connect support is checked in the Akana OAuth/OIDC Provider domain configuration, Tab 3):</p>
				<ul>
					<li>Userinfo Endpoint: {Authorization Server URL}/oauth/userinfo</li>
					<li>JWKS Endpoint: {Authorization Server URL}/oauth/jwks</li>
				</ul>
<p>For an OpenID Connect provider, all the endpoints and provider details are available via the discovery URL/well-known configuration URL:</p>
<ul>
	<li>{Authorization Server URL}/.well-known/openid-configuration
	</li>
</ul>
				<p>Firewalls and DNS servers must be set up for this URL so that end users and apps can access the URL. This protocol/host/path should resolve to one or more containers with the Akana OAuth Provider feature installed.</p>
				<p>For more information, including the specific paths for different OAuth URLs for the OAuth provider, see <a href="#platform_oauth_endpoints">What are the OAuth endpoints for the platform?</a></p>
<p><strong>Notes re OAuth URLs</strong>:</p>
<ul>
	<li>In versions prior to 2020.1.0, a trailing slash on the Authorization Server URL results in failure to validate a <a href="basics_glossary.htm#gl_privatekeyjwt">Private Key JWT</a> token (private_key_jwt), with an error that the <strong>aud</strong> claim does not match the intended audience. In version 2020.1.0 and later, the Community Manager developer portal resolves this internally.</li>
	<li>In version 2021.1.0 and later, all OAuth URLs must either be on the list of virtual hosts for the tenant (see <a href="site_admin_site.htm#settings_theme_configure">How do I configure values for a theme?</a>) or must be on the list of trusted hosts in the platform's site settings, <strong>Limit forward proxy feature to allow only these hosts</strong> field (see <a href="site_admin_site.htm#settings_config_site">How do I configure site settings?</a>).</li>
</ul>			</td>
		</tr>
		<tr>
			<td>Additional Virtual Hosts</td>
			<td><p>If your OAuth provider has one or more additional virtual hosts, as well as the hostname in the Authorization Server URL, enter the additional hostnames, separated by commas.</p>
				<p><strong>Note</strong>: The Authorization Server must be able to resolve these virtual hosts to an IP address.</p></td>
		</tr>
		<tr>
			<td>Grant Provisioning UI URL</td>
			<td>The URL for your OAuth provider&rsquo;s grant provisioning UI, if your provider has its own UI. To send the grant as a parameter in the URL, include the {GrantID} placeholder in the URL. If you want your OAuth provider to use the grant provisioning UI provided by the platform, leave this field blank.</td>
		</tr>
		<tr>
			<td>Grant Workflow Definition</td>
			<td>The workflow definition that will apply to all new OAuth grants. You can use this field to implement a custom workflow for OAuth. For information on uploading a custom workflow, see <a href="site_admin_workflows.htm#to_upload_a_custom_workflow">to upload a custom workflow</a>. For help with developing a custom OAuth workflow, contact your Akana representative.</td>
		</tr>
		<tr>
			<td>Grant Administration Session Timeout (seconds)</td>
			<td>The length of time for which the grant administration session is valid. By default, for grant administration, the authentication token is set upon successful authentication and is valid until the token expires, the token is renewed, or the user logs out, whichever happens first. By default, the token expires after 600 seconds (10 minutes). You can use this field to extend (or reduce) this default time.</td>
		</tr>
	</tbody>
</table>
<p><a href="#top">Back to top</a></p>



<h2 id="domain_oauth_provider_support_sso_login">How can I set up my Akana OAuth/OIDC Provider domain to support end-user login from an external identity provider?</h2>
<p>You can set up an Akana OAuth/OIDC Provider domain to support SSO with an external identity provider with these two types of identity provider:</p>
<ul>
	<li>An identity provider that only has APIs rather than offering a user interface for login&#8212;such as LDAP or CA SiteMinder</li>
	<li>An identity provider that provides a login application&#8212;such as OpenID Connect or SAML Web SSO Identity Provider. In this scenario, the platform can redirect the user to the login application and then have the login application redirect the user back to the OAuth Provider after authentication.</li>
</ul>
<p>Using this approach, depending on where your end-user identities are, you can configure different domains and use the appropriate domain as the resource owner authentication domain in the OAuth Provider configuration (Grant Types tab). For example, you would configure an <a href="bus_admin_domains_oidc.htm#domain_openid_connect_relying_party_config">OpenID Connect Relying Party domain</a>, a <a href="bus_admin_domains.htm#domains_login_setup_saml_web_sso">SAML Web SSO domain</a>, an <a href="bus_admin_domains.htm#domain_ldap_configure">LDAP</a> domain, or a <a href="bus_admin_domains.htm#domains_login_setup_ca_siteminder">CA SiteMinder</a> domain.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="auth_server_url_define">What is an Authorization Server URL?</h2>
<p>As part of setting up the OAuth Provider domain to use the platform as an OAuth provider, the Business Admin must specify the <a href="basics_glossary.htm#gl_oauth_authorizationserverurl">Authorization Server URL</a> for the platform. This is the URL for the server designated by the OAuth provider to perform the authorization steps to a) authenticate the resource owner (or to delegate the authentication process to a trusted identity provider), and b) get the resource owner's permission for the app to access the resources. The app directs the resource owner (user) to the Authorization Server URL; when the authorization steps are complete, the Authorization Server returns the user to the app, using the redirect URL provided by the app.</p>
<p>The Authorization Server URL is the URL at which the OAuth Provider accesses the requests, for both <a href="basics_glossary.htm#gl_oauth_authorizationendpoint">Authorization Endpoint</a> and <a href="basics_glossary.htm#gl_oauth_tokenendpoint">Token Endpoint</a>.</p>
<p><strong>Note</strong>: One deployment can support more than one OAuth Provider. If there is more than one, it is important that each OAuth Provider has a different Authorization Server URL, for both <a href="basics_glossary.htm#gl_oauth_authorizationendpoint">Authorization Endpoint</a> and <a href="basics_glossary.htm#gl_oauth_tokenendpoint">Token Endpoint</a>.</p>
<p>When setting up an Akana OAuth/OIDC Provider domain on the platform, once you have specified the Authorization Server URL it is important to make sure that requests are directed to this URL where the Akana OAuth Provider feature is installed. This might include additional actions; for example, adding a DNS entry or configuring the load balancer if the URL is a virtual endpoint on F5. If you are setting up an External OAuth Provider domain, this is not necessary.</p>
<p>The URL you provide for the Authorization Server is the base of the URL for the Request Token URL, Access Token URL, and Authorize URL, with additional parts of the paths as shown below. The <a href="basics_glossary.htm#gl_oauth_callbackurl">Callback URL</a> is the Redirect URL that an app developer would provide in the App details page.</p>
<p>For specific Authorization Server URLs for the platform, see <a href="#auth_server_url_platform">What is the OAuth Authorization Server URL for the platform?</a> below.</p>
<p><strong>Note</strong>: In most cases, when setting up an Authorization Server URL in domain configuration, make sure there are no training characters on the URL, including a training slash.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="auth_server_url_platform">What is the OAuth Authorization Server URL for the platform?</h2>
<p>When you are setting up an Akana OAuth/OIDC Provider domain on the platform, the URL you provide for the Authorization Server (OAuth endpoint) is the base of the URL for the Request Token URL, Access Token URL, and Authorize URL, with additional parts of the paths as shown below.</p>
<p>When setting up the OAuth Authorization Server URL in the platform, enter only the base of the URL, including protocol, host, and port if needed. The platform appends the appropriate path as listed below after the {oauth.provider.url} variable.</p>
<p>For example, let's say the Authorization Server URL you specify in the provider configuration is:</p>
<pre>https://www.acmepaymentscorp.com:9800</pre>
<p>Use that value in place of the {oauth.provider.url} placeholder. The platform appends the rest of the URL in each case.</p>
<p>For OAuth 2.0, the OAuth Authorization Endpoint URL becomes:</p>
<pre>https://www.acmepaymentscorp.com:9800/oauth/auz/authorize</pre>
<p>OAuth Token Endpoint URL becomes:</p>
<pre>https://www.acmepaymentscorp.com:9800/oauth/oauth20/token</pre>
<p>For general information on Authorization Server URLs, see <a href="#auth_server_url_define">What is an Authorization Server URL?</a> above.</p>
<p>Notes:</p>
<ul>
<li>App developers need to know the Authorization Server URL in order to set up their apps to use the OAuth domain. This information must be made available to API Admins, who must make sure it is included in API documentation.</li>
<li>If you are setting up an External OAuth Provider domain, you'll need to provide the Authorization Server URL of your provider. Generally, this is available at the well-known configuration endpoint. See <a href="bus_admin_domains_eoap.htm#why_choose_eoap">When would I choose an External OAuth Provider domain?</a></li>
<li>In most cases, when setting up an Authorization Server URL in domain configuration, make sure there are no training characters on the URL, including a training slash.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="platform_oauth_endpoints">What are the OAuth endpoints for the platform?</h2>
<p>The full URLs for both supported OAuth versions are shown below.</p>
<p>OAuth endpoints for 1.0a:</p>
<ul>
	<li><strong>OAuth Authorization Endpoint URL</strong>: {oauth.provider.url}/oauth/auz/authorize</li>
	<li><strong>OAuth Token Endpoint Request Token URL</strong>: {oauth.provider.url}/oauth/oauth10/initiate</li>
	<li><strong>OAuth Token Endpoint Access Token URL</strong>: {oauth.provider.url}/oauth/oauth10/token</li>
</ul>
<p>OAuth endpoints for 2.0:</p>
<ul>
	<li><strong>OAuth Authorization Endpoint URL</strong>: {oauth.provider.url}/oauth/auz/authorize</li>
	<li><strong>OAuth Token Endpoint URL</strong>: {oauth.provider.url}/oauth/oauth20/token</li>
</ul>
	<p><strong>Note</strong>: In version 2021.1.0 and later, all OAuth URLs must either be on the list of virtual hosts for the tenant (see <a href="site_admin_site.htm#settings_theme_configure">How do I configure values for a theme?</a>) or must be on the list of trusted hosts in the platform's site settings, <strong>Limit forward proxy feature to allow only these hosts</strong> field (see <a href="site_admin_site.htm#settings_config_site">How do I configure site settings?</a>).</p>
<p><a href="#top">Back to top</a></p>



<h2 id="what_are_the_oauth_custom_headers">What are the OAuth custom headers?</h2>
<p>When an API uses the platform as a proxy, in the API setup the API is the Target API and the platform is the Proxy API.</p>
<p>When an app sends a request, if the API is using the platform as a proxy API and is using the OAuth policy, the platform adds custom headers in the outbound request from the proxy API. These custom headers include key information necessary for the transaction, such as resource owner identity and grant properties.</p>
<p>For more detailed information about these headers, refer to <a href="api_admin_oauth_support.htm#how_does_proxy_api_send_oauth_headers">How does the proxy API send OAuth-related information to my API?</a> (API Admin documentation).</p>
<p><a href="#top">Back to top</a></p>



<h2 id="what_is_a_jwt_bearer_assertion">What is a Bearer Assertion, and what does the platform support for Bearer Assertions?</h2>
<p>The platform supports the <a href="basics_glossary.htm#gl_jwt_token"> Token</a>, or Bearer Assertion, which is an <a href="basics_glossary.htm#gl_oauth_extensiongranttype">extension grant type</a> that is generally used when the app already has an Assertion that represents the resource owner. The app sends the Assertion to the Authorization Server&rsquo;s <a href="basics_glossary.htm#gl_oauth_tokenendpoint">Token Endpoint</a> to get an access token for later use.</p>
<p>The Bearer Assertion is generally issued by an <a href="basics_glossary.htm#gl_identityprovider">Identity Provider</a> and consumed by a <a href="basics_glossary.htm#gl_relyingparty">Relying Party</a> that relies on its content to identify the subject&#8212;that is, the user being authenticated.</p>
<p>The platform supports Bearer Assertions:</p>
<ul>
	<li><strong>Issued by the platform</strong>. To use Bearer Assertions issued by the platform, they must be issued by the same OAuth Provider. If there are multiple Akana OAuth/OIDC Provider domains, you cannot use Bearer Assertions issued by a different platform OAuth Provider. It <strong>must</strong> be the same OAuth Provider producing and consuming the Bearer Assertion.</li>
	<li><strong>Issued by a different provider</strong>. To use Bearer Assertions issued by a different provider, the Resource Owner authentication domain must be an OpenID Connect Relying Party domain. The Akana OAuth/OIDC Provider domain can use the Bearer Assertions issued by the external OpenID Connect Provider.</li></ul>
<p>In the context of the platform, when the token is used as an access token, all the information needed for the access token is already part of the token. This is efficient in terms of processing.</p>
<p>This grant type supports <a href="basics_glossary.htm#gl_oauth_refreshtoken">refresh tokens</a>.</p>
<p><a href="#top">Back to top</a></p>




<h2 id="what_token_types_should_i_support">What token types should I support?</h2>
<p>When setting up your Akana OAuth/OIDC Provider domain, on the <strong>Token</strong> tab, there are three key choices for tokens: </p>
<ul>
	<li><strong>Bearer</strong>: Two types of bearer tokens (bearer tokens are sent as-is in the API request, in the Authorization header):
		<ul>
			<li><strong>Referenced Bearer</strong></li>
			<li><strong>JWT Bearer Access Token</strong></li>
		</ul>
	</li>
	<li><strong>MAC</strong></li>
</ul>
<p>Below is some information about the different types of access tokens, to help you decide which one to choose, or whether you should support more than one option.</p>
<p><strong>Note</strong>: If you are using an External OAuth Provider domain, the available possibilities depend on the token types your provider supports</p>
<h4>Referenced Bearer</h4>
<p>A short random token that uniquely identifies the grant, sent as-is in the API request, in the Authorization header. If you enable this token type, you can specify the length of the bearer access token that will be generated. A longer token is stronger. Default: 40. </p>
<p>Referenced Bearer tokens and JWT bearer access tokens are similar, but validating a Referenced Bearer token requires a round trip to the OAuth provider to validate the bearer token and to obtain the scope and the user's claims.
</p>
<p>For more information, see <a href="#should_i_choose_reference_bearer_or_jwt_bearer">Should I choose Referenced Bearer or JWT Bearer Access token?</a></p>
<h4> JWT Bearer Access Token</h4>
<p>An access token that uses the standard and contain all the information the resource server needs to confirm the user&rsquo;s grant to the application, sent as-is in the API request, in the Authorization header. An advantage of the Bearer access token is that the Resource Server can validate by itself without having to go back to the Authorization Server.</p>
<p>This token type provides the fastest option for security. However, a Bearer token includes more information and can be significantly longer than a Referenced Bearer token. In addition, it does not include protection against a replay attack (the nonce in the MAC token), and there is no specification governing how to check whether a specific access token has been revoked. </p>
<p>For more information, see <a href="#should_i_choose_reference_bearer_or_jwt_bearer">Should I choose Referenced Bearer or JWT Bearer Access token?</a></p>
<h4>MAC</h4>
<p>A MAC token includes a digital signature and a <a href="basics_glossary.htm#gl_nonce">nonce</a>, and is more secure than a bearer token. Use of a MAC token by a client is more complex than using a Bearer token; however, the MAC token offers non-repudiation and message replay attack prevention options to the API requests.</p>
<h4>Supporting multiple token types</h4>
<p>Supporting multiple token types requires a more complex implementation but offers users more options.</p>
<p>When you specify more than one token type, you can specify a default. You can also choose whether or not to allow users to override the default.</p>

<p><a href="#top">Back to top</a></p>



<h2 id="how_does_token_encryption_work">How does token encryption work?</h2>
<p>In general, most OAuth messages include some level of encryption, for security purposes.</p>
<p>Symmetric is a lower level of security, implemented in the platform with the app Shared Secret. Asymmetric is a higher level of security, implemented with a public/private key pair and certificate. Within those two divisions there are different levels of security according to factors such as the specific algorithm used and the length of the token.</p>
<p>Normally, encryption is a two-step process as covered below.</p>
<h4>Encryption process</h4>
<ol>
	<li>The entire message is encrypted using a symmetric encryption algorithm.</li>
	<li>For extra security, the second step is encryption of the random symmetric message key. There are three possible levels:
		<ul>
			<li><strong>Maximum security</strong>: encryption of the message key with an asymmetric encryption algorithm.</li>
			<li><strong>Less secure but still very secure</strong>: encryption of the message key with a symmetric encryption algorithm (either the same one, or a different one).</li>
			<li><strong>Least security</strong>: no encryption of the key.</li>
		</ul>
		</li>
</ol>
<h4>Decryption process</h4>
<p>Decrypting the message is an exact reversal of the encryption process:</p>
<ol>
	<li>Decryption of the message key (assuming it was encrypted).</li>
	<li>Decryption of the entire message using the decrypted message key.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="how_manage_grant_revoked_cancelled">How does the platform manage validation of the JWT access tokens in the resource server when the grant is revoked or cancelled?</h2>
<p>By default, JWT access tokens are always validated at the gateway (Network Director). The gateway periodically downloads all revoked and cancelled grants that have unexpired access tokens, and keeps this information in local memory, to be used while processing a JWT token. It can then reject JWT access tokens for grants that have been revoked or cancelled.</p>
<p>This is also true of other token types such as Referenced Bearer or MAC tokens.</p>
<p>Initially, the grant corresponding to the token is stored in local memory at the resource server, for faster processing. If a grant is modified (via workflow, revocation, or any other means), the modified grant is updated in the local memory asynchronously, via the scheduled job, which runs at an interval of 1 minute. Until that time, requests continue to be successful.</p>
<p>A possible drawback to this approach is that the JWT access token continues to be successful at the gateway until the scheduled job updates the local cache with cancelled/revoked grant information. This could mean that JWT access tokens for revoked grants could be accepted for a short period of time before they start to be rejected. The scheduled job runs at an interval of 1 minute.</p>
<p>This scenario is similar to browsers downloading the Certificate Revocation List (CRL) from the certificate authorities (CAs).</p>
<!--<p>{ATMO-15734 1/26/16}If the resource server finds the token to be invalid, processing continues as follows:</p>
<ul>
	<li><strong>For JWT tokens</strong>: If the check box to verify the grant with the Authorization Server is not checked, since all the grant information is in the token claims, the grant is processed from that information.</li>
	<li><strong>For token types other than JWT</strong>: since the grant is not in local memory, the Gateway goes to the Authorization Server for grant information.</li>
</ul>-->
<p><strong>Note</strong>: The Business Admin can configure the Akana OAuth/OIDC Provider domain to have the gateway verify JWT Access Tokens with the Authorization Server as well (Akana OAuth/OIDC Provider Domain, Tab 3, Token: <strong>Verify JWT Access Token with Authorization Server</strong>). In this scenario, validation is similar to that of the Referenced Bearer token. However, with this approach you lose a key feature of the JWT Access Token, the ability for the Resource Server to validate the token.</p>
<p><a href="#top">Back to top</a></p>



<hr class="divide_hr" />



<h2 id="related_topics">Related Topics</h2>
<div class="relatedlinks" id="cmhelp_bus_admin">
<ul>
	<li><a href="bus_admin__toc.htm">Business Admin Summary Page</a></li>
	<li><a href="bus_admin_overview.htm">Business Admin Responsibilities</a></li>
	<li><a href="bus_admin_gateways.htm">Managing Gateways</a></li>
	<li><a href="bus_admin_bus_admin.htm">Business Admins</a></li>
	<li><a href="bus_admin_dzs.htm">Managing Deployment Zones</a></li>
	<li><a href="basics_glossary.htm">Glossary of Terms</a></li>
</ul>
<ul>
	<li><a href="bus_admin_domains.htm">Domains</a></li>
	<li><a href="bus_admin_domains_eoap.htm">External OAuth Provider Domain</a></li>
	<li><a href="bus_admin_domains_akana_oauth_oidc.htm">Akana OAuth/OIDC Provider Domain</a></li>
	<li><a href="bus_admin_domains_oidc.htm">OpenID Connect Support</a></li>
	<li><a href="bus_admin_ov_pf_endtoend.htm">PingFederate Setup</a></li>
	<li><a href="bus_api_admin_forum.htm">Forum Moderation</a></li>
	<li><a href="bus_admin_licenses.htm">Licenses</a></li>
	<li><a href="bus_admin_categories.htm">Categories</a></li>
	<li><a href="bus_admin_scopes.htm">Scopes</a></li>
</ul>
<ul>
	<li><a href="bus_admin_organizations.htm">Organizations</a></li>
	<li><a href="bus_admin_org_apis.htm">Organization APIs</a></li>
	<li><a href="bus_admin_org_apps.htm">Organization Apps</a></li>
	<li><a href="bus_admin_org_root_monthly_report.htm">Monthly Report</a></li>
	<li><a href="bus_admin_org_roles.htm">Organization Security/Roles</a></li>
	<li><a href="bus_admin_org_policies.htm">Organization Policies</a></li>
	<li><a href="bus_admin_org_processes.htm">Organization Processes</a></li>
	<li><a href="bus_admin_org_models.htm">Organization Models</a></li>
	<li><a href="bus_admin_org_scripts.htm">Organization Scripts</a></li>
	<li><a href="bus_admin_export_import.htm">Export/Import</a></li>
</ul>
</div>