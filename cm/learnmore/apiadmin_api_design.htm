---
layout: page
title: Using API Designer | API Admin | Akana API Platform Help
description: Adding or Modifying an API with API Designer.
product: cm
category: learn
sub-nav-class: API Admin
weight: 2616
type: page
nav-title: Using API Designer
---
<h1 id="top">Add or Modify an API using API Designer</h1>

<p>Add or modify API design on the API Platform.</p>
<div class = "divider1"></div>



<h2 style="color: gray;">Table of Contents</h2>
<ol class="table_of_contents">
	<li><a href="#api_designer_overview">What is the API Designer?</a></li>
	<li><a href="#api_designer_how_access">How do I access the API Designer?</a></li>
	<li><a href="#api_designer_page_sections">What are the sections on the API Designer Edit page?</a></li>
	<li><a href="#api_designer_how_design">How do I design my API from scratch?</a></li>
	<li><a href="#api_designer_navigation">How do I get around in API Designer?</a></li>
	<li><a href="#api_designer_http_verbs">What HTTP verbs does the API Designer support?</a></li>
	<li><a href="#api_designer_headers_support">What headers does the API Designer support?</a></li>
	<li><a href="#api_designer_headers_set_up">How do I set up headers in API Designer?</a></li>
	<li><a href="#api_designer_media_types_support">What media types does the API Designer support?</a></li>
	<li><a href="#api_designer_media_types_default">What are default media types and how do I set them up?</a></li>
	<li><a href="#api_designer_media_types_set_up">How do I set up media types in API Designer?</a></li>
	<li><a href="#api_designer_parameters_what_types">What types of parameters can I define for an API operation?</a></li>
	<li><a href="#api_designer_parameter_add_edit">How do I add or edit a parameter for an API operation?</a></li>
	<li><a href="#api_designer_define_response">How do I define my API response?</a></li>
	<li><a href="#api_design_edit">How do I edit my API design?</a></li>
	<li><a href="#api_designer_generated_api_doc">How do I use API Designer to produce generated API doc?</a></li>
	<li><a href="#api_designer_swagger_doc_view">How do I view the Swagger representation of my API in API Designer?</a></li>
</ol>


<h4 style="color: gray;"><a href="#h_apidesigner_resources">Resources (Operations):</a></h4>


<ol class="table_of_contents">
	<li><a href="#resource_what_info">What information can I set up for an operation in API Designer?</a></li>
	<li><a href="#operation_add">How do I add a resource in API Designer?</a></li>
	<li><a href="#operation_modify">How do I modify an operation in API Designer?</a></li>
	<li><a href="#operation_delete">How do I delete an operation in API Designer?</a></li>
</ol>


<h4 style="color: gray;"><a href="#h_apidesigner_modelobjects">Model Objects:</a></h4>


<ol class="table_of_contents">
	<li><a href="#model_object_what_is_it">What is a model object?</a></li>
	<li><a href="#model_object_how_define">How do I define a model object?</a></li>
	<li><a href="#model_object_schema_designer">How do I define a model object using Schema Designer?</a></li>
	<li><a href="#model_object_schema_swagger_json">How do I define a model object by writing or pasting Swagger JSON?</a></li>
	<li><a href="#model_object_add">How do I define a model object as a request or response parameter?</a></li>
	<li><a href="#model_object_assign">How do I assign a model object definition to an operation?</a></li>
	<li><a href="#model_object_modify">How do I modify a model object definition in API Designer?</a></li>
	<li><a href="#model_object_delete">How do I delete a model object definition in API Designer?</a></li>
</ol>


<h4 style="color: gray;"><a href="#h_apidesigner_tags">Tags:</a></h4>


<ol class="table_of_contents">
	<li><a href="#swagger_tag_define">What is a Swagger tag?</a></li>
	<li><a href="#swagger_tag_add">How do I add a tag to my API Swagger definition in the API Designer?</a></li>
	<li><a href="#swagger_tag_assign">How do I assign tags to an operation in the API Designer?</a></li>
</ol>



<div class = "divider1"></div>



<h2 id="api_designer_overview">What is the API Designer?</h2>
<p>Once you've created your API, you can view or modify the API details using the API Designer. This tool provides a comprehensive, intuitive interface for adding or modifying your API. </p>
<p>In the API Platform, find your API and then click <strong>Details</strong> to view the API Designer, as shown below (Default Theme).</p>
<p><img src="assets/api_designer_view.jpg" alt="API Designer, View mode" /></p>
<p>Click <strong>Edit</strong> to:</p>
<ul>
	<li>Import an API description document.</li>
	<li>Add, modify, or delete resources (operations, methods).</li>
	<li>For each resource, specify:
		<ul>
			<li>Path</li>
			<li>HTTP verb (HTTP POST, PUT, GET, and DELETE; in addition, you can also use OPTIONS, HEAD, and PATCH)</li>
			<li>OperationID (for example, getPet)</li>
			<li>Summary (for example, <strong>Returns information about a pet</strong>)</li>
			<li>Description</li>
			<li>Parameters</li>
			<li>Responses</li>
			<li>Media types</li>
		</ul>
	</li>
	<li>Add, modify, or delete model objects referenced in request or response messages. For each model object, specify:
		<ul>
			<li>Name</li>
			<li>Model object definition</li>
		</ul>
	</li>
	<li>Define Swagger tags for the API, that you can then assign to each operation. See <a href="#swagger_tag_define">What is a Swagger tag?</a></li>
</ul>
<p>As you add and modify information, operations and model object definitions are displayed in a summary format for easy review.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="api_designer_how_access">How do I access the API Designer?</h2>
<p>The Designer for your API is available from the left menu bar, via the API's <strong>Details</strong> page.</p>
<p>The <strong>Details</strong> page shows the summary view. To add, change, or delete values as part of the API design, you'll need to go into <strong>Edit</strong> mode.</p>
<p>Any information that was already added as part of the API definition is displayed in the following structure:</p>
<ul>
	<li>Top pane, tabs:
		<ul>
			<li><strong>Editor</strong>: View and edit the API design</li>
			<li><strong>Swagger</strong>: View the API design in Swagger 2.0 format.</li>
<!--			<li><strong>RAML</strong>: View the API design in RAML 0.8 format (not yet supported)</li>-->
		</ul>
	</li>
	<li>Middle pane: <strong>Resources</strong>. Here, you can add, edit, or delete operations associated with the API.</li>
	<li>Bottom pane: <strong>Definitions</strong>. Here, you can add, edit, or delete model object definitions associated with the operations.</li>
</ul>
<p>For an example, see <a href="#api_designer_navigation">How do I get around in API Designer?</a></p>
<p></p>

<h4 id="proc_impl_add">To access the API Designer for editing an API</h4>
<ol>
	<li>Log in to the Akana API Platform and go to the overview page for your API.</li>
	<li>From the left menu bar, choose <strong>Details</strong>. The summary of the API design is displayed on the Details page.</li>
	<li>In the Design section, click <strong>Edit</strong> to go into the API Designer.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="api_designer_page_sections">What are the sections on the API Designer Edit page?</h2>
<p>When you click <strong>Edit</strong> in the Design section of the API Details page, you're in the API Designer. Here, you can craft your API.</p>
<p>Below is a summary of the sections of the API Designer, with examples and links to additional information about that section. </p>
<p>The sections are:</p>
<ul>
	<li><a href="#apidesigner_resources">Resources</a></li>
	<li><a href="#apidesigner_models">Models</a></li>
	<li><a href="#apidesigner_responses">Responses</a></li>
	<li><a href="#apidesigner_tags">Tags</a></li>
	<li><a href="#apidesigner_settings">Settings</a></li>
</ul>

<h4 id="apidesigner_resources">Resources section</h4>
<p><img src="assets/apidesigner_1_resources.jpg" alt="API Designer Edit mode, Resources section" /></p>
<p>Here, you can add, modify, and delete API operations and all details associated with them; for example, parameters and response codes.</p>
<p>See <a href="#operation_add">How do I add a resource in API Designer?</a></p>

<h4 id="apidesigner_models">Models section</h4>
<p><img src="assets/apidesigner_2_models.png" alt="API Designer Edit mode, Models section" /></p>
<p>Here, you can add, modify, and delete model objects, that can then be associated with one or more operations (resources) in your API.</p>
<p>Version 2019.1.2 and later: The Sample column shows an example of the model object.</p>
<p>See <a href="#model_object_what_is_it">What is a model object?</a></p>


<h4 id="apidesigner_responses">Responses section</h4>
<p>If you create an API from an imported Swagger document that includes root-level definitions for API responses, during import the responses are placed in every operation that references them. Even in the Swagger representation, in the Swagger tab of the API Designer, the responses are displayed inline for each operation that references them.</p>
<p>The API Designer user interface includes a <strong>Responses</strong> section, as shown below. However, you can't add, modify, or delete root-level response definitions in the API Designer. You'd need to modify them in the external Swagger document and then re-import the file.</p>
For more information, see <a href="apiadmin_a_d_d_support.htm#swagger_responses_root">How does the platform support Swagger responses defined at the root level?</a>
<p><img src="assets/apidesigner_3_responses.jpg" alt="API Designer Edit mode, Responses section" /></p>
<p>For more information about defining responses at the root level in Swagger, refer to the applicable section of the OpenAPI (Swagger) specification: <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#responsesDefinitionsObject" title="Link to spec for Swagger response object" target="_blank">Responses Definitions Object</a>.</p>

<h4 id="apidesigner_tags">Tags section</h4>
<p><img src="assets/apidesigner_3_tags.jpg" alt="API Designer Edit mode, Tags section" /></p>
<p>Here, you can add, modify, and delete tags&#8212;text labels that you can then assign to operations in your API to group them in the generated API documentation.</p>
<p>See <a href="#swagger_tag_define">What is a Swagger tag?</a></p>

<h4 id="apidesigner_settings">Settings section</h4>
<p><img src="assets/apidesigner_4_settings.jpg" alt="API Designer Edit mode, Settings section" /></p>
<p>Here, you can define default media types for all operations in your API.</p>
<p>See <a href="#api_designer_media_types_default">What are default media types and how do I set them up?</a></p>
<p><a href="#top">Back to top</a></p>



<h2 id="api_designer_how_design">How do I design my API from scratch?</h2>
<p>If you're designing the API from scratch in the platform, it's best to first gather the information about the API definition. However, you can start the API definition and save it at any point.</p>
<p>To complete the design task, you'll need information such as:</p>
<p><strong>Vital:</strong></p>
<ul>
	<li>Resource (operation) definitions, including HTTP verb and URL.</li>
	<li>Request and response media types</li>
	</ul>
<p><strong>Ideal (for generated API documentation and full-featured Test Client):</strong></p>
<ul>
	<li>Parameters</li>
	<li>Request headers</li>
	<li>Responses</li>
	<li>Model object definitions that are sent in the request and response</li>
</ul>
<p>For instructions, see <a href="apiadmin_api_add.htm#how_do_i_add_an_api_from_scratch">How do I add an API by designing from scratch?</a></p>
<p><strong>Note</strong>: If you have an API description document, you can use that rather than designing from scratch. The platform reads in the information and displays it; you can then review and modify if needed.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="api_designer_navigation">How do I get around in API Designer?</h2>
<p>In the API Designer <strong>Edit</strong> window, from the <strong>Resources</strong> summary view, you can click in the bar for each operation, on the right, to view/edit details about a specific operation, as shown below.</p>
<h4 id="api_designer_summary_view">API Designer Summary View</h4>
<p><img src="assets/api_designer_summary.jpg" alt="API Designer summary view" /></p>
<h4 id="api_designer_expanded_view">API Designer Expanded View</h4>
<p>The panel expands to provide a detailed view of the operation, along with Add, Edit, and Delete capabilities for various values, as shown below:</p>
<p><img src="assets/api_designer_expanded.jpg" alt="API Designer" /></p>
<p>The numbers above correspond to items listed below. The expanded view allows you to:</p>
<ol>
	<li>Delete the operation.</li>
	<li>Edit metadata about the operation: path, HTTP verb, operation ID, summary, and description.</li>
	<li>Collapse the view.</li>
	<li>Add, edit, or delete parameters, including parameter name, description type, and data type (includes custom headers).</li>
	<li>Add, edit, or delete response information, such as HTTP code, description, data type, and/or model object definitions.</li>
	<li>Specify one or more media types for the request and response headers, including custom headers if needed.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="api_designer_http_verbs">What HTTP verbs does the API Designer support?</h2>
<p>As well as HTTP <strong>POST</strong>, <strong>PUT</strong>, <strong>GET</strong>, and <strong>DELETE</strong> for add, modify, read, and delete activities, the API Designer supports the following additional HTTP verbs:</p>
<ul>
	<li><strong>OPTIONS</strong></li>
	<li><strong>HEAD</strong></li>
	<li><strong>PATCH</strong></li>
</ul>
<p>The API Designer provides maximum flexibility in supporting a wide selection of HTTP verbs, even those that are used less frequently.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="api_designer_headers_support">What headers does the API Designer support?</h2>
<p>The API Designer supports Content-Type and Accept headers for request and response media types.</p>
<p>In addition, you can:</p>
<ul>
	<li>Specify a default header for the entire API. You can then use the API Default check box rather than specifying media types for each operation.</li>
	<li>Define a custom header by adding a parameter and specifying that it is a header parameter.</li>
	</ul>
<p>For details, see below.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="api_designer_headers_set_up">How do I set up headers in API Designer?</h2>
<p>How you set up headers depends on what header you're using:</p>
<ul>
	<li><strong>To define one or more Content-Type or Accept headers, with standard or custom values</strong>: Set values for a specific operation in the <strong>Media Types</strong> section. See <a href="#api_designer_media_types_set_up">How do I set up media types in API Designer?</a></li>
	<li><strong>To set up a custom header</strong>: For a specific operation, in the <strong>Parameters/Parts</strong> section, define a parameter as a header: see <a href="#api_designer_parameter_add_edit">How do I add or edit a parameter for an API operation?</a></li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="api_designer_media_types_support">What media types does the API Designer support?</h2>
<p>The API Designer supports all media types that might be needed for request and response headers.</p>
<p>In the image below, the first two sections show <strong>API Default</strong> selected and <strong>API Default</strong> cleared but <strong>Any</strong> selected. Of course, the UI only offers choices for request and response. The two sections on the right show how the options change when you select or clear options.</p>
<p><img src="assets/api_designer_media_types.jpg" alt="API Designer: media types" /></p>
<p>You can:</p>
<ul>
	<li><strong>Use the default media type or types for the API</strong>, as specified at the bottom of the API Designer's Edit page. You can use this shortcut to streamline setup of media types.</li>
	<li><strong>Specify commonly-used media types</strong>: check one or more check boxes for media types such as application/json and application/xml.</li>
	<li><strong>Add one or more custom media types</strong>: check the <strong>Custom</strong> box and define the value. To add multiple custom media types, use a comma separator.</li>
	<li><strong>Allow any media types</strong>: To set the header value to <strong>*/*</strong>, check the <strong>Any</strong> box.</li>
<!--	<li><strong>Specify that the operation uses default media types defined for the API</strong>: check <strong>API Default</strong></li>-->
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="api_designer_media_types_default">What are default media types and how do I set them up?</h2>
<p>The Akana API platform allows you to specify a default media type for requests, and one for responses.</p>
<p>When you specify default media types for an API, the default is applied to each operation, unless you change it.</p>
<p>Particularly when you are designing an API from scratch, and when there are many operations, specifying default media types can save you quite a bit of time in specifying media types for each operation.</p>
<p>Essentially, you should define the most common scenario as the default. Then, you'll only need to remove the default, specifying one or more specific media types, for those operations that are exceptions to the most common scenario.</p>

<h4>To set up default media types for an API</h4>
<ol>
	<li>Log in to the Akana API Platform and go to the overview page for your API.</li>
	<li>From the left menu bar, choose <strong>Details</strong>. The summary of the API design is displayed on the Details page.</li>
	<li>In the Design section, click <strong>Edit</strong> to go into the API Designer.</li>
	<li>At the bottom of the page, in the <strong>Settings</strong> section, click the <strong>Default Media Types</strong> drop-down, as shown below, and specify default values for request and response.
	<p><img src="assets/apidesigner_4_settings.jpg" alt="API Designer Edit mode, Settings section" /></p></li>
	<li>Click <strong>Save</strong>.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="api_designer_media_types_set_up">How do I set up media types in API Designer?</h2>
<p>In API Designer, you set up the request and response media types as part of the definition of each operation.</p>
<p>If you provide an API description document, the information is read in from the API description file. You can then modify if needed.</p>
<h4>To add or modify media types for an API operation</h4>
<ol>
	<li>Log in to the Akana API Platform and go to the overview page for your API.</li>
	<li>From the left menu bar, choose <strong>Details</strong>. The summary of the API design is displayed on the Details page.</li>
	<li>In the Design section, click <strong>Edit</strong> to go into the API Designer.</li>
	<li>On the Resources list, find the operation. On the right, expand the view. Expanded view is shown in <a href="#api_designer_expanded_view">API Designer Expanded View</a> above.</li>
	<li>In the <strong>Media Types</strong> section, add or modify as needed:
<ul>
<!--			<li>Check or clear the API Default check box</li>-->
			<li>To use the default media type specified for the API, choose <strong>API Default</strong></li>
			<li>To allow any media type, choose <strong>Any</strong></li>
			<li>Check or clear check boxes for specific media types.</li>
			<li>To add a custom media type, click <strong>Custom</strong> and fill in the media type name and value. To add multiple custom media types, use a comma separator.</li>
		</ul>
	</li>
	<li>Click <strong>Save</strong>.</li>
	<li>Before you exit the API Designer, remember to click <strong>Save</strong>. If you don't save in the API Designer Edit window, the changes are not saved.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="api_designer_parameters_what_types">What types of parameters can I define for an API operation?</h2>
<p>In API Designer, you can define all types of parameters:</p>
<ul>
	<li>Path</li>
	<li>Query</li>
	<li>Header</li>
	<li>Body</li>
	<li>Form data</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="api_designer_parameter_add_edit">How do I add or edit a parameter for an API operation?</h2>
<p>You can define parameters from scratch or add, modify, or delete parameters that were added from scratch or were part of an API description document.</p>


<h4 id="proc_designer_add_modify_parameter">To add or edit parameters for an API operation</h4>
<ol>
	<li>Log in to the Akana API Platform and go to the overview page for your API.</li>
	<li>From the left menu bar, choose <strong>Details</strong>. The summary of the API design is displayed on the Details page.</li>
	<li>In the Design section, click <strong>Edit</strong> to go into the API Designer.</li>
	<li>On the Resources list, find the operation. On the right, click the arrow to expand the view as shown in <a href="#api_designer_expanded_view">API Designer Expanded View</a>. Any existing parameters are displayed. An example is shown below.
	<p><img src="assets/api_designer_parameters.jpg" alt="API Designer: Operation parameters" /></p></li>
	<li>Add or modify parameters as needed:
		<ul>
			<li>To add a new parameter, click <strong>Add Parameter</strong>. In the Add Parameter dialog, add or change values as needed and click <strong>Finish</strong>. For information on field values, see <a href="#fieldvalues_parameter_add_edit">Add/Edit Parameter Dialog: Field Values</a> below.</li>
			<li>To modify an existing parameter, find the parameter and click <strong>Edit</strong> (pencil icon). In the Edit Parameter dialog, add or change values as needed and click <strong>Finish</strong>. For information on field values, see <a href="#fieldvalues_parameter_add_edit">Add/Edit Parameter Dialog: Field Values</a> below.</li>
		</ul>
	</li>
	<li>Click <strong>Finish</strong>.</li>
	<li>Before you exit the API Designer, remember to click <strong>Save</strong>. If you don't save in the API Designer Edit window, the changes are not saved.</li>
</ol>

<h4 id="fieldvalues_parameter_add_edit">Add/Edit Parameter Dialog: Field Values</h4>
<p>The Add Parameter/ Edit Parameter dialog provides the following:</p>
<dl>
	<dt>Design/Source tab</dt>
	<dd>Design tab allows you to enter values; Source tab allows you to preview the parameter format represented as Swagger 2.0.</dd>
	<dt>Name</dt>
	<dd>A short name for the parameter.</dd>
	<dt>Description</dt>
	<dd>A short description for the parameter. You can use Markdown for formatting on this field; click the Preview tab to view the Markdown as it will be displayed to users.</dd>
	<dt>Type</dt>
	<dd>Choose the parameter type. Valid values: <strong>path</strong>, <strong>query</strong>, <strong>header</strong>, <strong>body</strong>, or <strong>formData</strong>.</dd>
	<dt>Required</dt>
	<dd>Check the box if the parameter is required.</dd>
	<dt>Default Value</dt>
	<dd>If desired, specify a default value for the parameter.</dd>
	<dt>Allow Empty Value</dt>
	<dd>If the parameter can be included with no value provided, check the box.</dd>
	<dt>Data Type/Schema</dt>
	<dd>Specify the data type for the parameter. The list of available data types depends on the parameter type:
		<ul>
		<li><strong>string</strong>: Valid for all parameter types.</li>
		<li><strong>number</strong>: Valid for all parameter types.</li>
		<li><strong>integer</strong>: Valid for all parameter types.</li>
		<li><strong>boolean</strong>: Valid for all parameter types.</li>
		<li><strong>array</strong>: Valid for Query, Header, and Form Data parameter types only. If you choose Array, specify the format (<strong><a href="basics_glossary.htm#gl_csv">csv</a></strong>, <strong><a href="basics_glossary.htm#gl_ssv">ssv</a></strong>, <strong><a href="basics_glossary.htm#gl_tsv">tsv</a></strong>, <strong><a href="basics_glossary.htm#gl_pipes">pipes</a></strong>, or <strong>multi</strong>).</li>
		<li><strong>file</strong>: Valid for Form Data parameter type only.
		<p><strong>Add New</strong>: If the parameter type is Body, you can also choose <strong>Add New</strong> to add a new model object definition, which you can then use for the data type. For more information on adding a new model object, see <a href="#model_object_add">How do I define a model object as a request or response parameter?</a></p>
		<p>If you choose an existing model object, the schema is displayed. <strong>Version 2019.1.2</strong>: the sample is displayed if a sample is defined.</p>
		</li>
	</ul></dd>
	<dt>Format</dt>
	<dd>Choose a format from the drop-down list, or leave as None for no format constraints. Valid values depend on the data type, as follows:
<ul>
	<li><strong>string</strong>: byte, binary, date, date-time, password</li>
	<li><strong>number</strong>: float, double</li>
	<li><strong>integer</strong>: int32, int64</li>
	<li><strong>array</strong>: string, number, integer, boolean</li>
</ul></dd>
	<dt>Minimum Length/Maximum Length</dt>
	<dd>String data type only: Specify the minimum and maximum length for the parameter.</dd>
	<dt>Minimum/Maximum</dt>
	<dd>Number and Integer data types only: Specify the minimum and maximum values for the parameter.</dd>
	<dt>Minimum Items/Maximum Items</dt>
	<dd>Array data type only: specify the minimum/maximum number of items that can be in the array. Then specify, for the array, the data type, format, and minimum/maximum values.</dd>
</dl>
<p><a href="#top">Back to top</a></p>



<h2 id="api_designer_define_response">How do I define my API response?</h2>
<p>In the API Designer, you can define valid responses for your API, including defining any information returned in a successful response and any error scenarios. This information becomes part of the API documentation displayed to your users.</p>
<p>In the API Designer Edit window, find the operation and expand it to view the details.</p>
<p>In the <strong>Responses</strong> section, click <strong>Add Response</strong>, as shown below.</p>
<p><img src="assets/api_designer_response.jpg" alt="API Designer: response messages" /></p>
<p>You can also modify (pencil icon) or delete (<strong>X</strong> icon) an existing response.</p>
<p>In the <strong>Add Response</strong> / <strong>Edit Response</strong> dialog box you can specify, or modify, the following:</p>
<ul>
	<li><strong>HTTP Status Code</strong>: Choose from a list of valid HTTP codes; for example, 200.</li>
	<li><strong>Media Types</strong>: Choose from the list of valid media types; for example, application/json, text/plain, image/jpeg.</li>
	<li><strong>Description</strong>: Add descriptive information about the response.</li>
	<li><strong>Data Type</strong>: Choose an existing value from the drop-down list. The list includes:</li>
	<li>Basic data types such as string, number, and boolean.
		<ul>
		<li>Basic data types such as string, number, and boolean.</li>
		<li>array: if you choose array you'll also need to define the data type for the array.</li>
		<li>Model objects&nbsp;that are available for selection. If you choose an existing model object, the schema is displayed. Version 2019.1.2: the sample is displayed if a sample is defined.</li>
	</ul>
	</li>
	</ul>
<p>You can also:</p>
<ul>
	<li>On the Data Type field, click <strong>Add New</strong> to define a new model object. For more information, see <a href="#model_object_how_define">How do I define a model object?</a></li>
	<li>Click the Swagger tab to view the Swagger 2.0 representation of the response.</li>
</ul>
<p>When done, click <strong>Finish</strong>.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="api_design_edit">How do I edit my API design?</h2>
<p>There are two ways to edit the technical details of your API design:</p>
<ul>
	<li>By hand, by editing one or more values</li>
	<li>By uploading a revised API description document</li>
</ul>
<p><strong>Note</strong>: When you modify the API design, any existing API implementations are automatically updated with the design changes.</p>

<h4 id="proc_api_design_edit_byhand">To edit API design by hand</h4>
<ol>
	<li>Log in to the Akana API Platform and go to the overview page for your API.</li>
	<li>From the left menu bar, choose <strong>Details</strong>.</li>
	<li>In the Design section, click <strong>Edit</strong> to go into the API Designer.</li>
	<li>Modify API details as needed. You can add, modify, or delete the following for each operation:
		<ul>
			<li><strong>Operation metadata</strong>: Click Edit (pencil icon). Here you can specify the path, HTTP verb, and a unique ID for the operation, and you can add a summary and longer description. The Description field supports <a href="basics_glossary.htm#gl_markdown">Markdown</a>, so you can add formatting. For help with Markdown, if needed, click the help icon on the field.</li>
			<li><strong>Operation details</strong>: Click the Expand icon (<strong>...</strong>) to view the operation details. Add, change, or delete parameters; add, change, or delete response HTTP codes and descriptions; modify request and response media types as needed.</li>
		</ul>
	</li>
	<li>Click <strong>Finish</strong> to save changes and close the API Designer.</li>
</ol>


<h4 id="proc_api_design_edit_a_d_d">To edit API design by uploading a revised API description document</h4>
<ol>
	<li>Log in to the Akana API Platform and go to the overview page for your API.</li>
	<li>From the left menu bar, choose <strong>Details</strong>.</li>
	<li>In the <strong>Design</strong> section, click <strong>Edit</strong> to go into the API Designer.</li>
	<li>At the top right, click <strong>Import Swagger/RAML/WSDL/WADL</strong>.</li>
	<li>At the Import page, there are two ways you can provide the updated API description document:
		<ul>
			<li><strong>URL</strong>: Provide the full URL, including protocol. If the URL requires authentication, provide your username and password.</li>
			<li><strong>File</strong>: Browse to the location of the file and upload. If the file includes multiple services, you'll be shown a list of options for the service to import; choose the one you want.</li>
		</ul>
	</li>
	<li>Click <strong>Save</strong>. The API design is updated and displayed.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="api_designer_generated_api_doc">How do I use API Designer to produce generated API doc?</h2>
<p>As you build out the details of your API in the API Designer, or modify the design from an imported API description document, you can view the generated API doc at any point. In API Designer, in edit mode, just click the Swagger tab at the top of the page to view the Swagger description document for the API.</p>
<p>To view the generated API documentation as your users will see it, click <strong>Cancel</strong> or Finish to exit from the API Designer to the API Overview page. Then, on the left menu bar, click <strong>Documentation</strong>. The API documentation is generated dynamically from the API design.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="api_designer_swagger_doc_view">How do I view the Swagger representation of my API in API Designer?</h2>
<p>You can create your API by uploading a Swagger, RAML, WSDL, or WADL API description document, update it at any time by uploading a new description document, or create/edit your API via the API Designer user interface.</p>
<p>In any of these scenarios, you can view the Swagger 2.0 representation of your API in the API Designer window at any point, as shown below.</p>
<p><img src="assets/api_designer_swagger_view.jpg" alt="API Designer, view Swagger representation" /></p>
<p>If you make changes in the Designer window at any point, the Swagger representation is updated immediately. The changes are not saved until you complete your editing task and click <strong>Save</strong> in the Designer window; however, in the meantime, you can check your API definition by reviewing the Swagger representation.</p>
<p>You can also copy the Swagger JSON at any point if you want to save out the API design.</p>
<h4>To view the Swagger representation of an API in API Designer</h4>
<ol>
	<li>Log in to the Akana API Platform and go to the overview page for your API.</li>
	<li>From the left menu bar, choose <strong>Details</strong>. The summary of the API design is displayed in the Details page.</li>
	<li>Click <strong>Edit</strong>. The API details are displayed and can be edited in the API Designer.</li>
	<li>At the top of the window, click the Swagger tab to view the Swagger 2.0 JSON file.</li>
</ol>
<p><a href="#top">Back to top</a></p>




<div class = "divider1"></div>
<h2 id="h_apidesigner_resources">Resources (Operations):</h2>





<h2 id="resource_what_info">What information can I set up for an operation in API Designer?</h2>
<p>For each operation, you can set up two basic types of information:</p>
<ul>
	<li>Metadata about the operation, such as name and description.</li>
	<li>Technical details associated with the operation, such as parameters, responses, and media types.</li>
</ul>
<p>When you click Add Resource to add one or more operations, you first set up the basic definition:</p>
<ul>
	<li>Path</li>
	<li>One or more HTTP verbs</li>
</ul>
<p>Once the basic definition is saved you can add details:</p>
<p><strong>To add metadata</strong>, click the pencil icon and add or change:</p>
<ul>
	<li>Path</li>
	<li>HTTP verb</li>
	<li>Operation ID (a unique ID for the operation, user-defined)</li>
	<li>A brief summary</li>
	<li>A longer description, if desired.</li>
</ul>
<p><strong>To add technical details associated with the operation</strong>, click the <strong>More</strong> icon (<strong>...</strong>) to view operation details, and enter:</p>
<ul>
	<li>One or more parameters, including:
		<ul>
			<li>Name</li>
			<li>Description</li>
			<li>Type</li>
			<li>Whether required / if not required, a default value, used if the user doesn't specify a value</li>
			<li>Whether empty values are allowed</li>
			<li>Data type</li>
			<li>Format</li>
			<li>Minimum length</li>
			<li>Maximum length</li>
		</ul>
	</li>
	<li>One or more response types, including:
		<ul>
			<li>HTTP code</li>
			<li>Description</li>
			<li>Data Type: string, number, boolean, integer, or array; for array, a data type. You can also add a custom scheme; choose <strong>Add New</strong>. See <a href="#model_object_how_define">How do I define a model object?</a></li>
		</ul>
	</li>
	<li>Request and response media types, including custom media types if needed.</li>
	</ul>
<p>When you're satisfied with the API design, add or review implementations. From the API Details page, on the left menu bar, click <strong>Implementations</strong>.</p>
<p><a href="#top">Back to top</a></p>




<h2 id="operation_add">How do I add a resource in API Designer?</h2>
<p>You can design your API from scratch, adding details about each operation manually.</p>
<p>You can also import an API description document; in this case, operations are added automatically in API Designer. You can still add additional operations as needed, or import an updated API description document at any time.</p>
<h4>To add a resource to an API version in API Designer</h4>
<ol>
	<li>Log in to the Akana API Platform and go to the overview page for your API.</li>
	<li>From the left menu bar, choose <strong>Details</strong>. The summary of the API design is displayed on the Details page.</li>
	<li>In the Design section, click <strong>Edit</strong> to go into the API Designer.</li>
	<li>Click <strong>Add Resource</strong>.</li>
	<li>In the Add Resource dialog, add basic information about the operation:
		<ul>
			<li><strong>Path</strong></li>
			<li><strong>Verb</strong>: one or more HTTP verbs for the path. If you check more than one verb, multiple operations are added.</li>
		</ul>
		</li>
		<li>Click <strong>Finish</strong>. The operation is displayed on the summary list.</li>
	<li>Optional: to add more detailed information about the operation, click <strong>Edit</strong> and add or change one or more of the values. See <a href="#operation_modify">How do I modify an operation in API Designer?</a> below.</li>
	<li>Before you exit the API Designer, remember to click <strong>Save</strong>. If you don't save in the API Designer Edit window, the changes are not saved.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="operation_modify">How do I modify an operation in API Designer?</h2>
<p>You can modify an operation at any point. API documentation is generated based on the latest API design, so the documentation is updated automatically.</p>
<p>Follow the steps below.</p>
<h4>To modify an operation in API Designer</h4>
<ol>
	<li>Log in to the Akana API Platform and go to the overview page for your API.</li>
	<li>From the left menu bar, choose <strong>Details</strong>. The summary of the API design is displayed on the Details page.</li>
	<li>In the Design section, click <strong>Edit</strong> to go into the API Designer.</li>
	<li>Find the operation on the list, click to expand to the operation details, and then click <strong>Edit</strong> (pencil icon).</li>
	<li>Change one or more of the following values, as needed:
	<ul>
		<li><strong>Path</strong></li>
		<li><strong>Verb</strong></li>
		<li><strong>Operation ID</strong>: for example, getPet. Displays in the summary table.</li>
		<li><strong>Summary</strong>: A short description. For example: returns information about a specific pet. Displays in the summary table and the API doc.</li>
		<li><strong>Description</strong>: A longer description of what the operation does. Displays at the top of the operation summary and also in the API doc. You can use Markdown in this field, as shown below.
<p><img src="assets/api_designer_edit_resource.jpg" alt="Edit resource dialog box" /></p>
		</li>
		</ul></li>
	<li>Click <strong>Finish</strong>.</li>
	<li>Before you exit the API Designer, remember to click <strong>Save</strong>. If you don't save in the API Designer Edit window, the changes are not saved.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="operation_delete">How do I delete an operation in API Designer?</h2>
<p>You can delete an operation at any point. When you delete an operation, any activities relating to the operation, such as process configuration or OAuth scope mapping, are deleted. This action is not reversible. </p>
<h4>To delete an operation in API Designer</h4>
<ol>
	<li>Log in to the Akana API Platform and go to the overview page for your API.</li>
	<li>From the left menu bar, choose <strong>Details</strong>. The summary of the API design is displayed on the Details page.</li>
	<li>In the Design section, click <strong>Edit</strong> to go into the API Designer.</li>
	<li>Find the operation on the list and click Delete (<strong>X</strong> icon).</li>
	<li>At the confirmation message, click <strong>OK</strong>. The operation is deleted.</li>
	<li>Before you exit the API Designer, remember to click <strong>Save</strong>. If you don't save in the API Designer Edit window, the changes are not saved.</li>
</ol>
<p><a href="#top">Back to top</a></p>




<div class = "divider1"></div>
<h2 id="h_apidesigner_modelobjects">Model Objects:</h2>




<h2 id="model_object_what_is_it">What is a model object?</h2>
<p>Your API probably includes one or more <a href="basics_glossary.htm#gl_modelobject">model objects</a> that might be used in the request messages for POST or PUT operations and in the responses for GET operations. For example, an API associated with movie information might have a JSON model object called Movie that includes information such as release date, principal actors, director, producer, and title. In the Swagger Petstore API, Pet is a model object that includes values such as ID, Name, and Status.</p>
<p>API Designer lets you add a model object definition in the form of a schema that includes, within the standard JSON format, the parameter names and additional information such as data types and possible values. The API Platform uses the information you set up to generate accurate, detailed API documentation that will help app developers to use your API. You can also include examples.</p>
<p>Model object definitions must be constructed based on the Swagger version 2.0 JSON specification at <a href="http://petstore.swagger.io/v2/swagger.json" target="_blank">http://petstore.swagger.io/v2/swagger.json</a>.</p>
<p>Once you've added model object definitions for your API, the platform's generated documentation for your API includes all the information users will need to construct request messages, and understand response messages, for your API.</p>
<p>For information about adding model objects for your API, see <a href="#model_object_how_define">How do I define a model object?</a> below.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="model_object_how_define">How do I define a model object?</h2>
<p>For general information about model objects, see <a href="#model_object_what_is_it">What is a model object?</a> above.</p>
<p>When you add a complete definition of each model object that's part of your API, constructing the definition per the Swagger 2.0 JSON specification (<a href="http://petstore.swagger.io/v2/swagger.json" target="_blank">http://petstore.swagger.io/v2/swagger.json</a>), the platform uses this information to generate accurate, interactive API documentation to help users understand how your API works.</p>
<p>Before you start defining model objects on the platform, it's a good idea to make a list of all the model objects that your API uses in request and response messages. If there are nested model objects, list those separately, and include them <strong>earlier</strong> on the list. When you define a model object, it's best to make sure that any nested objects have already been defined, so that you can reference them.</p>
<p>There are two ways to add a model object in the developer portal user interface:</p>
<ul>
	<li>Using the Schema Designer wizard that helps guide you through defining the parameters and their data types, and helps make sure your JSON is valid. See <a href="#model_object_schema_designer">How do I define a model object using Schema Designer?</a> below. For a video overview, see <a href="assets/vid_api_designer_define_model_objects_ui.mp4" target="_blank">Define model objects using Schema Designer</a>.</li>
	<li>By constructing or pasting the model object definitions in raw JSON and then saving. See <a href="#model_object_schema_swagger_json">How do I define a model object by writing or pasting Swagger JSON?</a> below.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="model_object_schema_designer">How do I define a model object using Schema Designer?</h2>
<p>The developer portal API Designer includes Schema Designer, a schema editor that helps you construct JSON model objects for your API.</p>
<p>You can also view a short video overview of using the Schema Designer: see <a href="assets/vid_api_designer_define_model_objects_ui.mp4" target="_blank">Define model objects using Schema Designer</a>.</p>

<h4>To access the Schema Designer</h4>
<ol>
	<li>Log in to the Akana API Platform and go to the overview page for your API.</li>
	<li>From the left menu bar, choose <strong>Details</strong>. The summary of the API design is displayed on the Details page.</li>
	<li>Click <strong>Edit</strong> to go into the API Designer.</li>
	<li>In the Models section, click one of the following: 
		<ul>
			<li>To add a new model object: click <strong>Add Model</strong>. The <strong>Add Model</strong> overlay appears.</li>
			<li>To edit an existing model object: find the model object on the list, and click <strong>Edit</strong> (pencil icon). The <strong>Edit Model</strong> overlay appears.</li>
		</ul>
		</li>
</ol>
<h4>To use the Schema Designer</h4>
<p>Once you're in the Schema Designer, you can use the wizard to help you construct model objects. There are two fields:</p>
<ul>
	<li><strong>Name</strong>: a unique name. Keep it short.</li>
	<li>Schema <strong>Design</strong>/<strong>Raw</strong> view:
<ul>
			<li>In <strong>Raw</strong> view, you can write or paste the JSON Swagger design. See <a href="#model_object_schema_swagger_json">How do I define a model object by writing or pasting Swagger JSON?</a></li>
			<li>In <strong>Design</strong> view, use the wizard to help you construct model objects. See below.</li>
		</ul>
	</li>
</ul>

<h4 id="model_object_ui_01_model">Example #1: Designer window for the top-level model object</h4>
<p>An example of the schema design user interface is shown below. This example is the top-level designer window for the model object.</p>
<p><img src="assets/apidesigner_model_addmodel.jpg" alt="API Designer: Add Model overlay" /></p>
<p><strong>When you add a model object, you can specify:</strong></p>
<ul>
	<li><strong>Title</strong>: make sure capitalization is correct and is used consistently throughout your Swagger document, particularly if model objects are nested (one model object referenced by another).</li>
	<li><strong>Description</strong>: A brief description of the model object. Keep it very short.</li>
	<li><strong>Type</strong>: can be <strong>Object</strong>, <strong>Array</strong>, <strong>String</strong>, <strong>Number</strong>, <strong>Integer</strong>, or <strong>Boolean</strong>. Defaults to <strong>Object</strong>. Depending on the type you choose, additional options become available. For details, see <a href="#schema_designer_type">Step 3</a> below.</li>
</ul>

<h4 id="model_object_ui_02_property">Example #2: Designer window for an individual property</h4>
<p>An example of the schema design user interface is shown below. This example shows the additional fields available depending on the <strong>Type</strong> specification.</p>
<p><img src="assets/apidesigner_model_addproperty.jpg" alt="API Designer: Add Property" /></p>

<p><strong>As you add each property, you can specify the same values as for the top-level model object plus:</strong></p>
<ul>
	<li><strong>ID</strong>: The name of the property.</li>
	<li><strong>Required</strong>: You can specify that the property is required anywhere the model object is used in the API.</li>
	<li><strong>$ref</strong>: valid if the <strong>Type</strong> value is <strong>Object</strong>. A drop-down list of valid objects defined for the API, so that you can specify which model object is referenced in the current one.</li>
	<li><strong>Format</strong>: If <strong>Type</strong> is <strong>String</strong>, <strong>Number</strong>, <strong>Integer</strong>, or <strong>Boolean</strong>, you can choose from additional values that are valid for the specified format. For example, if <strong>Type</strong> is <strong>Integer</strong>, <strong>Format</strong> can be <strong>int32</strong> or <strong>int64</strong>. For full details, see below.</li>
	<li><strong>Enum</strong>: a comma-separated series of enumerated values valid for the property.</li>
	<li><strong>Default</strong>: a default value for the property.</li>
</ul>
<h4>To add a new property to a model object in Schema Designer</h4>
<ol>
	<li>In the API Designer Edit window, click <strong>Add Model</strong>.</li>
	<li>In the <strong>Name</strong> field, provide a name for the model object.</li>
	<li>Hover over the <strong>Design</strong> tab to view the buttons, and then click <strong>Add Property</strong>. Default property content is added, including a <strong>RenameMe_xxx</strong> default property name.</li>
	<li>Click in the default property name. An overlay appears, where you can add the values for the new property:
		<ul>
			<li><strong>ID</strong> (required)</li>
			<li><strong>Title</strong> (optional)</li>
			<li><strong>Description</strong> (optional)</li>
			<li><strong>Type</strong> (defaults to <strong>Object</strong>)</li>
		</ul>
		</li>
	<li id="schema_designer_type">Provide additional values as needed. Additional fields vary according to the data type value in the Type field:
		<ul>
			<li><strong>Object</strong>: $ref: choose from the drop-down list of valid model objects. An example is shown below.
				<p><img src="assets/apidesigner_model_datatype_object.jpg" alt="Add model object, properties: Object" /></p></li>
			<li><strong>Array</strong>: When you choose <strong>Array</strong>, there are no additional options until you click <strong>Finish</strong>. Array code is then added to your JSON, and you can click in to further define the array.
				<p><img src="assets/apidesigner_model_datatype_array.jpg" alt="Add model object, properties: Array" /></p></li>
			<li><strong>String</strong>: When you choose String, you can specify a format of <strong>byte</strong>, <strong>binary</strong>, <strong>string</strong>, <strong>date</strong>, <strong>date time</strong>, or <strong>password</strong>.
				<p><img src="assets/apidesigner_model_datatype_string.jpg" alt="Add model object, properties: String" /></p></li>
			<li><strong>Number</strong>: When you choose Number, you can specify <strong>float</strong> or <strong>double</strong>, as shown below.
				<p><img src="assets/apidesigner_model_datatype_number.jpg" alt="Add model object, properties: Number" /></p></li>
			<li><strong>Integer</strong>: When you choose Integer, you can specify <strong>int32</strong> or <strong>int64</strong>, as shown below.
				<p><img src="assets/apidesigner_model_datatype_integer.jpg" alt="Add model object, properties: Integer" /></p></li>
			<li><strong>Boolean</strong>: When you choose Boolean, there are no additional options. You can specify <strong>boolean</strong> in the Format field, or leave it empty.
				<p><img src="assets/apidesigner_model_datatype_boolean.jpg" alt="Add model object, properties: Boolean" /></p></li>
			</ul>
	</li>
	<li>For types of <strong>String</strong>, <strong>Number</strong>, <strong>Integer</strong>, or <strong>Boolean</strong>, you can specify enumerated values and a default value. In the example below, a property of type <strong>String</strong> has three possible values and a default value.
		<p><img src="assets/apidesigner_model_datatype_enum_result.jpg" alt="Using Schema Designer: adding enum values" /></p>
	</li>
	<li>Click <strong>Finish</strong> to save the property definition in the Schema Designer window.</li>
	<li>When done adding properties, in the <strong>Add Model</strong>/<strong>Edit Model</strong> window, click <strong>Finish</strong>.</li>
	<li>Before you exit the API Designer, remember to click <strong>Save</strong>. If you don't save in the API Designer Edit window, the changes are not saved.</li>
</ol>
<p><strong>Note</strong>: You can also review the JSON at any point, in the <strong>Raw</strong> tab.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="model_object_schema_swagger_json">How do I define a model object by writing or pasting Swagger JSON?</h2>
<p>If you prefer not to use the Schema Designer to construct model objects, you can just write or paste the JSON in the API Designer, when adding or editing model objects.</p>
<p>To put the model object together, you'll need to start with the model object definition and add information such as data types and lists of enumerated values, if applicable, in the format specified by Swagger.</p>
<p>For some examples of model object definitions, review the Swagger version 2.0 JSON specification at <a href="http://petstore.swagger.io/v2/swagger.json" target="_blank">http://petstore.swagger.io/v2/swagger.json</a>; look at the Definitions section of the file.</p>
<p>An example from this file, for the Pet model object, is shown below, in both collapsed and expanded views.</p>
<p>Below, a collapsed view of the <strong>definitions</strong> section of the Swagger API description document where you can find the model object definitions:</p>
<p><img src="assets/swagger_definitions.jpg" alt="Definitions section of Swagger JSON file" /></p>

<p>Below is the JSON for the Pet object. This example shows the exact definition for this model object.</p>
<pre>{
  "type":"object",
  "required":[
    "name",
    "photoUrls"
  ],
  "properties":{
    "id":{
      "type":"integer",
      "format":"int64"
    },
    "category":{
      "$ref":"#/definitions/Category"
    },
    "name":{
      "type":"string",
      "example":"doggie"
    },
    "photoUrls":{
      "type":"array",
      "xml":{
        "name":"photoUrl",
        "wrapped":true
      },
      "items":{
        "type":"string"
      }
    },
    "tags":{
      "type":"array",
      "xml":{
        "name":"tag",
        "wrapped":true
      },
      "items":{
        "$ref":"#/definitions/Tag"
      }
    },
    "status":{
      "type":"string",
      "description":"pet status in the store",
      "enum":[
        "available",
        "pending",
        "sold"
      ]
    }
  }
}</pre>
<p>If you're not sure you have the right section of JSON, run it through a JSON validator. In addition, when you paste it in the user interface, the UI validates the JSON before saving.</p>
<p><strong>Some notes about the above:</strong></p>
<ul>
	<li>The definition for Pet, above, references two nested model object definitions:
		<ul>
			<li><strong>Category</strong> (line 13): $ref&quot;:&quot;#/definitions/Category</li>
			<li><strong>Tag</strong> (line 36): $ref&quot;:&quot;#/definitions/Tag</li>
		</ul>
	</li>
	<li>The definition for <strong>Name</strong> includes an example, which will be included in the generated documentation (line 17).</li>
	<li>The definition for <strong>ID</strong> includes Type and Format (lines 9&#8211;10).</li>
	<li>The definition for <strong>status</strong> includes three enumerated values (lines 42&#8211;46).</li>
</ul>
<p>Using the above example as a guide, construct the definitions for your own model objects. The Swagger JSON specification also includes other examples. </p>
<p><strong>Note</strong>: If your model object definition refers to other model objects, add the referenced objects first. Build from the bottom so that each model object does not reference any elements that haven't yet been defined. In the example above, the definition for <strong>Pet</strong> references two other model objects, <strong>Category</strong> and <strong>Tag</strong>, so it's a good idea to define those first.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="model_object_add">How do I define a model object as a request or response parameter?</h2>
<p>You can define your model objects as explained in <a href="#model_object_schema_designer">How do I define a model object using Schema Designer?</a> and <a href="#model_object_schema_swagger_json">How do I define a model object by writing or pasting Swagger JSON?</a> above. However, you can also define them on the fly:</p>
<ul>
	<li>Within the definition for a specific operation, in the Parameters section: in the Add/Edit Parameter window, in the Data Type field, choose <strong>Add New</strong>.</li>
	<li>Within the definition for a specific operation, in the <strong>Models</strong> section: in the Add/Edit Response window, in the Data Type field, choose <strong>Add New</strong>.</li>
</ul>

<h4 id="proc_model_object_add_in_request">To add a model object as a request parameter for a specific operation</h4>
<ol>
	<li>Go to the API Designer, the specific operation, and the specific parameter. For help, see <a href="#proc_designer_add_modify_parameter">To add or modify parameters for an API operation</a>.</li>
	<li>In the <strong>Add Parameter</strong> or <strong>Edit Parameter</strong> dialog, in the <strong>Type</strong> field, choose <strong>Body</strong>.</li>
	<li>In the <strong>Data Type</strong> field, choose <strong>Add New</strong>.</li>
	<li>In the <strong>Add Model</strong> box, provide the name.</li>
	<li>Click the tab for Design or Raw:
		<ul>
		<li><strong>Design</strong>: Use the Schema Designer to define the model object. For detailed instructions, see <a href="#model_object_schema_designer">How do I define a model object using Schema Designer?</a></li>
		<li><strong>Raw</strong>: Paste the model object definition. Make sure it is valid JSON. The platform validates the JSON before saving. See <a href="#model_object_schema_swagger_json">How do I define a model object by writing or pasting Swagger JSON?</a></li>
	</ul>
	</li>
	<li>Click <strong>Finish</strong> to return to the Add Parameter / Edit Parameter dialog box. The new model object definition is saved and will be available for future use by all operations, and displayed in the Definitions section of the API Designer window.</li>
	<li>Click <strong>Finish</strong> to save the parameter.</li>
</ol>

<h4 id="proc_model_object_add_in_response">To add a model object in the response for a specific operation</h4>
<ol>
	<li>Go to the API Designer, the specific operation, and the specific parameter. For help, see <a href="#proc_designer_add_modify_parameter">To add or modify parameters for an API operation</a>.</li>
	<li>In the <strong>Add Response</strong> or <strong>Edit Response</strong> dialog, in the <strong>Data Type</strong> field, choose <strong>Add New</strong>.</li>
	<li>In the <strong>Add Model</strong> box, provide the name.</li>
	<li>Click the tab for Design or Raw:
		<ul>
			<li><strong>Design</strong>: Use the Schema Designer to define the model object. For detailed instructions, see <a href="#model_object_schema_designer">How do I define a model object using Schema Designer?</a></li>
			<li><strong>Raw</strong>: Paste the model object definition. Make sure it is valid JSON. The platform validates the JSON before saving. See <a href="#model_object_schema_swagger_json">How do I define a model object by writing or pasting Swagger JSON?</a></li>
		</ul>
	</li>
	<li>Click <strong>Finish</strong> to return to the Add Response / Edit Response dialog box. The new model object definition is saved and will be available for future use by all operations, and displayed in the Definitions section of the API Designer window.</li>
	<li>Click <strong>Finish</strong> to save the response.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="model_object_assign">How do I assign a model object definition to an operation?</h2>
<p>Once you've added your model object definitions, you're ready to assign them to resources (operations).</p>
<p>Model objects might be sent in a request message&#8212;common for POST, PUT, or PATCH operations&#8212;or returned in the response message&#8212;common for GET operations as well as POST and PUT.</p>
<p>Part of defining an operation is defining both these things:</p>
<ul>
	<li><strong>Request</strong>: When defining a parameter, if the parameter type is Body you can specify a model object definition to be sent in the body of the request. See <a href="#fieldvalues_parameter_add_edit">Add/Edit Parameter Dialog: Field Values</a></li>
	<li><strong>Response</strong>: When defining a response, you can specify a model object to be returned in the response message. See <a href="#api_designer_define_response">How do I define my API response?</a></li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="model_object_modify">How do I modify a model object definition in API Designer?</h2>
<p>When model objects have been defined for your API, you can modify or delete them at any point.</p>
<p>When you make any changes to the API design, including model objects, and save the changes, the generated API documentation reflects the changes the next time the documentation is accessed.</p>
<p>There are two ways you can make changes, both in the API Designer Edit window:</p>
<ul>
	<li>Upload a new API description document: see <a href="#proc_api_design_edit_a_d_d">To edit API design by uploading a revised API description document</a>.</li>
	<li>Edit a model object: see below.</li>
</ul>
<h4>To edit a model object in the API Designer</h4>
<ol>
<li>Log in to the Akana API Platform and go to the overview page for your API.</li>
	<li>From the left menu bar, choose <strong>Details</strong>. The summary of the API design is displayed on the Details page.</li>
	<li>Click <strong>Edit</strong>. Existing model object definitions, if any, are displayed in the <strong>Models</strong> section at the bottom of the page.</li>
	<li>Find the object you want to change.</li>
	<li>On the right, click the Edit icon (pencil).</li>
	<li>In the <strong>Edit Model</strong> box, provide the name.</li>
	<li>Click the tab for Design or Raw:
		<ul>
			<li><strong>Design</strong>: Use the Schema Designer to define the model object. For detailed instructions, see <a href="#model_object_schema_designer">How do I define a model object using Schema Designer?</a></li>
			<li><strong>Raw</strong>: Paste the model object definition. Make sure it is valid JSON. The platform validates the JSON before saving. See <a href="#model_object_schema_swagger_json">How do I define a model object by writing or pasting Swagger JSON?</a></li>
			</ul>
	</li>
	<li>Click <strong>Finish</strong>.</li>
	<li>Before you exit the API Designer, remember to click <strong>Save</strong>. If you don't save in the API Designer Edit window, the changes are not saved.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="model_object_delete">How do I delete a model object definition in API Designer?</h2>
<p>When model objects definitions have been added for your API, you can modify or delete them at any point.</p>
<p>If you're deleting a model object definition, make sure it isn't referenced by other model objects.</p>
<h4>To delete a model object definition in the API Designer</h4>
<ol>
	<li>Log in to the Akana API Platform and go to the overview page for your API.</li>
	<li>From the left menu bar, choose <strong>Details</strong>. The summary of the API design is displayed on the Details page.</li>
	<li>Click <strong>Edit</strong>. Existing model object definitions are displayed in the <strong>Definitions</strong> section at the bottom of the page.</li>
	<li>Find the model object you want to delete.</li>
	<li>On the right, click the Delete icon (<strong>X</strong>).</li>
	<li>At the confirmation message, click <strong>OK</strong>. The object is deleted.</li>
	<li>Before you exit the API Designer, remember to click <strong>Save</strong>. If you don't save in the API Designer Edit window, the changes are not saved.</li>
</ol>
<p><a href="#top">Back to top</a></p>




<div class = "divider1"></div>
<h2 id="h_apidesigner_tags">Tags:</h2>




<h2 id="swagger_tag_define">What is a Swagger tag?</h2>
<p>In Swagger, a tag is a text label that you can assign to one or more operations in your API. Swagger tags allow a logical grouping of the API operations; in the API Designer, and in the generated documentation for the API, each operation that has a specific tag assigned is displayed below the tag in the API summary view.</p>
<p>If you import a Swagger API description document, either when creating your API or later, the Swagger document might already include one or more tags. An example of how Swagger tags affect the display of the API operations in API Designer is shown below. In this example, there are three tags: <strong>pet</strong>, <strong>store</strong>, and <strong>user</strong>. The tag name and description are displayed, and all operations that have that tag assigned to them are grouped below the tag.</p>
<p><img src="assets/swagger_tags.jpg" alt="Swagger tags" /></p>
<p>In this example, each operation has only one tag; however, you can assign more than one tag to an operation. As an example, if an operation has two tags, it will appear twice in the API Designer list, and in the generated API documentation; once for each tag.</p>
<p>For general information about how Swagger tags work, refer to the applicable section of the Swagger specification: <a href="http://swagger.io/docs/specification/grouping-operations-with-tags/" title="Swagger documentation about tags" target="_blank">http://swagger.io/docs/specification/grouping-operations-with-tags/</a>.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="swagger_tag_add">How do I add a tag to my API Swagger definition in the API Designer?</h2>
<p>Whether you import an API description document or you're designing your API from scratch, you can define new Swagger tags in the API Designer. If you imported a document, your API definition might already include one or more tags. You can add more, or you can modify or delete existing tags.</p>
<p>Once you've defined the tags, you can assign them to individual operations (resources) in your API.</p>

<h4 id="proc_api_design_tag_add">To define a Swagger tag in API Designer</h4>
<ol>
	<li>Log in to the Akana API Platform and go to the overview page for your API.</li>
	<li>From the left menu bar, choose <strong>Details</strong>. The summary of the API design is displayed on the Details page.</li>
	<li>In the Design section, click <strong>Edit</strong> to go into the API Designer.
		<p>For a summary of the sections in the API Designer, and an example of the Tags section, see <a href="#api_designer_page_sections">What are the sections on the API Designer Edit page?</a></p>
	</li>
	<li>In the Tags section, click <strong>Add Tag</strong>.</li>
	<li>In the <strong>Add Tag</strong> overlay, enter a name, and optionally add a brief description. An example is shown below.
	<p><img src="assets/apidesigner_tags_add.jpg" alt="Adding a new Swagger tag" /></p></li>
	<li>Click <strong>Finish</strong> to save the new tag and return to the API Designer Edit window.</li>
	<li>Before you exit the API Designer, remember to click <strong>Save</strong>. If you don't save in the API Designer Edit window, the changes are not saved.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="swagger_tag_assign">How do I assign tags to an operation in the API Designer?</h2>
<p>Once you've defined tags in the API Designer, or if you've imported a Swagger description document that already includes tags, you can assign one or more Swagger tags to individual operations (resources) in your API.</p>

<h4 id="proc_api_design_tag_assign">To assign one or more Swagger tags to a resource</h4>
<p class="apidoc_note"><strong>Note</strong>: You must define the tags before assigning them. See <a href="#proc_api_design_tag_add">To define a Swagger tag in API Designer</a>.</p>
<ol>
	<li>Log in to the Akana API Platform and go to the overview page for your API.</li>
	<li>From the left menu bar, choose <strong>Details</strong>. The summary of the API design is displayed on the Details page.</li>
	<li>In the Design section, click <strong>Edit</strong> to go into the API Designer.
		<p>For a summary of the sections in the API Designer, and an example of the Tags section, see <a href="#api_designer_page_sections">What are the sections on the API Designer Edit page?</a></p>
	</li>
	<li>On the Resources list, find the operation. On the right, click the arrow to see the expanded view, as shown in <a href="#api_designer_expanded_view">API Designer Expanded View</a>.</li>
	<li>On the right, click the <strong>Edit</strong> (pencil) icon.</li>
	<li>In the <strong>Edit Resource</strong> overlay, in the <strong>Tags</strong> field, assign one or more tags, using a comma separator, as shown below. You can also modify or remove existing tags.
		<p><img src="assets/apidesigner_tags_assign.jpg" alt="Adding a new Swagger tag" /></p>
	</li>
	<li>Click <strong>Finish</strong> to save the changes and return to the API Designer Edit window.</li>
	<li>Before you exit the API Designer, remember to click <strong>Save</strong>. If you don't save in the API Designer Edit window, the changes are not saved.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<div class = "divider1"></div>



<h2 id="related_topics">Related Topics</h2>
<div class="relatedlinks" id="api_admin"><!-- #BeginLibraryItem "/Library/relatedtopics_api_admin.lbi" -->
<ul>
	<li><a href="apiadmin_getting_started.htm">Getting Started for API Developers</a></li>
	<li><a href="apiadmin_overview.htm">API Administration: Overview</a></li>
	<li><a href="api_admin_tutorial.htm">Tutorial (API Provider)</a></li>
	<li><a href="api_admin_management.htm">API Admin Management</a></li>
	<li><a href="bus_api_admin_forum.htm">Forum Moderation</a></li>
	<li><a href="apiadmin_promotion.htm">Promoting an API</a></li>
</ul>
<ul>
	<li><a href="apiadmin_api_add.htm">Adding an API</a></li>
	<li><a href="apiadmin_api_design.htm">Add or Modify an API Using API Designer</a></li>
	<li><a href="apiadmin_a_d_d_support.htm">API Description Language Support</a></li>
	<li><a href="apiadmin_implementations.htm">Manage API Implementations</a></li>
	<li><a href="api_admin_testing_tc.htm">API Testing with Test Client</a></li>
	<li><a href="uc_tc_okta.htm">Use Case: API testing in Test Client with Okta</a></li>
	<li><a href="api_admin_managing_contracts.htm">Managing Contracts for your API</a></li>
	<li><a href="apiadmin_monitoring.htm">Monitoring API Analytics</a></li>
</ul>
<ul>
	<li><a href="api_admin_api_publishing.htm">API Visibility, Licenses, and Settings</a></li>
	<li><a href="apiadmin_api_phys_svc.htm">Working with Physical Services</a></li>
	<li><a href="api_admin_oauth_support.htm">OAuth Support</a></li>
	<li><a href="api_admin_content_guidelines.htm">Content Development Guidelines</a></li>
	<li><a href="api_admin_documentation_maintenance.htm">API Documentation Maintenance</a></li>
	<li><a href="api_admin_documentation_tagging.htm">API Documentation Tagging</a></li>
	<li><a href="api_admin_legal_agreement_maintenance.htm">Legal Agreement Maintenance</a></li>
	<li><a href="basics_glossary.htm">Glossary of Terms</a></li>
</ul><!-- #EndLibraryItem --></div>