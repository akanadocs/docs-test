---
layout: page
title: LaaS UI Elements | Site Admin | Akana API Platform Help
description: Examples of user interface elements available for lifecycle integration.
product: cm
category: learn
sub-nav-class: Site Administration
weight: 07
type: page
nav-title: LaaS UI Elements
---
<h1 id="top">LaaS UI Elements</h1>
<p>An overview of the types of user interface elements you can create in the Community Manager developer portal with lifecycle integration, with illustrations.</p>
<!--<p><strong>Note</strong>: The illustrations in this document are taken from the customization ZIP file, available for download within the developer portal. Information about LaaS UI elements is in the customization ZIP file in version {<span class="apidoc_red">3/2/21 AB will write Jira</span>} and later. For instructions for downloading the customization ZIP file, refer to <a href="site_admin_customization.htm#customization_files_download">How do I download customization files?</a></p>-->
<hr class="divide_hr" />



<h2 style="color: gray;">Table of Contents</h2>
<ol class="table_of_contents">
	<li><a href="#lr_datatypes_overview">Overview</a></li>
	<li><a href="#lr_datatypes_laas_boolean">Boolean fields</a></li>
	<li><a href="#lr_datatypes_laas_date">Date fields</a></li>
	<li><a href="#lr_datatypes_laas_number">Decimal (number) fields</a></li>
	<li><a href="#lr_datatypes_laas_string">String fields</a>:
		<ul>
			<li><a href="#lr_datatypes_laas_text">Text fields (string)</a></li>
			<li><a href="#lr_datatypes_laas_open_string_multi_value">Open string multi-value fields</a></li>
			<li><a href="#lr_datatypes_laas_closed_enum">Closed enumerated fields (string)</a></li>
			<li><a href="#lr_datatypes_laas_dynamicselect">Dynamic select fields (string)</a></li>
			<li><a href="#lr_datatypes_laas_taxonomy">Taxonomy fields (string)</a></li>
		</ul>
	</li>
	<li><a href="#lr_datatypes_laas_url">URL fields</a></li>
	</ol>
<hr class="divide_hr" />



<h2 id="lr_datatypes_overview">Overview</h2>
<p>In Repository Client, in the Global Definition Template, choose the classifier type as part of defining the classifier, as shown below.</p>
<p><img src="assets_laas_ui_elements/laas_rm_classifier_define.png" alt="Defining a classifier in Repository Client" /></p>
<p>Use the table below to help choose data types in Repository Client so that you can create the fields that you want to add in the Community Manager developer portal.</p>
<table class="doctable">
	<thead>
		<tr>
			<th>Choose this type of data in LC</th>
			<th>To create this type of field in CM</th>
			<th>Can be multi-valued?</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>boolean classifier</td>
			<td><p>A field that offers, or enforces, a Boolean value, such as yes/no or on/off.</p>
				<p>Examples:</p>
					<ul>
						<li><a href="#lr_datatypes_laas_boolean">Boolean fields</a></li>
		</ul>
			</td>
			<td>No</td>
		</tr>
		<tr>
			<td>date classifier</td>
			<td><p>Date field. Examples:</p>
					<ul>
						<li><a href="#lr_datatypes_laas_date">Date fields</a></li>
		</ul>
			</td>
			<td>Yes</td>
		</tr>
		<tr>
			<td>decimal classifier</td>
			<td><p>Any sort of numeric field, such as integer, decimal, or currency.</p>
				<p>Examples:</p>
					<ul>
						<li><a href="#lr_datatypes_laas_number">Decimal (number) fields</a></li>
		</ul>
			</td>
			<td>Yes</td>
		</tr>
		<tr>
			<td>string classifier</td>
			<td><p>Text field including single value or multi-value, simple text or drop-down list.</p>
				<p>Examples:</p>
		<ul>
			<li><a href="#lr_datatypes_laas_text">Text fields (string)</a></li>
			<li><a href="#lr_datatypes_laas_open_string_multi_value">Open string multi-value fields</a></li>
			<li><a href="#lr_datatypes_laas_closed_enum">Closed enumerated fields (string)</a></li>
			<li><a href="#lr_datatypes_laas_dynamicselect">Dynamic select fields (string)</a></li>
			<li><a href="#lr_datatypes_laas_taxonomy">Taxonomy fields (string)</a></li>
		</ul>
			</td>
			<td>Yes</td>
		</tr>
		<tr>
			<td>By-reference artifact</td>
			<td><p>URL. Examples:</p>
					<ul>
						<li><a href="#lr_datatypes_laas_url">URL fields</a></li>
		</ul>
			</td>
			<td>Yes</td>
		</tr>
	</tbody>
</table>
<p><a href="#top">Back to top</a></p>



<h2 id="lr_datatypes_laas_boolean">Boolean fields</h2>
<p>If you want to create a Boolean field in the Community Manager developer portal, use the <strong>boolean</strong> classifier type in Repository Client. A sample snippet defining a boolean field in the <strong>gdt.xml</strong> file is shown below. This classifier defines whether licensing is required to use an API.</p>
<pre>&lt;define-classifier display-name="Licensing Required" help-text="Indicates if licensing is required to use the asset" include-in-search-filter="false" max-occurs="1" name="licensing-required" type="boolean" /&gt;</pre>
<p>For Boolean fields you can:</p>
<ul>
	<li>Make it required</li>
	<li>Make it optional</li>
	<li>Prepopulate a value that is not editable by the user</li>
</ul>
<p>An example of the use of Boolean to define an extension properties field in the developer portal is shown below. This example defines the <strong>Allow Anonymous Access</strong> field, usually the user's choice, as a read-only field set to No as a security measure.</p>
<pre>&lt;define-classifier display-name="Approval Required" help-text="Require approval for access to this implementation. Note that this classifier is only relevant when anonymous access is not allowed." include-in-search-filter="false" max-occurs="1" name="access-approval-required" type="boolean" /&gt;</pre>
<p>An example of the use of Boolean in the developer portal is shown below.</p>
<p><img src="assets_laas_ui_elements/laas-boolean.png" alt="Boolean field examples" /></p>
<p><a href="#top">Back to top</a></p>



<h2 id="lr_datatypes_laas_date">Date fields</h2>
<p>If you want to create a date field in the Community Manager developer portal, use the <strong>date</strong> classifier type in Repository Client. A sample snippet defining a date field in the <strong>gdt.xml</strong> file is shown below. This example defines the date the asset went into production, as an additional piece of metadata about the asset.</p>
<pre>&lt;define-classifier display-name="Production Date" help-text="Date this asset entered production" include-in-arv-filter="true" include-in-search-filter="true" max-occurs="1" name="production-date" type="date"&gt;</pre>
<p>For date fields you can:</p>
<ul>
	<li>Make it required for the user to choose a single date</li>
	<li>Make it optional for the user to choose a single date</li>
	<li>Prepopulate a single value not editable by the user</li>
	<li>Make it required for the user to choose multiple dates (not shown)</li>
	<li>Make it optional for the user to choose multiple dates (not shown)</li>
	<li>Prepopulate multiple values not editable by the user (not shown)</li>
</ul>
<p><img src="assets_laas_ui_elements/laas-date.png" alt="Date fields" /></p>
<p><a href="#top">Back to top</a></p>



<h2 id="lr_datatypes_laas_number">Decimal (number) fields</h2>
<p>If you want to create a numeric field in the Community Manager developer portal, use the <strong>decimal</strong> classifier type in Repository Client.</p>
<p>The example below defines a classifier for information about the cost of developing an asset. In this example, the field could be constrained to take two decimal places for a monetary value by using a validator. {<span class="apidoc_red">SU Question_01: where is this done? Maybe I can add a definition or cross-ref or something.</span>}</p>
<pre>&lt;define-classifier display-name="Developer License Cost" help-text="Per developer/seat license cost or equivalent for the asset" include-in-search-filter="false" max-occurs="1" name="developer-license-cost" type="decimal" /&gt;</pre>
<p>The example below defines a classifier for information about the number of working days to create an asset. In this example, the field could be constrained to take only an integer by using a validator.</p>
<pre>&lt;define-classifier display-name="Creation Level of Effort" help-text="Creation level of effort to develop this asset in Person Days" include-in-search-filter="false" max-occurs="1" name="creation-level-of-effort" type="decimal" /&gt;</pre>
<p>The resulting field in the Community Manager developer portal might look something like the below.</p>
<p><img src="assets_laas_ui_elements/laas-number.png" alt="Number data type, field examples" /></p>
<p><a href="#top">Back to top</a></p>



<h2 id="lr_datatypes_laas_string">String fields</h2>
<p>If you want to create a string field in the Community Manager developer portal, use the <strong>string</strong> classifier type in Repository Client.</p>
<p>There are several types of fields you can create in the Community Manager developer portal with string values. The sections below define them, with illustrations from the customization ZIP file:</p>
<ul>
	<li><a href="#lr_datatypes_laas_text">Text fields (string)</a></li>
	<li><a href="#lr_datatypes_laas_open_string_multi_value">Open string multi-value fields</a></li>
	<li><a href="#lr_datatypes_laas_closed_enum">Closed enumerated fields (string)</a></li>
	<li><a href="#lr_datatypes_laas_dynamicselect">Dynamic select fields (string)</a></li>
	<li><a href="#lr_datatypes_laas_taxonomy">Taxonomy fields (string)</a></li>
</ul>


<h3 id="lr_datatypes_laas_text">Text fields (string)</h3>
<p>For a simple text field you can create the following variations:</p>
<ul>
	<li>Open string required on create: make it required for the user to provide a single value.</li>
	<li>Open string optional on create: make it optional for the user to provide a single value.</li>
	<li>Open string read-only on create: Prepopulate a single value that is not editable by the user.</li>
</ul>
<p>You can also configure the fields as multi-value fields. For examples, see <a href="#lr_datatypes_laas_open_string_multi_value">Open string multi-value fields</a> below.</p>
<p><img src="assets_laas_ui_elements/laas-text.png" alt="Text field examples" /></p>
<p><a href="#top">Back to top</a></p>



<h3 id="lr_datatypes_laas_open_string_multi_value">Open string multi-value fields</h3>
<p>You can define an open text field that supports multiple values. You can define any of the following:</p>
<ul>
	<li>Open string multi-value required on create: make it required for the user to provide multiple values.</li>
	<li>Open string multi-value optional on create: make it optional for the user to provide multiple values.</li>
	<li>Open string multi-value read-only on create: Prepopulate multiple values that are not editable by the user.</li>
</ul>
<p>The example below shows an open string multi-value required field.</p>
<p><img src="assets_laas_ui_elements/laas-open-string-multi-value.png" alt="Open string multi-value field examples" /></p>
<p><a href="#top">Back to top</a></p>



<h3 id="lr_datatypes_laas_closed_enum">Closed enumerated fields (string)</h3>
<p>For closed enum you can:</p>
<ul>
	<li>Make it required for the user to choose a single value from a closed list.</li>
	<li>Make it optional for the user to choose a single value from a closed list.</li>
	<li>Prepopulate a single value that is not editable by the user.</li>
	<li>Make it required for the user to choose multiple values from a closed list.</li>
	<li>Make it optional for the user to choose multiple values from a the closed list.</li>
	<li>Prepopulate multiple values that are not editable by the user.</li>
</ul>
<p><img src="assets_laas_ui_elements/laas-closed-enum.png" alt="Closed enumerated field examples" /></p>
<p><a href="#top">Back to top</a></p>



<h3 id="lr_datatypes_laas_dynamicselect">Dynamic select fields (string)</h3>
<p>You can create a field where the user can either choose from a list of provided properties, or provide a different property.</p>
<p>The example below shows what this might look like in the <strong>gdt.xml</strong> file.</p>
<pre>&lt;define-classifier arv-layer="false" condition-trigger="false" display-name="Required Open Enumerated String" governed="true" help-text="Help text for Required Open Enumerated String" include-in-search-filter="false" interactive="false" invariant="false" max-occurs="1" name="required-open-enumerated-string" open="true" primary="true" type="string" validation-trigger="false"&gt;
  &lt;add-value uuid="_8voN0HkFEeaQ6M_gGtrEYw" value="valueA" /&gt;
  &lt;add-value uuid="__FBX4HkFEeaQ6M_gGtrEYw" value="valueB" /&gt;
  &lt;add-value uuid="_DIoXQHkGEeaQ6M_gGtrEYw" value="valueC" /&gt;
&lt;/define-classifier&gt;
&lt;define-classifier arv-layer="false" condition-trigger="false" display-name="Optional Open Enumerated String" governed="true" help-text="Help text for Optional Open Enumerated String" include-in-search-filter="false" interactive="false" invariant="false" max-occurs="1" name="optional-open-enumerated-string" open="true" primary="true" type="string" validation-trigger="false"&gt;
  &lt;add-value uuid="_8voN0HkFEeaQ6M_gGtrEYw" value="valueA" /&gt;
  &lt;add-value uuid="__FBX4HkFEeaQ6M_gGtrEYw" value="valueB" /&gt;
  &lt;add-value uuid="_DIoXQHkGEeaQ6M_gGtrEYw" value="valueC" /&gt;
&lt;/define-classifier&gt;
&lt;define-classifier arv-layer="false" condition-trigger="false" display-name="Readonly Open Enumerated String" governed="true" help-text="Help text for Readonly Open Enumerated String" include-in-search-filter="false" interactive="false" invariant="false" max-occurs="1" name="readonly-open-enumerated-string" open="true" primary="true" type="string" validation-trigger="false"&gt;
  &lt;add-value uuid="_8voN0HkFEeaQ6M_gGtrEYw" value="valueA" /&gt;
  &lt;add-value uuid="__FBX4HkFEeaQ6M_gGtrEYw" value="valueB" /&gt;
  &lt;add-value uuid="_DIoXQHkGEeaQ6M_gGtrEYw" value="valueC" /&gt;
&lt;/define-classifier&gt;</pre>
<p>With a dynamic select field you can create any of the following:</p>
<ul>
	<li>Required open enumerated string: the user must provide a single value, either from the list or an additional value.</li>
	<li>Optional open enumerated string: the user can provide a single value, either from the list or an additional value.</li>
	<li>Read-only open enumerated string: the user can provide a single value, either from the list or an additional value.</li>
</ul>
<p>Only single values are supported for this type of field.</p>
<p><img src="assets_laas_ui_elements/laas-dynamicselect.png" alt="Dynamic select field examples" /></p>
<p><a href="#top">Back to top</a></p>



<h3 id="lr_datatypes_laas_taxonomy">Taxonomy fields (string)</h3>
<p>With a taxonomy field, you can define a set of valid values for a primary field and then for a secondary field. In the user interface, when the user chooses a value in the first field, a list of valid values becomes available for the second field.</p>
<p>To do this, in Repository Client, define a set of <strong>dependent compound classifiers</strong>. An example is shown below. Each entry defines a valid value in the first field and a valid value in the second field. In this example, there are three choices for the first field, and each of those has two valid values in the second field, so a total of six combinations are defined.</p>
<pre>  &lt;define-compound-classifier display-name="Business Domain" help-text="The business domain to which this asset applies" include-in-search-filter="true" max-occurs="1" name="business-domain" open="false" value-ordering="GDT"&gt;
    &lt;fields&gt;
      &lt;field help-text="The general domain of applicability" name="general" /&gt;
      &lt;field help-text="The specific domain of applicability" name="specific" /&gt;
    &lt;/fields&gt;
    &lt;external-mapping key="Policy Manager" value="uddi:soa.com:rm:businessdomain" /&gt;
    &lt;add-value uuid="_ZOI3wA3vEeWKHqhk6F704g" value="Shipping|Request"&gt;
      &lt;external-mapping key="Policy Manager" name="Shipping Request Business Domain" value="Shipping|Request" /&gt;
    &lt;/add-value&gt;
    &lt;add-value uuid="_ZOI3wQ3vEeWKHqhk6F704g" value="Shipping|Quote"&gt;
      &lt;external-mapping key="Policy Manager" name="Shipping Quote Business Domain" value="Shipping|Quote" /&gt;
    &lt;/add-value&gt;
    &lt;add-value uuid="_ZOI3xA3vEeWKHqhk6F704g" value="Catalog|Product Selection"&gt;
      &lt;external-mapping key="Policy Manager" name="Catalog Product SelectionBusiness Domain" value=" Catalog|Product Selection" /&gt;
    &lt;/add-value&gt;
    &lt;add-value uuid="_ZOI3xQ3vEeWKHqhk6F704g" value="Catalog|Maintenance"&gt;
      &lt;external-mapping key="Policy Manager" name="CatalogMaintenance Business Domain" value="Catalog|Maintenance" /&gt;
    &lt;/add-value&gt;
    &lt;add-value uuid="_ZOI31Q3vEeWKHqhk6F704g" value="Credit|Payments"&gt;
      &lt;external-mapping key="Policy Manager" name="Credit Payments Business Domain" value="Credit|Payments" /&gt;
    &lt;/add-value&gt;
    &lt;add-value uuid="_ZOI31g3vEeWKHqhk6F704g" value="Credit|Verification"&gt;
      &lt;external-mapping key="Policy Manager" name="Credit Verification Business Domain" value="Credit|Verification" /&gt;
    &lt;/add-value&gt;
    &lt;add-value uuid="_ZOI33Q3vEeWKHqhk6F704g" value="Not Applicable|"&gt;
      &lt;external-mapping key="Policy Manager" name="No Applicable Business Domain" value="Not Applicable" /&gt;
    &lt;/add-value&gt;
  &lt;/define-compound-classifier&gt;</pre>
<p>An example of the fields as they appear in the Community Manager developer portal is shown below.</p>
<p><img src="assets_laas_ui_elements/laas-taxonomy.png" alt="Taxonomy field examples" /></p>
<p><a href="#top">Back to top</a></p>



<h3 id="lr_datatypes_laas_url">URL fields</h3>
<p>If you want to collect a URL in the Community Manager developer portal to reference an artifact, such as upload of an API description document, use the <strong>by-reference</strong> artifact type in Repository Client.</p>
<p>If you define a by-reference artifact, you can collect the URL for the artifact in the Community Manager developer portal via a URL field.</p>
<p>An example of what this might look like in Repository Client:</p>
<pre>&lt;define-artifact category="swagger-api-definition" containment="by-value|by-reference" display-name="Swagger API Definition" governed="true" help-text="Swagger document defining the API" mandatory-public="false" primary="true" queryable="true" validation-trigger="true" versioned="true" /&gt;</pre>
<p>An example of the resulting URL field in the Community Manager developer portal:</p>
<p><img src="assets_laas_ui_elements/laas-url.png" alt="URL field examples" /></p>
<p><a href="#top">Back to top</a></p>