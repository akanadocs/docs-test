---
layout: page
title: Policy List | API Admin | Akana API Platform Help
description: A list of operational and service-level policies.
product: cm
category: ref
category: learn
sub-nav-class: API Admin
type: page
nav-title: Policy List
---
<h1 id="top">Policy List</h1>
<p>Includes information about the following types of <a href="basics_glossary.htm#gl_policy">policies</a>:</p>
<ol>
	<li><a href="#policies_fulllist">Default Policies Available in the Akana API Platform</a></li>
	<li><a href="#policies_operational">Additional Operational Policies Available in Policy Manager</a></li>
	<li><a href="#policies_service_level">Additional Service-Level Policies Available in Policy Manager</a></li>
</ol>
<p><strong>Note</strong>: For general information about all policies, see <a href="../../ag/policies/about_policies_view.htm">About Policies</a> (Policy Manager help).</p>
<p><strong>Video content</strong>: <a href="https://rogue-wave-software.wistia.com/medias/i2a88hdgi1" title="Learn how to use Akana to apply API security by protecting API integrity with authentication and authorization." target="_blank">Learn how to use Akana to apply API security by protecting API integrity with authentication and authorization.</a></p>
<hr class="divide_hr" />



<h2 id="policies_fulllist">Default Policies Available in the Akana API Platform</h2>
<p>The policies below are available by default in the Akana API Platform. Policies are visible in the Implementation page, where you can click through to assign one or more policies to an implementation.</p>
<table class="doctable">
<thead>
	<tr>
		<th>Policy Name</th>
		<th>Type/Link</th>
	</tr>
</thead>
<tbody>
	<tr>
		<td id="pl_AtmosphereApplicationSecurityPolicy">AtmosphereApplicationSecurityPolicy (In Policy Manager, API Consumer Application Security Policy)</td>
		<td><p>Security policy for apps on the platform. Used to identify (authenticate) an app that is attempting to access an API, to make sure the app is authorized. This policy type supports multiple mechanisms for the app to present its identity, including plain text App ID, signed header with x.509 certificate, or shared secret.</p>
			<p>Most or all APIs on the platform have this policy assigned.</p>
			<p>For more information, see <a href="../../ag/policies/policy_op_api_consumer_app_security.htm">Using the API Consumer Application Security Policy</a>.</p></td>
	</tr>
	<tr>
<td id="pol_basicauditing">BasicAuditing</td>
<td><p>Provides basic auditing of messages. Message metrics are recorded in the <a href="basics_glossary.htm#gl_policy_manager">Policy Manager</a> Usage Logs Monitoring tab. The request and response messages are not logged. If auditing of individual messages is needed, use the <a href="#pol_detailedauditing">Detailed Auditing</a> policy.</p>
<p>The difference between the Basic Auditing and Detailed Auditing policies is that the Detailed Auditing policy captures the payload, and the Basic Auditing policy does not.</p>
<p>For more information, see: <a href="../../ag/policies/policy_op_basic_auditing.htm">Using the Basic Auditing Policy</a>.</p>
<p><strong>Note</strong>: Only attach one auditing policy to an API; for example, <a href="../../ag/policies/policy_op_basic_auditing.htm">Basic Auditing</a> policy or <a href="../../ag/policies/policy_op_detailed_auditing.htm">Detailed Auditing</a> policy, but not both.</p>
<p><strong>Category:</strong> Auditing</p></td>
</tr>
<tr>
<td id="pol_detailedauditing">DetailedAuditing</td>
<td><p>Provides detailed auditing of messages. Message metrics are recorded in the Policy Manager Usage Logs Monitoring tab as well as the entirety of each message, including request and response.</p>
<p>The difference between the Basic Auditing and Detailed Auditing policies is that the Detailed Auditing policy captures the payload, and the Basic Auditing policy does not.</p>
<p>For more information, see: <a href="../../ag/policies/policy_op_detailed_auditing.htm">Using the Detailed Auditing Policy</a>.</p>
<p><strong>Note</strong>: Only attach one auditing policy to an API; for example, <a href="../../ag/policies/policy_op_basic_auditing.htm">Basic Auditing</a> policy or <a href="../../ag/policies/policy_op_detailed_auditing.htm">Detailed Auditing</a> policy, but not both.</p>
<p><strong>Category:</strong> Auditing</p></td>
</tr>
	<tr>
		<td id="pl_oauthsecurity">OAuthSecurity</td>
		<td><p>An Akana API Platform policy that enables API authorization using OAuth 2.0. It uses the OAuth configuration assigned to an API when enforcing OAuth tokens in a received request.</p>
			<p>For more information, see: <a href="../../ag/policies/policy_op_oauth_security.htm">Using the OAuth Security Policy</a>.</p>
			<p>The OAuthSecurity policy also has three configuration options:</p>
			<ul>
				<li>TokenTransformation</li>
				<li>IncludeTokenAttributes</li>
				<li>ScopeRequirement</li>
			</ul>
			<p>For details, see <a href="../../ag/policies/policy_op_oauth_security.htm#pol_oauth_security_config_options">OAuth Security Policy Configuration Options</a>.</p></td>
</tr>
</tbody>
</table>
<p><a href="#top">Back to top</a></p>



<h2 id="policies_operational">Additional Operational Policies Available in Policy Manager</h2>
<table class="doctable">
<thead>
	<tr>
		<th>Policy Name</th>
		<th>Description</th>
	</tr>
</thead>
<tbody>
	<tr>
		<td>CORSAllowAll</td>
		<td><p><a href="basics_glossary.htm#gl_cors">CORS</a> (cross-origin resource sharing) enables users to access resources from within the browser serving a web page, and defines a way in which the browser and the server can interact to determine whether or not to allow the cross-origin request.</p>
			<p>For more information, see: <a href="../../ag/policies/policy_op_cors.htm" target="_blank">Using the CORS policy</a>.</p>
			<p>The CORSAllowAll policy allows all cross-origin requests.</p></td>
	</tr>
	<tr>
		<td>Cross-Site Scripting Detection policy</td>
		<td><p>The Cross Site Scripting Detection Policy is an Operational policy that allows you to block potentially malicious HTML tags in the request message body using what is called a <strong>white list</strong> of tags.</p>
			<p>For more information, see <a href="../../ag/policies/policy_op_cross_site_scripting.htm" target="_blank">Using the Cross-Site Scripting Detection Policy</a>.</p></td>
	</tr>
	<tr>
		<td>HTTP Malicious Pattern Detection policy</td>
		<td><p>Used to inspect the HTTP messages for content that could be considered dangerous to an API or web service, and to reject the message returning a fault if any of the defined expressions match the content.</p>
			<p>For more information, see <a href="../../ag/policies/policy_op_http_malicious_pattern_detection.htm" target="_blank">Using the HTTP Malicious Pattern Detection Policy</a>.</p></td>
	</tr>
	<tr>
		<td>Metrics policy</td>
		<td><p>The Metrics Policy is an Operational policy that allows you to collect roll-up data for selected services/operations that the policy is attached to.</p>
			<p>For more information, see <a href="../../ag/policies/policy_op_metrics.htm" target="_blank">Using the Metrics Policy</a>.</p></td>
	</tr>
	<tr>
		<td><a href="basics_glossary.htm#gl_jose">JOSE</a> Security policy v2 (Unencoded Payload Support)</td>
		<td><p>A security policy that can be attached to RESTful and messaging services, to secure any message content. This policy supports JSON signatures and/or encryption in the messages.</p>
			<p>The JOSE specification offers a way of signing payloads in such a way that it's relying on keys from whoever is doing the signing. With JOSE, a set of attributes are put together in a specific format, such that it's very clear what the consumer, or the provider, is trying to convey in that format. And then, verification follows a standard set of rules.</p>
			<p>With JOSE Policy v2 you can do the following:</p>
			<ul>
				<li>Sign and/or encrypt content</li>
				<li>Validate signed and/or encrypted content</li>
				<li>Send either signed or raw data to the client or the downstream service</li>
				<li>Check for Open Banking specification requirements</li>
			</ul>
			<p>This policy supports both of the following:</p>
			<ul>
				<li>Scenarios where the entire message, including header, payload, and signature, is signed and/or encrypted.</li>
				<li>A detached, unencoded payload scenario where the payload is sent as the body of the message and only the header and signature are signed and/or encrypted.</li>
				</ul>
			<p>For more information, see <a href="../../ag/policies/policy_op_jose_security_v2.htm">Using the JOSE Security Policy v2 (Unencoded Payload Support)</a>.</p>
			<p><strong>Note</strong>: If you're attaching this policy to your API, with a serialization setting of JSON, make sure that the operations in the API support the <strong>application/jose+json</strong> content-type.</p></td>
	</tr>
	<tr>
		<td>Paging policy</td>
		<td><p>The Paging Policy is designed to allow a client to only get a subset of a list based response. For example, if an operation is returning a list of books, and the full list is 1000 books, the client may wish to only have 100 books be returned at a time.</p>
			<p>For more information, see <a href="../../ag/policies/policy_op_paging.htm" target="_blank">Using the Paging Policy</a>.</p></td>
	</tr>
	<tr>
		<td>Schema Validation policy</td>
		<td><p>Performs schema validation. A common integration problem in a service-oriented architecture occurs when consumers send messages to services that don&rsquo;t conform to the services' message schemas. Typically this is caused by the versioning of a service&rsquo;s schema, and a consumer sending a message that conforms to a prior schema version. It can also be a consumer&rsquo;s malicious attempt to cause a denial of service by sending invalid messages to a service. An SOA Container can aid by validating the messages exchanged between the consumers and services against the service&rsquo;s published schema.</p>
			<p>For more information, see <a href="../../ag/policies/policy_op_schema_validation.htm" target="_blank">Using the Schema Validation Policy</a>.</p></td>
	</tr>
	<tr>
		<td>WS-Schema Validation policy</td>
		<td><p>Schema validation policy for WS-Schema.</p>
			<p>For more information, see <a href="../../ag/policies/policy_op_ws_schema_validation.htm" target="_blank">Using the WS-Schema Validation Policy</a>.</p></td>
	</tr>
	<tr>
		<td>API User Security Policy</td>
		<td><p>The default security policy for Akana API Platform services and controls who can perform administrative actions on the developer portal.</p>
	<p><strong>Category:</strong> Security</p>
			<p>For more information, see <a href="../../ag/policies/policy_op_api_user_security.htm" target="_blank">Using the API User Security Policy</a>.</p></td>
	</tr>
	<tr>
		<td>OAuth 1.0a Trusted Token Policy</td>
		<td><p>An Akana API Platform security policy that provides OAuth Pass-thru support when OAuth 1.0a is used to perform API authorization.</p>
			<p><strong>Category:</strong> Security</p>
			<p>For more information, see <a href="../../ag/policies/policy_op_oauth1a_security.htm" target="_blank">Using the OAuth 1.0a Security Policy</a>.</p></td>
	</tr>
	<tr>
		<td>OAuthSecurity</td>
		<td><p>An Akana API Platform policy that enables API authorization using OAuth 2.0. It uses the OAuth configuration assigned to an API when enforcing OAuth tokens in a received request.</p>
			<p><strong>Category:</strong> Security</p>
			<p>For more information, see <a href="../../ag/policies/policy_op_oauth_security.htm" target="_blank">Using the OAuth Security Policy</a>.</p></td>
	</tr>
	<tr>
		<td>WS-Auditing Message Policy</td>
		<td><p>Used to audit service operations and binding operations.</p>
			<p><strong>Category:</strong> Auditing</p></td>
	</tr>
	<tr>
		<td>WS-Auditing SOAP Message Policy</td>
		<td><p>Used to audit service operations and binding operations.</p>
<p><strong>Category:</strong> Auditing</p></td>
	</tr>
	<tr>
		<td>WS-Auditing SOAP Service Policy</td>
		<td><p>Used to audit SOAP binding operations.</p>
		<p><strong>Category:</strong> Auditing</p></td>
	</tr>
	<tr>
		<td>WS-Auditing Service Policy</td>
		<td><p>Used to audit Services, Bindings, Operations, and Access Points.</p>
<p><strong>Category:</strong> Auditing</p></td>
	</tr>
	<tr>
		<td>WS-Auditing Transaction Tracking Policy</td>
		<td><p>Supports Transaction Tracking functionality that correlates related web service events within a single activity or transaction. For example, if a service in a Container uses the Akana Delegate to call another service in a different container that is managed by the Akana Agent, it will automatically insert correlation information into the message that is collected and used by Policy Manager to collect tracking and log information.</p>
<p><strong>Category:</strong> Auditing</p></td>
	</tr>
</tbody>
</table>
<p><a href="#top">Back to top</a></p>



<h2 id="policies_service_level">Additional Service-Level Policies Available in Policy Manager</h2>
<p>Defines conditions for measuring and reporting performance of a specific contract. Each policy is composed of a &quot;Rule&quot; and &quot;Access Interval.&quot; Rules represent the conditions you define to measure and report performance of a service contract. When a defined system condition matches a defined rule, an alert is raised.</p>
<table class="doctable">
<thead>
	<tr>
		<th>Policy Name</th>
		<th>Description</th>
	</tr>
</thead>
<tbody>
	<tr>
		<td>Bandwidth Quota Policy</td>
		<td><p>Allows you to configure the bandwidth cap (i.e, quota) that a consumer can upload or download at any given time. The bandwidth cap can be specified as kilobytes or megabytes per second. If the quota is exceeded, the runtime will throttle the traffic to conform to the quota policy. The quota is also assigned to either the request (upload) or response (download). No alerts are generated for this policy since the bandwidth consumed is a function of the network speed and capabilities of the service provider, not the consumer.</p>
	<p><strong>Category</strong>: QoS (Quality of Service Policy)</p></td>
	</tr>
	<tr>
		<td>Script Policy</td>
		<td><p>Allows you to update a policy defined using BeanShell or Jython script languages. A series of predefined functions and variables are provided that allow you to build a custom policy expression that is evaluated at runtime. Several sample scripts are also provided that illustrate common quota management activities.</p>
		<p><strong>Category</strong>: QoS (Quality of Service Policy)</p></td>
	</tr>
	<tr>
		<td>Service Level Enforcement</td>
		<td><p>The Service Level Enforcement Policy is a Quality of Service (QoS) policy that allows you to enable and configure the error message returned to the consumer when their SLA is violated.</p>
<p>This policy works in conjunction with a Service-Level Policy and only applies to the following Service-Level rules: &quot;Usage Count,&quot; &quot;Total Request Message Size,&quot; and &quot;Total Response Message Size.&quot;</p>
<p>You define a Service-Level Policy and specify each service level condition and alert code, then you define a Service Level Enforcement Policy and specify the error message you would like displayed when a specified service level condition is violated.</p>
<p><strong>Category:</strong> QoS (Quality of Service Policy)</p></td>
	</tr>
	<tr>
		<td>Throughput Quota Policy</td>
		<td><p>Allows you to monitor web service throughput performance by specifying a throughput limit (quota), queue size, and configuring fault and alert notifications.</p>
<p>If the quota is exceeded, a consumer fault message will be returned to the service consumer and an alert will be logged.</p>
<p><strong>Category:</strong> QoS (Quality of Service Policy)</p></td>
	</tr>
	<tr>
		<td>Timeout Policy</td>
		<td><p>Allows you to configure the timeout for each request and specify a custom fault error message that is returned to the client.</p>
<p><strong>Category:</strong> QoS (Quality of Service Policy)</p></td>
	</tr>
	<tr>
		<td>Concurrency Quota Policy</td>
		<td><p>Allows you to monitor the web service concurrency performance by specifying a concurrency limit (quota) that represents the maximum number of concurrency connections, and configuring fault and alert notifications.</p>
<p>If the specified concurrency limit is exceeded, Policy Manager will return a fault and send an alert.</p>
<p><strong>Category:</strong> QoS (Quality of Service Policy)</p></td>
	</tr>
</tbody>
</table>
<p><a href="#top">Back to top</a></p>



<hr class="divide_hr" />



<h2 id="related_topics">Related Topics</h2>
<div class="relatedlinks" id="api_admin"><!-- #BeginLibraryItem "/Library/relatedtopics_api_admin.lbi" -->
<ul>
	<li><a href="apiadmin_getting_started.htm">Getting Started for API Developers</a></li>
	<li><a href="apiadmin_overview.htm">API Administration: Overview</a></li>
	<li><a href="api_admin_tutorial.htm">Tutorial (API Provider)</a></li>
	<li><a href="api_admin_management.htm">API Admin Management</a></li>
	<li><a href="bus_api_admin_forum.htm">Forum Moderation</a></li>
	<li><a href="apiadmin_promotion.htm">Promoting an API</a></li>
	<li><a href="apiadmin_api_add.htm">Adding an API</a></li>
	<li><a href="apiadmin_api_design.htm">Add or Modify an API Using API Designer</a></li>
</ul>
<ul>
	<li><a href="apiadmin_a_d_d_support.htm">API Description Language Support</a></li>
	<li><a href="apiadmin_implementations.htm">Manage API Implementations</a></li>
	<li><a href="api_admin_testing_tc.htm">API Testing with Test Client</a></li>
	<li><a href="uc_tc_okta.htm">Use Case: API testing in Test Client with Okta</a></li>
	<li><a href="api_admin_managing_contracts.htm">Managing Contracts for your API</a></li>
	<li><a href="apiadmin_monitoring.htm">Monitoring API Analytics</a></li>
	<li><a href="apiadmin_mydashboard.htm">Monitoring APIs with the My Dashboard Feature</a></li>
</ul>
<ul>
	<li><a href="api_admin_api_publishing.htm">API Visibility, Licenses, and Settings</a></li>
	<li><a href="apiadmin_api_phys_svc.htm">Working with Physical Services</a></li>
	<li><a href="api_admin_oauth_support.htm">OAuth Support</a></li>
	<li><a href="api_admin_content_guidelines.htm">Content Development Guidelines</a></li>
	<li><a href="api_admin_documentation_maintenance.htm">API Documentation Maintenance</a></li>
	<li><a href="api_admin_documentation_tagging.htm">API Documentation Tagging</a></li>
	<li><a href="api_admin_legal_agreement_maintenance.htm">Legal Agreement Maintenance</a></li>
	<li><a href="basics_glossary.htm">Glossary of Terms</a></li>
</ul><!-- #EndLibraryItem --></div>