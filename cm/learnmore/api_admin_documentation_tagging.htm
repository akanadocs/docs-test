---
layout: page
title: API Documentation Tagging | API Administration | Akana API Platform Help
description: Learn how to tag your API documentation to control visibility of documentation files.
product: cm
category: learn
sub-nav-class: API Admin
weight: 2626
type: page
nav-title: API Documentation Tagging
no-nav: true
---
<h2 id="top">API Documentation Tagging</h2>
<p>Learn how to tag your API documentation to control visibility of documentation files.</p>
<p><strong>Note</strong>: A full set of linked files and setup instructions is also available, as a ZIP file that you can customize, upload, and test. To get a copy of the doc tagging ZIP file, <a href="basics_support.htm#how_do_i_contact_technical_support">contact Technical Support</a>.</p>
<h5 class="stamp">API Platform Version: 8.1 and later</h5>
<div class = "divider1"></div>



<h3 style="color: gray;">Table of Contents</h3>
<h5 style="color: gray;"><a href="#h_doc_tagging_general">Doc Tagging General Information:</a></h5>



<ol class="table_of_contents">
  <li><a href="#ov_doctagging_overview">What types of content can I use documentation tagging for?</a></li>
  <li><a href="#what_are_the_visibility_rules_for_api_documentation">What are the visibility rules for API documentation?</a></li>
  <li><a href="#how_do_i_control_visibility_of_api_documentation">How do I control visibility of API documentation files?</a></li>
  <li><a href="#where_do_i_apply_api_visibility_settings">Where do I apply API visibility settings?</a></li>
  <li><a href="#what_are_the_different_ways_i_can_tag_api_documentation">What are the different ways I can tag API documentation?</a></li>
  <li><a href="#how_does_doc_tagging_work">How does documentation tagging work?</a></li>
  <li><a href="#what_is_file_based_tagging_and_how_does_it_work">What is file-based doc tagging and how does it work?</a></li>
  <li><a href="#what_is_content_based_tagging_and_how_does_it_work">What is content-based doc tagging and how does it work?</a></li>
  <li><a href="#how_do_i_name_and_reference_my_doc_tags">How do I name and reference my doc tags?</a></li>
  <li><a href="#what_is_the_recommended_approach_to_api_doc_tagging">What is the recommended approach to API documentation tagging?</a></li>
  <li><a href="#what_is_the_easiest_approach_to_api_doc_tagging">My API uses licenses, but I just want my documentation to be visible to everyone. What's the easiest way to set that up?</a></li>
</ol>



<h5 style="color: gray;"><a href="#h_doc_tagging_by_file">Doc Tagging By File:</a></h5>



<ol class="table_of_contents">
  <li><a href="#how_do_i_use_file_based_tagging">How do I use the metadata.xml file for file-based tagging?</a></li>
  <li><a href="#advantages_of_file_based_tagging">What are the advantages of file-based tagging?</a></li>


  <li><a href="#what_does_metadata_xml_look_like">What does the metadata.xml file look like?</a></li>
  <li><a href="#what_does_an_entry_in_the_metadata_xml_file_look_like">What does an entry in the metadata.xml file look like?</a></li>
  <li><a href="#docfilter_byapiversion">How do I use file-based tagging to define the API version a file applies to?</a></li>
  <li><a href="#docfilter_bylicense">How do I use file-based tagging to filter by license?</a></li>
  <li><a href="#docfilter_byscope">How do I use file-based tagging to filter by scope?</a></li>
  <li><a href="#docfilter_byoperation">How do I use file-based tagging to filter by operation?</a></li>
  <li><a href="#docfilter_multiple_target_tags">How do I use file-based tagging to assign the same filter to more than one file type?</a></li>
  <li><a href="#docfilter_byrole">How do I use file-based tagging to filter by user role?</a></li>
  <li><a href="#docfilter_bydocumenttype">How do I use file-based tagging to filter by file extension?</a></li>
  <li><a href="#docfilter_specificfile">How do I use file-based tagging to limit visibility of a specific file?</a></li>
  <li><a href="#docfilter_byapiversion">How do I use file-based tagging to filter by API version?</a></li>
  <li><a href="#docfilter_operators">When I'm doing file-based tagging, can I use operators?</a></li>
  <li><a href="#docfilter_regularexpressions">When I'm doing file-based tagging, what regular expressions can I use in metadata.xml?</a></li>
</ol>



<h5 style="color: gray;"><a href="#h_doc_tagging_by_content">Doc Tagging By Content:</a></h5>



<ol class="table_of_contents">
  <li><a href="#contentbased_overview">When should I use doc tagging by content?</a></li>
  <li><a href="#contentbased_how_do_i_set_up_my_file">I want to use content-based tagging. How do I set up my file?</a></li>
  <li><a href="#contentbased_whattags">What tags are available for content-based doc tagging?</a></li>
  <li><a href="#how_do_i_set_up_the_html_tag">How do I set up the &lt;html&gt; tag in my file?</a></li>
  <li><a href="#how_do_i_set_up_the_head_tag">How do I set up the &lt;head&gt; tag in my file?</a></li>
  <li><a href="#what_is_the_resource_version_variable">What is the {resource.version} variable and why is it important?</a></li>
  <li><a href="#how_do_i_tag_a_section_of_content">How do I tag a specific section of content?</a></li>
  <li><a href="#doctags_showforlicense">How do I use content-based tagging to restrict visibility by license?</a></li>
  <li><a href="#doctags_showforscope">How do I use content-based tagging to restrict visibility by scope?</a></li>
  <li><a href="#doctags_showforoperation">How do I use content-based tagging to restrict visibility by operation?</a></li>
  <li><a href="#doctags_showforrole">How do I use content-based tagging to restrict visibility by role?</a></li>
  <li><a href="#doctags_showforanonymoususer">How do I use content-based tagging to make content visible only to anonymous users?</a></li>
  <li><a href="#doctags_showforloggedinuser">How do I use content-based tagging to make content visible only to users who are logged in?</a></li>
  <li><a href="#using_multiple_tags">When I'm using content-based tagging, can I use multiple tags?</a></li>
  <li><a href="#doctags_operators">When I'm doing content-based tagging, what operators can I use in my tags?</a></li>
</ol>



<h5 style="color: gray;"><a href="#h_streamlining">Streamlining Content-Based Doc Tagging:</a></h5>
<ol class="table_of_contents">
  <li><a href="#how_can_i_simplify_content_based_doc_tagging_updates_using_replacements_js">How can I simplify content-based doc tagging updates using the replacements.js file?</a></li>
  <li><a href="#how_do_i_implement_the_replacements_js_file">How do I implement the replacements.js file?</a></li>
  <li><a href="#where_do_i_store_the_replacements_js_file">Where do I store the replacements.js file?</a></li>
  <li><a href="#how_do_i_implement_version_specific_documentation_in_simple_dev_theme">How do I implement version-specific API documentation in Simple Dev theme?</a></li>
</ol>



<h5 style="color: gray;"><a href="#h_testing_and_finalizing">Testing and Finalizing:</a></h5>
<ol class="table_of_contents">
  <li><a href="#how_do_i_test_my_api_documentation_tagging">How do I test my API documentation tagging?</a></li>
  <li><a href="#setup_doc_toc">How do I control the documentation Table of Contents?</a></li>
  <li><a href="#related_topics">Related Topics</a></li>
</ol>




<div class = "divider1"></div>
<a name="h_doc_tagging_general"></a><h3>Doc Tagging General Information:</h3>




<a name="ov_doctagging_overview"></a>
<h3>What types of content can I use documentation tagging for?</h3>
<p>Documentation tagging allows you to control who will see your content.</p>
<p>Here are two examples of types of content you can use documentation tagging for on the platform:</p>
<ul>
  <li><strong>Site documentation</strong>. The documentation might include instructions for different user groups, such as app developers and API admins. If you don't want your app developers to see the API Admin documentation, you can apply file-based tagging. For an example, see <a href="#docfilter_byrole">How do I use file-based tagging to filter by user role?</a></li>
  <li><strong>API documentation</strong>. You can use doc tagging to limit parts of your API documentation for users with visibility of a specific license, scope, or even operation; you can also tag documentation to be visible to specific types of users, logged-in users, or anonymous users.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<a name="what_are_the_visibility_rules_for_api_documentation"></a><h3>What are the visibility rules for API documentation?</h3>
<p>The visibility rules for API documentation are shown in the table below.</p>
<table cellspacing="0px" class="doctable" style="width: 98%;">
  <thead>
  <tr>
    <th width="20%">API Visibility</th>
    <th width="20%">Use Licenses?</th>
    <th width="60%">Documentation Visibility</th>
  </tr>
</thead>
<tbody>
    <tr class="t2row">
      <td>Public</td>
      <td>No</td>
      <td>Documentation is visible to all users, including <a href="basics_glossary.htm#gl_anonymoususer">anonymous users</a>.</td>
    </tr>
    <tr class="t1row">
      <td>Public</td>
      <td>Yes</td>
      <td>Documentation <strong>must</strong> be tagged for the appropriate licenses. If not tagged, documentation is not visible, even if the API is public. If appropriately tagged, documentation associated with public scopes is visible to all users, including <a href="basics_glossary.htm#gl_anonymoususer">anonymous users</a>. Documentation associated with private scopes is only visible to users who have visibility to the private scopes.</td>
    </tr>
    <tr class="t2row">
      <td>Registered Users</td>
      <td>No</td>
      <td>Documentation is visible to all users who are logged in.</td>
    </tr>
    <tr class="t1row">
      <td>Registered Users</td>
      <td>Yes</td>
      <td>Documentation must be tagged for the appropriate licenses. If appropriately tagged, documentation associated with public scopes is visible to all users who are logged in. Documentation associated with private scopes is only visible to users who have visibility to the private scopes.</td>
    </tr>
    <tr class="t2row">
      <td>Private</td>
      <td>No</td>
      <td>Documents are visible only to API Admins, Business Admins, and users who are members of a group that has visibility of the API (API Context Group or invited independent group).</td>
    </tr>
    <tr class="t1row">
      <td>Private</td>
      <td>Yes</td>
      <td>API documentation mapped to a private license or scope is available only to users who have visibility of the applicable license or a license that includes the applicable scope. Visibility is based on group membership. Note that the API documentation must be tagged according to the tagging rules as explained in <a href="#how_do_i_control_visibility_of_api_documentation">How do I control visibility of API documentation files?</a> below. If an API uses licenses, whatever the <a href="basics_glossary.htm#gl_visibility">visibility</a> setting is for the API, documentation tagging <strong>must</strong> be used.</td>
    </tr>
</tbody>
</table>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_control_visibility_of_api_documentation"></a><h3>How do I control visibility of API documentation files?</h3>

<p>If an API uses licenses, visibility of API documentation files is restricted to users who are authorized, based on their access to licenses, scopes, or operations and the way that the documentation is tagged. The platform offers a series of visibility filters that you can use to control the display of applicable API documentation files, or portions of content within individual files, to authorized users. If the API uses licenses, API documentation tagging must be used.</p>
<p>When API documentation is tagged appropriately, the platform displays documentation to users who are authorized, based on membership of one or more groups that have visibility of the API. Other users do not see the documentation.</p>
<p>Tagging your API documentation, in combination with the licenses feature, gives you a lot of flexibility regarding portions of your API that you show or hide to different audiences. From the API owner's perspective the basic process is essentially:</p>
<ol>
  <li>You determine how you want to package your API to offer it to different audiences. For example, you can:
    <ul>
      <li>Offer the entire API with different quality of service agreements and/or legal agreements.</li>
      <li>Subdivide the API by using the scope mapping feature to map individual operations to specific scopes. The Business Admin must define the licenses, and the scopes that are part of them, so you'll need to coordinate with the Business Admin to make sure your scope mapping strategy results in the correct license offerings to your app developer audience.</li>
    </ul>
    </li>
  
  <li>You apply scopes to your operations and licenses to your API.</li>
  <li>You apply tags to your API documentation as covered in the topics below.</li>
</ol>
<p class="apidoc_note"><strong>Note</strong>: If your API uses licenses at all, you <strong>must</strong> tag your API documentation with the applicable tags so that the documentation is visible to the applicable users. Even if the API is public and the licenses are public, if you don't tag the documentation it will not be visible. At minimum, set up a <strong>metadata.xm</strong>l file with one or more entries that make all your files visible to all users.</p>
<h5>Multi-Level Privacy</h5>
<p>In some cases, you might also apply privacy at various levels. Privacy settings allow you to restrict visibility of certain areas of your API. You can make the entire API private so that it is visible only to invited users; but you can also define licenses or scopes to be private. For example, you might have a group of new operations that need to be tested, and you want to make these available to a beta partner without exposing them to your main customer base. You can do this by defining a private scope, assigning it to a private license, and inviting your beta partner to have visibility to the private license.</p>
<p><a href="#top">Back to top</a></p>



<a name="where_do_i_apply_api_visibility_settings"></a>
<h3>Where do I apply API visibility settings?</h3>
<p>You can limit visibility&#8212;that is, which users can see your API&#8212;by applying privacy settings at these levels:</p>
<ul>
  <li><strong>API</strong>
    <p>You can mark the entire API as private. If the API is private, a user must be a member of an invited group or an API Context Group, or be an API Admin, in order to see the API. If an API is private but all the scopes are public, invited users can see all scopes and operations; if the scopes are private, no matter what the <a href="basics_glossary.htm#gl_visibility">visibility</a> setting is for the API, only users who are specifically invited will see the licenses that include private scopes.</p></li>
  <li><strong>License</strong>
    <p>No matter what the <a href="basics_glossary.htm#gl_visibility">visibility</a> setting is for the API, a license can be public or private. A public license is visible to those who have visibility of the API; if a license is private, specific permission is required.</p></li>
  <li><strong>Scope</strong>
    <p>No matter what the <a href="basics_glossary.htm#gl_visibility">visibility</a> setting is for the API, a scope can be public or private. A public scope is visible to all who have visibility of the API; if a scope is private, a user must be invited to have visibility of a license that includes the scope.</p></li>
</ul>
<p>The table below summarizes these privacy levels.</p>
<table cellspacing="0px" class="doctable" style="width: 98%;">
<thead>
  <tr>
    <th width="15%">If an API is...</th>
    <th width="15%">And a license is...</th>
    <th width="15%">And a scope is...</th>
    <th width="50%">API visibility/doc visibility (if tagged) is...</th>
  </tr>
</thead>
<tbody>
  <tr class="t2row">
    <td>Public</td>
    <td>Public</td>
    <td>Public</td>
    <td>Visible to all.</td>
  </tr>
  <tr class="t1row">
    <td>Public</td>
    <td>Public</td>
    <td>Private</td>
    <td>Visible to all, except private scopes by invitation only.</td>
  </tr>
  <tr class="t2row">
    <td>Public</td>
    <td>Private</td>
    <td>Public</td>
    <td>Visible to all, except private licenses by invitation only.</td>
  </tr>
  <tr class="t1row">
    <td>Public</td>
  <td>Private</td>
  <td>Private</td>
  <td>Visible to all, except private licenses by invitation only.</td>
  </tr>
  <tr class="t2row">
    <td>Private</td>
    <td>Public</td>
    <td>Public</td>
    <td>Visible only to users who are members of an API Context Group or invited group.</td>
  </tr>
  <tr class="t1row">
    <td>Private</td>
    <td>Public</td>
    <td>Private</td>
    <td>Visible to invited users, except private scopes by invitation only.</td>
  </tr>
  <tr class="t2row">
    <td>Private</td>
    <td>Private</td>
    <td>Public</td>
    <td>Visible to invited users, except private licenses by invitation only.</td>
  </tr>
  <tr class="t1row">
    <td>Private</td>
    <td>Private</td>
    <td>Private</td>
    <td>Visible to invited users, except private licenses by invitation only.</td></tr>
</tbody>
</table>
<p><a href="#top">Back to top</a></p>
<hr />



<a name="what_are_the_different_ways_i_can_tag_api_documentation"></a><h3>What are the different ways I can tag API documentation?</h3>
<p>There are two main ways that you can tag documentation. When you understand both, you'll be able to design a strategy that best matches your unique scenario and is most efficient for you and appropriate for your audience. You can use them in combination; the two approaches work together to give you fine control over the visibility of your API documentation.</p>
<p>They are:</p>
<ul>
  <li>File-based tagging</li>
  <li>Content-based tagging</li>
</ul>
<h5>File-based tagging</h5>
<p>File-based tagging is the recommended approach for most content. An additional file in the documents folder, <strong>metadata.xml</strong>, controls which files are accessible to which users. This file-based authorization allows you to specify which of your documentation files, or groups of files, are  visible to which users based on the API version and the licenses, scopes, or operations that the user is authorized to view, or based on the user's role. For tagging of API documentation, you must set up the applicable API Version ID in the <strong>metadata.xml</strong> file to ensure that your documentation visibility settings will work.</p>
<h5>Content-based tagging</h5>
<p>Content-based tagging allows you to tag specific pieces of content within a file, to control who can see that piece of content. This more granular approach gives you fine control over the visibility of your content. What a viewing user sees is personalized/customized based on the user's access rights and permissions. To use this feature, you'll need to add some lines of code in the &lt;head&gt; tag of your file, as explained below.</p>
<p>This approach can get complex, so it's best to keep it to a minimum; for example, you could use content-based tagging in your main index file and file-based tagging for the rest of your files. </p>
<p><a href="#top">Back to top</a></p>



<a name="how_does_doc_tagging_work"></a><h3>How does documentation tagging work?</h3>
<p>At runtime, the platform checks the settings on the files and/or content and verifies against the access rights of the viewing user. Where there is a match, content is displayed. Any content that doesn't match the viewer's rights is not displayed to the user.</p>
<p><strong>Note</strong>: A full set of linked files and setup instructions is also available, as a ZIP file that you can customize, upload, and test. To get a copy of the doc tagging ZIP file, <a href="basics_support.htm#how_do_i_contact_technical_support">contact Technical Support</a>.</p>
<p><a href="#top">Back to top</a></p>



<a name="what_is_file_based_tagging_and_how_does_it_work"></a><h3>What is file-based doc tagging and how does it work?</h3>
<p>File-based tagging is the recommended approach for most content. An additional file in the documents folder, <strong>metadata.xml</strong>, controls which files are accessible to which users.</p>
<p>In your documents directory, set up the <strong>metadata.xml</strong> file with permission settings for your API documentation files, using special tags. You can set permissions:</p>
<ul>
  <li>For individual files</li>
  <li>For specific file types</li>
  <li>For folders that should have restricted visibility</li>
</ul>
<p>The settings in the <strong>metadata.xml</strong> file determine not only visibility but also authorization. If file restrictions are set up in the <strong>metadata.xml</strong> file, a user cannot access those files even if the user has the URL for the file.</p>
<p>For instructions on how to set up the <strong>metadata.xml</strong> file, see <a href="#how_do_i_use_file_based_tagging">How do I use the metadata.xml file for file-based tagging?</a></p>
<p><a href="#top">Back to top</a></p>


<a name="what_is_content_based_tagging_and_how_does_it_work"></a><h3>What is content-based doc tagging and how does it work?</h3>
<p>With content-based tagging, you apply special tags to specific pieces of content within a file. At runtime, visibility rules are applied to each section of content according to the tags you set up.</p>
<p>We recommend that you use this approach judiciously. Permissions vary by user, and documentation projects often include links between files, so a simple tagging approach is most efficient. Refer to the examples below for some ideas.</p>
<p>To implement content-based tagging, you'll need to reference the<strong> jquery.js</strong> and <strong>dynamic_docs.js</strong> files within the &lt;head&gt; tag of your HTML files. For an example, see <a href="#contentbased_how_do_i_set_up_my_file">I want to use content-based tagging: how do I set up my file?</a> below.</p>
<p><strong>Note</strong>: Unlike file-based authorization, content-based visibility filters are implemented on the browser side only. This feature is considered a &quot;personalization&quot; feature rather than authorization.</p>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_name_and_reference_my_doc_tags"></a><h3>How do I name and reference my doc tags?</h3>
<p>It's important to make sure your doc tag names exactly match the values set up elsewhere. This is equally true for file-based or content-based tagging.</p>
<p>If there are differences in case, the tags might not work as expected, depending on your environment. It's best to be exact and consistent with regard to spelling and case.</p>
<p>Make sure:</p>
<ul>
  <li>You use the license, scope, and operation names exactly as they are set up in the user interface.</li>
  <li>You use the license, scope, and operation names completely consistently within your <strong>metadata.xml</strong> file and your documentation tags.</li>
  <li>You represent file names in the <strong>metadata.xml</strong> file exactly as they appear in your documentation fileset.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<a name="what_is_the_recommended_approach_to_api_doc_tagging"></a><h3>What is the recommended approach to API documentation tagging?</h3>
<p>File-based tagging is simplest; content-based tagging can get complex, so it's best to keep it to a minimum.</p>
<p>The approach we recommend is to use content-based tagging in your main index file and file-based tagging for the rest of your files. This is an efficient combination that allows you to take advantage of the features of both approaches while keeping things simple and easy to maintain.</p>
<p>There are two key reasons to keep the design of the documentation simple:</p>
<ul>
  <li>If there are many paragraphs tagged for specific user subsets (whether by license, scope, or operation) it can get complicated to track which content is seen by which users. Particularly, you must make sure that both source and destination for any links are viewable by the same users. Otherwise, you might run into one of these issues:
    <ul>
      <li>Users can see a link but do not have permission to follow the link.</li>
      <li>Users do not see a link to a piece of content that they do actually have permission to see, and therefore cannot access content that is relevant to them.</li>
    </ul>
  </li>
  <li>Tagging by paragraph requires more processing, since the platform must check permissions at many levels. A streamlined approach is more efficient on the processing side.</li>
</ul>
<h5>Tagging the index page</h5>
<p>We recommend that you tag the index page with the following:</p>
<ul>
  <li>Private API: Use the InvitedUser tag to make the index page available to all users who are invited to your API.</li>
  <li>Public API: Define at least one public scope, and then tag the index page for that scope in the <strong>metadata.xml</strong> file, so that it will be available to all users.</li>
</ul>
<p class="apidoc_note"><strong>Note</strong>: If there are any overlapping conditions, the user must meet <strong>all</strong> the conditions for the content to be displayed to that user.</p>


<h5>Tagging by user group</h5>
<p>Another approach is to separate out most of your content for different user groups by file. For example, you could have one file for each license you offer; or you could have one file for each operation.</p>
<p>The overview page would then lead in to the various types of content. In this file, you could use the more granular level of tagging by paragraphs, so that each user sees only the links to additional files that are viewable for that user. Other links would not be seen.</p>
<p>Any additional content that would need to be shared by different groups would also have to be tagged at the more granular level.</p>
<p><a href="#top">Back to top</a></p>



<a name="what_is_the_easiest_approach_to_api_doc_tagging"></a>
<h3>My API uses licenses, but I just want my documentation to be visible to everyone. What's the easiest way to set that up?</h3>
<p>If your API uses licenses, and you have content that you want to display to all users, tag your content as visible for a specific public license, scope, or operation. If your API is public and a license is public, content tagged for that license will be visible to all users, even anonymous users (users who have not logged in). If you do not tag the content, it is not displayed to users at all.</p>
<p>To implement this, you'll need to have a public license and apply it to all your operations.</p>
<p>Create the metadata.xml file in your documents directory, create a single entry as shown below, and substitute your actual license name.</p>

<h5>Example #1: Public API using licenses, public license assigned to all operations, target documentation available to all authorized users</h5>
<p>The example below defines a rule that all .html files in the documents folder for this API version are only visible to invited users. Note that if you have other types of files, you'll need to list those also, in an additional &lt;target&gt; node, as shown in Example #3.</p>
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;
&lt;metadataconfig xmlns=&quot;http://soa.com/xsd/metadataconfig/1.0&quot;&gt;
  &lt;metadata&gt;
    &lt;target&gt;documents/*\.html&lt;/target&gt;
    &lt;licenses&gt;
      &lt;license name=&quot;mypubliclicensename}&quot;&gt;
      &lt;/license&gt;
    &lt;/licenses&gt;
  &lt;/metadata&gt;
&lt;/metadataconfig&gt;</pre>
<h5>Example #2: Private API using licenses, documentation visible to all invited users (HTML files)</h5>
<p>If your API is private, but you don't care about restricting access to API documentation, you can use the &lt;roles&gt; tag to make all the documentation visible to invited users. </p>
<p>The example below defines a rule that all .html files in the documents folder for this API are visible to invited users.</p>
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;
&lt;metadataconfig xmlns=&quot;http://soa.com/xsd/metadataconfig/1.0&quot;&gt;
  &lt;metadata&gt;
    &lt;target&gt;documents/*\.html&lt;/target&gt;
    &lt;roles&gt;
      &lt;role name=&quot;InvitedUser&quot;/&gt;
    &lt;/roles&gt;
  &lt;/metadata&gt;
&lt;/metadataconfig&gt;</pre>


<h5>Example #3: Private API using licenses, documentation visible to all invited users (multiple file types)</h5>
<p>The example below defines a rule that makes multiple documentation files for the API visible to invited users. In this example, the API documentation includes several file types. Each is listed separately in an additional &lt;target&gt; node.</p>
<pre>
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;
&lt;metadataconfig xmlns=&quot;http://soa.com/xsd/metadataconfig/1.0&quot;&gt;
  &lt;metadata&gt;
    &lt;target&gt;documents/*\.html&lt;/target&gt;
    &lt;target&gt;documents/*\.jpg&lt;/target&gt;
    &lt;target&gt;documents/*\.pdf&lt;/target&gt;
    &lt;roles&gt;
      &lt;role name=&quot;InvitedUser&quot;/&gt;
    &lt;/roles&gt;
  &lt;/metadata&gt;
&lt;/metadataconfig&gt;</pre>



<p><a href="#top">Back to top</a></p>




<div class = "divider1"></div>
<a name="h_doc_tagging_by_file"></a><h3>Doc Tagging By File</h3>




<a name="how_do_i_use_file_based_tagging"></a><h3>How do I use the metadata.xml file for file-based tagging?</h3>
<p>You can control the visibility of API documentation and downloadable files by creating a <strong>metadata.xml </strong>file that includes one or more regular expressions and uploading it to the /documents folder for the API (<strong>API</strong> &gt; <strong>Documentation</strong> &gt; <strong>File Explorer</strong>). The regular expressions specify which files can be seen, via tagging, for one or more of the following:</p>
<ul>
  <li><a href="#docfilter_bylicense">License</a></li>
  <li><a href="#docfilter_byscope">Scope</a></li>
  <li><a href="#docfilter_byoperation">Operation</a></li>
  <li><a href="#docfilter_bydocumenttype">Document type (file extension)</a></li>
  <li><a href="#docfilter_specificfile">Specific file</a></li>
  <li><a href="#docfilter_byapiversion">API version</a></li>
</ul>
<p class="apidoc_note"><strong>Note</strong>: If your API uses licenses, you <strong>must</strong> include the <strong>metadata.xml</strong> file with appropriate tagging. If you don't specify a <strong>metadata.xml</strong> file with permissions to your content, or if you include a <strong>metadata.xml</strong> file but don't add the information about your files, your users will not see your documentation, other than the properties file and any legal agreements. This includes a custom CSS file or any other assets associated with your documentation. This is always true when the API uses licenses, even if the API is public.</p>
<p>Apply the desired filters to the complete documentation set. You can also add version-specific entries (See <a href="#docfilter_byapiversion">How do I use file-based tagging to filter by API version?</a> below).</p>


<p>In the <strong>metadata.xml</strong> file, include each filter that you want to apply, enclosed in &lt;metadata&gt; &lt;/metadata&gt; tags. Examples of each are given in the sections below.</p>
<p>The filters are executed in sequential order. In the file, organize your filters in this order:</p>
<ol>
  <li>First, use filters that apply to all documents.</li>
  <li>Next, use API version filters.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<a name="advantages_of_file_based_tagging"></a><h3>What are the advantages of file-based tagging?</h3>
<p>Tagging at the file level has several key advantages:</p>
<ul>
  <li>It's simplest for you; you apply one tag to a whole file or set of files rather than tagging specific portions of individual files.</li>
  <li>It's the most secure type of tagging. Even a user who knows the URL to a file will not be able to access it.</li>
  <li>It requires the least amount of processing on the part of the platform.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<a name="what_does_metadata_xml_look_like"></a><h3>What does the metadata.xml file look like?</h3>
<p>The metadata.xml file has the following key elements:</p>
<ul>
  <li>XML version</li>
  <li>&lt;metadataconfig&gt; tag</li>
  <li>One or more &lt;metadata&gt; tags. For details, see <a href="#what_does_an_entry_in_the_metadata_xml_file_look_like">What does an entry in the metadata.xml file look like?</a> below.</li>
</ul>
<p>Some examples of the full metadata.xml file are shown below.</p>

<h5><strong><a name="ex_metadata_xml_01"></a>Sample metadata.xml file #1</strong></h5>
<p>The example below shows a simple <strong>metadata.xml</strong> file with one API version, 0157f427-0b07-4ae6-9ade-26f4ef3bcc71.acmepaymentscorp; one operation, addPayment; one scope, fullscope-public; and one license, Gold. There is one file within each tag.</p>
<p>In this scenario, users will only see the link to a specific file if they have permission to the applicable API version, scope, operation, or license. Users who do not have the applicable visibility permissions will not see the links (and would not be able to access the files even if they had the URLs).</p>
<p><strong>Note</strong>: In setting up your <strong>metadata.xml</strong> file, make sure you get the names of referenced objects, such as license, scope, or file names, exactly right. Make sure the case matches.</p>
<pre>
&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;metadataconfig xmlns="http://soa.com/xsd/metadataconfig/1.0"&gt;
  &lt;metadata&gt;
    &lt;APIVersionID xmlns="http://soa.com/xsd/api/1.0"&gt;0157f427-0b07-4ae6-9ade-26f4ef3bcc71.acmepaymentscorp&lt;/APIVersionID&gt;
    &lt;target&gt;documents/index.html&lt;/target&gt;
    &lt;roles&gt;
      &lt;role name="InvitedUser"/&gt;
    &lt;/roles&gt;
  &lt;/metadata&gt;
  &lt;metadata&gt;
    &lt;target&gt;documents/addPayment.html&lt;/target&gt;
    &lt;operations&gt;
      &lt;operation name="addPayment"/&gt;
    &lt;/operations&gt;
  &lt;/metadata&gt;
  &lt;metadata&gt;
    &lt;target&gt;documents/fullscope-public.html&lt;/target&gt;
    &lt;scopes&gt;
      &lt;scope name="fullscope-public"/&gt;
    &lt;/scopes&gt;
  &lt;/metadata&gt;
  &lt;metadata&gt;
    &lt;target&gt;documents/license_public_gold.html&lt;/target&gt;
    &lt;licenses&gt;
      &lt;license name="Gold"/&gt;
    &lt;/licenses&gt;
  &lt;/metadata&gt;
&lt;/metadataconfig&gt;
</pre>


<h5><strong>Sample metadata.xml file #2</strong></h5>
<p>The sample file below  is appropriate for this scenario:</p>
<ul>
  <li>Three licenses: Bronze, Gold, and Beta</li>
  <li>Three scopes: ReadOnly, FullScope, and Beta</li>
  <li>Five operations: getPayment is assigned to ReadOnly/Bronze, listPayments to Beta, the other three to FullScope/Gold</li>
  <li>Two API versions. Most files are for both API versions, but each version also has one file that's designated for that specific version. The index file is designated for the main version.</li>
</ul>
<p>You can use this example and customize it for your own licenses, scopes, or operations.</p>

<pre>&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;metadataconfig xmlns="http://soa.com/xsd/metadataconfig/1.0"&gt;
  &lt;metadata&gt;
    &lt;APIVersionID xmlns="http://soa.com/xsd/api/1.0"&gt;<strong>0157f427-0b07-4ae6-9ade-26f4ef3bcc71.acmepaymentscorp</strong>&lt;/APIVersionID&gt;
    &lt;target&gt;documents/<strong>index.html</strong>&lt;/target&gt;
    &lt;scopes&gt;
      &lt;scope name="<strong>ReadOnly</strong>"/&gt;
    &lt;/scopes&gt;
  &lt;/metadata&gt;
  &lt;metadata&gt;
    &lt;target&gt;documents/<strong>m_addPayment.htm</strong>l&lt;/target&gt;
    &lt;operations&gt;
      &lt;operation name="<strong>addPayment</strong>"/&gt;
    &lt;/operations&gt;
  &lt;/metadata&gt;
  &lt;metadata&gt;
    &lt;target&gt;documents/<strong>m_modifyPayment.html</strong>&lt;/target&gt;
    &lt;operations&gt;
      &lt;operation name="<strong>modifyPayment</strong>"/&gt;
    &lt;/operations&gt;
  &lt;/metadata&gt;
  &lt;metadata&gt;
    &lt;target&gt;documents/<strong>m_deletePayment.html</strong>&lt;/target&gt;
    &lt;operations&gt;
      &lt;operation name="<strong>deletePayment</strong>"/&gt;
    &lt;/operations&gt;
  &lt;/metadata&gt;
  &lt;metadata&gt;
    &lt;target&gt;documents/<strong>m_getPayment.html</strong>&lt;/target&gt;
    &lt;operations&gt;
      &lt;operation name="<strong>getPayment</strong>"/&gt;
    &lt;/operations&gt;
  &lt;/metadata&gt;
  &lt;metadata&gt;
    &lt;target&gt;documents/<strong>m_listPayments.html</strong>&lt;/target&gt;
    &lt;operations&gt;
      &lt;operation name="<strong>listPayments</strong>"/&gt;
    &lt;/operations&gt;
  &lt;/metadata&gt;
  &lt;metadata&gt;
    &lt;target&gt;documents/<strong>scope_public_FullScope.html</strong>&lt;/target&gt;
    &lt;scopes&gt;
      &lt;scope name="<strong>FullScope</strong>"/&gt;
    &lt;/scopes&gt;
  &lt;/metadata&gt;
  &lt;metadata&gt;
    &lt;target&gt;documents/<strong>scope_public_ReadOnly.html</strong>&lt;/target&gt;
    &lt;scopes&gt;
      &lt;scope name="<strong>ReadOnly</strong>"/&gt;
    &lt;/scopes&gt;
  &lt;/metadata&gt;
  &lt;metadata&gt;
    &lt;target&gt;documents/<strong>scope_private_Beta.html</strong>&lt;/target&gt;
    &lt;scopes&gt;
      &lt;scope name="<strong>Beta</strong>"/&gt;
    &lt;/scopes&gt;
  &lt;/metadata&gt;
  &lt;metadata&gt;
    &lt;target&gt;documents/<strong>license_public_bronze.html</strong>&lt;/target&gt;
    &lt;licenses&gt;
      &lt;license name="<strong>Bronze</strong>"/&gt;
    &lt;/licenses&gt;
  &lt;/metadata&gt;
  &lt;metadata&gt;
    &lt;target&gt;documents/<strong>license_private_beta.html</strong>&lt;/target&gt;
    &lt;licenses&gt;
      &lt;license name="<strong>Beta</strong>"/&gt;
    &lt;/licenses&gt;
  &lt;/metadata&gt;
  &lt;metadata&gt;
    &lt;target&gt;documents/<strong>license_public_gold.html</strong>&lt;/target&gt;
    &lt;licenses&gt;
      &lt;license name="<strong>Gold</strong>"/&gt;
    &lt;/licenses&gt;
  &lt;/metadata&gt;
  &lt;metadata&gt;
    &lt;APIVersionID xmlns="http://soa.com/xsd/api/1.0"&gt;0157f427-0b07-4ae6-9ade-26f4ef3bcc71&lt;/APIVersionID&gt;
    &lt;target&gt;documents/<strong>user_invited.html</strong>&lt;/target&gt;
    &lt;roles&gt;
      &lt;role name="<strong>InvitedUser</strong>"/&gt;
    &lt;/roles&gt;
  &lt;/metadata&gt;
&lt;/metadataconfig&gt;</pre>
<p><a href="#top">Back to top</a></p>



<a name="what_does_an_entry_in_the_metadata_xml_file_look_like"></a><h3>What does an entry in the metadata.xml file look like?</h3>
<p>Each entry in the <strong>metadata.xml</strong> file has the following elements:</p>
<ul>
  <li><strong>Optional</strong>: an &lt;APIVersionID&gt; tag that limits the rule to a specific version of the API. If an API version is not specified, &lt;metadata&gt; tags apply to all versions of the API.</li>
  <li><strong>Required</strong>: a &lt;target&gt; node that states which files are affected by the rule. There can be multiple &lt;target&gt; nodes but there must be at least one.</li>
  <li><strong>Required</strong>: A node that specifies the visibility rules that are applied to the file. This can be one of several types of nodes; for example, limiting visibility by role, license, scope, or operation. Operations are as specified for the API; scopes and licenses are as specified by the Business Admin. There can be more than one, but they must be of the same type.</li>
</ul>

<p>The sample file below has a single entry.</p>
<p>In the sample &lt;metadata&gt; node below, visibility is limited by role. Only users with the role of <strong>InvitedUser</strong> will see the <strong>index.html file</strong> specified in the &lt;target&gt; node.</p>
<pre>&lt;metadata&gt;
  &lt;APIVersionID xmlns=&quot;http://soa.com/xsd/api/1.0&quot;&gt;0157f427-0b07-4ae6-9ade-26f4ef3bcc71.acmepaymentscorp&lt;/APIVersionID&gt;
  &lt;target&gt;documents/index.html&lt;/target&gt;
  &lt;roles&gt;
    &lt;role name=&quot;InvitedUser&quot;/&gt;
  &lt;/roles&gt;
&lt;/metadata&gt;</pre>
<p><a href="#top">Back to top</a></p>



<a name="docfilter_byapiversion"></a><h3>How do I use file-based tagging to define the API version a file applies to?</h3>
<p>If you have a file that includes content for a specific API version, you can apply the &lt;APIVersionID&gt; tag.</p>
<p>This tag is the primary way that the developer portal controls which API documents apply to which version. In Default Theme/Hermosa Theme, when a user chooses to view documentation for a specific API version, the platform uses the API version tag to filter visibility so that the user only sees documentation that's applicable to the specified API version.</p>
<p>An example is shown below. To see this line in context, see <a href="#ex_metadata_xml_01">Sample metadata.xml file #1</a>.</p>
<pre>&lt;APIVersionID xmlns=&quot;http://soa.com/xsd/api/1.0&quot;&gt;0157f427-0b07-4ae6-9ade-26f4ef3bcc71.tenantid&lt;/APIVersionID&gt;
</pre>
<p><a href="#top">Back to top</a></p>



<a name="docfilter_bylicense"></a><h3>How do I use file-based tagging to filter by license?</h3>
<p>The &lt;licenses&gt; filter in the <strong>metadata.xml</strong> file allows you to specify one or more target documents and one or more license names. Users must have visibility of <strong>all</strong> specified licenses in order to have visibility of the specified documents.</p>
<p>An example is shown below.</p>
<pre>
&lt;metadata&gt;
  &lt;target&gt;documents/license1.html&lt;/target&gt;
  &lt;licenses&gt;
    &lt;license name="license1"&gt;
    &lt;/license&gt;
  &lt;/licenses&gt;
&lt;/metadata&gt;
</pre>
<p><a href="#top">Back to top</a></p>



<a name="docfilter_byscope"></a><h3>How do I use file-based tagging to filter by scope?</h3>
<p>The &lt;scopes&gt; filter in the <strong>metadata.xml</strong> file allows you to specify one or more target documents and one or more scope names. Users must have visibility of <strong>all</strong> specified scopes (via licenses that they have visibility of) in order to have visibility of the specified documents. In the developer portal, the API Admin maps scopes to API operations using the information set up in the <strong>Manage Licensing page</strong>, accessed via the API's <strong>Details</strong> page.</p>
<p>An example is shown below.</p>
<pre>
&lt;metadata&gt;
  &lt;target&gt;documents/scope1.html&lt;/target&gt;
  &lt;target&gt;documents/scope2.html&lt;/target&gt;
  &lt;scopes&gt;
    &lt;scope name="scope1"&gt;
    &lt;/scope&gt;
    &lt;scope name="scope2"&gt;
    &lt;/scope&gt;
  &lt;/scopes&gt;
&lt;/metadata&gt;
</pre>
<p><a href="#top">Back to top</a></p>



<a name="docfilter_byoperation"></a><h3>How do I use file-based tagging to filter by operation?</h3>
<p>The &lt;operations&gt; filter in the <strong>metadata.xml</strong> file allows you to specify one or more target documents and one or more operation names. Users must have visibility of <strong>all</strong> specified operations (via licenses that they have visibility of, that include scopes the operations are mapped to) in order to have visibility of the specified document. The API Admin maps scopes to API operations using the information set up in the <strong>Manage Licensing page</strong>, accessed via the API's <strong>Details</strong> page.</p>
<p>An example is shown below.</p>
<pre>
&lt;metadata&gt;
  &lt;target&gt;documents/operation2.html&lt;/target&gt;
  &lt;operations&gt;
    &lt;operation name="operation2"&gt;
    &lt;/operation&gt;
  &lt;/operations&gt;
&lt;/metadata&gt;
</pre>
<p>For information on how to specify multiple target documents or multiple resources, see <a href="#docfilter_multiple_target_tags">How do I use file-based tagging to assign the same filter to more than one file type?</a> below.</p>
<p><a href="#top">Back to top</a></p>



<a name="docfilter_multiple_target_tags"></a>
<h3>How do I use file-based tagging to assign the same filter to more than one file type?</h3>
<p>Within a specific &lt;metadata&gt; tag, you can specify multiple &lt;target&gt; nodes. The rules specified in the &lt;metadata&gt; tag are applied to all files specified in one or more &lt;target&gt; nodes.</p>
<p>In the example below, users must have visibility of <strong>all</strong> specified operations (via licenses that they have visibility of, that include scopes the operations are mapped to) in order to have visibility of either of the specified documents.</p>
<pre>
&lt;metadata&gt;
  &lt;target&gt;documents/operation1.html&lt;/target&gt;
  &lt;target&gt;documents/operation2.html&lt;/target&gt;
  &lt;operations&gt;
    &lt;operation name="operation1"&gt;
    &lt;/operation&gt;
    &lt;operation name="operation2"&gt;
    &lt;/operation&gt;
  &lt;/operations&gt;
&lt;/metadata&gt;
</pre>
<p><a href="#top">Back to top</a></p>



<a name="docfilter_byrole"></a><h3>How do I use file-based tagging to filter by user role?</h3>
<p>You can restrict visibility of a specific piece of content by specifying the entire documentation file in the <strong>metadata.xml</strong> file so that it can only be seen by users with a specific login status. The valid roles are:</p>
<ul>
  <li><strong>InvitedUser</strong>: for a Private API, a user who has been invited to have visibility of the API and has accepted (generally via an invitation to a group that has visibility of the API)</li>
  <li><strong>Admin</strong>: the administrator of the referenced object. Can be the admin for an app, app version, API, API version, or group.</li>
  <li><strong>SiteAdmin</strong>: the administrator of the tenant that owns the resource.</li>
  <li><strong>SystemAdmin</strong>: used only for access root workflow.</li>
  <li><strong>BusinessAdmin</strong>. For objects that do not belong to a business, the tenant's business scope will be applied</li>
</ul>
<p>In the example below, all invited users for this version of this private API will see the index.html page.</p>
<pre>&lt;metadata&gt;
  &lt;APIVersionID xmlns="http://soa.com/xsd/api/1.0"&gt;0157f427-0b07-4ae6-9ade-26f4ef3bcc71.acmepaymentscorp&lt;/<strong>APIVersionID</strong>&gt;
  &lt;target&gt;documents/<strong>index.html</strong>&lt;/target&gt;
  &lt;roles&gt;
    &lt;role name="<strong>InvitedUser</strong>"/&gt;
  &lt;/roles&gt;
&lt;/metadata&gt;</pre>



<h5><a name="ex_filebased_multipleroles"></a>Multiple roles: visibility for either role</h5>
<p>When using file-based tagging to restrict visibility by user role, you can also tag content for multiple roles. If the viewing user has <strong>one</strong> of the specified roles, the content is visible. An example is shown below.</p>
<pre>&lt;metadata&gt;
  &lt;APIVersionID xmlns=&quot;http://soa.com/xsd/api/1.0&quot;&gt;0157f427-0b07-4ae6-9ade-26f4ef3bcc71.acmepaymentscorp&lt;/APIVersionID&gt;
  &lt;target&gt;documents/operation1.html&lt;/target&gt;
  &lt;roles&gt;
    &lt;role name=&quot;SiteAdmin&quot;&gt;
    &lt;/role&gt;
    &lt;role name=&quot;ApiAdmin&quot;&gt;
    &lt;/role&gt;
  &lt;/roles&gt;
&lt;/metadata&gt;</pre>
<p><a href="#top">Back to top</a></p>



<a name="docfilter_bydocumenttype"></a><h3>How do I use file-based tagging to filter by file extension?</h3>
<p>In the <strong>metadata.xml</strong> file, you can specify a filtering rule that applies to all files of a specific file type by specifying a regular expression in the &lt;target&gt; node.</p>
<p>For example, if you want to define a specific rule to apply to all .html files in the /documents folder, you could define the &lt;target&gt; node as follows:</p>
<pre>
&lt;target&gt;.*\.html&lt;/target&gt;
</pre>
<h5><a name="ex_regularexpression01"></a>Example: HTML file extension, one role</h5>
<p>The example below defines a rule that all .html files in the documents folder for this API version are only visible to invited users:</p>
<pre>&lt;metadata&gt;
  &lt;target&gt;documents/*\.html&lt;/target&gt;
  &lt;roles&gt;
    &lt;role name=&quot;InvitedUser&quot;/&gt;
  &lt;/roles&gt;
&lt;/metadata&gt;</pre>

<h5>Example: HTML file extension, multiple roles</h5>
<p>The example below defines a rule that all .html files in the documents folder for this API version are only visible to users with either of two roles:</p>
<pre>&lt;metadata&gt;
  &lt;target&gt;documents/*\.html&lt;/target&gt;
  &lt;roles&gt;
    &lt;role name="SiteAdmin"&gt;
    &lt;/role&gt;
    &lt;role name="ApiAdmin"&gt;
    &lt;/role&gt;
  &lt;/roles&gt;
&lt;/metadata&gt;</pre>
<h5>Example: Microsoft Word files</h5>
<p>The example below defines a rule that applies to all Microsoft Word .docx files in the /documents folder:</p>
<pre>
&lt;target&gt;.*\.docx&lt;/target&gt;
</pre>


<h5>Example: Multiple &lt;target&gt; nodes</h5>
<p>You can also specify multiple &lt;target&gt; filters. To specify a rule that applies to all .html and .jpg files in the /documents folder, you could include two &lt;target&gt; nodes:</p>
<pre>
&lt;target&gt;.*\.html&lt;/target&gt;
&lt;target&gt;.*\.jpg&lt;/target&gt;
</pre>
<p><a href="#top">Back to top</a></p>



<a name="docfilter_specificfile"></a>
<h3>How do I use file-based tagging to limit visibility of a specific file?</h3>
<p>You can filter visibility of a specific file by specifying the filename in the &lt;target&gt; node. For example, you might want to define a filtering rule that applies to a specific PDF file, <strong>sample.pdf</strong>, so that it's visible only to users with a certain license. To do this you would specify the filename in the &lt;target&gt; node and the license in the &lt;license&gt; node, as shown below.</p>
<pre>
&lt;metadata&gt;
  &lt;target&gt;apis/sample.pdf&lt;/target&gt;
  &lt;licenses&gt;
    &lt;license name=&quot;license1&quot;&gt;
    &lt;/license&gt;
  &lt;/licenses&gt;
&lt;/metadata&gt;
</pre>
<p><a href="#top">Back to top</a></p>



<a name="docfilter_byapiversion"></a><h3>How do I use file-based tagging to filter by API version?</h3>
<p>In addition to applying filters to all API documentation, you can further filter documentation for a specific version of the API by using the <strong>&lt;api:APIVersionID&gt;</strong> filter.</p>
<p>You configure this filter by extracting the API Version ID plus tenant name (for example, <strong>0157f427-0b07-4ae6-9ade-26f4ef3bcc71.acmepaymentscorp</strong>) from the API documentation URL. It's the ID that's after /versions/ in the path. In the example below, it's the second ID in the path.</p>
<p><strong>Example URL:</strong></p>
<pre>https://{hostname}/api/69afe821-0660-4c78-a593-809535d6223f.acmepaymentscorp/versions/0157f427-0b07-4ae6-9ade-26f4ef3bcc71.acmepaymentscorp/documents</pre>


<p>If you want to include an API version filter, place it after the &lt;metadata&gt; tag, before the &lt;target&gt; node.</p>
<p>Refer to the examples in <a href="#what_does_metadata_xml_look_like">What does the metadata.xml file look like?</a> above.</p>


<h5>Example: specific API version, all HTM files, specific license</h5>
<p>The example below  limits access to all .html files for the specified API version so that those files are only visible to users with visibility of the Gold license:</p>
<pre>
&lt;metadata&gt;
  &lt;api:APIVersionID&gt;0157f427-0b07-4ae6-9ade-26f4ef3bcc71.acmepaymentscorp&lt;/api:APIVersionID&gt;
  &lt;target&gt;.*\.html&lt;/target&gt;
  &lt;licenses&gt;
    &lt;license name=&quot;Gold&quot;/&gt;
  &lt;/licenses&gt;
&lt;/metadata&gt;
</pre>


<h5><a name="ex_filebased_multipleoperations"></a>Example: specific API version, specific file, specific operations</h5>
<p>The example below limits visibility of all PDF files for the specified version to users with visibility of either of the specified operations:</p>
<pre>
&lt;metadata&gt;
  &lt;api:APIVersionID&gt;0157f427-0b07-4ae6-9ade-26f4ef3bcc71.acmepaymentscorp&lt;/api:APIVersionID&gt;
  &lt;target&gt;apis/sample.html&lt;/target&gt;
  &lt;operations&gt;
    &lt;operation name=&quot;operation1&quot;&gt;
    &lt;/operation&gt;
    &lt;operation name=&quot;operation2&quot;&gt;
    &lt;/operation&gt;
  &lt;/operations&gt;
&lt;/metadata&gt;
</pre>
<p><a href="#top">Back to top</a></p>



<a name="docfilter_operators"></a><h3>When I'm doing file-based tagging, can I use operators?</h3>
<p>The metadata.xml file does not support the use of operators.</p>
<p>When using file-based tagging to restrict visibility by user role, you can tag content for multiple roles. If the viewing user has <strong>one</strong> of the specified roles, the content is visible.</p>
<p>The same thing applies to tagging for multiple licenses, scopes, or operations.</p>
<p>The metadata.xml file does not support the <strong>and</strong> operator. The default behavior is always <strong>or</strong>.</p>
<p>For an example of tagging for multiple roles, see <a href="#ex_filebased_multipleroles">Multiple roles: visibility for either role</a>. For an example of tagging for multiple operations, see <a href="#ex_filebased_multipleoperations">Example: specific API version, specific file, specific operations</a>.</p>
<p><a href="#top">Back to top</a></p>



<a name="docfilter_regularexpressions"></a><h3>When I'm doing file-based tagging, what regular expressions can I use in metadata.xml?</h3>
<p>In some cases, you can use a regular expression to add flexibility in terms of the fileset that a rule in the <strong>metadata.xml</strong> file applies to.</p>
<p>The table below shows regular expressions you can use.</p>
<table cellspacing="0px" class="doctable" style="width: 98%;">
  <thead>
    <tr>
      <th width="40%">This regular expression...</th>
      <th width="60%">Does this...</th>
    </tr>
  </thead>
  <tbody>
    <tr class="t2row">
      <td>*\</td>
      <td><p>Applies the rule to all files matching the stated context. For example:</p>
        <pre>api12345/*\.pdf</pre>
        <p>The above applies the rule to all PDF files in the api12345 folder</p></td>
    </tr>
  </tbody>
</table>
<p>For an example, see <a href="#ex_regularexpression01">Example: HTML file extension, one role</a>.</p>
<p><a href="#top">Back to top</a></p>




<div class = "divider1"></div>
<a name="h_doc_tagging_by_content"></a><h3>Doc Tagging By Content</h3>




<a name="contentbased_overview"></a><h3>When should I use doc tagging by content?</h3>
<p>Setting up the <strong>metadata.xml</strong> file covers the broad strokes of your documentation tagging, defining which files are accessible to which audiences.</p>
<p>It's best to organize the bulk of your content using file-based tagging, so that entire files are visible or hidden based on a user's visibility settings. However, there will be at least one or two instances where you'll need to designate content within one file as being  visible only to users with access to the applicable licenses, scopes, or operations. This is where doc tagging by content comes in.</p>
<p>For example, let's say you have two new operations in beta testing and want to make those available only to your beta testing partners. You:</p>
<ul>
  <li>Define the beta scope and license.</li>
  <li>Assign the beta scope to your new operations.</li>
  <li>Write the documentation for those operations.</li>
  <li>Set up the <strong>metadata.xml</strong> file so that the beta documentation is available only to those with the beta license.</li>
  <li>Set up your main index file with a link to the file for the new operations, tagged for the new scope or license.</li>
</ul>
<p>The lead-in to your API documentation content will need to accommodate all possible users, with some way to branch off to private content that's accessible only to a restricted audience, as in the above example.</p>
<p>The content-based tagging approach lets you tag specific content within an individual file, so that individual portions of the file are visible only to specific audiences.</p>
<p>A common, and recommended, approach is to customize the main index page, creating a separate section for each user group (based on visibility rights). Sections of content tagged for users with specific visibility rights are invisible to unauthorized users. Each user only sees content that he/she is authorized to view, and from there can click through to other files containing authorized content.</p>
<p>The platform displays content by checking the permissions of the viewing user for licenses, scopes, and operations and comparing the viewer's permissions with the licenses, scopes, and operations specified in the tagged content.</p>
<p>Where the tags match the user's permission, the content is displayed. If a tag specifies a license, scope, or operation to which the viewer does not have access, the content is not displayed.</p>
<p><a href="#top">Back to top</a></p>




<a name="contentbased_how_do_i_set_up_my_file"></a><h3>I want to use content-based tagging. How do I set up my file?</h3>
<p>You can use the content-based tagging feature to show or hide sections of a specific document based on the visibility access rights of the viewing user. To use this feature you'll need to do these things:</p>
<ul>
  <li>Modify the &lt;html&gt; tag in your file. See <a href="#how_do_i_set_up_the_html_tag">How do I set up the &lt;html&gt; tag in my file?</a></li>
  <li>Add some lines of code in the &lt;head&gt; tag of your HTML file. See <a href="#how_do_i_set_up_the_head_tag">How do I set up the &lt;head&gt; tag in my file?</a></li>
  <li>Specify a unique value for the {resource.version} variable. See <a href="#what_is_the_resource_version_variable">What is the {resource.version} variable and why is it important?</a></li>
  <li>Tag the applicable content within the file. See <a href="#contentbased_whattags">What tags are available for content-based doc tagging?</a></li>
</ul>
<p><a href="#top">Back to top</a></p>



<a name="contentbased_whattags"></a><h3>What  tags are available for content-based doc tagging?</h3>
<p>The following tags are supported for doc tagging within a specific file:</p>
<ul>
  <li><a href="#doctags_showforlicense">soa:showforlicense</a></li>
  <li><a href="#doctags_showforscope">soa:showforscope</a></li>
  <li><a href="#doctags_showforoperation">soa:showforoperation</a></li>
  <li><a href="#doctags_showforrole">showforrole</a></li>
  <li><a href="#doctags_showforanonymoususer">soa:showforanonymoususer</a></li>
  <li><a href="#doctags_showforloggedinuser">soa:showforloggedinuser</a></li>
</ul>
<p>In each scenario, you'll need to enclose the relevant content within specific code tags as outlined in <a href="#how_do_i_tag_a_section_of_content">How do I tag a section of content?</a> below.</p>
<p class="apidoc_note"><strong>Note</strong>: In the tags, make sure that the scope, license, or operation name is exactly the same as it is in the user interface, including case. Case differences might not be an issue, but it's best to be exact.</p>
<p><strong>Note</strong>: Tags are mutually exclusive and cannot be nested.</p>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_set_up_the_html_tag"></a><h3>How do I set up the &lt;html&gt; tag in my file?</h3>
<p>To the HTML tag at the very top of the file, add <strong>xmlns:soa=&quot;http://soa.com</strong>. Your entry should look similar to the following: </p>
<pre>
&lt;html lang=&quot;en&quot; xmlns:soa=&quot;http://soa.com&gt;</pre>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_set_up_the_head_tag"></a><h3>How do I set up the &lt;head&gt; tag in my file?</h3>
<p>Within the &lt;head&gt; tag, after the &lt;title&gt; tag, add the following lines, replacing the {resource.version} variable with your own unique value:</p>
    <pre>
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/resources/style/reset.css&quot;/&gt;  
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/resources/style/base.css&quot;/&gt; 

&lt;script language=&quot;javascript&quot; src=&quot;/ui/apps/atmosphere/{resource.version}/resources/uiframework/jquery/jquery.js&quot;
  type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;script language=&quot;javascript&quot; src=&quot;/ui/apps/atmosphere/{resource.version}/resources/console/javascript/dynamic_docs.js&quot;
  type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</pre>
<p><strong>Note</strong>: when you reference reset.css, as in the above example, you must also define styles in your custom css. For more information, see <a href="api_admin_content_guidelines.htm#platform_reset_css">What are reset.css and base.css and why would I use them?</a></p>
<p>For information about the {resource.version} variable and what value to use, see <a href="#what_is_the_resource_version_variable">What is the {resource.version} variable and why is it important?</a></p>
<p>If you need to add compatibility for users of IE9 and below, you can include a conditional comment to an additional stylesheet. For details and an example, see <a href="api_admin_documentation_maintenance.htm#ie_9_compatibility">How do I make sure my API documentation is rendered correctly for users of Internet Explorer 9 and below?</a></p>

<p>Below is an example of the opening &lt;html&gt; tag and entire &lt;head&gt; tag of a sample HTML file, showing where the additional entries are placed to implement the documentation tagging feature.</p>
<pre>&lt;html <strong>lang="en" xmlns:soa="http://soa.com</strong>"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;
&lt;meta http-equiv="X-UA-Compatible" content="IE=edge" /&gt;

&lt;title&gt;API Documentation Overview&lt;/title&gt;

&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/resources/style/reset.css&quot;/&gt;  
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/resources/style/base.css&quot;/&gt; 

&lt;script language=&quot;javascript&quot; src=&quot;/ui/apps/atmosphere/123456/resources/uiframework/jquery/jquery.js&quot;
  type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;script language=&quot;javascript&quot; src=&quot;/ui/apps/atmosphere/123456/resources/console/javascript/dynamic_docs.js&quot;
  type=&quot;text/javascript&quot;&gt;&lt;/script&gt;<strong>
</strong>
&lt;/head&gt;</pre>
<p><a href="#top">Back to top</a></p>



<a name="what_is_the_resource_version_variable"></a><h3>What is the {resource.version} variable and why is it important?</h3> 
<p>If you want to use content-based tagging in a documentation file, the doc file must reference these two JavaScript files:</p>
<pre>
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/resources/style/reset.css&quot;/&gt;  
&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/resources/style/base.css&quot;/&gt; 

&lt;script language=&quot;javascript&quot; src=&quot;/ui/apps/atmosphere/{resource.version}/resources/uiframework/jquery/jquery.js&quot;
  type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;script language=&quot;javascript&quot; src=&quot;/ui/apps/atmosphere/{resource.version}/resources/console/javascript/dynamic_docs.js&quot;
  type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</pre>
<p>In the file paths, you can use whatever value you want to use in the /{resource.version}/ part of the path. For example, you could use the platform version (recommended) or your API version or API doc version.</p>
<p>The importance of this value is in controlling the version of the <strong>dynamic_docs.js</strong> file that is served to your users. This file is cached by the browser, for efficiency. However, if there is a new version with increased capabilities, and you use those new capabilities in a new version of your documentation, when your users are viewing the file you'll want the browser to use the new version of the <strong>dynamic_docs.js</strong> file, not an earlier, cached version.</p>
<p>In this scenario, all you need to do is update the value of the <strong>{resource.version}</strong> variable in the file path. Changing the value ensures that when a user accesses your documentation, the browser will reference the latest version of the file.</p>
<p>If you see in the release notes for a new version that there are updates to the dynamic documentation capabilities, it's best to update the value of your {resource.version} variable to make sure you and your users get the full functionality of the new features.</p>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_tag_a_section_of_content"></a><h3>How do I tag a specific section of content?</h3>
<p>To use content-based tagging, you must include specific information in the &lt;html&gt; tag at the top of the file, as covered in <a href="#how_do_i_set_up_the_html_tag">How do I set up the &lt;html&gt; tag in my file?</a> and in the &lt;head&gt; tag, as covered in <a href="#how_do_i_set_up_the_head_tag">How do I set up the &lt;head&gt; tag in my file?</a></p>
<p>Once that's done, you can apply the tags to individual sections of content.</p>
<p>To use the content-specific tagging feature, apply tags to individual content sections. Within the section, wrap the content in a &lt;div&gt; tag and apply this class:  <strong>soa-ui-cm-dynamic-docs</strong>. </p>
<p>For information on which tags are available, see <a href="#contentbased_whattags">What tags are available for content-based doc tagging?</a> For information on a specific type of tag, and examples, refer to the applicable topic.</p>
<p>The example below is generic to demonstrate the basic structure of a tag.</p>
<pre>&lt;soa:showfor_{tagname} ...&gt;
&lt;div class=&quot;soa-ui-cm-dynamic-docs&quot;&gt;
&lt;!-- Tagged section goes here--&gt;
&lt;/div&gt;
&lt;/soa:showfor_{tagname}&gt;</pre>
<p><a href="#top">Back to top</a></p>



<a name="doctags_showforlicense"></a><h3>How do I use content-based tagging to restrict visibility by license?</h3>
<p>To restrict visibility of certain pieces of content within a documentation file, so that the content can only be seen by users with visibility of a specific license, specify the license names in the <strong>soa:showforlicense</strong> tag.</p>
<p>To specify multiple licenses, separate them with commas.</p>
<p>If the tagged content is a link to another file, remember to also specify in the <strong>metadata.xml</strong> file that the destination file is accessible to users with visibility of the same license. If you don't, users will see the link and be able to click the link but will not have permission to view the target file.</p>
<p>In the documentation tag, use a &lt;div&gt; tag with the <strong>soa-ui-cm-dynamic-docs</strong> tag assigned to it. Refer to the examples below.</p>
<p>The platform automatically checks access rights, and makes the content accessible to users who have visibility of the applicable license.</p>
<p class="apidoc_note"><strong>Note</strong>: If you want to restrict documentation visibility by license, you must assign scopes to licenses and also assign scopes to the API.</p>

<h5>Example 1: one license</h5>
<p>In the example below, when an app developer has visibility of the Gold license, based on the license's privacy settings and the developer's visibility access, the developer can view the link to a separate file containing information about this license.</p>
<pre>&lt;soa:showforlicense licenseNames=&quot;Gold&quot;&gt;
  &lt;div class=&quot;soa-ui-cm-dynamic-docs&quot;&gt;
    &lt;p&gt;&lt;a href=&quot;about_gold_license.htm&quot;&gt;About the Gold License&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/soa:showforlicense&gt;
</pre>

<h5>Example 2: tagging by license, private API, public license</h5>
<p>In the example below, the API is private but the license (LicenseName_Public) is public. All users who have been invited to the API will see the content below. Users who have not been invited will not see the API at all, and will not be able to access the content.</p>
<pre>&lt;soa:showforlicense licenseNames="<strong>LicenseName_Public</strong>"&gt;
  &lt;div class="soa-ui-cm-dynamic-docs"&gt;
    &lt;p&gt;&lt;a href="<strong>ContentRelatingToPublicLicense.html</strong>"&gt;<strong>Link to file with content relating to LicenseName_Public</strong> (a public license)&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/soa:showforlicense&gt;</pre>

<h5>Example 3: tagging by license, private API, private license</h5>
<p>In the example below, the API is private and the license (LicenseName_Private) is also private. To see this content, users must be invited to the API but also must be invited to this specific license. Even members of groups that are invited to the API will not see the content unless specifically invited to see this license.</p>
<p>Remember to also specify in the <strong>metadata.xml</strong> file that the destination file is accessible to users with visibility of the same license. If you don't, users will see the link and be able to click the link but will not have permission to view the target file.</p>
<pre>&lt;soa:showforlicense licenseNames="<strong>LicenseName_Private</strong>"&gt;
  &lt;div class="soa-ui-cm-dynamic-docs"&gt;
    &lt;p&gt;&lt;a href="<strong>ContentRelatingToPrivateLicense.html</strong>"&gt;<strong>Link to file with content relating to LicenseName_Private </strong>(a private license)&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/soa:showforlicense&gt;</pre>
<p><a href="#top">Back to top</a></p>



<a name="doctags_showforscope"></a><h3>How do I use content-based tagging to restrict visibility by scope?</h3>
<p>To restrict visibility of certain pieces of content within a documentation file, so that the content can only be seen by users with visibility of a specific scope, specify the scope names in the <strong>showforscope</strong> tag.</p>
<p>To specify multiple scopes, separate them with commas.</p>
<p>If the tagged content is a link to another file, remember to also specify in the <strong>metadata.xml</strong> file that the destination file is accessible to users with visibility of the same scope. If you don't, users will see the link and be able to click the link but will not have permission to view the target file.</p>
<p>The platform automatically checks access rights, and makes the content visible to users who have visibility of licenses that include the applicable scope.</p>
<p class="apidoc_note"><strong>Note</strong>: If you want to restrict documentation visibility by scopes, you must assign scopes to the API. To assign scopes to your API, in <strong>API</strong> &gt; <strong>Details</strong> &gt; from the drop-down on the right, <strong>Manage Licensing</strong>. See <a href="api_admin_api_publishing.htm#what_is_scope_mapping_and_how_do_i_set_it_up">What is scope mapping and how do I set it up?</a> For the most security, be sure to assign at least one scope to each operation. If an operation doesn't have a scope assigned, no specific license is needed to access that operation.</p>

<p>In the documentation tag, use a &lt;div&gt; tag with the <strong>soa-ui-cm-dynamic-docs</strong> tag assigned to it. Refer to the examples below.</p>

<h5>Example 1: one scope</h5>
<p>In the example below, when an app developer has visibility of the specified scope, <strong>ScopeName</strong>, the developer can view the link to the file containing information about the scope.</p>
<pre>&lt;soa:showforscope scopeNames="<strong>ScopeName</strong>"&gt;
  &lt;div class="soa-ui-cm-dynamic-docs"&gt;
    &lt;p&gt;&lt;a href="<strong>ContentRelatingToScopeName.html</strong>"&gt;<strong>Link to file with content relating to the ScopeName</strong> scope&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/soa:showforscope&gt;
</pre>

<h5>Example 2: two scopes</h5>
<p>In the example below, when an app developer has visibility of either of the specified public scopes, the developer can view the link to a separate file containing information about these scopes.</p>
<pre>&lt;soa:showforscope scopeNames=&quot;public-scope-1, public-scope-2&quot;&gt;
  &lt;div class=&quot;soa-ui-cm-dynamic-docs&quot;&gt;
    &lt;p&gt;&lt;a href=&quot;two-public-scopes.html&quot;&gt;two-public-scopes.html&lt;/a&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/soa:showforscope&gt;
</pre>
<p><a href="#top">Back to top</a></p>



<a name="doctags_showforoperation"></a>
<h3>How do I use content-based tagging to restrict visibility by operation?</h3>
<p>To restrict visibility of certain pieces of content within a documentation file, so that the content can only be seen by users with visibility of a specific operation, specify the operation name in the <strong>showforoperation</strong> tag.</p>
<p>To specify multiple operations, separate them with commas.</p>
<p>If the tagged content is a link to another file, remember to also specify in the <strong>metadata.xml</strong> file that the destination file is accessible to users with visibility of the same operation. If you don't, users will see the link and be able to click the link but will not have permission to view the target file.</p>
<p>In the documentation tag, use a &lt;div&gt; tag with the <strong>soa-ui-cm-dynamic-docs</strong> tag assigned to it. Refer to the examples below.</p>
<p>The platform automatically checks access rights, and makes the content accessible to users who have visibility of licenses that include scopes with the applicable operations.</p>
<p class="apidoc_note"><strong>Note</strong>: To restrict documentation visibility by operation, scopes must also be assigned to the API. To assign scopes to your API, in <strong>API</strong> &gt; <strong>Details</strong>&gt;<strong> Manage Licensing</strong>, check the <strong>Enable Licensing for API</strong> box, and then select either <strong>API-Wide Mapping</strong> or <strong>Operation-Specific Mapping</strong>. Assign scopes to operations and save. For the most security, be sure to assign at least one scope to each operation. If an operation doesn't have a scope assigned, no specific license is needed to access that operation.</p>
<p>Then, in the API documentation HTML file, configure the tags as follows, adding one or more operation names separated by commas. </p>
<p>An example is shown below.</p>
<pre>
&lt;soa:showforoperation operationNames=&quot;addPayment&quot;&gt;
  &lt;div class=&quot;soa-ui-cm-dynamic-docs&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;addPayment.html&quot;&gt;Documentation for addPayment operation&lt;/a&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/soa:showforoperation&gt;</pre>
<p><a href="#top">Back to top</a></p>
<hr />



<a name="doctags_showforrole"></a><h3>How do I use content-based tagging to restrict visibility by role?</h3>
<p>The examples below illustrate several scenarios you can use to tag documentation to be visible to users with a specific role or multiple roles.</p>
<p class="apidoc_note"><strong>Note</strong>: When tagging by role, if the tag references multiple roles, by default a user with just <strong>one</strong> of the roles can see the content. However, you can use the AND operator to specify that the user must have <strong>all</strong> specified roles in order to see the content, as illustrated in the examples below.</p>
<p>Valid role values for the <strong>roleNames</strong> parameter are:</p>
<ul>
  <li>SiteAdmin</li>
  <li>BusinessAdmin</li>
  <li>Admin (a user who is both API Admin and Business Admin)</li>
  <li>ApiAdmin</li>
</ul>
<p>You can also tag for multiple roles.</p>

<h5>Example 1: Site Admin</h5>
<p>In the example below, the specified file is visible only to users with the role of Site Admin.</p>
<pre>&lt;soa:showforrole roleNames=&quot;SiteAdmin&quot;&gt;
  &lt;div class=&quot;soa-ui-cm-dynamic-docs&quot;&gt;
    &lt;a href=&quot;site-admin.html&quot;&gt;site-admin.html&lt;/a&gt;
  &lt;/div&gt;
&lt;/soa:showforrole&gt;</pre>


<h5>Example 2: Business Admin</h5>
<p>In the example below, the specified file is visible only to users with the role of Business Admin.</p>
<pre>&lt;soa:showforrole roleNames=&quot;BusinessAdmin&quot;&gt;
  &lt;div class=&quot;soa-ui-cm-dynamic-docs&quot;&gt;
    &lt;a href=&quot;business-admin.html&quot;&gt;business-admin.html&lt;/a&gt;
  &lt;/div&gt;
&lt;/soa:showforrole&gt;</pre>


<h5>Example 3: Admin (user must be either API Admin or Business Admin)</h5>
<p>In the example below, the specified file is visible only to users with the Admin role. This role includes both API Admin and Business Admin. Therefore, the file is visible to users with the role of <strong>either</strong> API Admin <strong>or</strong> Business Admin.</p>
<pre>&lt;soa:showforrole roleNames=&quot;Admin&quot;&gt;
  &lt;div class=&quot;soa-ui-cm-dynamic-docs&quot;&gt;
    &lt;a href=&quot;api-admin.html&quot;&gt;api-admin.html&lt;/a&gt;
  &lt;/div&gt;
&lt;/soa:showforrole&gt;</pre>


<h5>Example 4: Site Admin or Business Admin: user must have either role</h5>
<p>In the example below, the specified file is visible only to users with the role of  <strong>either</strong> Site Admin <strong>or</strong> Business Admin. This is the same result as the example above, but is accomplished by specifying multiple roles. This approach could also be used for specifying a different combination of roles; for example, API Admin or Business Admin.</p>
<p><strong>Note</strong>: When tagging by role, if multiple roles are specified, by default the content is available to users who have <strong>one</strong> of the referenced roles.</p>
<pre>&lt;soa:showforrole roleNames=&quot;SiteAdmin, BusinessAdmin&quot;&gt;
  &lt;div class=&quot;soa-ui-cm-dynamic-docs&quot;&gt;
    &lt;a href=&quot;site-admin-or-business-admin.html&quot;&gt;site-admin-or-business-admin.html&lt;/a&gt;
  &lt;/div&gt;
&lt;/soa:showforrole&gt;</pre>


<h5>Example 5: Admin (user must be either API Admin or Business Admin)</h5>
<p>In the example below, the specified file is visible only to users with the role of <strong>either</strong> API Admin <strong>or</strong> Business Admin.</p>
<pre>&lt;soa:showforrole roleNames=&quot;Admin&quot;&gt;
  &lt;div class=&quot;soa-ui-cm-dynamic-docs&quot;&gt;
    &lt;a href=&quot;api-admin.html&quot;&gt;api-admin.html&lt;/a&gt;
  &lt;/div&gt;
&lt;/soa:showforrole&gt;</pre>


<h5><a name="ex_06_showforrole"></a>Example 6: Multiple roles; user must have both roles</h5>
<p>In the example below, the specified file is visible only to users with the role of <strong>both</strong> Site Admin <strong>and</strong> Business Admin. The <strong>and</strong> operator (case does not matter) causes both roles to be required.</p>
<pre>&lt;soa:showforrole roleNames=&quot;SiteAdmin, BusinessAdmin&quot; condition=&quot;and&quot;&gt;
  &lt;div class=&quot;soa-ui-cm-dynamic-docs&quot;&gt;
    &lt;a href=&quot;site-admin-and-business-admin.html&quot;&gt;site-admin-and-business-admin.html&lt;/a&gt;
  &lt;/div&gt;
&lt;/soa:showforrole&gt;</pre>


<h5>Example 7: Multiple pieces of tagged content within a file</h5>
<p>The example below shows five pieces of content. Each type of admin (API, Business, Site) will see the one piece of content that's tagged for that role. If content is tagged for either of two roles (OR), and the user has <em>one</em> of the roles, the user will see it. If content is tagged for users who have <em>both</em> roles (AND), only users with both roles will see it.</p>


<pre>&lt;soa:showforrole roleNames="ApiAdmin"&gt;
  &lt;div class="soa-ui-cm-dynamic-docs"&gt;
    &lt;h3&gt;API Admin&lt;/h3&gt;
    &lt;p&gt;Important information for the API Admin.&lt;/p&gt;
  &lt;/div&gt;
&lt;/soa:showforrole&gt;

&lt;soa:showforrole roleNames="BusinessAdmin"&gt;
  &lt;div class="soa-ui-cm-dynamic-docs"&gt;
    &lt;h3&gt;Business Admin&lt;/h3&gt;
    &lt;p&gt;Important information for the Business Admin.&lt;/p&gt;
  &lt;/div&gt;
&lt;/soa:showforrole&gt;

&lt;soa:showforrole roleNames="SiteAdmin"&gt;
  &lt;div class="soa-ui-cm-dynamic-docs"&gt;
    &lt;h3&gt;Site Admin&lt;/h3&gt;
    &lt;p&gt;Important information for the Site Admin.&lt;/p&gt;
  &lt;/div&gt;
&lt;/soa:showforrole&gt;

&lt;soa:showforrole roleNames="SiteAdmin, BusinessAdmin" condition="and"&gt;
  &lt;div class="soa-ui-cm-dynamic-docs"&gt;
    &lt;h3&gt;Business Admin AND Site Admin&lt;/h3&gt;
    &lt;p&gt;Important information for any user who is Business Admin and also a Site Admin.&lt;/p&gt;
  &lt;/div&gt;
&lt;/soa:showforrole&gt;

&lt;soa:showforrole roleNames="SiteAdmin, BusinessAdmin"&gt;
  &lt;div class="soa-ui-cm-dynamic-docs"&gt;
    &lt;h3&gt;Site Admin OR Business Admin&lt;/h3&gt;
    &lt;p&gt;Important information for all users who are either Business Admin or Site Admin.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/soa:showforrole&gt;</pre>


<h5>Example 8: Sample File</h5>
<p><a href="example_showforrole.htm" target="_blank">View a complete file with content tagged for each role (click View Source to see the HTML)</a>. This example file only works within the platform, not when viewing content on the documentation website, because the supporting files are missing; but you can still use it as a guide in coding your content, and then test by uploading to the platform.</p>
<p><a href="#top">Back to top</a></p>



<a name="doctags_showforanonymoususer"></a><h3>How do I use content-based tagging to make content visible only to anonymous users?</h3>
<p>If there is some content in your documentation that you want to share specifically with users who are <strong>not</strong> logged in, you can apply the <strong>showforanonymoususer</strong> tag.</p>
<p>Some examples of how you might use this:</p>
<ul>
  <li>For marketing material.</li>
  <li>For a special signup offer, encouraging users to sign up for the platform and use your API.</li>
</ul>
<p>You'll need to add a link on the documentation TOC for this file, since it wouldn't be accessible via your documentation index page. Users who are logged in do not see this content.</p>
<p>An example is shown below.</p>
<pre>&lt;soa:showforanonymoususer&gt;
  &lt;div class="soa-ui-cm-dynamic-docs"&gt;
    &lt;p&gt;Information<strong> about our API and the platform!</strong>&lt;/p&gt;
  &lt;/div&gt;
&lt;/soa:showforanonymoususer&gt;</pre>
<p>If the tagged content is a link, remember to include it in the <strong>metadata.xml</strong> file, tagged with a public license or scope so that it is accessible to all users.</p>
<p><a href="#top">Back to top</a></p>



<a name="doctags_showforloggedinuser"></a><h3>How do I use content-based tagging to make content visible only to users who are logged in?</h3>
<p>If there is some content in your documentation that you want to share with all platform users who are logged in, you can apply the <strong>showforloggedinuser</strong> tag.</p>
<p>In the example below, only users who are logged in will see this line of content within a file.</p>
<pre>&lt;soa:showforloggedinuser&gt;
  &lt;div class="soa-ui-cm-dynamic-docs"&gt;
    &lt;p&gt;&lt;a href="<strong>user_loggedin.html</strong>"&gt;<strong>Learn more about upcoming updates to our API!</strong>&lt;/a&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/soa:showforloggedinuser&gt;</pre>
<p><a href="#top">Back to top</a></p>



<a name="using_multiple_tags"></a><h3>When I'm using content-based tagging, can I use multiple tags?</h3>
<p>When you're using content-based tagging, you can specify multiple entries of the same type (licenses, scopes, or operations) and separate them with a comma.</p>
<p>This restricts  visibility of a specific piece of content so that it can only be seen by users with a specific combination of more than one license, more than one scope, or more than one operation.</p>
<p>Multiple items must all be of the same type. For example, you cannot set up a single entry to combine one scope and one license. The entries would have to be separate.</p>
<p>In the example below, only users who have visibility of <strong>both</strong> scopes will see the designated content.</p>
<h5>Example: Multiple scopes</h5>
<pre>&lt;soa:showforscope scopeNames="<strong>public-scope-1, private-scope-2</strong>"&gt;
  &lt;div class="soa-ui-cm-dynamic-docs"&gt;
    &lt;p&gt;&lt;a href="<strong>twoscopes.html</strong>"&gt;<strong>twoscopes.html</strong>&lt;/a&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/soa:showforscope&gt;</pre>
<p><a href="#top">Back to top</a></p>



<a name="doctags_operators"></a>
<h3>When I'm doing content-based tagging, what operators can I use in my tags?</h3>
<p>In most cases, with content tags, if you provide multiple values (separated by commas) the default behavior is <strong>or</strong>. This means that if the viewing user has visibility of <strong>one</strong> of the specified resources, the user can see the content. The exception to this is the <strong>soa:showforscope</strong> tag. For specifics, refer to the table below.</p>
<table cellspacing="0px" class="doctable" style="width: 98%;">
  <thead>
    <tr>
      <th width="20%">Tag</th>
      <th width="20%">Default operator</th>
      <th width="60%">Supports the &quot;and&quot; operator?</th>
    </tr>
  </thead>
  <tbody>
    <tr class="t2row">
      <td>soa:showforlicense</td>
      <td>Or</td>
      <td>No</td>
    </tr>
    <tr class="t1row">
      <td>soa:showforscope</td>
      <td>And</td>
      <td>Yes, plus it is the default. The user must have visibility access to <strong>all</strong> the specified scopes in order to see the content. </td>
    </tr>
    <tr class="t2row">
      <td>soa:showforoperation</td>
      <td>Or</td>
      <td>No</td>
    </tr>
    <tr class="t1row">
      <td>soa:showforrole</td>
      <td>Or</td>
      <td>Yes. For this tag, the default value is <strong>or</strong>, but the <strong>and</strong> operator is also supported. If <strong>and</strong> is used, the viewing user must have <strong>all</strong> roles in order to have visibility of the content. for an example, see <a href="#ex_06_showforrole">Example 6: Multiple roles; user must have both roles</a>.</td>
    </tr>
    <tr class="t2row">
      <td>showforanonymoususer</td>
      <td>Or</td>
      <td>No</td>
    </tr>
    <tr class="t1row">
      <td>soa:showforloggedinuser</td>
      <td>Or</td>
      <td>No</td>
    </tr>
    <tr class="t2row">
      <td>soa:showforoperation</td>
      <td>Or</td>
      <td>No</td>
    </tr>
  </tbody>
</table>
<p><a href="#top">Back to top</a></p>




<div class = "divider1"></div>
<a name="h_streamlining"></a><h3>Streamlining Content-Based Doc Tagging:</h3>




<a name="how_can_i_simplify_content_based_doc_tagging_updates_using_replacements_js"></a><h3>How can I simplify content-based doc tagging updates using the replacements.js file?</h3>
<p>If you have a lot of tags on your documentation set, and something changes, you might have many updates to make. For example:</p>
<ul>
  <li>You might have a new license, or change a license name. Perhaps you have a new version of your Gold license, and you call it UltraGold, but you want users of the new license to see the new content.</li>
</ul>
<p>Alternatively, you might have some customization in place that might affect how you tag your documentation. For example:</p>
<ul>
  <li>You might have a custom role. Perhaps you set up a custom role, SeniorAdmin, that encompasses both Site Admin and Business Admin roles.</li>
</ul>
<p>The platform's documentation tagging feature includes a facility that you can use to help automate updates to your documentation. It's a JavaScript file, <strong>replacements.js</strong>, which you can customize to your implementation by performing the following steps:</p>
<ul>
  <li> In your doc tagging, instead of using the actual license, scope, operation, or role names, use placeholder variables.</li>
  <li>In the <strong>replacements.js</strong> file, specify the values the platform will use for the placeholder variables.</li>
  <li>In your documentation files, load <strong>replacements.js</strong> by means of a &lt;script&gt; tag in the &lt;head&gt; tag, before loading the <strong>dynamic_docs.js</strong> file.</li>
</ul>
<p><strong>Note</strong>: the processing of this file includes up to two levels of replacement. So, for example, you can map one variable to two or more variables. On the first pass, the single variable is replaced by the two variables; on the second pass, each of the two variables is replaced by the actual values. If two passes are not needed, the platform only does one (or none, if no variables are used).</p>
<p>Below is an example of a <strong>replacements.js</strong> file, which you can use to build your own. It includes:</p>
<ul>
  <li>At the top, a namespace declaration,</li>
  <li>On each line, name-value pairs:
    <ul>
  <li><strong>Name</strong>: a variable name which you can use in your doc tag, preceded by the namespace value. The replacements.js file looks for this value in your files, and replaces it with the second value.</li>
  <li><strong>Value</strong>: the value that's substituted. It can be the actual name of a scope, license, operation, or role, or it can be another variable which the platform will replace with actual values on a second pass through the documentation.</li></ul></li>
</ul>
<pre>// only 2 levels for replacement processing like
// siteAdminCommaBusinessAdmin: "{MYAPP.siteAdmin}, {MYAPP.businessAdmin}" are supported.
// It is best to create a namespace such as MYAPP
window.MYAPP = {
  "mySampleAPIVersionId" : "changeMe(APIVersionID)",
  "siteAdmin" : "SiteAdmin",
  "businessAdmin" : "BusinessAdmin",
  "siteAdminCommaBusinessAdmin" : "{MYAPP.siteAdmin}, {MYAPP.businessAdmin}",
  "admin" : "Admin",
  "publicScope1" : "public-scope-1",
  "publicScope2" : "public-scope-1",
  "publicScope1CommaPublicScope2" : "public-scope-1, public-scope-1",
  "privateScope1" : "private-scope-1",
  "privateScope2" : "private-scope-2",
  "privateScope1CommaprivateScope2" : "private-scope-1, private-scope-2",
  "publicLicense1" : "public-license-1",
  "privateLicense1" : "private-license-1",
  "operationTargeted" : "operation-targeted"
}</pre>
<p>In each line of the above, the first value is the name of a license, scope, operation, or role, that you might use in your doc tagging. The second value is a placeholder variable that you use in the documentation to designate that license, scope, operation, or role.</p>
<p>For information on the APIVersionID variable in the above, see <a href="#how_do_i_implement_version_specific_documentation_in_simple_dev_theme">How do I implement version-specific API documentation in Simple Dev theme?</a></p>
<p class="apidoc_note"><strong>Tip</strong>: It's best to create a namespace for the variables, as shown in the default example above, and then use it in all the names for your variables. For example, in the variable {ACMEPC.myscopename}, ACMEPC is the namespace, which would have to be defined at the top of the file as in the MYAPP example above (window.MYAPP = ). Using a namespace will ensure there's no naming collision between any variable names that might already be in use elsewhere in the platform.</p>
<p>Below are some examples of how you can use this file to automate your doc tagging updates.</p>
<h5>Example 1: One change instead of many</h5>
<p>Let's say you have many instances in your documentation files where there is content tagged for the GoldLicense. By setting up the below entry in your replacements.js file, if the license name changes, all you need to do is change the entry on the left in the file. You don't need to update any of the tags in your documentation files.</p>
<pre>
window.ACMEPC = {
  "goldLicense" : "Gold",
  ...
}</pre>
<p>In this example, the tag in your documentation file would look like the below:</p>
<pre>&lt;soa:showforlicense licenseNames="{ACMEPC.goldLicense}"&gt;
  &lt;div class="soa-ui-cm-dynamic-docs"&gt;
    &lt;p&gt;&lt;a href="goldlicense.html"&gt;About the Gold License&lt;/a&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/soa:showforlicense&gt;</pre>
<p><strong>Note</strong>: You must also include a &lt;script&gt; tag in the head of the above HTML file; otherwise, the variables will not be replaced with the actual values. See <a href="#how_do_i_implement_the_replacements_js_file">How do I implement the replacements.js file?</a> below.</p>


<h5>Example 2: One variable for multiple values: licenses</h5>
<p>Let's say you want to create a single tag that will give visibility permission for two licenses, Gold and Silver.</p>
<p>You can define variables for each license, and in addition a variable that encompasses both licenses, as follows: </p>
<pre>
window.ACMEPC = {
  &quot;goldLicense&quot; : &quot;Gold&quot;,
  &quot;silverLicense&quot; : &quot;Silver&quot;,
  &quot;goldAndSilverLicenses&quot; : &quot;{ACMEPC.goldLicense}, {ACMEPC.silverLicense}&quot;,
  ...
}</pre>
<p>Your documentation tag might look like this:</p>
<pre>&lt;soa:showforlicense licenseNames=&quot;{ACMEPC.goldAndSilverLicenses}&quot;&gt;
  &lt;div class=&quot;soa-ui-cm-dynamic-docs&quot;&gt;
    &lt;p&gt;&lt;a href=&quot;license_goldsilver.html&quot;&gt;Information for holders of multiple licenses&lt;/a&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/soa:showforlicense&gt;</pre>
<p>On the first pass, the script would replace the variable like this:</p>
<pre>&lt;soa:showforlicense licenseNames=&quot;{ACMEPC.goldLicense}, {ACMEPC.silverLicense}&quot;&gt;
  &lt;div class=&quot;soa-ui-cm-dynamic-docs&quot;&gt;
    &lt;p&gt;&lt;a href=&quot;license_goldsilver.html&quot;&gt;Information for holders of multiple licenses&lt;/a&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/soa:showforlicense&gt;</pre>
<p>On the second pass, the script would replace the variable like this:</p>
<pre>&lt;soa:showforlicense licenseNames=&quot;Gold, Silver&quot;&gt;
  &lt;div class=&quot;soa-ui-cm-dynamic-docs&quot;&gt;
    &lt;p&gt;&lt;a href=&quot;license_goldsilver.html&quot;&gt;Information for holders of multiple licenses&lt;/a&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/soa:showforlicense&gt;</pre>
<p>With this approach, if you want to add a third license to the definition, you can change one line in the <strong>replacements.js</strong> file and your change is effected throughout the documentation set. Otherwise, you'd have to find every instance where documentation is tagged for two licenses and add the third. It's more work, and more possibility for error.</p>


<h5>Example 3: One variable for multiple values: roles</h5>
<p>Let's say you want to create a role for internal users. Site Admin and Business Admins are internal users; but the definition of this term might change, either to add API Admins or to remove Site Admins.</p>
<p>You can define a variable that encompasses these multiple roles, as follows: </p>
<pre>
window.ACMEPC = {
  &quot;siteAdmin&quot; : &quot;SiteAdmin&quot;,
  &quot;businessAdmin&quot; : &quot;BusinessAdmin&quot;,
  &quot;InternalUsers&quot; : &quot;{ACMEPC.siteAdmin}, {ACMEPC.businessAdmin}&quot;,
  ...
}</pre>
<p>Your documentation tag might look like this:</p>
<pre>&lt;soa:showforrole roleNames=&quot;{ACMEPC.InternalUsers}&quot;&gt;
  &lt;div class=&quot;soa-ui-cm-dynamic-docs&quot;&gt;
    &lt;p&gt;&lt;a href=&quot;internal_users.html&quot;&gt;Information for internal users only&lt;/a&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/soa:showforrole&gt;</pre>
<p>On the first pass, the script would replace the variable like this:</p>
<pre>&lt;soa:showforrole roleNames=&quot;{ACMEPC.siteAdmin}, {ACMEPC.businessAdmin}&quot;&gt;
  &lt;div class=&quot;soa-ui-cm-dynamic-docs&quot;&gt;
    &lt;p&gt;&lt;a href=&quot;internal_users.html&quot;&gt;Information for internal users only&lt;/a&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/soa:showforrole&gt;</pre>
<p>On the second pass, the script would replace the variable like this:</p>
<pre>&lt;soa:showforrole roleNames=&quot;siteAdmin, businessAdmin&quot;&gt;
  &lt;div class=&quot;soa-ui-cm-dynamic-docs&quot;&gt;
    &lt;p&gt;&lt;a href=&quot;internal_users.html&quot;&gt;Information for internal users only&lt;/a&gt;&lt;/p&gt;
  &lt;/div&gt;
&lt;/soa:showforrole&gt;</pre>
<p>With this approach, if the definition of internal users changes, you can change one line in the <strong>replacements.js</strong> file and your change is effected throughout the documentation set.</p>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_implement_the_replacements_js_file"></a>
<h3>How do I implement the replacements.js file?</h3>
<p>If you're using a <strong>replacements.js</strong> file to automate maintenance of your doc tags, you'll need to load it with a &lt;script&gt; tag in the &lt;head&gt; tag of your HTML files, making sure you load it before the <strong>dynamic_docs.js</strong> file.</p>
<p>Below is an example of what the &lt;head&gt; tag of one of your documentation files might look like.</p>
<pre>&lt;head&gt;
  &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge" /&gt;

  &lt;title&gt;About the addPayment Operation&lt;/title&gt;

  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/resources/style/reset.css&quot;/&gt; 
  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/resources/style/base.css&quot;/&gt; 

  &lt;!--[if lte IE 9]&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;/resources/style/ie.css&quot;&gt;
  &lt;![endif]--&gt;

  &lt;script language="javascript" src="/ui/apps/atmosphere/123/resources/uiframework/jquery/jquery.js"
  type="text/javascript"&gt;&lt;/script&gt;

  &lt;!-- load replacements.js before dynamic_docs.js --&gt;
  &lt;script language="javascript" src="./replacements.js"
  type="text/javascript"&gt;&lt;/script&gt;

  &lt;script language="javascript" src="/ui/apps/atmosphere/123/resources/console/javascript/dynamic_docs.js"
  type="text/javascript"&gt;&lt;/script&gt;
&lt;/head&gt;</pre>
<p><strong>Notes</strong>:</p>
<ul>
  <li>Make sure you have the correct path to the <strong>replacements.js</strong> file, whether it's in the same folder, a subfolder, or a parent folder.</li>
  <li>When you reference reset.css, as in the above example, you must also define styles in your custom css. For more information, see <a href="api_admin_content_guidelines.htm#platform_reset_css">What are reset.css and base.css and why would I use them?</a></li>
  <li>If you need to add compatibility for users of IE9 and below, you can include a conditional comment to an additional stylesheet, as shown in the example above. For details, see <a href="api_admin_documentation_maintenance.htm#ie_9_compatibility">How do I make sure my API documentation is rendered correctly for users of Internet Explorer 9 and below?</a></li>
</ul>
<p><a href="#top">Back to top</a></p>



<a name="where_do_i_store_the_replacements_js_file"></a><h3>Where do I store the replacements.js file?</h3>
<p>If you're using a <strong>replacements.js</strong> file to automate maintenance of your doc tags, upload the file to the main documents directory for your API doc.</p>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_implement_version_specific_documentation_in_simple_dev_theme"></a><h3>How do I implement version-specific API documentation in Simple Dev theme?</h3>
<p>You can support version-specific API documentation in Simple Dev theme by using the <strong>apiVersionId</strong> attribute in your content-based doc tagging.</p>
<p>The value of the attribute is defined in the <strong>replacements.js</strong> file, and your documentation HTML file must reference the <strong>replacements.js</strong> file in the &lt;head&gt; tag. For information and instructions, see <a href="#how_can_i_simplify_content_based_doc_tagging_updates_using_replacements_js">How can I simplify content-based doc tagging updates using the replacements.js file?</a></p>
<p>By default, if an API has multiple versions, the latest version is the default version.</p>
<p>In Default Theme/Hermosa Theme, the user chooses the API, chooses the version, and then views the documentation. The platform applies the user's API version selection, filtering out the documentation by version. If the user doesn't choose a different version, the user sees the latest version, since it is the default.</p>
<p>In Simple Dev theme, this is not the case. There is no way for the platform to determine which API version the user is interested in. Therefore, to implement version-specific documentation in Simple Dev theme, you can use the API Version attribute in your content-based doc tags.</p>
<p>There are some content-based doc tags for which API version isn't relevant; for example, showforanonymoususer and showforloggedinuser. However, it is relevant for the following tags:</p>
<ul>
  <li>showforlicense</li>
  <li>showforscope</li>
  <li>showforoperation </li>
  <li>showforrole </li>
</ul>
<p>By tagging sections of your content with the <strong>apiVersionId</strong> attribute, you identify which sections of text should be shown for which API version.</p>
<p>The example below shows a tag that includes the <strong>apiVersionId</strong> attribute.</p>
<pre>&lt;soa:showforscope scopeNames="{ACMEPC.publicScope1}" apiVersionId="{ACMEPC.mySampleAPIVersionId}"&gt;
  &lt;div class="soa-ui-cm-dynamic-docs"&gt;
    &lt;a href="public-scope-1.html"&gt;public-scope-1.html&lt;/a&gt;
  &lt;/div&gt;
&lt;/soa:showforscope&gt;</pre>
<p>If you are not sure what the API version ID is for your version, you can easily get it from viewing the documentation in Default Theme/Hermosa Theme. See below.</p>
<h5><a name="proc_get_apiid_apiversionid"></a>To get the API ID and/or API version ID</h5>
<ol>
  <li>Log in to Default Theme/Hermosa Theme and go to the API.</li>
  <li>From the <strong>Versions</strong> drop-down at the top right, choose the version you want.</li>
  <li>Look at the URL. It will be something like the below:
    <p><strong>http://{hostname}/acmepaymentscorp/#/api/8d45ec68-5b0c-4ed5-87ec-c236f7aa8073.acmepaymentscorp/versions/4966a17a-8376-4086-bbe2-37fe8cf2cbf1.acmepaymentscorp/details</strong></p>
    <p>The above example follows the structure given below: after <strong>/api/</strong> is the <strong>APIID</strong>, then <strong>/versions/</strong>, and then the <strong>APIVersionID</strong>.</p>
    <p><strong>http://{hostname}/#/api/{APIID}/versions/{APIVersionID}/details</strong></p>
  </li>
  <li>Copy the URL, and extract the API ID and/or API version ID.</li>
</ol>
<p><a href="#top">Back to top</a></p>




<div class = "divider1"></div>
<a name="h_testing_and_finalizing"></a><h3>Testing and Finalizing:</h3>




<a name="how_do_i_test_my_api_documentation_tagging"></a><h3>How do I test my API documentation tagging?</h3>
<p>Correctly applied, documentation tagging will ensure that each piece of your API documentation content is available for its specific target audience, as defined by you, and for nobody else. No matter how private you want your documentation to be, or how broadly available you want to make it, you can accomplish your goals by correctly tagging your content for valid licenses, scopes, operations, and roles, and testing thoroughly.</p>
<p>It's very important to make sure the visibility is working as expected.</p>
<p>Here are some suggestions for testing your doc tagging:</p>
<ul>
  <li><a href="#testing_basic">Basic testing steps</a> (before upload)</li>
  <li><a href="#testing_role_based">Role-based testing</a> (after upload)</li>
</ul>
<h5><a name="testing_basic"></a>Basic testing steps (before upload)</h5>
<p>After you've finished tagging, test your documentation by performing the following checks:</p>
<ul>
  <li>Verify that the following  are properly configured in all applicable HTML files:
    <ul>
      <li>&lt;html&gt; tag</li>
      <li>&lt;head&gt; tag</li>
      <li>&lt;div&gt; tags</li>
      <li>{resource.version} variable</li>
      <li>Visibility tags</li>
    </ul>
  </li>
  <li>Verify that the <strong>metadata.xml file</strong> is complete and that all of the following are correct:
    <ul>
      <li>Paths</li>
      <li>Filenames</li>
      <li>Referenced resource names (such as scopes and licenses)</li>
    </ul>
  </li>
  <li>If applicable, make sure that the API version is correctly specified. When you go to your API in the platform, the API version is in the URL path, after /versions/ in the path. It is in the format <strong>{uniqueid}.{tenant}</strong>. For example, 0157f427-0b07-4ae6-9ade-26f4ef3bcc71.acmepaymentscorp.</li>
  <li>Verify that links to tagged sections are also tagged.</li>
  <li>Verify that the scope and operation names you specified in the visibility tags are valid. In the developer portal, scopes are mapped to operations on the <strong>Manage Licensing</strong> &gt;<strong> Edit API Scope</strong> page.</li>
  <li>Verify that the license names you specified in the visibility tags are available to your app developer audience via the <strong>API Access Wizard</strong>. To do this you can create a new app and submit an API Access Request by selecting <strong>Access</strong> at the top right of the<strong> API</strong> &gt; <strong>Overview</strong> page.</li>
  </ul>
<p>Once you've completed the above steps, and any other testing steps you can think of, it's time to upload your files. See <a href="api_admin_documentation_maintenance.htm#how_do_i_upload_my_api_documentation_files">How do I upload my API documentation files?</a> </p>
<p>Once you've uploaded, it's best to do further testing. See below.</p>


<h5><a name="testing_role_based"></a>Role-based testing (after upload)</h5>
<p>When you upload the API documentation, all the documentation should be visible to you since you are the API Admin and have full access rights. If there are any tagging errors, you might not know it unless you test.</p>
<p>Once your API documentation is in place, it's best to test from the perspective of several users with different roles, or with visibility of different licenses, scopes, or operations, according to the tags you've used.</p>
<p>You'll want to make sure of two things, both very important:</p>
<ul>
  <li>That the API documentation is being displayed correctly to users who have the appropriate visibility rights.</li>
  <li>That the API documentation is <strong>not</strong> being displayed  to users who <strong>do not</strong> have the appropriate visibility rights.</li>
</ul>
<p>Make absolutely sure that your documentation index page will be accessible. Even if most of your API is by invitation only, there should ideally be some general information that's available to as many users as possible. A broadly available index page is an opportunity to tell people about your API.</p>

<p>We recommend that you create several test user accounts and request API access using various scenarios that will illustrate visibility and restricted visibility of API documentation in the <strong>API</strong> &gt; <strong>Documentation</strong> section.</p>


<h4>Sample testing scenario: overview</h4>
<p>Let's say for example you have a public API and create a scenario using these three licenses:</p>
<ul>
  <li>A Bronze license for limited view-only access (public)</li>
  <li>A Gold license for full access to your published API (public)</li>
  <li>A Beta license for access to your newest operations for beta testing (private)</li>
</ul>
<p>Because the API is public, any user can request API access and choose between the Bronze and Gold licenses. Only invited users will see the Beta license. Your documentation must be appropriately tagged so that all users will see the documentation for the Bronze and Gold licenses and only Beta license holders will see the documentation for the part of your API you're releasing to those customers.</p>

<h4>Sample testing scenario: test steps</h4>
<p>In this sample testing scenario, below are some test steps you could follow.</p>
<h5>To test that the API documentation is tagged correctly:</h5>
<ol>
  <li>Set up a test user.</li>
  <li>Request API Access to the Live implementation with the Bronze license.</li>
  <li>View the documentation. You should be able to see the portions of your documentation that are tagged for Gold and Bronze licenses/scopes but not the content tagged for the Beta license/scope.</li>
  <li>Now, as the API Admin, invite your test user to have visibility of the Beta license.</li>
  <li>As the user, change your API access request to a request for the Beta license.</li>
  <li>View the documentation. You should now be able to view the content for all three licenses.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<a name="setup_doc_toc"></a><h3>How do I control the documentation Table of Contents?</h3>
<p>If you've selected a set of files to display in the documentation Table of Contents in the left navigation bar, in the <strong>API</strong> &gt; <strong>Documentation</strong> section of the platform, the content is displayed dynamically based on the filters specified for all API documentation or for a specified API version.</p>
<p>For more information about working with the API documentation Table of Contents, refer to these topics in the Content Guidelines documentation:</p>
<ul>
  <li><a href="api_admin_content_guidelines.htm#how_do_i_add_a_file_to_the_api_documentation_table_of_contents">How do I add a file to the API documentation table of contents?</a></li>
  <li><a href="api_admin_content_guidelines.htm#how_do_i_set_the_file_display_name_in_the_api_documentation_table_of_contents">How do I set the file display name in the API documentation table of contents?</a></li>
</ul>
<p><a href="#top">Back to top</a></p>



<div class = "divider1"></div>



<h3 id="related_topics">Related Topics</h3>
<table width="98%" border="0" cellspacing="0" cellpadding="2" class="doctable">
  <tr>
    <td width="33%"><ul>
  <li><a href="apiadmin_getting_started.htm">Getting Started for API Developers</a></li>
  <li><a href="apiadmin_overview.htm">API Administration: Overview</a></li>
  <li><a href="api_admin_tutorial.htm">Tutorial (API Provider)</a></li>
  <li><a href="api_admin_management.htm">API Admin Management</a></li>
  <li><a href="bus_api_admin_forum.htm">Forum Moderation</a></li>
  <li><a href="apiadmin_promotion.htm">Promoting an API</a></li>
    </ul>
</td>
    <td width="33%"><ul>
  <li><a href="apiadmin_api_add.htm">Adding an API</a></li>
  <li><a href="apiadmin_api_design.htm">Add or Modify an API Using API Designer</a></li>
  <li><a href="apiadmin_a_d_d_support.htm">API Description Document Support</a></li>
  <li><a href="apiadmin_implementations.htm">Manage API Implementations</a></li>
  <li><a href="api_admin_testing_tc.htm">API Testing with Test Client</a></li>
  <li><a href="api_admin_managing_contracts.htm">Managing Contracts for your API</a></li>
  <li><a href="api_admin_monitoring.htm">Monitoring API Analytics</a></li>
    </ul></td>
    <td width="33%"><ul>
  <li><a href="api_admin_api_publishing.htm">API Visibility, Licenses, and Settings</a></li>
  <li><a href="api_admin_oauth_support.htm">OAuth Support</a></li>
  <li><a href="api_admin_content_guidelines.htm">Content Development Guidelines</a></li>
  <li><a href="api_admin_documentation_maintenance.htm">API Documentation Maintenance</a></li>
  <li><a href="api_admin_legal_agreement_maintenance.htm">Legal Agreement Maintenance</a></li>
  <li><a href="basics_glossary.htm">Glossary of Terms</a></li>
    </ul>
</td>
  </tr>
</table>
