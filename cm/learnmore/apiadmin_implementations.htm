---
layout: page
title: Managing API Implementations | API Admin | Akana API Platform Help
description: Add or modify one or more implementations for your API. Manage deployment zones, policies, and security for each implementation.
product: cm
category: learn
sub-nav-class: API Admin
weight: 2616
type: page
nav-title: API Implementations
---
<h1 id="top">Managing API Implementations</h1>
<p>Add or modify one or more <a href="basics_glossary.htm#gl_implementation">implementations</a> for your API. Manage deployment zones, policies, and security for each implementation.</p>
<hr class="divide_hr" />



<h2 style="color: gray;">Table of Contents</h2>


<h4 style="color: gray;"><a href="#h_impl_implementation Basics">Implementations:</a></h4>
<ol class="table_of_contents">
	<li><a href="#api_impl_what_is">What is an API implementation?</a></li>
	<li><a href="#api_impl_how_add">How do I add an API implementation?</a></li>
	<li><a href="#api_impl_how_add_sbox">How do I add a Sandbox implementation?</a></li>
	<li><a href="#api_impl_pattern">What is an implementation pattern and which one should I choose?</a></li>
	<li><a href="#api_impl_how_many">How many API implementations can I have?</a></li>
	<li><a href="#api_impl_how_edit">How do I edit an API implementation?</a></li>
	<li><a href="#api_impl_how_delete">How do I delete an API implementation?</a></li>
	<li><a href="#api_impl_add_modify_target_endpoint">How do I add or modify a target endpoint for an implementation?</a></li>
	<li><a href="#api_impl_delete_target_endpoint">How do I delete a target endpoint for an implementation?</a></li>
	<li><a href="#context_path_define">What is the context path and how do I make sure I have the right context path for my API implementation?</a></li>
	<li><a href="#api_dz_context_path_validation_rules">What are the validation rules for the context path?</a></li>
	<li><a href="#api_impl_debug_mode">What is debug mode?</a></li>
	<li><a href="#debug_mode_enable">How do I turn on debug mode for my implementation?</a></li>
	<li><a href="#api_impl_specify_listener">How do I specify a listener when adding/editing an implementation endpoint?</a></li>
	<li><a href="#api_impl_pox_jms">How do I set up my API implementation to support POX or JMS bindings?</a></li>
</ol>


<h4 style="color: gray;"><a href="#h_impl_deployment_zones">Managing Deployment Zones for an API Implementation:</a></h4>
<ol class="table_of_contents">
	<li><a href="#api_dz_what_is">What is a deployment zone?</a></li>
	<li><a href="#api_dz_how_see">How do I see which deployment zones my API is deployed to?</a></li>
	<li><a href="#api_dz_colors">What does the color coding on deployment zones mean?</a></li>
	<li><a href="#api_dz_how_add">How do I add an API deployment zone?</a></li>
	<li><a href="#api_dz_how_many">How many API deployment zones can I have?</a></li>
	<li><a href="#api_dz_how_edit">How do I edit an API deployment zone?</a></li>
	<li><a href="#api_dz_how_add_new_protocol">How do I add a new protocol for an API deployment zone?</a></li>
	<li><a href="#api_dz_how_delete">How do I delete an API deployment zone?</a></li>
</ol>


<h4 style="color: gray;"><a href="#h_impl_certificates">Managing Certificates for an API Implementation:</a></h4>
<ol class="table_of_contents">
	<li><a href="#api_impl_keys_certs">How do I manage keys and certificates for my API?</a></li>
	<li><a href="#platform_sni">How does the platform support SNI?</a></li>
	<li><a href="#api_impl_sni">How do I set up my API to support SNI?</a></li>
</ol>


<h4 style="color: gray;"><a href="#h_impl_identities">Managing Identities for an API Implementation:</a></h4>
<ol class="table_of_contents">
	<li><a href="#api_impl_identities_overview">What is an implementation identity?</a></li>
	<li><a href="#api_impl_identities_settings">How do I manage my implementation identity settings?</a></li>
</ol>


<h4 style="color: gray;"><a href="#h_impl_policies">Managing Policies for an API Implementation:</a></h4>
<ol class="table_of_contents">
	<li><a href="#api_impl_policies_available">What types of policies are available for my API?</a></li>
	<li><a href="#api_impl_policies_how_assign">How do I assign policies to my API implementation?</a></li>
	<li><a href="#what_security_and_monitoring_policies_are_supported">What security and monitoring policies are available for my API?</a></li>
	<li><a href="#api_impl_policies_choose">Which policies should I choose?</a></li>
	<li><a href="#api_impl_policies_view_details">How can I see details about a policy?</a></li>
	<li><a href="#what_is_the_minimum_policy_requirement_for_my_api">What is the minimum policy requirement for my API?</a></li>
	<li><a href="#api_impl_policies_how_view">How do I see which policies are assigned to my API implementation?</a></li>
	<li><a href="#how_do_i_set_up_my_api_to_support_cors">How do I set up my API to support CORS?</a></li>
</ol>


<h4 style="color: gray;"><a href="#h_impl_resources">Managing Processes for an API Implementation:</a></h4>
<ol class="table_of_contents">
	<li><a href="#api_impl_process_editor">How do I manage orchestration for my implementation?</a></li>
</ol>


<h4 style="color: gray;"><a href="#h_impl_dependencies">Managing Dependencies for an API Implementation:</a></h4>
<ol class="table_of_contents">
	<li><a href="#api_impl_dependencies">How can I see implementation dependencies?</a></li>
	<li><a href="#api_impl_dependencies_tool_using">How do I use the implementation dependencies tool?</a></li>
</ol>


<hr class="divide_hr" />
<h2 id="h_impl_implementation Basics">Implementations:</h2>



<h2 id="api_impl_what_is">What is an API implementation?</h2>
<p>Different implementations of an API represent the different endpoints of the API in the same <a href="basics_glossary.htm#gl_lifecyclestage">lifecycle stage</a>. For example, it is common for an API to have <strong>Sandbox</strong> and <strong>Live</strong> implementations.</p>
<p>When you create your initial API definition, the API platform creates the <strong>Live</strong> implementation automatically. You can create a second implementation for Sandbox, if needed.</p>
<p>If an existing implementation is deleted, you can create another; however, you cannot have more than two implementations of an API at the same lifecycle stage.</p>

<h4>Implementation Summary</h4>
<p>The Implementations page for your API (API &gt; <strong>Implementations</strong>) will look something like the below:</p>
<p><img src="assets/api_implementations_summary.png" alt="API Implementations page" /></p>
<p>In this example, there are three <a href="basics_glossary.htm#gl_deploymentzone">deployment zones</a> available and active for each implementation; therefore, each implementation has three endpoints, one for each deployment zone. You can modify as needed. For more information, see <a href="#h_impl_deployment_zones">Managing Deployment Zones for an API Implementation</a>.</p>

<h4 id="api_impl_details_overview">Implementation details: Overview</h4>
<p>In Version 2020.2.0, there was a significant redesign of the Implementations page. Rather than having all the information on one long page, the information is broken out into separate pages, accessible via the left menu.</p>
<p>Review the applicable section below depending on your platform version:</p>
<ul>
	<li><a href="#api_impl_details_202020">Implementation Details: Version 2020.2.0 and later</a></li>
	<li><a href="#api_impl_details_earlier">Implementation Details: Versions prior to 2020.2.0</a></li>
</ul>


<h4 id="api_impl_details_202020">Implementation Details: Version 2020.2.0 and later</h4>
<p>When you click through on a specific implementation, you'll see the <strong>Implementation Details</strong> page, as shown below.</p>
<p><img src="assets/api_implementations_details_202021.png" alt="API Implementation Details page (2020.2.1)" /></p>
<p>On this page you can:</p>
<ul>
	<li>Click <strong>Edit</strong> to modify metadata about the implementation such as description and proxy URL: See <a href="#api_impl_how_edit">How do I edit an API implementation?</a></li>
	<li>Delete the implementation: See <a href="#api_impl_how_delete">How do I delete an API implementation?</a></li>
	<li>Turn on <a href="#api_impl_debug_mode">debug mode</a>: See <a href="#debug_mode_enable">How do I turn on debug mode for my implementation?</a></li>
	<li>Modify target endpoints: See <a href="#api_impl_add_modify_target_endpoint">How do I add or modify a target endpoint for an implementation?</a></li>
</ul>
<p>From this page, from the left menu bar, you can go to the page for the following activities relating to the implementation:</p>
<ul>
	<li><strong>Deployments</strong>: A map-like chart, from which you can manage deployment zones for the implementation. See <a href="#h_impl_deployment_zones">Managing Deployment Zones for an API Implementation</a>.</li>
	<li><strong>Certificate</strong>: Manage trusted keys and certificates separately for each implementation. See <a href="#h_impl_certificates">Managing Certificates for an API Implementation</a>.</li>
	<li><strong>Identities</strong>: Configure the <a href="basics_glossary.htm#gl_identity">identity</a> to be used for outbound calls to the downstream API service. See <a href="#h_impl_identities">Managing Identities for an API Implementation</a>.</li>
	<li><strong>Policies</strong>: Allows you to secure and monitor your implementation with <a href="basics_glossary.htm#gl_policy">policies</a>. See <a href="#h_impl_policies">Managing Policies for an API Implementation</a>.</li>
	<li><strong>Processes</strong> (Version 2020.2.1) / <strong>Resources</strong> (Version 2020.2.0): Allows you to add or edit processes associated with individual resources. See <a href="#h_impl_resources">Managing Processes for an API Implementation</a>.</li>
	<li><strong>Dependencies</strong>: A hierarchy of elements in the implementation. These elements can include the actual web service application (physical service) and one or more virtual services. See <a href="#h_impl_dependencies">Managing Dependencies for an API Implementation</a>.</li>
</ul>

<h4 id="api_impl_details_earlier">Implementation Details: Versions prior to 2020.2.0</h4>
<p>When you click through on a specific implementation, you'll see the implementation details, something like the below.</p>
<p><strong>Top part of the page:</strong></p>
<p><img src="assets/api_implementations_details_01.png" alt="API Implementations page, top part" /></p>
<p><strong>Bottom part of the page (Hermosa Theme):</strong></p>
<p><img src="assets/api_implementations_details_02.png" alt="API Implementations page, top part" /></p>
<p>On this page, you can manage all aspects of the implementation:</p>
<ul>
	<li><strong>Top section</strong>: modify metadata about the implementation such as description and proxy URL.</li>
	<li><strong>Deployments section</strong>: modify the technical details about the implementation such as deployment zones and vanity hostname.</li>
	<li><strong>Policies section</strong>: specify policies to be applied to API traffic for this implementation.</li>
	<li><strong>Identities</strong> section: manage identity settings for the implementation, and add, modify, or delete identities. See <a href="#api_impl_identities_settings">How do I manage my implementation identity settings?</a></li>
	<li><strong>Certificate section</strong>: manage certificates for the implementation. See <a href="#api_impl_keys_certs">How do I manage keys and certificates for my API?</a></li>
	<li><strong>Resources section</strong>: view a list of resources for the implementation, and manage processes for individual resources.</li>
</ul>

<p><a href="#top">Back to top</a></p>



<h2 id="api_impl_how_add">How do I add an API implementation?</h2>
<p>If you create your API by importing an API description document, the platform creates the Live implementation as part of creating the API. In this scenario, it's best to review the API implementation definition, and modify if needed. See <a href="#api_impl_how_edit">How do I edit an API Implementation?</a> below.</p>
<p>If you created your API from scratch, or you want a second implementation for an existing API, you'll need to add a new implementation. Follow the steps below.</p>
<h4 id="proc_impl_add">To add an API implementation</h4>
<ol>
	<li>Log in to the Akana API Platform and go to the overview page for your API.</li>
	<li>From the left menu bar, choose <strong>Implementations</strong>.</li>
	<li>Click <strong>Add</strong>.</li>
	<li><strong>At the Add Implementation</strong> page, provide the following:
<ul>
			<li><strong>Implementation Name</strong>: choose from the drop-down list available. You can have one implementation for each option available on the list.</li>
			<li><strong>Description</strong>: a short description of the implementation. This field supports <a href="basics_glossary.htm#gl_markdown">Markdown</a>, so you can add formatting. Click the question mark (?) for help with Markdown, if needed.</li>
			<li><strong>Pattern</strong>: Choose <strong>Proxy</strong> for a simple scenario where the API implementation has a 1:1 relationship with a back-end physical service/API; then provide the API endpoint that you want to set up a proxy for. Choose <strong>Orchestration</strong> for a more complex API implementation that might include one or more services, processes, or additional steps.</li>
			</ul>
		</li>
	<li>Click <strong>Save</strong>.</li>
	<li>At the Implementations page, click the link for the new implementation to add additional values. See <a href="#proc_impl_edit">To edit an API implementation</a> below.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="api_impl_how_add_sbox">How do I add a Sandbox implementation?</h2>
<p>If you're designing your API from scratch, there are no implementations until you create them. In this scenario, to add a Sandbox implementation, follow the instructions in <a href="#proc_impl_add">To add an API implementation</a> above.</p>
<p>If you create the API from an API description document, the first implementation is automatically created as a Live implementation.</p>
<p>If you want to add an additional implementation for Sandbox, follow the instructions in <a href="#proc_impl_add">To add an API implementation</a> above.</p>
<p>If you want <strong>only</strong> a Sandbox implementation, first add the new Sandbox implementation, and then delete the Live implementation following the instructions in <a href="#api_impl_how_delete">How do I delete an API implementation?</a> below.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="api_impl_pattern">What is an implementation pattern and which one should I choose?</h2>
<p>When you're setting up an implementation, you'll need to specify the <a href="basics_glossary.htm#gl_implementationpattern">implementation pattern</a> and then provide additional details.</p>
<p>The implementation pattern determines how you want to go about creating the implementation and/or what existing service you want to use or to base the new service on.</p>
<p>Generally, <strong>Proxy</strong> is the default. It is appropriate for a simple scenario where the API implementation has a 1:1 relationship with a back-end physical service/API.</p>
<p>For a more complex API implementation, that might include one or more services, processes, or additional steps, choose <strong>Orchestration</strong>. Later, you can use the built-in <a href="apiadmin_process_editor.htm#api_impl_process_editor_use">Process Editor</a> to fine-tune the process.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="api_impl_how_many">How many API implementations can I have?</h2>
<p>You can have two API implementations for each <a href="basics_glossary.htm#gl_lifecyclestage">lifecycle stage</a>. Each implementation represents a different endpoint; generally, <strong>Live</strong> and <strong>Sandbox</strong>.</p>
<p>When you create your initial API definition, you can specify the implementation. If you don't specify, by default the <strong>Live</strong> implementation is created. You can create a second implementation for Sandbox, if needed.</p>
<p>If an existing implementation is deleted, you can create another; however, you cannot have more than two implementations of an API at the same lifecycle stage.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="api_impl_how_edit">How do I edit an API implementation?</h2>
<p>Follow the steps below.</p>

<h4 id="proc_impl_edit">To edit an API implementation</h4>
<ol>
	<li>Log in to the Akana API Platform and go to the overview page for your API.</li>
	<li>From the left menu bar, choose <strong>Implementations</strong>.</li>
	<li>Click the implementation you want to edit. The <strong>Details</strong> page for the implementation is displayed.</li>
	<li>Optional: edit basic information about the implementation:
		<ul>
			<li>Click <strong>Edit</strong>.</li>
			<li>Add or modify the description. You can use Markdown if needed.</li>
			<li>Check or clear the <strong>Allow Anonymous Access</strong> check box.</li>
			<li>Check or clear the <strong>Approval Required</strong> check box (applicable only if anonymous access is not allowed).</li>
			<li>In the <strong>Pattern</strong> field, change the <a href="basics_glossary.htm#gl_implementationpattern">implementation pattern</a> if needed. Choose <strong>Proxy</strong> for a simple scenario where the API implementation has a 1:1 relationship with a back-end physical service/API. Choose <strong>Orchestration</strong> for a more complex API implementation that might include one or more services, processes, or additional steps.</li>
			<li>When done, click <strong>Save</strong>.</li>
		</ul>
		</li>
	<li>Optional: edit deployment zone details:
		<ul>
			<li>From the left menu bar, click <strong>Deployments</strong>.</li>
			<li>Click <strong>Edit</strong>.</li>
			<li><strong>Zone</strong>: choose a different deployment zone out of the valid values available.</li>
			<li><strong>Enable Zone</strong>: To add or remove deployment zones for the implementation, click the zone on the left and then check or clear the <strong>Enable Zone</strong> box on the right.</li>
			<li>Add protocol: click the <strong>+</strong> tab. At the <strong>Add Endpoints</strong> overlay, choose the protocol and click <strong>Add</strong>.
				<p><strong>Note</strong>: If you want to use SNI to serve up the implementation's key/certificate, in the HTTPS tab, check the <strong>Use Implementation's Key/Certificate for SSL</strong> box (requires that API Clients are SNI-compliant).</p></li>
			<li><a href="basics_glossary.htm#gl_contextpath">Context Path</a>: defaults to a single forward slash (<strong>/</strong>) but you can change it. For information about the context path, see <a href="#context_path_define">What is the context path and how do I make sure I have the right context path for my API implementation?</a></li>
		</ul>
	</li>
	<li>Optional: edit policies:
		<ul>
			<li>From the left menu bar, click <strong>Policies</strong>.</li>
			<li>On the Policies page, add or remove policies for the entire implementation, or for individual operations. For detailed instructions, see <a href="#api_impl_policies_how_assign">How do I assign policies to my API implementation?</a></li>
		</ul>
	</li>
	<li>Optional: edit identities:
		<ul>
			<li>From the left menu bar, click <strong>Identities</strong>.</li>
			<li>Click <strong>Edit</strong>.</li>
			<li>On the Identities page, modify the identity settings as needed, and then click <strong>Save</strong>. For more information, see <a href="#api_impl_identities_settings">How do I manage my implementation identity settings?</a></li>
		</ul>
	</li>
	<li>Optional: edit certificate information for the implementation:
		<ul>
			<li>From the left menu bar, click <strong>Certificate</strong>.</li>
			<li>Click <strong>Edit</strong>.</li>
			<li>On the Keys and Certificates page, manage keys and certificates. You can upload, download, or delete. When you're done, click <strong>Save</strong>. For more information, see <a href="#api_impl_keys_certs">How do I manage keys and certificates for my API?</a></li>
		</ul>
	</li>
	<li>Optional: edit processes:
		<ul>
			<li>From the left menu bar, click <strong>Processes</strong> (in versions prior to 2020.2.1, <strong>Resources</strong>).</li>
			<li>On the Processes page, find the resource that you want to edit the process for, and click <strong>Edit Process</strong>. The Process Editor opens.</li>
			<li>Edit the process for the resource, and then click <strong>Save</strong>. For more information, see <a href="apiadmin_process_editor.htm#api_impl_process_editor_use">How do I use the Process Editor?</a></li>
		</ul>
	</li>
	<li>Optional: review or update dependencies:
		<ul>
			<li>From the left menu bar, click <strong>Dependencies</strong>.</li>
			<li>View or modify dependencies as needed. For more information, see <a href="#api_impl_dependencies_tool_using">How do I use the implementation dependencies tool?</a></li>
		</ul>
	</li>
</ol>
<p>The changes are effective immediately.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="api_impl_how_delete">How do I delete an API implementation?</h2>
<p>You can delete one or more implementations for an API.</p>
<p><strong>Note</strong>: When you delete an implementation, all apps are disconnected from the implementation, and all process configuration, policies, and endpoints are deleted. This action is not reversible. To set up the implementation again you'd need to recreate from scratch, including policies, process configuration, and endpoints, and apps would need to connect to the new implementation.</p>

<h4>To delete an API implementation</h4>
<ol>
	<li>Log in to the Akana API Platform and go to the overview page for your API.</li>
	<li>From the left menu bar, choose <strong>Implementations</strong>.</li>
	<li>Click the implementation you want to delete. The <strong>Details</strong> page for the implementation is displayed.</li>
	<li>At the top right, click <strong>Delete</strong>.</li>
	<li>At the confirmation prompt, click <strong>OK</strong>. The implementation is deleted.</li>
</ol>
<p>The changes are effective immediately.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="api_impl_add_modify_target_endpoint">How do I add or modify a target endpoint for an implementation?</h2>
<p>After your API is set up, you might need to change the target endpoint for a specific implementation, or add a new target endpoint. You can add or change a target endpoint at any time.</p>

<h4>To add or modify a target endpoint for an API implementation</h4>
<ol>
	<li>Log in to the Akana API Platform and go to the overview page for your API.</li>
	<li>From the left menu bar, choose <strong>Implementations</strong>.</li>
	<li>Click the implementation you want to modify. The <strong>Details</strong> page for the implementation is displayed.</li>
	<li>Under <strong>Pattern</strong>, click the <strong>Modify target endpoints</strong> link.</li>
	<li>On the Endpoints page, you have two options:
		<ul>
			<li>Edit an existing endpoint: click the Expand icon (...) to expand, and then click the Edit icon (pencil).</li>
			<li>Add an endpoint: click <strong>Add</strong>.</li>
		</ul>
		</li>
	<li>Set values for the following fields:
		<ul>
			<li><strong>Location</strong>: enter the full URL for the target endpoint (the actual endpoint for your API; the proxy endpoint relays traffic to the target endpoint).</li>
			<li><strong>Protocol version</strong>: Leave as <strong>Unspecified</strong>, the default, or specify <strong>HTTP 1.0</strong> or <strong>HTTP 1.1</strong>.
				<p><strong>Note</strong>: When <strong>Unspecified</strong> is selected, the API Gateway takes the HTTP version in the request message and uses it in the downstream request message to the target endpoint. If another version is specified, the API Gateway always uses the specified version for downstream requests.</p></li>
		<li><strong>Require Content-Length Header</strong>: Check this box if the proxy endpoint should send a Content-Length header to the target endpoint, to indicate the message length.
			<p><strong>Note</strong>: If the protocol version is HTTP 1.0, the Requires Content-Length Header field is checked by default and cannot be changed; it is required.</p></li>
</ul></li>
	<li>Click <strong>Finish</strong> to save the endpoint.</li>
	<li>Click <strong>Finish</strong> to exit from the Endpoints page.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="api_impl_delete_target_endpoint">How do I delete a target endpoint for an implementation?</h2>
<p>You can delete a target endpoint. In case the endpoint is in use, make sure users are notified before deleting the endpoint.</p>

<h4>To delete a target endpoint for an API implementation</h4>
<ol>
	<li>Log in to the Akana API Platform and go to the overview page for your API.</li>
	<li>From the left menu bar, choose <strong>Implementations</strong>.</li>
	<li>Click the implementation you want to delete. The <strong>Details</strong> page for the implementation is displayed.</li>
	<li>Under <strong>Pattern</strong>, click the <strong>Modify target endpoints</strong> link.</li>
	<li>On the Endpoints page, find the endpoint you want to delete. Click the Expand icon (...) to expand, and then click the Delete icon (X).</li>
	<li>At the confirmation message, click <strong>OK</strong>.</li>
	<li>On the Endpoints page, click <strong>Finish</strong> (if you don't confirm on this page, the endpoint is not deleted).</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="context_path_define">What is the context path and how do I make sure I have the right context path for my API implementation?</h2>
<p>The endpoint for an API must be a fully unique address to the resource that the API is giving access to.</p>
<p>The endpoint is made up of the HTTP verb and the full URL, including protocol, hostname, optional port, context path, and object path.</p>
<ul>
	<li><strong>HTTP verb</strong>: most commonly GET, POST, PUT, or DELETE. OPTIONS, HEAD, and PATCH are also supported.</li>
	<li><strong>Protocol</strong>: generally HTTP or HTTPS. The platform also supports <strong>POX</strong> and <strong>JMS</strong> bindings.</li>
	<li><strong>Target hostname</strong>: the part after the protocol and before the context path (see below). Example: http://www.<strong>acmepaymentscorp.com</strong>.</li>
	<li><strong>Port (optional)</strong>: port number, sometimes part of the URL. Example: http://example.com:<strong>7900</strong>/atmosphere/#/home/landing.</li>
	<li><strong>Context path</strong>: The context path is the next part of the API endpoint, after the hostname (and optional port). It provides the context for the specific API; this is the part of the URL that's consistent for each operation within the API. Occasionally, there might be nothing specified in the context path, in which case it's just a forward slash (/) and is called <strong>root</strong>. Example of a context path: <strong>/api/payments</strong>.</li>
	<li><strong>Resource path</strong>: the part after the context path, that might be different for different operations within an API. Examples: POST http://www.acmepaymentscorp.com/api/payments<strong>/payment</strong> adds a payment, GET http://www.acmepaymentscorp.com/api/payments<strong>/payment/{PaymentID}</strong> returns details about a specific payment.</li>
</ul>
<p>The API endpoint is a concatenation of the above elements, as shown below:</p>
<pre>{HTTP_VERB} {protocol}://{hostname}{sometimes,port}{context path beginning with slash}/resource path</pre>
<p>For example:</p>
<pre>GET http://www.acmepaymentscorp.com/api/payments/payment/pmtid9346582364</pre>
<p>In the above example:</p>
<ul>
	<li><strong>HTTP verb</strong>: GET</li>
	<li><strong>Protocol</strong>: HTTP</li>
	<li><strong>Port</strong>: none</li>
	<li><strong>Target hostname</strong>: www.acmepaymentscorp.com</li>
	<li><strong>Context path</strong>: /api/payments</li>
	<li><strong>Resource path</strong>: /payment/pmtid9346582364</li>
</ul>

<h4>Community Manager developer portal behavior with regard to uniqueness of API endpoint</h4>
<p>By default, when you define an API in the Community Manager developer portal, the platform performs a validation check for unique combination of virtual host and context path, to make sure that the API endpoint, up to and including the context path, is unique. If the combination of virtual host and context path is not unique, the platform automatically modifies the API endpoint to make sure it's unique.</p>
<p><strong>Note</strong>: The platform includes a configuration setting that the Site Admin can use to turn off this validation check. If the validation check is disabled, you must make sure that the API path (protocol, hostname, optional port, and context path) will be unique. For information about this setting, see <a href="site_admin_settings.htm#settings_api_general">General API Settings</a> (Site Admin help).</p>
<p><a href="#top">Back to top</a></p>



<h2 id="api_dz_context_path_validation_rules">What are the validation rules for the context path?</h2>
<p>The rules applied to the context path are:</p>
<ul>
	<li>It cannot have spaces.</li>
	<li>Question mark (?) is not allowed.</li>
	<li>The following special characters are allowed: forward slash (/), comma (,), dash (-).</li>
	<li>No other special characters are allowed.
	</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="api_impl_debug_mode">What is debug mode?</h2>
<p>Debug mode is a setting that controls the level of logging of API traffic. Debug mode, the second-highest level of logging, records additional information to the API's logs, above and beyond the normal settings.</p>
<p>You can turn on debug mode if there's an issue with the API, in a specific implementation, and you need more information to determine what the problem is. Debug mode requires that there is at least one auditing policy, of any type, attached to the API.</p>
<p>As long as there's an auditing policy attached to the API, when debug mode is turned on the platform adds log entries for each of the steps performed by the underlying infrastructure, for every transaction. The steps recorded in debug mode are:</p>
<ul>
	<li>Policy enforcement/implementation</li>
	<li>Orchestration activity execution</li>
</ul>
<p>If you turn on debug mode, remember to turn it off when your debug activities are complete. Because it records additional information, which is then also stored, there is a small performance impact as well as a storage impact.</p>
<p>For information about turning on debug mode, see <a href="#debug_mode_enable">How do I turn on debug mode for my implementation?</a> below.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="debug_mode_enable">How do I turn on debug mode for my implementation?</h2>
<p>You can turn on debug mode in two places:</p>
<ul>
	<li>In the <strong>Implementation Details</strong> page</li>
	<li>In the <strong>Logs</strong> page for the API</li>
</ul>

<h4>To turn on debug mode in the Implementation Details page</h4>
<p>First, make sure there is at least one auditing policy attached to the API; either Basic Auditing or Detailed Auditing. If there is no auditing policy, transactions are not logged at all.</p>
<ol>
	<li>Log in to the Akana API Platform and go to the overview page for your API.</li>
	<li>From the left menu bar, choose <strong>Implementations</strong>.</li>
	<li>Click the implementation. The <strong>Details</strong> page for the implementation is displayed.</li>
	<li>Click the <strong>Debug Mode</strong> swipe button, as shown below. Debug mode is turned on immediately.
		<p><img src="assets/api_impl_debugmode.jpg" alt="Turning on debug mode" /></p></li>
	<li>If needed, use the <strong>Go to Transaction Logs</strong> link. This is a shortcut to the <strong>API</strong> &gt; <strong>Analytics</strong> &gt; <strong>Logs</strong> page. For more information on the transaction logs, see <a href="apiadmin_monitoring.htm#analytics_api_logs">What information can I see on the API Logs page?</a></li>
</ol>
<p>Remember to turn off debug mode when you're done.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="api_impl_specify_listener">How do I specify a listener when adding/editing an implementation endpoint?</h2>
<p>When adding or editing an endpoint for an implementation in the Community Manager developer portal, the API Admin can specify the listener, choosing from a list of valid listeners available, on the <strong>Protocol</strong> tabs for the implementation.</p>
<p>The first listener is generated automatically as part of the API creation process. You can specify a listener as part of adding a subsequent implementation, or as part of editing any implementation. </p>
<p>If only one listener for a specific protocol is available for the deployment zone, the listener pull-down does not appear.</p>

<h4>To specify a listener</h4>
<ol>
	<li>Log in to the Akana API Platform.</li>
	<li>Choose the API.</li>
	<li>From the left menu bar, click <strong>Implementations</strong> to access the <strong>Details</strong> page for the implementation.</li>
	<li>From the left menu bar, choose <strong>Deployments</strong>.</li>
	<li>On the <strong>Deployments</strong> page, click <strong>Edit</strong>.
	<p><strong>Note</strong>: If there are no deployment zones listed in the <strong>Zone</strong> drop-down list, the Business Admin hasn't added any. The Business Admin sets up deployment zones as part of business organization configuration. See <a href="bus_admin_dzs.htm#dz_add">How do I add a deployment zone?</a> (Business Admin help).</p></li>
	<li>If it's not yet checked, check the <strong>Enable Zone</strong> box. Additional fields are displayed so you can choose from available protocols and settings.</li>
	<li><strong>Optional</strong>: to delete one or more existing listeners, click the <strong>X</strong> next to it, as shown below. At the confirmation prompt, click <strong>OK</strong> to delete the listener.
	<p><img src="assets/api_impl_listener_delete.png" alt="Deleting an existing listener" /></p>
	</li>
	<li>To add a listener, click the <strong>+</strong> icon, and then choose one or more available listeners, as shown below.
<p><img src="assets/api_impl_listener_add.png" alt="Adding a listener to an implementation" /></p>
<p><strong>Note</strong>: this overlay shows all available listeners, even if they are already selected. When you're modifying listeners, it's a good idea to delete existing listeners first, as explained in Step 6 above.</p>
	</li>
	<li>Click <strong>Add</strong>.</li>
	<li>Click <strong>Save</strong> to save changes and return to the <strong>Details</strong> page for the implementation.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="api_impl_pox_jms">How do I set up my API implementation to support POX or JMS bindings?</h2>
<p>The most common bindings for API implementations are HTTP and HTTPS (see <a href="#context_path_define">What is the context path and how do I make sure I have the right context path for my API implementation?</a>). However, you might want to support <a href="basics_glossary.htm#gl_pox">POX</a> or <a href="basics_glossary.htm#gl_jms">JMS</a> bindings.</p>
<p>To do this, you'll have to do a little bit of setup in Policy Manager, part of the underlying infrastructure of the Community Manager developer portal. Coordinate with the Administrator as needed if you don't have access to Policy Manager.</p>

<h4>To set up an API implementation to support POX or JMS</h4>
<ol>
	<li>Log in to Policy Manager.</li>
	<li>Choose <strong>Configure</strong> &gt; <strong>Registry</strong> &gt; <strong>Bindings</strong> and then click <strong>Import Bindings from WSDL</strong>.</li>
	<li>On the <strong>Select WSDL Import Option</strong> page, import the WSDL file for your service that uses POX or JMS and save.</li>
	<li>Next, go the Network Director container and add a JMS listener. Provide values for <strong>Listener Name</strong> (for example, jms-listener), <strong>JNDI URL</strong>, <strong>JNDI Initial Context</strong>, and <strong>JMS Destination Factory Name</strong>.</li>
	<li>Log in to the Community Manager developer portal and create an API using the same WSDL file.</li>
	<li>In Policy Manager, find the virtual service for the API: Under <strong>Workbench</strong> &gt; <strong>Browse</strong>, search for the name.</li>
	<li>Select the virtual service and click <strong>Access Points</strong>.</li>
	<li>Delete all existing access points.</li>
	<li>Conditional for JMS: Add a new access point:
		<ul>
			<li>Specify the Network Director container and click <strong>Next</strong>.</li>
			<li>Make sure <strong>JMS</strong> is selected for the binding, and make sure that the Listener is set to the JMS listener you created in Step 3 above.</li>
		</ul>
		</li>
	
	<li>Conditional for POX: add a new access point:
		<ul>
			<li>Specify the Network Director container and click <strong>Next</strong>.</li>
			<li>Make sure <strong>POX</strong> is selected for the binding, and make sure that the Listener is set to the JMS listener you created in Step 3 above.</li>
		</ul>
	</li>
	<li>In the Community Manager developer portal, go back to the API. On the <strong>API Details</strong> page, and other pages where the API endpoint is displayed, you'll see the POX HTTP URL or the JMS <strong>jms://</strong> endpoint.</li>
</ol>
<p><a href="#top">Back to top</a></p>




<hr class="divide_hr" />
<h2 id="h_impl_deployment_zones">Managing Deployment Zones for an API Implementation:</h2>




<h2 id="api_dz_what_is">What is a deployment zone?</h2>
<p>A deployment zone is a physical location, such as a geographical area or a specific data center, that the API endpoint uses to proxy the API, if the API is hosted on the platform and is using the proxy capability.</p>
<p>One or more deployment zones are configured as part of the platform setup. When the API Admin creates the API, either from scratch or by uploading an API description document, the platform matches the API against the deployment zones that are defined. The API is deployed to all matching deployment zones.</p>
<p>For example, a deployment zone might be defined as being for live implementations only. An API sandbox implementation would not be deployed to this deployment zone.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="api_dz_how_see">How do I see which deployment zones my API is deployed to?</h2>
<p>Once you've added your API, it is automatically deployed to any of the API Platform deployment zones with criteria that match your API definition.</p>
<p>The deployment zones for your API are displayed in a map-like chart, as shown below:</p>
<p><img src="assets/api_dz.jpg" alt="Deployment zones" /></p>
<p>Deployment zones are assigned to each API implementation when the implementation is created. You can then fine-tune as needed.</p>
<p><strong>Note</strong>: If a physical location hasn't been specified for the deployment zone, it shows on the map as <strong>Unknown</strong>, and the dot appears on the top left of the map.</p>
<h4 id="proc_dz_view">To view the deployment zones for a specific implementation</h4>
<ol>
	<li>Log in to the Akana API Platform.</li>
	<li>Choose the API.</li>
	<li>From the left menu bar, click <strong>Implementations</strong>.</li>
	<li>Click the link for the implementation you want to view.</li>
</ol>
<p><strong>Note</strong>: If your API implementation meets the criteria for multiple deployment zones, it has a unique endpoint for each deployment zone.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="api_dz_colors">What does the color coding on deployment zones mean?</h2>
<p>When you view the deployment zone map for an API implementation, you might see one or more deployment zones.</p>
<p>The platform uses color coding to convey information about deployment zones, as follows:</p>
<ul>
	<li><strong>Pale blue</strong>&#8212;Disabled and not selected</li>
	<li><strong>Pale green</strong>&#8212;Enabled and not selected</li>
	<li><strong>Dark blue</strong>&#8212;Disabled and selected</li>
	<li><strong>Dark green</strong>&#8212;Enabled and selected</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="api_dz_how_add">How do I add an API deployment zone?</h2>
<p>You cannot specifically add a deployment zone to an API. Deployment zones are set up by the Administrator; when you add an implementation, deployment zones are assigned automatically based on the criteria for the API and the deployment zones.</p>
<p>However, there are a couple of scenarios that allow you to make an additional deployment zone available to your API:</p>
<ul>
	<li>if you disable a deployment zone from your API implementation, you can re-enable it.</li>
	<li>If a new deployment zone becomes available on the platform, and it matches the criteria for your API, you can then add it to your API.</li>
</ul>
<p>When you create your API from an API description document, the platform automatically matches up your API definition against the existing deployment zones, and deploys the API to all deployment zones for which it matches the criteria.</p>
<p>Note that <strong>Live</strong> and <strong>Sandbox</strong> implementations are likely to be deployed to different deployment zones.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="api_dz_how_many">How many API deployment zones can I have?</h2>
<p>An API can have many deployment zones.</p>
<p>The number of deployment zones for an API is determined by these factors:</p>
<ul>
	<li>The number of deployment zones defined on the platform.</li>
	<li>The eligibility requirements for each deployment zone; for example, a specific deployment zone might be limited to Live implementations, so an API's Sandbox implementation would not have access to it.</li>
	<li>The API definition.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="api_dz_how_edit">How do I edit an API deployment zone?</h2>
<p>When you're adding a new implementation, or editing an implementation that was manually added or automatically generated for your API, you can fine-tune the deployment zone assignments by modifying the settings. You can:</p>
<ul>
	<li>Disable/enable one or more deployment zones from the API's implementation.</li>
	<li>Add a protocol for an existing deployment zone, if additional protocols are available for the specific deployment zone.</li>
	<li>Add a vanity hostname.</li>
	<li>Add a <a href="basics_glossary.htm#gl_contextpath">context path</a>.</li>
	<li>Set up a new protocol for the deployment zone, or modify an existing one (from available protocols)</li>
	<li>Specify whether the deployment zone is included in automatically-generated API documentation.</li>
</ul>
<p><strong>Note</strong>: By default, when the implementation is added for a specific deployment zone, a unique hostname is created; for example, <strong>api11192live.developer.acmepaymentscorp.com</strong>. Each API has a unique hostname for each valid zone it's deployed in. Your API users can use either the unique hostname generated by the platform or the vanity hostname you provide yourself.</p>
<p><img src="assets/api_designer_dzs.jpg" alt="Editing deployment zones for an API" /></p>

<h4 id="proc_impl_dz_edit">To edit an API's deployment zone assignment for a specific implementation</h4>
<ol>
	<li>Log in to the Akana API Platform.</li>
	<li>Choose the API.</li>
	<li>From the left menu bar, click <strong>Implementations</strong> to access the <strong>Details</strong> page for the implementation.</li>
	<li>From the left menu bar, choose <strong>Deployments</strong>.</li>
	<li>On the <strong>Deployments</strong> page, on the right, click <strong>Edit</strong>.</li>
	<li>Choose the deployment zone to edit by clicking in the map view or choosing from the drop-down list.</li>
	<li>Choose the protocol to edit by clicking the applicable tab on the right. To add an available protocol, click <strong>+</strong> and then, in the <strong>Add Endpoint</strong> dialog, choose the protocol. Available protocols are determined by how the deployment zone is defined; if you don't have the protocol you need, ask a Site Admin or Business Admin.
		<p><strong>Note</strong>: If you want your API to support <a href="basics_glossary.htm#gl_sni">SNI</a>, choose HTTPS and click the <strong>Use Implementation's Key/Certificate for SSL</strong> check box, as shown below. (For more information on implementing SNI, see <a href="#api_impl_sni">How do I set up my API to support SNI?</a>)</p>
	<p><img src="assets/api_impl_dz_https.jpg" alt="Using HTTPS" /></p>
	</li>
	<li>Change values as needed. For help with the field definitions, see <a href="#fieldvalues_add_edit_dz">Add Deployment Zone / Edit Deployment Zone Dialog: Field Values</a> below.</li>
	<li>Click <strong>Save</strong>.</li>
</ol>
<p><strong>Note</strong>: If you're not using a vanity hostname, you don't need to provide a <a href="basics_glossary.htm#gl_contextpath">context path</a>; the path is already unique to the API implementation.</p>


<h4 id="fieldvalues_add_edit_dz">Add Deployment Zone / Edit Deployment Zone Dialog: Field Values</h4>
<p>The Add Deployment Zone / Edit Deployment Zone dialog provides the following:</p>
<dl>
	<dt>Map view</dt>
	<dd>To view information about a deployment zone, click the zone on the map.</dd>
	<dt>Zone</dt>
	<dd>Choose from the drop-down list. The list shows all deployment zones that are valid for the specific API implementation.</dd>
	<dt>Enable Zone</dt>
	<dd>Check or clear the box to enable or disable the deployment zone.</dd>
	<dt>Protocol tabs</dt>
	<dd>To add a protocol, click the <strong>+</strong> sign and choose from additional protocols available (if any; determined by the deployment zone definition as set up by the Site Admin or Business Admin).</dd>
	<dt>Hostname</dt>
	<dd>The generated, unique hostname for the API implementation is displayed.</dd>
	<dt>Use Implementation's Key/Certificate for SSL (HTTPS only)</dt>
	<dd>Check the box if you want to use SNI to serve up the implementation's key/certificate. Requires that API Clients are SNI-compliant.</dd>
	<dd>To support SNI, you must also upload a certificate for the implementation (see <a href="#api_impl_keys_certs">How do I manage keys and certificates for my API?</a>).</dd>
	<dt>Provide Vanity Hostname</dt>
	<dd>When an API implementation is automatically created with one or more valid deployment zones, a random prefix is added to the hostname. Check the box if you want to give the implementation a vanity hostname that's easy to remember and in a different domain (for example, <strong>api.acmepaymentscorp.com</strong>) rather than the unique hostname assigned by the platform.</dd>
	<dd><strong>Note</strong>: Whether you use the assigned hostname with the random prefix or a vanity hostname, make sure your hostname is configured in the DNS server as a CNAME to the unique hostname assigned by the platform.</dd>
	<dt>Vanity Hostname (CNAME)</dt>
	<dd>Provide the vanity hostname; for example, <strong>acmepaymentscorp.com</strong>. Make sure it is mapped to a valid CNAME in the DNS server of the domain for the vanity host.</dd>
	<dt>Context Path</dt>
	<dd>To make the URL unique, use the <a href="basics_glossary.htm#gl_contextpath">context path</a> if necessary. The generated hostname is unique to each API implementation, so if you're using the unique hostname you don't need a context path. If you're using a vanity hostname, use the path to make the URL for each API unique. For validation rules, see <a href="#api_dz_context_path_validation_rules">What are the validation rules for the context path?</a> below.</dd>
	<dt>Calculated Endpoint</dt>
	<dd>The full endpoint for the API implementation is generated based on the settings provided, and is displayed. It is a composite of values: protocol, generated URL or vanity URL, and context path. If the implementation doesn't use a vanity hostname, the calculated endpoint is composed of protocol, assigned URL, and context path if specified.</dd>
	<dt>Publish in API Documentation</dt>
	<dd>You might want to restrict use of a specific endpoint with a generated hostname, for private or internal use. To do this, clear the check box. Only URLs that have this box checked (the default) are included in the API documentation and displayed to users who are not API Admins.</dd>
</dl>
<p><a href="#top">Back to top</a></p>



<h2 id="api_dz_how_add_new_protocol">How do I add a new protocol for an API deployment zone?</h2>
<p>You can add an additional protocol supported by the deployment zone your API implementation is using.</p>

<h4>To add a new protocol to an existing deployment zone</h4>
<ol>
	<li>Log in to the Akana API Platform and go to the overview page for your API.</li>
	<li>From the left menu bar, choose <strong>Implementations</strong>.</li>
	<li>Click the implementation you want to edit. </li>
	<li>From the left menu bar, choose <strong>Deployments</strong>.</li>
	<li>On the <strong>Deployments</strong> page, click <strong>Edit</strong>.</li>
	<li>In the protocol section on the right, click the <strong>+</strong> tab.</li>
	<li>At the <strong>Add Endpoints</strong> overlay, choose the protocol and click <strong>Add</strong>.
	<p><strong>Note</strong>: the list of protocols available is determined by the properties of the deployment zone that the implementation is using. Deployment zones are defined by the Site Admin or Business Admin.</p></li>
	<li>Click <strong>Save</strong>.</li>
</ol>

<p><a href="#top">Back to top</a></p>



<h2 id="api_dz_how_delete">How do I delete an API deployment zone?</h2>
<p>Deployment zones are set up by the Site Admin and are assigned to your API automatically based on the deployment zone criteria and the API definition. You cannot delete a deployment zone; however, you can disable a specific deployment zone for your API, which achieves the same result.</p>
<p>Any customization of settings is lost when you disable a deployment zone.</p>

<h4>To disable a deployment zone for an API</h4>
<ol>
	<li>Follow the steps in <a href="#proc_dz_view">To view the deployment zones for a specific implementation</a> to get to the <strong>Overview</strong> page for the deployment zone.</li>
	<li>From the left menu bar, choose <strong>Deployments</strong>.</li>
		<li>On the <strong>Deployments</strong> page, on the right, click <strong>Edit</strong>.</li>
	<li>Choose the deployment zone you want to disable, either by clicking in the map view or choosing from the drop-down list.</li>
	<li>Clear the <strong>Enable Zone</strong> check box.</li>
	<li>Click <strong>Save</strong>.</li>
</ol>
<p><strong>Note</strong>: If you previously disabled a deployment zone, you can re-enable it by going back in and checking the box, then editing the settings as needed.</p>
<p><a href="#top">Back to top</a></p>




<hr class="divide_hr" />
<h2 id="h_impl_certificates">Managing Certificates for an API Implementation:</h2>




<h2 id="api_impl_keys_certs">How do I manage keys and certificates for my API?</h2>
<p>When you upload a private key and certificate for an API implementation, the key and certificate pair can be used for encrypting content for the API implementation through mechanisms such as:</p>
<ul>
	<li> WS-Security encryption (see the specification at: <a href="http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/ws-securitypolicy-1.2-spec-os.html" target="_blank">http://docs.oasis-open.org/ws-sx/ws-securitypolicy/200702/ws-securitypolicy-1.2-spec-os.html</a>)</li>
	<li>JSON Web Encryption (JWE) (<a href="https://tools.ietf.org/html/rfc7516" title="JWE standard" target="_blank">https://tools.ietf.org/html/rfc7516</a>)</li>
	<li>HTTPS (see <a href="#api_impl_sni">How do I set up my API to support SNI?</a>)</li>
</ul>
<p>You can manage trusted keys and certificates separately for each implementation, including uploading new certificates, uploading trusted certificates, downloading existing certificates, and assigning aliases.</p>
<p>The key is unique for each service identity (implementation).</p>
<p>The key/certificate must already be trusted. If it isn't yet trusted, ask the Policy Manager Admin to add it to the <a href="basics_glossary.htm#gl_truststore">trust store</a>. See <a href="../../ag/security_config/trusted_ca_certificates.htm">Trusted CA Certificates</a> (Policy Manager help).</p>

<h4 id="proc_impl_manage_keys_certs">To manage keys and certificates for an API implementation</h4>
<ol>
	<li>Log in to the Akana API Platform and go to the overview page for your API.</li>
	<li>From the left menu bar, choose <strong>Implementations</strong>.</li>
	<li>Click the implementation.</li>
	<li>From the left menu bar, choose <strong>Certificate</strong>.</li>
	<li>On the <strong>Certificate</strong> page, click <strong>Edit</strong>.</li>
	<li>On the <strong>Keys and Certificates</strong> page, choose one of these options:
<ul>
			<li><strong>Download</strong>: see <a href="#proc_impl_manage_keys_certs_download">To download a certificate for an implementation</a> below.</li>
			<li><strong>Upload New</strong>: see <a href="#proc_impl_manage_keys_certs_upload">To upload a new private key and certificate for an implementation</a> below.</li>
			<li><strong>Delete</strong>: to delete a certificate that's been uploaded. See <a href="#proc_impl_manage_keys_certs_delete">To delete a trusted certificate for an implementation</a> below. </li>
		</ul>
		</li>
	<li>When done, click <strong>Save</strong>.</li>
</ol>
<p><strong>Note</strong>: If you see a <strong>Certificate not trusted</strong> error message, the certificate has not yet been added to the Policy Manager Trust Store. See <a href="../../ag/security_config/trusted_ca_certificates.htm">Trusted CA Certificates</a> (Policy Manager help).</p>

<h4 id="proc_impl_manage_keys_certs_upload">To upload a new private key and certificate for an implementation</h4>
<p>Go to the <strong>Keys and Certificates</strong> page for your implementation (see <a href="#proc_impl_manage_keys_certs">To manage keys and certificates for an API implementation</a> above).</p>
<ol>
	<li>Click <strong>Upload New</strong>.</li>
	<li>In the <strong>Import Private Key + X.509 Certificate from Keystore</strong> overlay, enter the values for the new key/certificate:
		<ol>
			<li>Browse to the location of the keystore file, such as a JKS file, and upload it.</li>
			<li>In the <strong>Keystore Password</strong> field, enter the secure password for the keystore file so that the platform can read the file.</li>
			<li>Click the <strong>Load Aliases</strong> button. The platform reads the file and displays a list of one or more key aliases for you to choose from.</li>
			<li>In the <strong>Key Alias</strong> field, choose the alias you want to use.</li>
			<li>In the <strong>Key Password</strong> field, enter the secure password for the specific key.	</li>
		</ol>
	</li>
	<li>Click <strong>Finish</strong>. The certificate details are displayed on the Implementation &gt; <strong>Certificate</strong> page. An example is shown below.
<p><img src="assets/api_impl_cert.jpg" alt="Certificate details for an implementation" /></p>
	</li>
</ol>

<h4 id="proc_impl_manage_keys_certs_download">To download a certificate for an implementation</h4>
<ol>
	<li>Go to the Keys and Certificates for your implementation (see <a href="#proc_impl_manage_keys_certs">To manage keys and certificates for an API implementation</a> above). The existing certificate is displayed. An example is shown below.
	<p><img src="assets/api_impl_keys_certs.jpg" alt="Keys and Certificates page" /></p>
	</li>
	<li>Click <strong>Download</strong>.</li>
	<li>Choose to open or save the certificate file.</li>
</ol>

<h4 id="proc_impl_manage_keys_certs_delete">To delete a trusted certificate for an implementation</h4>
<ol>
	<li>Go to the Keys and Certificates for your implementation (see <a href="#proc_impl_manage_keys_certs">To manage keys and certificates for an API implementation</a> above).</li>
	<li>Click <strong>Delete</strong>.</li>
	<li>At the prompt, click <strong>OK</strong> to confirm the deletion.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="platform_sni">How does the platform support SNI?</h2>
<p>When API transactions are sent to the Network Director using HTTPS, typically the Network Director uses the key and presents the certificate uploaded as part of the HTTPS <a href="basics_glossary.htm#gl_listener">listener</a> configuration. In order to support different certificates based on the virtual host of an API, Server Name Indication (<a href="basics_glossary.htm#gl_sni">SNI</a>) can be used. In this scenario, the key and certificate uploaded for an API can be used to negotiate with clients by specifying the virtual host of the API instead of the listener's key and certificate as part of the SNI extension.</p>
<p>If you want to use an API-specific security key/certificate, you'll need to:</p>
<ol>
	<li>Create the key and certificate, which must meet certain conditions (see below).</li>
	<li>Upload the key and certificate to the platform.</li>
	<li>In the implementation, designate that you want to use the API-specific key and certificate.</li>
</ol>
<p>For details, see <a href="#api_impl_sni">How do I set up my API to support SNI?</a> below.</p>
<p><strong>Note</strong>: The Community Manager developer portal also supports SNI at the tenant level, for Community Manager developer portal access. See <a href="site_admin_site.htm#settings_theme_security_manage">How do I manage security for a Community Manager developer portal theme?</a> (Site Admin help).</p>
<p><a href="#top">Back to top</a></p>



<h2 id="api_impl_sni">How do I set up my API to support SNI?</h2>
<p>The API platform's support of <a href="basics_glossary.htm#gl_sni">SNI</a> means that multiple keys/certificates can be used for one HTTPS endpoint. You can have individual identity keys/certificates per API implementation. Each implementation can use its own key/certificate for its own clients.</p>
<p>To use SNI, the deployment zone must support HTTPS, and you must complete these steps:</p>
<ol>
	<li>When you create your key/certificate externally, make sure the subject common name (CN) field in the certificate matches the virtual host.
		<p><strong>Note</strong>: the platform also supports the use of subject alternate names in the certificate. If you're using a subject alternate name, the same constraint applies; the CN field must match the virtual host name.</p></li>
	<li>Upload the certificate to the API implementation. This is set up on the Implementation &gt; <strong>Certificate</strong> page. See <a href="#proc_impl_manage_keys_certs_upload">To upload a new private key and certificate for an implementation</a>.</li>
	<li>In the implementation page, in the HTTPS tab for the deployment, check the <strong>Use Implementation's Key/Certificate for SSL</strong> option. See <a href="#proc_impl_dz_edit">To edit an API's deployment zone assignment for a specific implementation</a>.</li>
</ol>
<p>Once these settings are in place, the platform uses the appropriate certificate based on the requested hostname.</p>
<p><a href="#top">Back to top</a></p>




<hr class="divide_hr" />
<h2 id="h_impl_identities">Managing Identities for an API Implementation:</h2>




<h2 id="api_impl_identities_overview">What is an implementation identity?</h2>
<p>When securing outbound calls from the API Platform to an API proxied on the platform, an Identity is typically required in the outbound request message to the downstream API service.</p>
<p>The API Platform allows you to configure the <a href="basics_glossary.htm#gl_identity">identity</a> to be used for outbound calls to the downstream API service, in the <strong>Manage Outbound Identities</strong> page for the implementation.</p>
<p>There are two options for managing outbound identities:</p>
<ul>
	<li>Use incoming identities as outbound identities (the default).</li>
	<li>Specify outbound identities.</li>
</ul>

<p>You can specify these two identities:</p>
<ul>
	<li><strong>Source identity</strong>&#8212;You can define which identity received in the inbound message should be used in the outbound message: Consumer, End-User, Service, or another category which you can define yourself.</li>
	<li><strong>Outbound identity</strong>&#8212;You can specify the subject category of the inbound identity that will be used for the outbound identity: Consumer, End-User, or another category which you can define yourself.</li>
</ul>

<h3>Background</h3>
<p>When the API Gateway receives an incoming request, it created an exchange that governs everything that happens with the request while the Gateway is processing it. Authentication policies put an Identity <a href="basics_glossary.htm#gl_principal">Principal</a> in the exchange. Typically, in a standard configuration, there can be 0, 1, or 2 Identity Principals in the exchange.</p>
<p>The incoming message includes the Identity Principal object, which includes authentication and authorization information. The two most common Identity Principal objects are:</p>
<ul>
	<li><strong>Consumer</strong>: Represents the consuming application.</li>
	<li><strong>End User</strong>: Represents the user of the consuming application.</li>
</ul>
<p>Those two things are represented in the Subject of the Identity Principal object.</p>
<p>By default, the Identity Principals are mapped one to one. However, in some cases, it might be a little more complex. For example, let's say the outbound request has a custom subject of <strong>AcmeID</strong>. In this case, you might need to set up the <strong>Manage Outbound Identities</strong> configuration to use the <strong>Consumer</strong> identity to populate the <strong>AcmeID</strong>.</p>

<h3>Use Cases</h3>
<p>Some implementation scenarios:</p>
<ul>
	<li>Perhaps the inbound Identity is really a service identity, but you're using HTTP Basic Auth for authentication. The default HTTP Basic Auth policy identifies an end user, so you might decide that you want to take the end-user credentials from the Consumer subject and use those for the End User object.</li>
	<li>Perhaps inbound requests to the service are not going to have any security policies, and there will be no credentials. In this case, you'll need to make sure that whenever you invoke a downstream service, you have an identity you can use. You might configure your service to use a specific consumer identity in the local domain store. In this case, the identity is static, and you specify the username and password in the implementation setup.</li>
	<li>If the API uses orchestration, you might want to do different things with Identities for different outbound invokes. You might specify default identity mapping at the implementation level, but you can also override it in the orchestration, at the point at which you invoke a physical service. Each Invoke operation offers the same UI so that you can manage the implementation identity settings and can map app identities differently for each invoke.</li>
</ul>
<p>If you need to manipulate the subjects and the principals that are present in the exchange, you can do that through scripting. For example, you can have a script in the process that adds your own static security principals to the request; or you could switch the subject of the consumer principal to be end user.</p>
<p>The most common use case is invoking a downstream service that requires an AppID specified as an HTTP Basic Auth token. In this scenario, you can add the username and password as an identity to the local domain, and then you can reference that identity as the Consumer subject, as a static identity in the outbound configuration.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="api_impl_identities_settings">How do I manage my implementation identity settings?</h2>
<p>On the <strong>Manage Outbound Identities</strong> page, you can manage <a href="basics_glossary.htm#gl_identity">identity</a> settings for your implementation. You can:</p>
<ul>
	<li>Choose to use incoming identities as outbound identities (the default) or map outbound identities.</li>
	<li>Add one or more outbound identities.</li>
	<li>Choose to use the service identity for outbound HTTPS. This option configures the identity to be used when communicating over the next hop.</li>
</ul>

<h4 id="proc_impl_identity_settings_manage">To manage implementation identity settings</h4>
<ol>
	<li>Log in to the Akana API Platform and go to the overview page for your API.</li>
	<li>From the left menu bar, choose <strong>Implementations</strong>.</li>
	<li>Click the implementation.</li>
	<li>From the left menu bar, choose <strong>Identities</strong>.</li>
	<li>On the <strong>Identities</strong> page, click <strong>Edit</strong>.</li>
	<li>On the <strong>Manage Outbound Identities</strong> page, choose one of these options:
<ul>
			<li><strong>Use Incoming Identities as Outbound Identities</strong>: the default. You can change this setting by choosing <strong>Specify Outbound Identities</strong>.</li>
			<li><strong>Specify Outbound Identities</strong>: when you click this button, additional fields become available. Any existing identities are displayed, and you can also add a new one. See <a href="#proc_impl_identity_add">To add a new identity for an implementation</a> below.</li>
			<li><strong>Use Service Identity for Outbound HTTPS</strong>: Check the box if you want to use the service identity for outbound secure messages to the API.</li>
		</ul>
	</li>
	<li>When done, click <strong>Save</strong>.</li>
</ol>

<h4 id="proc_impl_identity_add">To add a new identity for an implementation</h4>
<ol>
	<li>Go to the <strong>Manage Outbound Identities</strong> page for your implementation (see <a href="#proc_impl_identity_settings_manage">To manage implementation identity settings</a> above).</li>
	<li>Click <strong>Specify Outbound Identities</strong>.</li>
	<li>Click <strong>Add</strong>. The <strong>Edit Outbound Identity</strong> page appears, as shown below.
	<p><img src="assets/api_impl_identities_add.jpg" alt="API Implementation identity, adding" /></p></li>
	<li>Specify options for the source identity, as needed:
		<ul>
			<li>If you choose <strong>User-Defined Category</strong>, you'll need to specify the category. Type it exactly, including capitalization.</li>
			<li>If you choose <strong>Static User</strong>, you'll need to specify the domain and the credentials (username/password).</li>
		</ul>
		</li>
	<li>Specify options for the outbound identity, as needed:
		<ul>
			<li>If you choose <strong>User-Defined Category</strong>, you'll need to specify the category. Type it exactly, including capitalization.</li>
		</ul>
	</li>
	<li>Click <strong>Finish</strong>. The new identity is displayed in the <strong>Manage Outbound Identities</strong> page.</li>
	<li>Click <strong>Save</strong>. The changes are saved, and the Identities summary on the <strong>Implementation Details</strong> page is updated based on your changes.</li>
</ol>
<p><a href="#top">Back to top</a></p>




<hr class="divide_hr" />
<h2 id="h_impl_policies">Managing Policies for an API Implementation:</h2>




<h2 id="api_impl_policies_available">What types of policies are available for my API?</h2>
<p>The platform allows you to secure and monitor your APIs with <a href="basics_glossary.htm#gl_policy">policies</a>. A selection of policies is available to apply different rules to your API.</p>
<p>There are three main policy categories:</p>
<ul>
	<li><strong>Simple Header Security</strong>&#8212;Used to identify (authenticate) the application that is attempting to consume an API to determine if it is authorized or not. This policy type supports multiple mechanisms for the app to present its identity, including plain text App Id, signed header with X.509 or a shared secret, or OAuth (1.0a or 2.0).</li>
	<li><strong>Analytics</strong>&#8212;Collects transaction details including recorded messages for every transaction.</li>
	<li><strong>OAuth</strong>&#8212;Provides support for applications performing authentication and authorization using OAuth.</li>
</ul>
<p>For details, see below.</p>
<p><strong>Note</strong>: For general information about all policies, see <a href="../../ag/policies/about_policies_view.htm">About Policies</a> (Policy Manager help).</p>
<p><a href="#top">Back to top</a></p>



<h2 id="api_impl_policies_how_assign">How do I assign policies to my API implementation?</h2>
<p>You can assign policies:</p>
<ul>
	<li>To the entire implementation. See <a href="#proc_impl_policy_add_implevel">To assign a policy to an API implementation (all operations)</a>.</li>
	<li>To an individual operation (valid in version 2020.2.0 and later). See <a href="#proc_impl_policy_operationlevel">To assign a policy to a specific operation in an API implementation</a> below.
	<p><strong>Note</strong>: Although the Community Manager developer portal allows attaching a policy at the operation level, the Concurrency Quota policy (see <a href="../../ag/policies/policy_qos_concurrency_quota.htm">Using the Concurrency Quota policy</a>) works correctly only when attached to a service, not to an individual operation.</p></li>
</ul>

<h4 id="proc_impl_policy_add_implevel">To assign a policy to an API implementation (all operations)</h4>
<ol>
	<li>Log in to the Akana API Platform and go to the overview page for your API.</li>
	<li>From the left menu bar, choose <strong>Implementations</strong>.</li>
	<li>Click the implementation you want to edit. The <strong>Details</strong> page for the implementation is displayed.</li>
	<li>From the left menu bar, click <strong>Policies</strong>.</li>
	<li>On the <strong>Policies</strong> page, in the top section, click <strong>Edit</strong>.</li>
	<li>On the <strong>Edit Policies</strong> page, in the Available Policies section, choose the policy that you want to add and click <strong>Attach</strong>.</li>
	<li>Click <strong>Save</strong>.</li>
</ol>

<h4 id="proc_impl_policy_operationlevel">To assign a policy to a specific operation in an API implementation</h4>
<p><strong>Note</strong>: You can add policies that have not been added at the implementation level. You cannot remove policies at the operation level if they have been added at the implementation level.</p>
<ol>
	<li>Log in to the Akana API Platform and go to the overview page for your API.</li>
	<li>From the left menu bar, choose <strong>Implementations</strong>.</li>
	<li>Click the implementation you want to edit. The <strong>Details</strong> page for the implementation is displayed.</li>
	<li>From the left menu bar, click <strong>Policies</strong>.</li>
	<li>On the <strong>Policies</strong> page, in the <strong>Operations</strong> section, find the operation that you want to attach the policy to.</li>
	<li>In the <strong>Operations</strong> section, click <strong>Edit Policies</strong>. An example is shown below.
	<p><img src="assets/api_implementations_policy_operation_attach.png" alt="API Implementation, Policies page: attaching a policy to an operation (2020.2.0 and later)" /></p></li>
	<li>On the <strong>Edit Policies</strong> page, in the Available Policies section, choose the policy that you want to add and click <strong>Attach</strong>.</li>
	<li>Click <strong>Save</strong>.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="what_security_and_monitoring_policies_are_supported">What security and monitoring policies are supported?</h2>
<p><strong>Video content</strong>: <a href="https://www.akana.com/video-tutorials/secure-your-api" title="Learn how to use Akana to apply API security by protecting API integrity with authentication and authorization." target="_blank">Learn how to use Akana to apply API security by protecting API integrity with authentication and authorization.</a></p>
<p>The platform offers the preconfigured policies listed below.</p>

<dl>
	<dt>AtmosphereApplicationSecurityPolicy</dt>
	<dd>This is a default security policy for Enterprise API Platform applications. It provides support for SHA1 (Shared Secret), allowing the API to authenticate the app.</dd>
	<dd>For full documentation about this type of policy, refer to: <a href="../../ag/policies/policy_op_api_consumer_app_security.htm" target="_blank">Using the API Consumer Application Security Policy</a> (Akana docs site).</dd>
	<dd><strong>Policy Category</strong>: Simple Header Security</dd>

	<dt>BasicAuditing</dt>
	<dd>Provides basic auditing of messages. Message metrics are recorded in the Usage Logs Analytics tab. The messages themselves are not audited. For message auditing, use the DetailedAuditing policy.</dd>
	<dd>For full documentation about this type of policy, refer to: <a href="../../ag/policies/policy_op_basic_auditing.htm" title="" target="_blank">Using the Basic Auditing Policy</a> (Akana docs site).</dd>
	<dd><strong>Policy Category</strong>: Monitoring</dd>

	<dt>CORSAllowAll</dt>
	<dd><a href="basics_glossary.htm#gl_cors">CORS</a> (cross-origin resource sharing) enables users to access resources from within the browser serving a web page, and defines a way in which the browser and the server can interact to determine whether or not to allow the cross-origin request.</dd>
	<dd>The CORSAllowAll policy allows all cross-origin requests.</dd>
	<dd>If you're using the platform as a proxy, you can add the CORSAllowAll policy to allow cross-origin requests to the proxy service.</dd>
	<dd>For full documentation about this type of policy, refer to: <a href="../../ag/policies/policy_op_cors.htm" target="_blank">Using the CORS policy</a> (Akana docs site).</dd>

	<dt>DetailedAuditing</dt>
	<dd>Provides detailed auditing of messages. Message metrics are recorded in the Usage Logs Analytics tab as well as the entire message for each exchange.</dd>
	<dd>For full documentation about this type of policy, refer to: <a href="../../ag/policies/policy_op_detailed_auditing.htm" target="new">Using the Detailed Auditing Policy</a> (Akana docs site).</dd>
	<dd><strong>Policy Category</strong>: Monitoring</dd>

	<dt>OAuthSecurity</dt>
	<dd>The OAuthSecurity Policy uses the OAuth configuration assigned to an API when enforcing OAuth tokens in the received request. </dd>
	<dd><strong>Note</strong>: If you're applying this policy, remember to also specify OAuth details for the API. On the API <strong>Details</strong> page, from the drop-down on the right, click <strong>OAuth Details</strong>. For information about the API OAuth Details settings, see <a href="api_admin_oauth_support.htm#api_oauth_config">How do I configure OAuth Details for my API?</a></dd>
	<dd>For full documentation about this type of policy, refer to <a href="../../ag/policies/policy_op_oauth_security.htm" target="_blank">Using the OAuth Security Policy</a> (Akana docs site).</dd>
	<dd><strong>Policy Category</strong>: OAuth</dd>
</dl>

<p>For more information about policies, see <a href="api_admin_policy_list.htm">Policy List</a>.</p>
<p><strong>Note</strong>: In some cases, such as an on-premise installation, the Site Admin has the ability to create and manage additional policies. In this scenario:</p>
<ul>
	<li>If you require a policy that isn't on the default list, ask the Site Admin.</li>
	<li>If you see policies on the list that are not explained above, ask the Site Admin for information.</li>
</ul>
<p><a href="#top">Back to top</a></p>


<h2 id="api_impl_policies_choose">Which policies should I choose?</h2>
<p>Your selection of one or more policies for a specific API will be determined by the level of security required, whether monitoring is required, whether the API supports OAuth, and other factors.</p>
<p>If the API doesn't allow anonymous requests, you'll need to have the <strong>AtmosphereApplicationSecurityPolicy</strong> in place so that the API can authenticate app requests.</p>
<p>If the API allows anonymous requests, do not specify any policies.</p>
<p><strong>Note</strong>: We don't recommend accepting anonymous requests. At minimum, particularly for a Live implementation, it's best to include at least the <strong>AtmosphereApplicationSecurityPolicy</strong>.</p>
<p>If you want to have monitoring for your API, choose one of the monitoring policies also.</p>
<p>If you want your API to support OAuth, enable the OAuthSecurity policy.</p>
<p>If you want your API to support the JOSE standard&#8212;for example, to conform to the UK Open Banking standard&#8212;attach the JOSE Security Policy v2; see <a href="../../ag/policies/policy_op_jose_security_v2.htm">Using the JOSE Security Policy v2 (Unencoded Payload Support)</a>. If the policy is configured for JSON serialization, you must make sure that the operations in your API support a content-type of <strong>application/jose+json</strong>.</p>
<p><strong>Note</strong>: Only attach one auditing policy to an API; for example, <a href="../../ag/policies/policy_op_basic_auditing.htm">Basic Auditing</a> policy or <a href="../../ag/policies/policy_op_detailed_auditing.htm">Detailed Auditing</a> policy, but not both.</p>
<p>For more information about policies, see <a href="api_admin_policy_list.htm">Policy List</a>.</p>
<p><a href="#top">Back to top</a></p>




<h2 id="api_impl_policies_view_details">How can I see details about a policy?</h2>
<p>When you're adding policies to your implementation, you just see the policy title, not the details about how the policy is configured.</p>
<p>If you want to know more, you can click the title of the policy. Policy details are displayed in a pop-up window. This information is view-only; if you want any changes to the available policies, check with the Business Admin.</p>
<p>You can also review a brief description of the policy and click through for more details about each type of policy (see <a href="#what_security_and_monitoring_policies_are_supported">What security and monitoring policies are supported?</a> above).</p>

<h4>To view details for a policy</h4>
<ol>
	<li>Log in to the Akana API Platform and go to the overview page for your API.</li>
	<li>From the left menu bar, choose <strong>Implementations</strong>.</li>
	<li>Click the link for the implementation. The <strong>Details</strong> page for the implementation is displayed.</li>
	<li>From the left menu bar, click <strong>Policies</strong>.</li>
	<li>On the <strong>Policies</strong> page, click <strong>Edit</strong>. In the <strong>Edit Policies page</strong>, find the policy you want to view, and click the policy title.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="what_is_the_minimum_policy_requirement_for_my_api">What is the minimum policy requirement for my API?</h2>
<p>There is no minimum policy requirement for an API. However, it's best to at minimum select the <strong>AtmosphereApplicationSecurityPolicy</strong>, which gives you basic security.</p>
<p>If you want to see charts and logs, you must also select a monitoring policy.</p>
<p><a href="#top">Back to top</a></p>




<h2 id="api_impl_policies_how_view">How do I see which policies are assigned to my API implementation?</h2>
<p>When you assign policies to an API implementation, they're displayed in the summary view for the implementation, on the Implementation &gt; <strong>Policies</strong> page.</p>
<h4 id="proc_impl_policies_assigned">To see which policies are assigned to an API implementation</h4>
<ol>
	<li>Log in to the Akana API Platform and go to the overview page for your API.</li>
	<li>From the left menu bar, choose <strong>Implementations</strong>.</li>
	<li>Click the implementation.</li>
	<li>From the left menu bar, choose <strong>Policies</strong>.</li>
	<li>Implementation level: On the <strong>Policies</strong> page, in the top section, view policies assigned to the implementation.</li>
	<li>Operation level: In the Operations section, find the operation and then, to the right, click the ellipsis menu (three dots) to view policies assigned to the operation.</li></ol>
<p><a href="#top">Back to top</a></p>



<h2 id="how_do_i_set_up_my_api_to_support_cors">How do I set up my API to support CORS?</h2>
<p>If you want your API to support cross-origin resource sharing (<a href="basics_glossary.htm#gl_cors">CORS</a>), you can do that in your API implementation in the platform.</p>
<p>In your API setup, choose the implementation and then, on the Implementation &gt; <strong>Policies</strong> page, add the <strong>CorsAllowAll</strong> policy.</p>
<p>When the API definition includes this policy, the proxy endpoint will accept request messages that come from a different domain, in the context of a browser.</p>
<p><a href="#top">Back to top</a></p>




<hr class="divide_hr" />
<h2 id="h_impl_resources">Managing Processes for an API Implementation:</h2>



<h2 id="api_impl_process_editor">How do I manage orchestration for my implementation?</h2>
<p>If your API implementation is more complex, and might include one or more services, processes, or additional steps, choose an <a href="basics_glossary.htm#gl_implementationpattern">implementation pattern</a> of Orchestration. Then, you'll be able to use all the features of the built-in Process Editor to fine-tune the orchestration of your API.</p>
<p>To access and use the Process Editor, follow the procedure below. If you need more details about the specific activities available and how you can configure them, refer to the full standalone Process Editor documentation (links below).</p>
<p>For a tutorial video showing an example of using the Process Editor, see <a href="https://www.youtube.com/watch?v=VdiYPH4YP0A" target="_blank">Add an API using orchestration</a> (external link).</p>

<h4>To access the Process Editor to manage orchestration for your implementation</h4>
<ol>
	<li>Log in to the Akana API Platform and go to the overview page for your API.</li>
	<li>From the left menu bar, choose <strong>Implementations</strong>.</li>
	<li>Click the link for the implementation. The <strong>Details</strong> page for the implementation is displayed.</li>
	<li>From the left menu bar, click <strong>Processes</strong>.
	<p><strong>Note</strong>: In versions prior to 2020.2.1, this left menu option was called <strong>Resources</strong>.</li>
	<li>On the Processes page, find the resource that you want to manage the process for.</li>
	<li>In the right column, click <strong>Edit Process</strong>. The Process Editor opens.</li>
	<li>Edit the process for the resource, and then click <strong>Save</strong>. For more information, see <a href="apiadmin_process_editor.htm#api_impl_process_editor_use">How do I use the Process Editor?</a></li>
</ol>
<p><a href="#top">Back to top</a></p>




<hr class="divide_hr" />
<h2 id="h_impl_dependencies">Managing Dependencies for an API Implementation:</h2>




<h2 id="api_impl_dependencies">How can I see implementation dependencies?</h2>
<p>The Community Manager developer portal includes a dependencies tool&#8212;a graphical interface that you can use to more clearly understand the hierarchy of elements in the implementation. These elements can include the actual web service application (physical service) and one or more virtual services.</p>
<p>By viewing and manipulating the elements in the visual representation, you can get a high-level, or very detailed, view of the upstream and downstream dependencies of the implementation.</p>
<p>This is particularly useful in an orchestration scenario where there might be more complex factors at play, not just a one-to-one virtual service to physical service scenario.</p>

<h4>To view the dependencies for an implementation</h4>
<ol>
	<li>Log in to the Akana API Platform.</li>
	<li>Choose the API.</li>
	<li>From the left menu bar, click <strong>Implementations</strong>.</li>
	<li>Click the implementation you want to work with.</li>
	<li>In the left menu bar, click <strong>Dependencies</strong>. The dependency map is displayed. An example is shown below.
		<p><img src="assets/api_impl_dependencies.png" alt="Implementation dependencies" /></p>
	</li>
</ol>
<p><a href="#top">Back to top</a></p>




<h2 id="api_impl_dependencies_tool_using">How do I use the implementation dependencies tool?</h2>
<p>You can manipulate the elements in the implementation dependencies tool to get a better understanding of your API implementation.</p>
<p>This is particularly useful if your API includes orchestration; the visual representation can help you to understand the dependencies in an aggregate sense, rather than having to open up each operation and view the orchestration process that has been implemented for each.</p>
<p>In the implementation dependencies tool, you can:</p>
<ul>
	<li>Drag nodes to change the visual display.</li>
	<li>Zoom in and out using the mouse scroll bar.</li>
	<li>Hover over a node to view details about the resource, as shown below (Name, Description).
		<p><img src="assets/api_impl_depend_hover_resource.jpg" alt="Implementation dependencies, hover help for resource" /></p></li>
	<li>Hover over the connection between nodes to view details about the relationship between resources, as shown below.
		<p><img src="assets/api_impl_depend_hover_relationship.jpg" alt="Implementation dependencies, hover help for relationship" /></p></li>
</ul>
<p><a href="#top">Back to top</a></p>




<hr class="divide_hr" />




<h2 id="related_topics">Related Topics</h2>
<div class="relatedlinks" id="api_admin"><!-- #BeginLibraryItem "/Library/relatedtopics_api_admin.lbi" -->
<ul>
	<li><a href="apiadmin_getting_started.htm">Getting Started for API Developers</a></li>
	<li><a href="apiadmin_overview.htm">API Administration: Overview</a></li>
	<li><a href="api_admin_tutorial.htm">Tutorial (API Provider)</a></li>
	<li><a href="api_admin_management.htm">API Admin Management</a></li>
	<li><a href="bus_api_admin_forum.htm">Forum Moderation</a></li>
	<li><a href="apiadmin_promotion.htm">Promoting an API</a></li>
	<li><a href="apiadmin_api_add.htm">Adding an API</a></li>
	<li><a href="apiadmin_api_design.htm">Add or Modify an API Using API Designer</a></li>
</ul>
<ul>
	<li><a href="apiadmin_a_d_d_support.htm">API Description Language Support</a></li>
	<li><a href="apiadmin_implementations.htm">Manage API Implementations</a></li>
	<li><a href="api_admin_testing_tc.htm">API Testing with Test Client</a></li>
	<li><a href="uc_tc_okta.htm">Use Case: API testing in Test Client with Okta</a></li>
	<li><a href="api_admin_managing_contracts.htm">Managing Contracts for your API</a></li>
	<li><a href="apiadmin_monitoring.htm">Monitoring API Analytics</a></li>
	<li><a href="apiadmin_mydashboard.htm">Monitoring APIs with the My Dashboard Feature</a></li>
</ul>
<ul>
	<li><a href="api_admin_api_publishing.htm">API Settings and Visibility</a></li>
	<li><a href="apiadmin_manage_licensing.htm">API Licenses and Scopes</a></li>
	<li><a href="apiadmin_api_phys_svc.htm">Working with Physical Services</a></li>
	<li><a href="api_admin_oauth_support.htm">OAuth Support</a></li>
	<li><a href="api_admin_content_guidelines.htm">Content Development Guidelines for API Admins</a></li>
	<li><a href="api_admin_documentation_maintenance.htm">API Documentation Maintenance</a></li>
	<li><a href="api_admin_documentation_tagging.htm">API Documentation Visibility Tagging</a></li>
	<li><a href="api_admin_legal_agreement_maintenance.htm">Legal Agreement Maintenance</a></li>
	<li><a href="basics_glossary.htm">Glossary of Terms</a></li>
</ul><!-- #EndLibraryItem --></div>