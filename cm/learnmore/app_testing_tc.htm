---
layout: page
title: Test Your App | App Development | Akana API Platform Help
description: Test your app with APIs.
product: cm
category: learn
sub-nav-class: Test
weight: 16
type: page
nav-title: Test Your App With APIs
---
<h2 id="top">Trying Out APIs in Test Client</h2>
<p>Test your app with one or more APIs using the Test Client testing tool.</p>
<h5 class="stamp">API Platform Version: 8.1 and later</h5>

<div class = "divider1"></div>

<h3 style="color: gray;">Table of Contents</h3>
<ol class="table_of_contents">
	<li><a href="#platform_app_testing">What app testing tools does the platform provide?</a></li>
	<li><a href="#tc_test_app_sandbox">How do I test my app in the sandbox environment?</a></li>
	<li><a href="#platform_api_test_rest_clients">What are some sample REST clients I can use to test an API I want to use?</a></li>
	<li><a href="#what_is_the_test_client">What is the Test Client?</a></li>
	<li><a href="#tc_options">What are the options in Test Client?</a></li>
	<li><a href="#tc_test_api">How do I test an API in Test Client?</a></li>
	<li><a href="#tc_test_app">How do I test my app in Test Client?</a></li>
	<li><a href="#tc_viewing_response">What are the different ways I can view the response information in Test Client?</a></li>
	<li><a href="#tc_test_app_with_oauth">How do I test my app with OAuth?</a></li>
	<li><a href="#tc_test_app_with_oauth10">How do I test my app with OAuth 1.0a?</a></li>
	<li><a href="#tc_test_app_with_oauth20_authcode">How do I test my app with OAuth 2.0, Authorization Code grant type?</a></li>
	<li><a href="#tc_test_app_with_oauth20_implicit">How do I test my app with OAuth 2.0, Implicit grant type?</a></li>
	<li><a href="#tc_test_app_with_oauth20_resownercred">How do I test my app with OAuth 2.0, Resource Owner Password Credentials grant type?</a></li>
	<li><a href="#tc_test_app_with_oauth20_clientcred">How do I test my app with OAuth 2.0, Client Credentials grant type?</a></li>

	<li><a href="#tc_set_to_no_cache">How can I make sure I always see the latest results in Test Client?</a></li>
	<li><a href="#tc_test_app_auth_with_oauth">How do I use Test Client to test authorization of my app with an API that supports OAuth?</a></li>
	<li><a href="#tc_with_cors">Can I use Test Client to test APIs that support CORS?</a></li>
	<li><a href="#tc_two_log_entries_one_call">Why do I sometimes see two log entries for one Test Client call?</a></li>
	<li><a href="#tc_response_headers">Why do I see extra response headers in the Headers tab?</a></li>
	<li><a href="#tc_colors">What is the color coding for the Test Client results?</a></li>
	<li><a href="#tc_ss_not_displayed">The app's shared secret is not displayed, or is encrypted. How do I use Test Client?</a></li>
	<li><a href="#tc_app_troubleshooting">Troubleshooting in Test Client</a></li>
</ol>
<div class = "divider1"></div>



<h3 id="platform_app_testing">What app testing tools does the platform provide?</h3>
<p>The platform provides a Test Client tool that you can use to try out different APIs. The Test Client is a web-based REST client, and is accessible in the context of either an App or an API.</p>
<p><strong>To test your app with Test Client</strong>: Choose the app, go to the app's <strong>Details</strong> page, and then, on the left menu, choose Test Client. From the drop-down list, choose an API that your app is connected to. If the API supports anonymous testing, you can also test it without specifying an app at all.</p>
<p><strong>To test an API with one or more of your apps</strong>: Choose the API, go to the API Details page, and then, on the left menu, choose Test Client. From the drop-down list, choose one of your apps.</p>
<p>For more information, see <a href="#what_is_the_test_client">What is the Test Client?</a></p>
<p><a href="#top">Back to top</a></p>



<h3 id="tc_test_app_sandbox">How do I test my app in the sandbox?</h3>
<p>When you submit an API access request for an API's sandbox environment, and your request is approved, you can test your app using the sandbox endpoint.</p>
<p>In many cases, though not all, access to the Sandbox endpoint is granted automatically, so you don't have to wait for approval. If you're not sure whether the contract is approved yet, go to the app's <strong>Details</strong> page and, on the left, click APIs. You'll see the status of your contract; most likely, either <strong>Pending</strong> or <strong>Approved</strong>.</p>
<p>Once you have access to the sandbox endpoint, you can test your app with the API. For example, you might want to:</p>
<ul>
	<li>Test the behavior of your app with API calls to verify that the behavior is as expected.</li>
	<li>Test with simulated transactions and data.</li>
	<li>Check that the flow of information to the app is predictable (the expected information in the expected format).</li>
	<li>Check that the app is processing the API results correctly.</li>
	<li>Test error handling and usability.</li>
</ul>
<p>By using a testing environment, you can experiment with different scenarios and make adjustments as needed to make sure that your app works as expected with the API.</p>
<p>You can use the platform's built-in Test Client testing tool. See <a href="#what_is_the_test_client">What is the Test Client?</a> below.</p>
<p>If the API supports monitoring, you can view your transaction traffic via monitoring charts and logs. For more information on performance monitoring, see <a href="app_monitoring.htm#how_do_i_monitor_app_performance">How do I monitor app performance?</a></p>
<p><a href="#top">Back to top</a></p>




<h3 id="platform_api_test_rest_clients">What are some sample REST clients I can use to test an API I want to use?</h3>
<p>Examples of test clients you can use to send REST requests include: <a href="http://code.google.com/p/rest-client/" target="_blank">Google rest-client</a>, <a href="https://addons.mozilla.org/en-US/firefox/addon/restclient/" target="_blank">RESTClient Firefox Add-on</a>, <a href="http://www.soapui.org/" target="_blank">soapUI</a>, and <a href="https://www.getpostman.com/" target="_blank">Postman</a>.</p>
<p>You can also use the platform's built-in Test Client testing tool. See <a href="#what_is_the_test_client">What is the Test Client?</a> below.</p>
<p><a href="#top">Back to top</a></p>




<h3 id="what_is_the_test_client">What is the Test Client?</h3>
<p>The Test Client tool built into the platform is a web-based REST client that allows you to test different APIs in the context of an app. You can use it to try out any API that your app has a contract with, or to try out an API in the context of an app you have visibility of, or even without an app context if the API supports anonymous access.</p>
<p>Test Client is available:</p>
<ul>
	<li>For testing an app: Apps &gt; specific app &gt; Test Client.</li>
	<li>For testing an API: APIs &gt; specific API &gt; Test Client.</li>
</ul>
<p>Test Client supports simple testing of an app against an API. However, it also supports more complex variations that there might be in the rules governing use of a specific API. It supports many more options than its predecessor in earlier versions of the platform, Dev Console. This allows you to much more realistically emulate, and therefore test, the actual conditions of the app/API interaction at runtime. </p>
<p>Of course, if a specific API doesn't support specific functionality, you won't see those options available for selection in Test Client. For example, if the API supports OAuth, but only supports OAuth 2.0 and only two grant types, you'll only see those specific choices available.</p>
<p>Assuming that a specific API  supports these features, Test Client supports the following:</p>
<ul>
	<li>App authentication with shared secret or by uploading a security certificate</li>
	<li>OAuth 1.0a</li>
	<li>OAuth 2.0 with all four standard grant types:
    <ul>
      <li>Authorization Code</li>
      <li>Implicit</li>
      <li>Resource Owner Password Credentials</li>
      <li>Client Credentials</li>
      </ul>
    </li>
	<li>Different authentication methods:
    <ul>
      <li>Secret</li>
      <li>SHA1 with RSA</li>
      <li>SHA 256 with RSA</li>
      <li>HMAC SHA1</li>
      <li>HMAC SHA 256</li>
    </ul>
  </li>
	<li>Different OAuth token locations:
    <ul>
      <li>Header</li>
      <li>Query String</li>
      <li>Form</li>
      <li>Cookie</li>
      </ul>
  </li>
</ul>
<p>Again&#8212;when you're using Test Client, you probably won't see all the above options. You only see the options available to you, and that depends on the API you're testing with. </p>
<p>For specific information about the above options, how they're set up, and how to determine the values, you should choose, refer to the referenced sections.</p>
<p>Most or all APIs on the platform have the <a href="api_admin_policy_list.htm#pl_AtmosphereApplicationSecurityPolicy">API Consumer Application Security Policy</a> assigned. This policy is used to identify (authenticate) the app. Depending on how the policy is set up by the Administrator, you  can authenticate with an ID and Shared Secret value, or you can upload a certificate. If the API supports it, you can also test the API in an anonymous context.</p>
<p>Specific APIs might have other security <a href="basics_glossary.htm#gl_policy">policies</a> assigned. The policies assigned to the API you're using will affect the settings and options you'll see in Test Client. For specifics, refer to the API documentation.</p>
<p>When your application is connected to an API (through the <strong>Access</strong> request process), the application security credentials you've assigned to your app (via <strong>App Details</strong> &gt; <strong>Security Credentials</strong>) work in conjunction with the API security policies. The request message that is sent to the API must conform to the security policies assigned to the API or the request will fail.</p>
<p><strong>Note</strong>: If your app's contract with an API includes one or more licenses, Test Client displays only the operations that the app has permission to access based on the license governing the contract.</p>
<p>You can use Test Client to:</p>
<ol>
	<li>Determine what is needed to send a request to an API.</li>
	<li>Verify that you can successfully send a request to an API.</li>
	<li>Test different API operations.</li>
	<li>Experiment with URL encoding turned on or off.</li>
	<li>Troubleshoot&#8212;If your API calls are failing, you can use Test Client to help identify what's wrong. <br />
   <br />
For example, if your app sends a request message to the API and it is rejected, it might be because the security credentials in your app don't match the valid options configured in the API policy. Let's say  your app is configured with an SHA1 - Shared Secret, but the API Policy is configured to accept only SHA with RSA - PKI. In this case, the credential mismatch would cause the request to fail. You can use Test Client to see what options the API supports and to test with different credentials.</li>
</ol>
<p>Before using Test Client:</p>
<ol>
	<li>Choose an API you would like to test with your app (or, if the API supports it, to test in an anonymous context). </li>
	<li>Add an app to the platform. On the <strong>Plus Menu</strong>, click <strong>Add a New App</strong>. If needed, assign security credentials in the <strong>App Details</strong> &gt; <strong>Security Credentials</strong> section.</li>
	<li>Submit an access request for the API you want to try out. On the API Details page, click the <strong>Access</strong> link. The API Access Request must be approved before you can begin testing the API with the Test Client. In many cases, a contract with the Sandbox implementation might be automatically approved; generally, access to the Live implementation requires manual approval by an API Admin, and might take a little longer. Whether approval is automatic or manual, and how long manual approval takes, depends on the API.</li>
</ol>
<p>The Test Client includes an API drop-down that displays a list of the APIs that your app is currently connected to. When you select an API from the drop-down, the platform analyzes the API configuration and the security policies assigned to the API and populates the fields with the appropriate information. After the Test Client is populated, you configure each test case and then click <strong>Invoke</strong>.</p>
<p>More information:</p>
<ul>
	<li>An illustration of Test Client with the Swagger API loaded, and explanations of the options: see <a href="#tc_options">What are the options in Test Client?</a> below.</li>
	<li>An example walkthrough of how to test your app with Test Client: see <a href="#tc_test_app">How do I test my app in Test Client?</a> below.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h3 id="tc_options">What are the options in Test Client?</h3>
<p>The basic input options in Test Client are shown below (Hermosa theme). For explanations, refer to the table below.</p>
<p><img src="assets/tc_ui_callouts.jpg" alt="Test Client" /></p>

<h5>User Settings</h5>
<table class="doctable">
<thead>
  <tr>
    <th>#</th>
    <th>Field</th>
    <th>Details</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td><strong>1</strong></td>
    <td>API/Implementation</td>
    <td>The drop-down list is populated with one or more APIs and implementations that are available for testing.</td>
  </tr>
  <tr>
    <td><strong>2</strong></td>
    <td>Operation (includes HTTP method)</td>
    <td><p>Once you've specified the API/environment, the Operations drop-down list is populated with one or more operations for you to choose from.</p>
      <p>If your app's contract with the API is governed by a license, you'll only see the operations you have permission to use.</p></td>
  </tr>
  <tr>
    <td><strong>3</strong></td>
    <td>Endpoint / Path</td>
    <td><p>The endpoint is defaulted based on your selections. If more than one endpoint is available, you can choose.</p>
      <p>The path includes all the query and path parameters in parentheses (for example, {})</p></td>
  </tr>
  <tr>
    <td><strong>4</strong></td>
    <td>Headers</td>
    <td><p>In the Headers section, the information displayed varies according to the API definition for the operation you selected. For example, if the operation only accepts a Content-Type of <strong>application/json</strong>, that is the only choice. If multiple media types are available, for Content-Type, Accept, or any other headers defined for the operation, you can choose from a drop-down list.</p>
      <ul>
        <li><strong>Content-Type header</strong>: This lets the API know the format of the information you are sending. </li>
        <li><strong>Accept header</strong>: this tells the API what content type the app will accept in the response.</li>
        <li><strong>Custom headers</strong>: If the operation supports custom headers, you can also add a header; specify header name and value.</li>
      </ul>      </td>
  </tr>
  <tr>
    <td><strong>5</strong></td>
    <td>Parameters</td>
    <td><p>The Parameters section varies according to the type of operation you've selected and the specifics of that operation. Some examples:</p>
      <p>If the operation is a GET and the path includes a {WidgetID} parameter, enter the WidgetID on the Value line.</p>
      <p>If the operation is a POST or PUT, you'll have a field where you can paste the body content.</p></td>
  </tr>
  <tr>
    <td><strong>6</strong></td>
    <td>Parameter type</td>
    <td><p>The type of parameter being sent. Possible values for all scenarios are <strong>Path</strong>, <strong>Query</strong>, or <strong>Form</strong>:</p>
      <ul>
        <li>Path parameters are determined by the path for the operation; you can't add or remove them.</li>
        <li>Query parameters may be described in the path, but you can also add your own.</li>
        <li>Form parameters can only be added when the method is POST/PUT and the Content-Type is application/x-www-form-urlencoded.</li>
      </ul>
      <p>The possible values for your specific test scenario are determined by the API definition and your selections and values in Test Client.</p>
      <p>If you specify a POST or PUT operation, you can specify the POST or PUT content.</p></td>
  </tr>
  <tr>
    <td><strong>7</strong></td>
    <td>URL</td>
    <td> The URL that the test message will be sent to. The URL that's displayed is generated based on the information entered in earlier fields; however, you can change the URL to experiment with the API if you want to.</td>
  </tr>
  <tr>
    <td><strong>8</strong></td>
    <td>Encode URL</td>
    <td>By default, URL-encoding is applied to the URL. If you don't want the URL encoded, clear the check box.</td>
  </tr>
  <tr>
    <td><strong>9</strong></td>
    <td>Setup</td>
    <td>Click to set up your app's credentials. For more information, see <a href="#tc_settings_security">Test Client: Setup (Authentication Settings)</a> below.</td>
  </tr>
  <tr>
    <td><strong>10</strong></td>
    <td>Security</td>
    <td>Click to configure any other security settings that might be needed to run the API. Specifics vary according to the policies associated with the API; for example, whether the API supports <a href="basics_glossary.htm#gl_cors">CORS</a>. For more information, see <a href="#tc_configsettings">Test Client: Security Settings</a> below.</td>
  </tr>
  <tr>
    <td><strong>11</strong></td>
    <td>Invoke</td>
    <td>When you click <strong>Invoke</strong>, the API request is sent.</td>
  </tr>
  <tr>
    <td><strong>12</strong></td>
    <td>Request/Response</td>
    <td>When you click <strong>Invoke</strong>, the request and response are displayed. Use this information to test and debug as needed. There are several response tabs available: Raw, Formatted, Pretty, Headers, and Trace. For more information, see <a href="#tc_viewing_response">What are the different ways I can view the response information in Test Client?</a> below.</td>
  </tr>
</tbody>
</table>
<p><a href="#top">Back to top</a></p>



<h3 id="tc_test_api">How do I test an API in Test Client?</h3>
<p>The Test Client testing tool allows you to test any API you have access to, with the following options:</p>
<ul>
	<li><strong>In the context of the API</strong>: If you don't have an app, or you just want to try out the API on its own, you can test the API with anonymous access (if the API supports it; this depends on the API. If the option for anonymous access doesn't appear it's because the specific API you've chosen doesn't support anonymous access). Choose the API and then, on the left menu bar, choose Test Client. Click <strong>Setup</strong> and specify the app you want to use, or choose the <strong>Anonymous</strong> option if it's available.</li>
	<li><strong>In the context of an app</strong>: If your app has an active contract with the API, you can test the API with your app. Choose the app and then, on the left menu bar, choose Test Client. In the drop-down list, specify the API. Click <strong>Setup</strong> and specify the app you want to use, or choose the <strong>Anonymous</strong> option if it's available.</li>
	<li>If you have multiple apps, you can choose any one of your apps to test against the API. </li>
</ul>
<p><strong>Note</strong>: To use all the features of Test Client, you'll need to enable popups on your browser.</p>
<p><a href="#top">Back to top</a></p>



<h3 id="tc_test_app">How do I test my app in Test Client?</h3>
<p>To test your app in Test Client, follow the steps below.</p>
<h5>To test an app in Test Client:</h5>
<ol>
	<li>Set up an app in the developer platform. For instructions, see <a href="app_create_app_add.htm#add_app">How
    do I create a new app?</a></li>
	<li>Set up a contract between your app and the API you want to test. For instructions, see <a href="app_access_apis_api_access.htm#how_do_i_get_api_access_for_my_app">How do I get API access for my app?</a></li>
	<li>Go to Test Client and choose the API/environment you want to test.</li>
	<li>Choose the operation you want to try out.</li>
	<li>Specify additional values needed for the specific operation, such as headers and parameters. Test Client offers you the choices that are valid for the specific API and operation that you've chosen.</li>
	<li>Check the URL to make sure it looks right.</li>
	<li>Set up additional security values as needed. The requirements will vary depending on the security mechanisms supported by the API and used by your app. If the API uses OAuth you'll need to authenticate and get a token.</li>
	<li>Click <strong>Invoke</strong>.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h3 id="tc_viewing_response">What are the different ways I can view the response information in Test Client?</h3>
<p>When you click <strong>Invoke</strong>, the request and response are displayed. You can use this information to test and debug as needed. You can also click the tabs to see different formats or additional information:</p>
<ul>
	<li><strong>Raw</strong>: Raw JSON, XML, or other content.</li>
	<li><strong>Formatted</strong>: Formatted JSON, XML, or other content.</li>
	<li><strong>Pretty</strong>: Formatted content, with the option to expand or collapse nodes in JSON or XML&#8212;useful for larger response objects.</li>
	<li><strong>Headers</strong>: the response headers for the API call.</li>
	<li><strong>Trace</strong>: This tab shows additional operations Test Client is running in the background to get the token and deliver the response. This is for debugging purposes only. The Trace tab also shows the progression of steps as the API call is processed.</li>
</ul>
<p>The example below shows a successful response displayed in the Raw tab.</p>
<p><img src="assets/tc_response_raw.jpg" alt="Test Client response message, raw" /></p>
<p>The same message in the Formatted tab looks like this:</p>
<p><img src="assets/tc_response_formatted.jpg" alt="Test Client response message, formatted" /></p>
<p><a href="#top">Back to top</a></p>



<h3 id="tc_test_app_with_oauth">How do I test my app with OAuth?</h3>
<p>If your app will be using OAuth, it's a good idea to test in Test Client to make sure everything is working properly.</p>
<p>First, you'll need to make sure that the API supports OAuth 2.0, and supports this specific grant type. Check the API documentation.</p>
<p>OAuth values are set up in the second page of the <strong>Security</strong> wizard. In Test Client, first set up the app/API information and the app credentials, and then you're ready to try out OAuth.</p>
<h5>Pre-conditions</h5>
<ol>
	<li><strong>Connection</strong>: Your app must be connected to the API. See <a href="app_access_apis_api_access.htm#how_do_i_get_api_access_for_my_app">How do I get API access for my app?</a></li>
	<li><strong>OAuth support</strong>: The API must support OAuth. If you're not sure, in Test Client choose the API and operation and then click the <strong>Security</strong> button. Click through the policies pages; if it supports OAuth you'll see the OAuth options (see <a href="#tc_configsettings_oauthpolicy">Test Client security settings: OAuth policy</a>).</li>
	<li><strong>Credentials</strong>: The app security credentials must be a type of credentials that the API supports.</li>
	<li><strong>Conditional for app security with PKI</strong>: OAuth potentially supports shared secret or PKI options. Actual support in the context of an API depends on the API configuration. If the API supports PKI credentials, and you want to use that option, Test Client needs your app's private key. In Test Client, you'll need to click the <strong>Security</strong> button and upload the keystore, which is a file format that supports both private key and certificate. Test Client supports the <a href="basics_glossary.htm#gl_jks">JKS</a> and <a href="basics_glossary.htm#gl_pkcs12">PKCS12</a> keystore formats. If you are uploading a keystore, make sure it matches this format.</li>
	<li><strong>App OAuth Profile</strong>: If you want your app to use OAuth, you'll need to set up information in the App OAuth Profile (see <a href="app_create_app_oauth_profile.htm">App OAuth Profile</a>). For example, you must set up the redirect_uri for your app. The user is redirected back to the redirect_uri after authenticating, and authorizing access, as part of the OAuth process. The redirect_uri must be registered with the OAuth Provider and also set up in the App OAuth Profile.</li>
</ol>

<p>The procedure below takes you to the OAuth options. Then, follow the applicable linked procedure to test with a specific OAuth version, grant type, or other option.</p>
<h5 id="proc_to_test_in_tc_with_oauth">To test in Test Client with OAuth</h5>
<ol>
	<li>Create a contract with the API. You might want to choose a sandbox environment for testing purposes.</li>
	<li>From the app's <strong>Details</strong> page, on the left, click Test Client.</li>
	<li>Choose the API and operation and supply any applicable details such as headers and any values that the operation requires.</li>
	<li>Click <strong>Setup</strong>. The App ID and Shared Secret are displayed. If you want to upload a keystore instead, click <strong>Upload Keystore</strong>, upload the file (must be <a href="basics_glossary.htm#gl_jks">JKS</a> or <a href="basics_glossary.htm#gl_pkcs12">PKCS12</a>), and provide the password. Click <strong>Save</strong>. See <a href="#tc_upload_keystore">Upload Keystore</a> below.</li>
	<li>Click <strong>Security</strong>. Leave or change the token location.</li>
	<li>Click <strong>Next</strong> to access the OAuth security settings page. Here is where you choose specific OAuth options. Refer to the applicable procedure:
    <ul>
      <li><a href="#tc_test_app_with_oauth10">How do I test my app with OAuth 1.0a?</a></li>
      <li><a href="#tc_test_app_with_oauth20_authcode">How do I test my app with OAuth 2.0, Authorization Code grant type?</a></li>
      <li><a href="#tc_test_app_with_oauth20_implicit">How do I test my app with OAuth 2.0, Implicit grant type?</a></li>
      <li><a href="#tc_test_app_with_oauth20_resownercred">How do I test my app with OAuth 2.0, Resource Owner Password Credentials grant type?</a></li>
      <li><a href="#tc_test_app_with_oauth20_clientcred">How do I test my app with OAuth 2.0, Client Credentials grant type?</a></li>
    </ul>
  </li>
  </ol>
<p><a href="#top">Back to top</a></p>



<h3 id="tc_test_app_with_oauth10">How do I test my app with OAuth 1.0a?</h3>
<p>If your app will be using OAuth, it's a good idea to test in Test Client to make sure everything is working properly.</p>
<p>First, you'll need to make sure that the API supports OAuth 1.0a. Check the API documentation.</p>
<h5>To test in Test Client with OAuth 1.0a</h5>
<ol>
	<li>Follow the steps in <a href="#proc_to_test_in_tc_with_oauth">To test in Test Client with OAuth</a> above, to set up the contract, get started in Test Client, and get to the <strong>Security</strong> wizard, second page, OAuth Details settings.</li>
	<li>For <strong>OAuth Version</strong>, choose OAuth 1.0a.</li>
	<li>In the <strong>Authentication Method</strong> field, choose the method you want, from available options (if more than one is available).</li>
	<li>Click <strong>Get Token</strong>. The authorization page for the identity provider the API is using pops up.</li>
	<li>Enter your credentials and click <strong>Log In</strong>.</li>
	<li>At the Authorize page, enter the name of the scope that you want to give the API access to, and then click <strong>Authorize</strong>. You are returned to the <strong>Security</strong> page, and the authorization token is generated and displayed. Click <strong>Next</strong> and then click <strong>Finish</strong>.</li>
	<li>Click <strong>Invoke</strong>. The API response information is displayed. For more information, see <a href="#tc_viewing_response">What are the different ways I can view the response information in Test Client?</a>
    </li>
</ol>
<p><a href="#top">Back to top</a></p>



<h3 id="tc_test_app_with_oauth20_authcode">How do I test my app with OAuth 2.0, Authorization Code grant type?</h3>
<p>If your app will be using OAuth, it's a good idea to test in Test Client to make sure everything is working properly.</p>
<p>First, you'll need to make sure that the API supports OAuth 2.0, and supports this specific grant type. Check the API documentation.</p>
<p>With the <a href="basics_glossary.htm#gl_oauth_authorizationcode">Authorization Code</a> grant type, an authorization code is returned to the client through a browser redirect after the resource owner gives consent to the OAuth Authorization Server. The client then exchanges the authorization code for an access token.</p>
<h5>To test in Test Client with OAuth 2.0, Authorization Code grant type</h5>
<ol>
	<li>Follow the steps in <a href="#proc_to_test_in_tc_with_oauth">To test in Test Client with OAuth</a> above, to set up the contract, get started in Test Client, and get to the <strong>Security</strong> wizard, second page, OAuth Details settings.</li>
	<li>For <strong>OAuth Version</strong>, choose 2.0. The <strong>Grant Type</strong> field appears.</li>
	<li>Choose <strong>Authorization Code</strong>.</li>
	<li>In the <strong>Authentication Method</strong> field, choose the method you want, from available values (if more than one is available).</li>
	<li>Click <strong>Get Token</strong>. The authorization page for the identity provider the API is using pops up.</li>
	<li>Enter your credentials and click <strong>Log In</strong>.</li>
	<li>At the Authorize page, enter the name of the scope that you want to give the API access to, and click <strong>Authorize</strong>. You are returned to the <strong>Security</strong> page, and the token is generated and displayed. Click <strong>Next</strong> and then click <strong>Finish</strong>.</li>
	<li>Click <strong>Invoke</strong>. The API response information is displayed. For more information, see <a href="#tc_viewing_response">What are the different ways I can view the response information in Test Client?</a>
  </li>
  </ol>
<p><a href="#top">Back to top</a></p>



<h3 id="tc_test_app_with_oauth20_implicit">How do I test my app with OAuth 2.0, Implicit grant type?</h3>
<p>If your app will be using OAuth, it's a good idea to test in Test Client to make sure everything is working properly.</p>
<p>First, you'll need to make sure that the API supports OAuth 2.0, and supports this specific grant type. Check the API documentation.</p>
<p>With the <a href="basics_glossary.htm#gl_oauth_grant_implicit">Implicit grant type</a>, an access token is returned to the client through a browser redirect in response to the resource owner authorization request. This grant type is suitable for clients that do not support keeping client credentials confidential (for use in authenticating with the OAuth Authentication Server) such as client applications implemented in a browser using a scripting language like JavaScript.</p>
<h5>To test in Test Client with OAuth 2.0, Implicit grant type</h5>
<ol>
	<li>Follow the steps in <a href="#proc_to_test_in_tc_with_oauth">To test in Test Client with OAuth</a> above, to set up the contract, get started in Test Client, and get to the <strong>Security</strong> wizard, second page, OAuth Details settings.</li>
	<li>For <strong>OAuth Version</strong>, choose 2.0. The <strong>Grant Type</strong> field appears.</li>
	<li>Choose <strong>Implicit</strong>.</li>
	<li>Click <strong>Get Token</strong>. The authorization page for the identity provider the API is using pops up.</li>
	<li>Enter your credentials and click <strong>Log In</strong>.</li>
	<li>At the Authorize page, enter the name of the scope that you want to give the API access to, and click <strong>Authorize</strong>. You are returned to the <strong>Security</strong> page, and the token is generated and displayed. Click <strong>Next</strong> and then click <strong>Finish</strong>.</li>
	<li>Click <strong>Invoke</strong>. The API response information is displayed. For more information, see <a href="#tc_viewing_response">What are the different ways I can view the response information in Test Client?</a>
    </li>
</ol>
<p><a href="#top">Back to top</a></p>



<h3 id="tc_test_app_with_oauth20_resownercred">How do I test my app with OAuth 2.0, Resource Owner Password Credentials grant type?</h3>
<p>If your app will be using OAuth, it's a good idea to test in Test Client to make sure everything is working properly.</p>
<p>First, you'll need to make sure that the API supports OAuth 2.0, and supports this specific grant type. Check the API documentation.</p>
<p>With the <a href="basics_glossary.htm#gl_oauth_grant_passwordcredentials">Resource Owner Password Credentials</a> grant type, the client collects the resource owner's password and exchanges it at the OAuth Authorization Server for an access token, and often also a refresh token. This grant type is suitable in cases where the resource owner has a trust relationship with the client, such as its computer operation system or a highly privileged application, since the client must discard the password after using it to obtain the access token.</p>
<h5>To test in Test Client with OAuth 2.0, Resource Owner Password Credentials grant type</h5>
<ol>
	<li>Follow the steps in <a href="#proc_to_test_in_tc_with_oauth">To test in Test Client with OAuth</a> above, to set up the contract, get started in Test Client, and get to the <strong>Security</strong> wizard, second page, OAuth Details settings.</li>
	<li>For <strong>OAuth Version</strong>, choose 2.0. The <strong>Grant Type</strong> field appears.</li>
	<li>Choose <strong>Resource Owner Password Credentials</strong>.</li>
	<li>In the <strong>Authentication Method</strong> field, choose the method you want, from available values (if more than one is available).</li>
	<li>Enter the resource owner username and password.</li>
	<li>Click <strong>Get Token</strong>. The token is generated.</li>
	<li>Click <strong>Next</strong> and then click <strong>Finish</strong>.</li>
	<li>Click <strong>Invoke</strong>. The API response information is displayed. For more information, see <a href="#tc_viewing_response">What are the different ways I can view the response information in Test Client?</a>
  </li>
  </ol>
<p><a href="#top">Back to top</a></p>



<h3 id="tc_test_app_with_oauth20_clientcred">How do I test my app with OAuth 2.0, Client Credentials grant type?</h3>
<p>If your app will be using OAuth, it's a good idea to test in Test Client to make sure everything is working properly.</p>
<p>First, you'll need to make sure that the API supports OAuth 2.0, and supports this specific grant type. Check the API documentation.</p>
<p>With the <a href="basics_glossary.htm#gl_oauth_grant_clientcredentials">Client Credentials</a> grant type, the client presents its own credentials to the OAuth Authorization Server in order to obtain an access token. This access token is either associated with the client's own resources, rather than a specific resource owner, or is associated with a resource owner for whom the client is otherwise authorized to act.</p>
<h5>To test in Test Client with OAuth 2.0, Client Credentials grant type</h5>
<ol>
	<li>Follow the steps in <a href="#proc_to_test_in_tc_with_oauth">To test in Test Client with OAuth</a> above, to set up the contract, get started in Test Client, and get to the <strong>Security</strong> wizard, second page, <strong>OAuth Details</strong> settings.</li>
	<li>For <strong>OAuth Version</strong>, choose 2.0. The <strong>Grant Type</strong> field appears.</li>
	<li>Choose <strong>Client Credentials</strong>.</li>
	<li>In the <strong>Authentication Method</strong> field, choose the method you want, from available values (if more than one is available).</li>
	<li>Click <strong>Get Token</strong>. The token is generated, using the app credentials set up via the <strong>Setup</strong> button. </li>
	<li>Click <strong>Next</strong> and then click <strong>Finish</strong>.</li>
	<li>Click <strong>Invoke</strong>. The API response information is displayed. For more information, see <a href="#tc_viewing_response">What are the different ways I can view the response information in Test Client?</a>
  </li>
  </ol>
<p><a href="#top">Back to top</a></p>



<h3 id="tc_set_to_no_cache">How can I make sure I always see the latest results in Test Client?</h3>
<p>If the API you're using sets the <strong>cache-control</strong> response header, the response message is cached. When you send multiple requests, the first response is cached for the time specified as the value in the API's cache-control response header, and you may see the same response for all subsequent requests until the cache expires. This could mean that when you send a subsequent request, the response you see is from the cache, not from the server. If this happens, there will only be one transaction log entry, even if you click the <strong>Invoke</strong> button multiple times, until the cache expires or is cleared.</p>
<p>To make sure you are always seeing the latest information, clear your browser cache before sending subsequent requests.</p>
<p><strong>Tip</strong>: If the API you're testing doesn't have issues with additional query parameters (ignores them rather than returning an error), you can add a query parameter with any name/value. This forces the browser to retrieve a new response rather than using the cached response. This is a better solution than clearing the browser cache in scenarios where there is any caching done in a forward HTTP proxy (or in a CDN), since clearing the browser cache does not clear the cache from these intermediaries.</p>
<p>If you're not sure whether the API caches or not, send two requests and then check the logs for your app (if logs are available for messages to the API you're working with). If both transactions show up, caching is not an issue. If you see only one transaction, it means that the second was served from cache.</p>
<p><a href="#top">Back to top</a></p>



<h3 id="tc_test_app_auth_with_oauth">How do I use Test Client to test authorization of my app with an API that supports OAuth?</h3>
<p>The following procedure provides a simple example of how to use the Test Client to test authorizing your app with OAuth and then sending a request.</p>
<h5>To test authorization of an app with an API that supports OAuth, using Test Client</h5>
<ol>
	<li>Go to the app's <strong>Details</strong> page.</li>
	<li>On the left menu, choose <strong>Test Client</strong>.</li>
	<li>Select the API. Based on the API details, the following occurs:
    <ul>
      <li>The details of the API (Endpoint, Operation, Method, Accept header, Content-Type header, Path, and URL) are displayed.</li>
      <li>The <strong>Setup</strong> button is enabled so that you can set up the credentials for your app.</li>
    </ul>
  </li>
	<li>Choose an operation you want to invoke, and specify additional values such as headers and parameters. For more information on these fields, see <a href="#tc_options">What are the options in Test Client?</a></li>
	<li>Set up the additional settings needed to identify your app. Depending on the specific scenario, you might need to set up one or more of the following:
    <ul>
    <li><strong>App credentials</strong>: click <strong>Setup</strong> and enter the App ID and Shared Secret, or upload a keystore file that includes your app's private key and certificate (<a href="basics_glossary.htm#gl_jks">JKS</a> or <a href="basics_glossary.htm#gl_pkcs12">PKCS12</a> keystore). If you upload a keystore file you'll also need to provide the password for the file.</li>
    <li><strong>For AtmosphereApplicationSecurityPolicy</strong>: Click <strong>Security</strong> and specify Authentication method, Token Algorithm and Token Location. This sets values for generating the security token to be sent to the API endpoint, and determines how it is sent. For details, see <a href="#tc_configsettings_atmoappsecuritypolicy">Test Client security settings: AtmosphereApplicationSecurityPolicy</a> below.</li>
    <li><strong>For JOSE Policy v2 (Unencoded Payload Support)</strong>: Click <strong>Security</strong> and click through the Security wizard to the <strong>Security Policy: JOSE Security v2 page</strong>. Add one or more private headers, if needed, and then click <strong>Next</strong>. For details, see <a href="#tc_configsettings_josepolicy">Test Client security settings: Jose Security Policy v2</a> below.</li>
    <li><strong>For OAuth Security Policy</strong>: Click <strong>Security</strong> and click through the Security wizard to specify the OAuth Version, Grant Type, and Authentication Method. Then click <strong>Get Token</strong> to generate the token. For details, see <a href="#tc_configsettings_oauthpolicy">Test Client security settings: OAuth policy</a> below.</li>
  </ul></li>
	<li>To send a test request to the API, click <strong>Invoke</strong>. The results are shown in the Test Client window, and the transaction is recorded in the transaction log for the app and for the API (viewable via <strong>App</strong> &gt; <strong>Analytics</strong>).</li>
</ol>


<h4 id="tc_settings_security">Test Client: Setup (Authentication Settings)</h4>
<p><strong>How to get there</strong>: In Test Client, specify the API and operation you want to test, and any other applicable values (exact choices depend on the specific API). Click the <strong>Setup</strong> button as shown below.</p>
<p><img src="assets/tc_setup_ss_displayed.jpg" alt="Test Client: Setup dialog" /></p>
<p>The table below shows the configuration values in the Test Client <strong>Setup </strong> window.</p>
<table class="doctable">
  <thead>
    <tr>
      <th>Field...</th>
      <th>Values...</th>
    </tr>
    <tr>
      <td>Apps</td>
      <td>When testing in the context of an app, choose the app.</td>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>App ID</td>
      <td>The unique ID that identifies your app to the API, that will be used for the request. If it is blank, you will need to go to the API provider directly and read their instructions for getting an App ID.</td>
    </tr>
    <tr>
      <td>Shared Secret</td>
      <td><p>The unique shared secret value that validates your app with the API, that will be used for the request.</p>
        <p>If the shared secret is displayed, you can just save. If the shared secret is not displayed, you'll need to get the shared secret value, and will probably need to decrypt it also. See <a href="#tc_ss_not_displayed">The app's shared secret is not displayed, or is encrypted. How do I use Test Client?</a></p>
        <p><strong>Note</strong>: Display of the shared secret is governed by the platform's settings for apps. For more information, see <a href="app_create_app_security.htm#ss_view">How do I view a shared secret?</a></p></td>
    </tr>
    <tr>
      <td id="tc_upload_keystore">Upload Keystore</td>
      <td><p>If you want to use public and private keys rather than App ID and Shared Secret, check this box to upload a keystore file. You'll see these additional fields, shown below:</p>
				<ul>
					<li><strong>File to Upload</strong>: Browse to the location of the keystore file that contains the private key and certificate of the App (must be <a href="basics_glossary.htm#gl_jks">JKS</a> or <a href="basics_glossary.htm#gl_pkcs12">PKCS12</a>). (JKS support in version: 2018.0.3 and later)</li>
					<li><strong>Password</strong>: The password for the keystore file, assigned when the keystore file was created.</li>
				</ul>
				<p><img src="assets/tc_setup_upload_keystore.jpg" alt="Test Client: Setup dialog, Upload Keystore options" /></p>
			<p><strong>Note</strong>: If the API uses the HTTP Security policy, you must upload a keystore to use the API.</p></td>
    </tr>
  </tbody>
</table>


<h4 id="tc_configsettings">Test Client: Security Settings</h4>
<p><strong>How to get there</strong>: In Test Client, specify the API and operation you want to test, and any other applicable values (exact choices depend on the specific API). Specify the app credentials, and then click the <strong>Security</strong> button.</p>
<p>The options you'll see depend on the settings for the specific API you've chosen, and for your app's contract with the API. Possible options are explained in the tables below.</p>
<p>A policy defines a set of rules that will be applied to your app's contract with the API. Different policies that might be part of the API definition require different information for testing your app in Test Client. Refer to the tables below. Possible options include:</p>
<ul>
	<li><a href="#tc_configsettings_atmoappsecuritypolicy">Test Client security settings: AtmosphereApplicationSecurityPolicy</a></li>
	<li><a href="#tc_configsettings_josepolicy">Test Client security settings: Jose Security Policy v2</a></li>
	<li><a href="#tc_configsettings_oauthpolicy">Test Client security settings: OAuth policy</a></li>
	<li><a href="#tc_configsettings_oauthpolicy_add_parms">Test Client security settings: OAuth policy: Additional Parameters</a> (2018.0.5 and later)</li>
	<li><a href="#tc_configsettings_sameoriginpolicy">Test Client security settings: SameOriginPolicy</a></li>
	<li><a href="#tc_configsettings_httpsecuritypolicy">Test Client security settings: HTTP Security Policy</a></li>
</ul>

<h5 id="tc_configsettings_atmoappsecuritypolicy">Test Client security settings: AtmosphereApplicationSecurityPolicy</h5>
<p>The possible security settings for the AtmosphereApplicationSecurityPolicy are shown below. Specific values vary according to the specific scenario.</p>
<p><img src="assets/tc_security_1_aasp.jpg" alt="Test Client security settings, page 1" /></p>
<p>The table below shows the configuration values in the first page of the <strong>Security</strong> wizard if the <strong>AtmosphereApplicationSecurityPolicy</strong> policy is applied to the API.</p>
<table class="doctable">
  <thead>
    <tr>
      <th>Field...</th>
      <th>Values...</th>
    </tr>
    <tr>
      <td>Token Location</td>
      <td>Indicates how the token is added to the message: <strong>Header</strong>, <strong>QueryString</strong>, <strong>Form</strong>, or <strong>Cookie</strong>. The Form parameter is only applicable for POST or PUT operations.</td>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Token Algorithm</td>
      <td><p>The algorithm to be used for generating the security token to be sent to the API endpoint. Options:</p>
        <ul>
          <li>SHA1</li>
          <li>SHA1withRSA</li>
          <li>SHA256withRSA</li>
          <li>HmacSHA1</li>
          <li>HMACSHA256</li>
        </ul>        </td>
    </tr>
  </tbody>
</table>

<h5 id="tc_configsettings_josepolicy">Test Client security settings: Jose Security Policy v2</h5>
<p><img src="assets/tc_security_2_jose.jpg" alt="Test Client security settings for Jose Security Policy v2" /></p>
<p>The table below shows the configuration values in the <strong>Security</strong> window if the <strong>JOSE Security v2 policy</strong> is applied to the API.</p>
<table class="doctable">
  <thead>
    <tr>
      <th>Field...</th>
      <th>Values...</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Private Headers</td>
      <td><p>A private header is any header other than the registered headers defined by the specification; see <a href="https://tools.ietf.org/html/rfc7515#section-4.3">Private Header Parameter Names</a> section of RFC 7515.</p>
        <p>You can specify one or more private headers; check the box and specify the header name and value. You can also add or delete existing private headers as needed.</p></td>
    </tr>
  </tbody>
</table>

<h5 id="tc_configsettings_oauthpolicy">Test Client security settings: OAuth policy</h5>
<p><img src="assets/tc_security_2_oauth.jpg" alt="Test Client security settings for OAuth policy" /></p>
<p>The table below shows the configuration values in the <strong>Security</strong> window if the <strong>OAuth policy</strong> is applied to the API.</p>
<table class="doctable">
  <thead>
    <tr>
      <th>Field...</th>
      <th>Values...</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>OAuth Version</td>
      <td>Choose from OAuth versions supported by the API.</td>
    </tr>
    <tr>
      <td>Grant Type</td>
      <td>OAuth 2.0 defines four grant types (security scenarios, or use cases). Choose from the list of grant types supported by the API. For more information, refer to the spec: http://oauth.net/2/.</td>
    </tr>
    <tr>
      <td>Authentication Method</td>
      <td>Choose from authentication methods supported by the API.</td>
    </tr>
    <tr>
      <td>Get Token button</td>
      <td>Click to get an access token from the API's identity provider, so your app can access the API. Test Client will add the access token to each request. You might need to log in to the identity provider.</td>
    </tr>
    <tr>
      <td>Renew Token button</td>
      <td>If the token has expired, click to get a renew token from the API's identity provider, so your app can access the API. You might need to log in to the identity provider.</td>
    </tr>
  </tbody>
</table>

<h5 id="tc_configsettings_oauthpolicy_add_parms">Test Client security settings: OAuth policy: Additional Parameters</h5>
<p><strong>Valid in version: 2018.0.5 and later</strong></p>
<p> If additional parameters are needed, provide the parameter names and values and then click <strong>Get Token</strong>.</p>
<p><strong>Note</strong>: In most cases, additional parameters are not needed.</p>
<p>In the example below: on the left, Microsoft Azure, showing an additional parameter required, of name resource, and a value, beginning with 00000002. On the right, the fields in Test Client for adding the parameter name and value.</p>
<p><img src="assets/tc_security_2_oauth_client_add_parms_azure.jpg" alt="Test Client security settings for OAuth policy with Client Secret JWT selected" />&nbsp; <img src="assets/tc_security_2_oauth_client_add_parms.jpg" alt="Test Client security settings for OAuth policy with Client Secret JWT selected" /></p>
<p>The table below shows the configuration values in the first page of the <strong>Security</strong> wizard if additional parameters are needed to get the token.</p>
<table class="doctable">
	<thead>
		<tr>
			<th>Field...</th>
			<th>Values...</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>Additional Parameter (required to get the token)</td>
			<td><p>Name and value of any additional parameters that might be required by the OAuth Provider, to get the token. For example, with Microsoft Azure OAuth Provider, using the Implicit grant type, you might need to add the <strong>resource</strong> parameter, with the applicable value, as shown above (on the right). If your OAuth Provider requires additional parameters, you can get the parameter name and value from the configuration values in your OAuth Provider account, as shown above (on the left).</p></td>
		</tr>
		<tr>
			<td>Add Additional Parameter</td>
			<td>Click the button to add another parameter and its value. You can also modify existing parameters, or click <strong>Delete</strong> to delete a parameter/value.</td>
		</tr>
	</tbody>
</table>

<h5 id="tc_configsettings_sameoriginpolicy">Test Client security settings: SameOriginPolicy</h5>
<p><img src="assets/tc_security_3_cors.jpg" alt="Test Client security settings for SameOriginPolicy" /></p>
<p>The table below shows the configuration values in the <strong>Security</strong> window if the <strong>SameOriginPolicy</strong> policy is applied to the API.</p>
<table class="doctable">
  <thead>
    <tr>
      <th>Field...</th>
      <th>Values...</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>API Supports CORS (Cross-Origin Resource Sharing)</td>
      <td>If the endpoint URL is on a host that is not the user interface host, same-origin policy will prevent the browser from accepting the response unless the API can send the <a href="basics_glossary.htm#gl_cors">CORS</a> headers. Check this box if the API supports CORS. If it doesn't, clear the box and the request will be proxied.</td>
    </tr>
    <tr>
      <td>Authorization Endpoint Extension Parameters</td>
      <td>If your OAuth provider requires any additional parameters to be sent to the authorization endpoint, beyond the OAuth specification, enter the parameter names here. Test Client shows these parameters to collect the values from developers.</td>
    </tr>
  </tbody>
</table>

<h5 id="tc_configsettings_httpsecuritypolicy">Test Client settings: HTTP Security Policy</h5>
<p>If the API has the HTTP Security Policy attached, the Test Client user must upload a certificate, in the Authentication Settings, in order to test the API. For details and instructions, see <a href="#tc_settings_security">Authentication Settings</a>.</p>
<p><a href="#top">Back to top</a></p>



<h3 id="tc_with_cors">Can I use Test Client to test APIs that have CORS restrictions?</h3>
<p>Yes. Test Client supports testing with APIs that have CORS restrictions, so you can try out the APIs you're interested in before using them in your app.</p>
<p>Many APIs on the developer portal will accept only requests from certain trusted domains. These APIs do not support <a href="basics_glossary.htm#gl_cors">CORS</a> (cross-origin resource sharing). Cross-origin requests are sometimes used to introduce malicious content.</p>
<p>In the context of the API platform, the platform itself is acting as an intermediary (forward proxy) between the client (the app, sending a message to the API) and the API. Calls from clients to the API are sent to the platform and, from there, redirected to the API live endpoint. However, in most cases, the underlying infrastructure, which processes the requests to the API, is on a different domain from the developer portal.</p>
<p>In order to support testing with these APIs, Test Client uses a proxy server approach, routing the request via a proxy server hosted on the developer portal to the underlying infrastructure and then to the API itself.</p>
<p>With this approach, testing an API that has CORS restrictions is supported in Test Client.</p>
  <p>In <strong>Test Client</strong> &gt; <strong>Security</strong>:</p>
  <ul>
    <li>If the API supports CORS: You can check the <strong>API Supports CORS (Cross-Origin Resource Sharing)</strong> check box. The request is routed directly to the underlying infrastructure, without going through the proxy server. Note: if you don't check the box, your request will still work, but is sent via the proxy server.</li>
    <li>If the API doesn't support CORS: leave the check box cleared. The request is routed via the developer portal's proxy server.</li>
    <li>If you're not sure: leave the check box cleared.</li>
  </ul>
  <p><a href="#top">Back to top</a></p>



<h3 id="tc_two_log_entries_one_call">Why do I sometimes see two log entries for one Test Client call?</h3>
<p>If the API you're using supports basic or detailed logging of transactions, the calls you make to an API in Test Client are recorded on the metric logs for your app.</p>
<p>In general, there is one log entry per transaction. However, if the API call you're making in Test Client returns more complex media types that cannot be accurately displayed in the Raw and Formatted tabs, yet the browser can determine the media type, the browser makes a second call in order to be able to display the response, within an &lt;img&gt; tag, in the Pretty tab.</p>
<p>For example, let's say the API response is an image, but the media types for the operation are not specified. Test Client makes the first call, and an image is returned. Test Client makes a second call and, as a result, can display the image in the Pretty tab.</p>
<p><a href="#top">Back to top</a></p>



<h3 id="tc_response_headers">Why do I see extra response headers in the Headers tab?</h3>
<p>The API you're testing might have special functionality associated with it to allow API requests from other domains; this is called <a href="basics_glossary.htm#gl_cors">CORS</a> (Cross-Origin Resource Sharing). If the API supports CORS, you might see some additional headers in the response, along the lines of the examples below:</p>
<pre>
Access-Control-Allow-Origin: *
Access-Control-Allow-Methods: GET, POST, DELETE, PUT
Access-Control-Allow-Headers: Content-Type, api_key, Authorization</pre>
<p>The above headers do the following:</p>
<ul>
	<li><strong>Access-Control-Allow-Origin</strong>: Controls which domains are authorized to send requests. * means all domains.</li>
	<li><strong>Access-Control-Allow-Methods</strong>: Controls which HTTP verbs are allowable for API calls.</li>
	<li><strong>Access-Control-Allow-Headers</strong>: Controls which request headers are allowable for API calls.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h3 id="tc_colors">What is the color coding for the Test Client results?</h3>
<p>When you run operations in Test Client, the HTTP code for the response message is color coded as shown below.</p>
<table class="doctable">
  <thead>
    <tr>
      <th>Image</th>
      <th>Color</th>
      <th>Usage</th>
      </tr>
  </thead>
  <tbody>
    <tr>
      <td><img src="assets/tc_http_200.jpg" alt="Test Client HTTP 200" /></td>
      <td>Green</td>
      <td>HTTP 200 (Success)</td>
      </tr>
    <tr>
      <td><img src="assets/tc_http_400.jpg" alt="Test Client HTTP 400" /></td>
      <td id="settings_api_publish_existing">Red</td>
      <td>HTTP 400 (Bad Request)</td>
      </tr>
    <tr>
      <td><img src="assets/tc_http_default.jpg" alt="Test Client default" /></td>
      <td>Gray</td>
      <td>Default (any response code that isn't specifically defined as part of the API definition)</td>
      </tr>
  </tbody>
</table>
<p><a href="#top">Back to top</a></p>



<h3 id="tc_ss_not_displayed">The app's shared secret is not displayed, or is encrypted. How do I use Test Client?</h3>
<p>Display of the app's shared secret is affected by one of the security settings for the developer portal, controlled by the Site Admin. Shared Secret display can be <strong>Plain Text</strong> or <strong>Encrypted</strong>. In some cases, it might not be displayed at all. For more information about this setting, see <a href="site_admin_settings.htm#settings_config_apps_01">General App Settings</a> (Site Admin help).</p>
<p>If the API requires the app to authenticate, you'll need to have the app's shared secret in order to use the API in Test Client. If the shared secret is displayed, there's nothing extra you'll need to do. However, if the developer portal's security settings are set to encrypt the shared secret, the value is not populated in the <strong>Setup</strong> dialog (see <a href="#tc_settings_security">Test Client: Setup (Authentication Settings)</a> above). In this case, you&rsquo;ll need to get the encrypted shared secret value, decrypt it, and paste the decrypted value into Test Client. Depending on your role, you'll need to do one of the following:</p>
<ul>
	<li>If you&rsquo;re an API Admin: Contact the App Admin for the shared secret value.</li>
	<li>If you&rsquo;re an App Admin, you'll need to get the shared secret from the <strong>App Details</strong> page and decrypt it. For instructions, see <a href="app_create_app_security.htm#ss_view">How do I view a shared secret?</a></li>
	<li>If you don't have a shared secret on the platform: Contact the App Admin and request a Shared Secret value for the app.</li>
</ul>

<p>When you have the decrypted shared secret, paste it into the <strong>Shared Secret</strong> field and save the app values in Test Client. You can then continue with testing the app/API.</p>
<p><a href="#top">Back to top</a></p>



<h3 id="tc_app_troubleshooting">Troubleshooting in Test Client</h3>
<p>This section provides information on some of the error messages you might see in Test Client if your test API call fails, and some possible reasons.</p>
<table class="doctable">
  <thead>
    <tr>
      <th>Error message or scenario</th>
      <th>Possible reason</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>400 Bad Request</td>
      <td><p>You didn't set up the credentials for your app. Click the <strong>Setup</strong> button to verify your credentials. Then click the <strong>Security</strong> button, set or verify values, and click <strong>Invoke</strong>.</p>
        <p>You will also see this error if you didn't specify an app, or specified Anonymous, when the API doesn't support anonymous access.</p></td>
    </tr>
    <tr>
      <td>Unauthorized</td>
      <td>You didn't provide the correct AppID/Shared Secret or other credentials required by the API.</td>
    </tr>
    <tr>
      <td>Binding failure</td>
      <td>The media type specified  for the Accept header isn't supported by the operation. For example, the operation returns application/json only, but the Accept header field specifies a media type of application/xml.</td>
    </tr>
    <tr>
      <td>Missing domain. The service may not have been assigned a provider.</td>
      <td>A step in the API's OAuth setup is incomplete. For help, contact the Administrator for the API.</td>
    </tr>
    <tr>
      <td>TokenKey does not have Policy Type (OAuth 1.0a or OAuth 2.0)</td>
      <td>The API definition includes the <strong>OAuthSecurity</strong> policy, but you didn't click the <strong>Security</strong> button, choose OAuth settings, and generate the token.</td>
    </tr>
    <tr>
      <td><p>Response something like the following:</p>
        <pre>{"faultcode":"Server", "faultstring":"Error encountered executing 
{Swagger_Petstore_Subset_v1}svc_7394e7b0-43db-4845-aa77-2029b6363
f60.acmepaymentscorp.live.target.getPetById. Cause: Recipient 
not found [{Swagger_Petstore_Subset_v1}svc_7394e7b0-43db-4845-
aa77-2029b6363f60.acmepaymentscorp.live.target]"}</pre></td>
      <td>The API definition doesn't include the correct setting for the target endpoint (the actual API endpoint), therefore the API call isn't successful. The API Admin or Business Admin must fix this issue. For details, see <a href="apiadmin_implementations.htm#api_impl_add_modify_target_endpoint">How do I add or modify a target endpoint for an implementation?</a> (API Admin help).</td>
    </tr>
  </tbody>
</table>
<p><a href="#top">Back to top</a></p>