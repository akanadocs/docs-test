---
layout: page
title: API Description Language Support | API Admin | Akana API Platform Help
description: Information about the platform's support of API description languages for API documentation.
product: cm
category: learn
sub-nav-class: API Admin
weight: 2616
type: page
nav-title: API Description Language Support
---
<h2 id="top">API Description Language Support</h2>
<p>Information about the platform's support of API description languages for API documentation.</p>
<div class = "divider1"></div>



<h3 style="color: gray;">Table of Contents</h3>

<h5 style="color: gray;"><a href="#h_a_d_d_swagger">Swagger support:</a></h5>
<ol class="table_of_contents">
	<li><a href="#supported_versions_swagger">What Swagger versions does the platform support?</a></li>
	<li><a href="#features_swagger">What Swagger support does the platform offer?</a></li>
	<li><a href="#swagger_extensions">Does the platform use any Swagger extensions?</a></li>
	<li><a href="#support_of_external_json_schemas">Does the platform support referencing of JSON schemas that are external to the API document definition?</a></li>
	<li><a href="#overloaded_operations_support_apidoc">Does the platform support overloaded operations in API documentation?</a></li>
	<li><a href="#swagger_responses_root">How does the platform support Swagger responses defined at the root level?</a></li>
	<li><a href="#swagger_support_limitations">Are there any capabilities of the Swagger 2.0 specification that the platform doesn't support?</a></li>
	<li><a href="#swagger_support_limitations_oas30">Are there any capabilities of the OAS 3.0 specification that the platform doesn't support?</a></li>
</ol>



<h5 style="color: gray;"><a href="#h_a_d_d_raml">RAML support:</a></h5>



<ol class="table_of_contents">
	<li><a href="#supported_versions_raml">What RAML versions does the platform support?</a></li>
	<li><a href="#supported_features_raml">What features of the RAML specification does the platform support?</a></li>
	<li><a href="#support_of_sample_values_for_raml">Does the platform support including sample values for generated RAML documentation?</a></li>
	<li><a href="#supported_features_raml_200">Does the platform support the capabilities of the RAML 200 Tutorial?</a></li>
</ol>



<h5 style="color: gray;"><a href="#h_general_other">General/other:</a></h5>



<ol class="table_of_contents">
	<li><a href="#supported_languages_view">How can I view the API description document for an API?</a></li>
	<li><a href="#supported_languages_soap">Does the platform support SOAP?</a></li>
</ol>




<div class = "divider1"></div>
<h3 id="h_a_d_d_swagger">Swagger Support:</h3>




<h3 id="supported_versions_swagger">What Swagger versions does the platform support?</h3>
<p>The Akana Platform supports:</p>
<ul>
	<li><strong>OAS 3.0</strong>: <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md" title="Link to OAS 3.0 specification on GitHub" target="_blank">https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md</a> (version 2019.0.0 and later)
	<p>For details about working with OAS3.0, see <a href="apiadmin_a_d_d_oas30.htm">Open API Specification 3.0 Support</a>.</p></li>
	<li><strong>Swagger 2.0</strong>: <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md" title="Link to Swagger 2.0 specification on GitHub" target="_blank">https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md</a>
	<p><strong>Note (2019.0.0 and later)</strong>: In the developer portal, if you upload or create a Swagger 2.0 API definition, it is converted to OAS 3.0 for use in the API Designer and Test Client.</p></li>
	<li><strong>Swagger 1.2</strong>
<p>The API Platform does not support upload of a Swagger 1.2 API description. The underlying infrastructure supports creating an API by importing an API description document in any Swagger version. If you have access to the Policy Manager console, you can use it to load the Swagger 1.2 as a new service; then, you can use  the Akana Platform user interface to add a new API and select the <strong>Publish an existing service as an API</strong> option.</p>
	<p><strong>Note</strong>: In the developer portal, if you create a Swagger 1.2 document, the API description is converted to Swagger 2.0 for use in the API Designer and Test Client.</p>
	</li>
	<li><strong>Swagger-YAML</strong></li>
</ul>
<p><a href="#top">Back to top</a></p>



<h3 id="features_swagger">What Swagger support does the platform offer?</h3>
<p>The platform allows defining an API by uploading a Swagger description document. It also supports updating an existing API by uploading a Swagger description document.</p>
<p>Aspects of the API definition, such as parameters, request and response model objects, responses including HTTP codes and messages, and descriptive content are all supported.</p>
<p>The API documentation is generated dynamically for users.</p>
<p><a href="#top">Back to top</a></p>



<h3 id="swagger_extensions">Does the platform use any Swagger extensions?</h3>
<p>Yes, the Akana API platform uses certain Swagger extensions to extend capabilities within the platform. These extensions are used internally and are not re-constituted when exporting an API description document.</p>
<p>In the underlying infrastructure, extensions are stored and reconstituted for the top-level Swagger object, operations, parameters, responses, and schema, regardless of whether the extension is external or internal.</p>
<p><a href="#top">Back to top</a></p>



<h3 id="support_of_external_json_schemas">Does the platform support referencing of JSON schemas that are external to the API document definition?</h3>
<p>No; all JSON schemas must be defined as part of the API description  document, without the need for any additional external information. Referenced external schemas are not currently supported.</p>
<p>The platform supports referencing of JSON schemas in these scenarios:</p>
<ul>
	<li>Schemas referenced in the same RAML file</li>
	<li>Inline schemas</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h3 id="overloaded_operations_support_apidoc">Does the platform support overloaded operations in API documentation?</h3>
<p>The platform supports adding <a href="basics_glossary.htm#gl_overloaded_operation">overloaded operations</a> (multiple operations using the same path, with different design elements such as media types), and displays overloaded operations correctly in the user interface, including API pages, generated API documentation, and Test Client.</p>
<p>The Swagger 2.0 standard specification does not support overloaded operations; because of this, if you try to download a Swagger document (<strong>API</strong> &gt; <strong>Details</strong> &gt; <strong>Implementations</strong> (bottom of page) for an API that includes overloaded operations, the platform generates an error. This is also true for Swagger 1.2 and RAML. Overloaded operations are not an issue with WADL.</p>
<p><a href="#top">Back to top</a></p>



<h3 id="swagger_responses_root">How does the platform support Swagger responses defined at the root level?</h3>
<p>In your Swagger document, you can define responses, including HTTP response codes, specific error messages, and so forth, in two ways:</p>
<ul>
	<li>Inline for each operation. The responses are visible in the API Designer for each operation.</li>
	<li>within a <strong>responses</strong> section at the root level in the Swagger document. The operations reference the root-level responses section.</li>
</ul>
<p>The example below defines three responses in the root-level <strong>responses</strong> section:</p>
<pre>"responses": {
  "200": {
    "description": "The operation was successful",
    "schema": {
      "$ref": "#/definitions/Success"
    }
  },
  "401": {
    "description": "Authentication failed.",
    "schema": {
      "$ref": "#/definitions/AuthenticationError"
    }
  },
  "GeneralErrorInResponses": {
    "description": "Something went wrong.",
    "schema": {
      "$ref": "#/responses/GeneralErrorInResponses"
    }
  }
}
</pre>
<p>The example below shows how the Swagger definition for a specific operation might reference a response defined in the root-level <strong>responses</strong> section (first and third responses):</p>
<pre>"paths": {
  "/test": {
    "get": {
      "responses": {
        "200": {
          "$ref": "#/responses/200"
        },
        "404": {
          "description": "Normal Inline Description"
        },
        "GeneralErrorInResponses": {
          "description": "GeneralErrorInResponses",
          "$ref": "#/responses/GeneralErrorInResponses"
        }
      }
    }
  }
},
</pre>
<h5>How the plaform processes responses defined at the root level</h5>
<p>The API Designer doesn't allow you to define responses at the root level. However, if they are defined in your imported Swagger document, the import process normalizes the Swagger response definitions, taking the content for each referenced response definition and placing it in the correct location in each operation that references it.</p>
<p>When you view the Swagger in the API Designer, you won't see the root responses section, but you'll see the applicable responses inline for each operation.</p>
<p>The API Designer includes a <strong>Responses</strong> section, but you can't add or modify the responses. See <a href="apiadmin_api_design.htm#apidesigner_responses">Responses section</a>.</p>
<p>For more information about defining responses at the root level in Swagger, refer to the applicable section of the OpenAPI (Swagger) specification: <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#responsesDefinitionsObject" title="Link to spec for Swagger response object" target="_blank">Responses Definitions Object</a>.</p>
<p><a href="#top">Back to top</a></p>



<h3 id="swagger_support_limitations">Are there any capabilities of the Swagger 2.0 specification that the platform doesn't support?</h3>
<p>The platform currently has no support or limited support for these capabilities of the Swagger 2.0 specification (<a href="http://swagger.io/specification/" title="OpenAPI specification" target="_blank">http://swagger.io/specification/</a>):</p>
<ul>
	<li><strong>Global Parameters</strong>
		<p>The API Platform does not support the use of global parameters in Swagger 2.0, and neither does the underlying infrastructure.</p></li>
	<li><strong>Includes ($ref fields)</strong>
		<p>In the API platform, includes are ignored, including references to schema documents.</p>
		<p>In the underlying infrastructure, upload is supported only for a single file. However, you can include referenced documents along with the root document by including multiple files in a single ZIP file (uploaded locally, or retrieved from an external URL).</p>
	</li>
	<li><strong>Examples</strong>
		<p>The Swagger 2.0 specification supports including sample values in Swagger documentation; however, the Akana API Platform doesn't currently support this feature.</p>
	<p>The underlying infrastructure supports including examples in Swagger for parameters, but not for operations. In the API platform, examples are ignored, and are not displayed in the API Designer or in generated documentation.</p></li>
</ul>
<p><a href="#top">Back to top</a></p>



<h3 id="swagger_support_limitations_oas30">Are there any capabilities of the OAS 3.0 specification that the platform doesn't support?</h3>
<p>There are no known issues with the platform's support of <a href="basics_glossary.htm#gl_oas30">OAS 3.0</a>.</p>
<!--<p>{DN 7/10/19: I pinged MM on this in slack. He. Says we should include it, we fully support OAS3. Msg to JJ since I previously had a note that we don't support the Style property. Msg to JJ to confirm. xxx}</p>-->
<p><a href="#top">Back to top</a></p>




<div class = "divider1"></div>
<h3 id="h_a_d_d_raml">RAML Support:</h3>




<h3 id="supported_versions_raml">What RAML versions does the platform support?</h3>
<p>The Akana API platform supports the following RAML version:</p>
<ul>
	<li>0.8</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h3 id="supported_features_raml">What features of the RAML specification does the platform support?</h3>
<p>The Akana platform supports the core features of the RAML specification, as referenced in the RAML 100 Tutorial (<a href="http://raml.org/developers/raml-100-tutorial" title="RAML tutorial" target="_blank">http://raml.org/developers/raml-100-tutorial</a>), except examples.</p>
<p>It supports:</p>
<ul>
	<li>Root</li>
	<li>Resources</li>
	<li>Methods</li>
	<li>URI parameters</li>
	<li>Query parameters</li>
	<li>Responses</li>
</ul>
<p>The platform doesn't yet support including examples in the generated documentation. Examples for query parameters, request body, or response body are not represented in the Akana API Designer and are omitted when exporting to Swagger, WSDL, or WADL</p>
<p><a href="#top">Back to top</a></p>



<h3 id="support_of_sample_values_for_raml">Does the platform support including sample values for generated RAML documentation?</h3>
<p>The RAML 0.8 specification support including a sample request in RAML documentation; however, the Akana API Platform currently does not support this feature.</p>
<p>The underlying infrastructure supports including examples for parameters in RAML, but not for operations.</p>
<p><a href="#top">Back to top</a></p>



<h3 id="supported_features_raml_200">Does the platform support the capabilities of the RAML 200 Tutorial?</h3>
<p>The RAML 200 tutorial (<a href="http://raml.org/developers/raml-200-tutorial" target="_blank">http://raml.org/developers/raml-200-tutorial</a>) demonstrates more complex capabilities of RAML, including:</p>
<ul>
	<li>Body parameters</li>
	<li>Form parameters</li>
</ul>
<p><strong>Includes</strong>:  If you're uploading a single RAML file that has includes, either from a URL or from the local filesystem, the platform generates an error on import. However, you can include referenced documents along with the root document by including multiple files in a single ZIP file (uploaded locally, or retrieved from an external URL). </p>
<p>Some of the capabilities covered by the RAML 200 tutorial are not yet supported by the Akana API platform, including:</p>
<ul>
	<li><strong>Traits</strong>: If you import a RAML file with Traits, the platform generates an error when trying to view the API in the API Designer.</li>
	<li><strong>RAML Specification Parameters</strong>: If you import a RAML file with Specification Parameters, no errors are generated but the Specification Parameters are ignored.</li>
	<li><strong>Resource Types</strong>: If you import a RAML file with Resource Types, the platform gives an error when trying to view the API in the API Designer.</li>
	<li><strong>External Schemas</strong>: the platform supports schemas referenced in the same RAML file and inline schemas, but does not support schemas referenced in an external file. The import fails.</li>
</ul>
<p><a href="#top">Back to top</a></p>




<div class = "divider1"></div>
<h3 id="h_general_other">General/other:</h3>




<h3 id="supported_languages_view">How can I view the API description document for an API?</h3>
<p>The API Admin can view the visual design of the API in API Designer, and can also view the Swagger representation by clicking the Swagger tab: see <a href="apiadmin_api_design.htm#api_designer_swagger_doc_view">How do I view the Swagger representation of my API in API Designer?</a></p>
<p>If you're not the Admin for the API, or if you want to view the API description in some other format&#8212;for example, the API is based on Swagger but you want to view a RAML or WADL representation&#8212;you can do that in the Implementations section:</p>
<ul>
	<li><strong>All users who have view access to the API</strong>: on the API's <strong>Overview</strong> page, in the <strong>Implementations</strong> section.</li>
	<li><strong>API Admins</strong>: The same information is also on the API's <strong>Details</strong> page.</li>
</ul>
<p> In most cases, you can view a representation of the API in all supported description languages, as shown below:</p>
<p><img src="assets/api_description_languages.png" alt="API description language options for a specific API" /></p>
<p><strong>Note</strong>: For SOAP-based APIs, created by uploading a WSDL file, only the WSDL option is available. See <a href="apiadmin_api_add.htm#add_api_soap">How do I add a SOAP-based API?</a></p>
<p>In the above example, the API can be viewed in all formats supported by the API Platform:</p>
<ul>
	<li><a href="basics_glossary.htm#gl_oas30">OAS 3.0</a></li>
	<li><a href="basics_glossary.htm#gl_swagger_20">Swagger 2.0</a></li>
	<li><a href="basics_glossary.htm#gl_swagger_12">Swagger 1.2</a></li>
	<li><a href="basics_glossary.htm#gl_raml">RAML 0.8</a></li>
	<li><a href="basics_glossary.htm#gl_wadl">WADL</a></li>
	<li><a href="basics_glossary.htm#gl_wsdl">WSDL</a></li>
</ul>
<p>To view the API representation, click the applicable icon. The API description is immediately available:</p>
<ul>
	<li>For Swagger 1.2, Swagger 2.0, OAS 3.0, and WSDL, the API description document opens in a new browser tab.</li>
	<li>For RAML and WADL, the API description is available as a downloaded file.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h3 id="supported_languages_soap">Does the platform support SOAP?</h3>
<p>Yes. The platform supports SOAP 1.1. You can create a SOAP-based API on the developer portal by importing the WSDL file for the API. See <a href="apiadmin_api_add.htm#add_api_soap">How do I add a SOAP-based API?</a></p>
<p>If your API is SOAP-based, you can't modify it using the API Designer; however, you can update the API by uploading a new WSDL file.</p>
<p>In general, although the developer portal supports viewing the API description document for REST-based APIs in different formats, such as Swagger 2.0 or RAML, a SOAP-based API cannot be viewed in other API description formats. You can only view the WSDL. See <a href="apiadmin_api_add.htm#add_api_soap">How do I add a SOAP-based API?</a></p>
<p><a href="#top">Back to top</a></p>



<div class = "divider1"></div>



<h3 id="related_topics">Related Topics</h3>
<div class="relatedlinks" id="api_admin">
<!-- #BeginLibraryItem "/Library/relatedtopics_api_admin.lbi" -->
<ul>
	<li><a href="apiadmin_getting_started.htm">Getting Started for API Developers</a></li>
	<li><a href="apiadmin_overview.htm">API Administration: Overview</a></li>
	<li><a href="api_admin_tutorial.htm">Tutorial (API Provider)</a></li>
	<li><a href="api_admin_management.htm">API Admin Management</a></li>
	<li><a href="bus_api_admin_forum.htm">Forum Moderation</a></li>
	<li><a href="apiadmin_promotion.htm">Promoting an API</a></li>
</ul>
<ul>
	<li><a href="apiadmin_api_add.htm">Adding an API</a></li>
	<li><a href="apiadmin_api_design.htm">Add or Modify an API Using API Designer</a></li>
	<li><a href="apiadmin_a_d_d_support.htm">API Description Language Support</a></li>
	<li><a href="apiadmin_implementations.htm">Manage API Implementations</a></li>
	<li><a href="api_admin_testing_tc.htm">API Testing with Test Client</a></li>
	<li><a href="api_admin_managing_contracts.htm">Managing Contracts for your API</a></li>
	<li><a href="api_admin_monitoring.htm">Monitoring API Analytics</a></li>
</ul>
<ul>
	<li><a href="api_admin_api_publishing.htm">API Visibility, Licenses, and Settings</a></li>
	<li><a href="apiadmin_api_phys_svc.htm">Working with Physical Services</a></li>
	<li><a href="api_admin_oauth_support.htm">OAuth Support</a></li>
	<li><a href="api_admin_content_guidelines.htm">Content Development Guidelines</a></li>
	<li><a href="api_admin_documentation_maintenance.htm">API Documentation Maintenance</a></li>
	<li><a href="api_admin_documentation_tagging.htm">API Documentation Tagging</a></li>
	<li><a href="api_admin_legal_agreement_maintenance.htm">Legal Agreement Maintenance</a></li>
	<li><a href="basics_glossary.htm">Glossary of Terms</a></li>
</ul><!-- #EndLibraryItem -->
</div>