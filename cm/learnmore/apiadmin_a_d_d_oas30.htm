---
layout: page
title: OAS 3.0 Support | API Admin | Akana API Platform Help
description: Information about the platform's support of Open API Specification 3.0 (OAS 3.0) for API definitions.
product: cm
category: learn
sub-nav-class: API Admin
weight: 2615
type: page
nav-title: OAS 3.0 Support
---
<h1 id="top">Open API Specification 3.0 Support</h1>
<p>Information about the platform's support of Open API Specification 3.0 (OAS 3.0) for API definitions.</p>
<h4 class="stamp">Valid in Version: 2019.0.0</h4>
<hr class="divide_hr" />



<h2 style="color: gray;">Table of Contents</h2>

<h4 style="color: gray;"><a href="#h_oas30">Working with OpenAPI 3.0:</a></h4>
<ol class="table_of_contents">
	<li><a href="#oas3_support_overview">Open API 3.0 support: Overview</a></li>
	<li><a href="#oas30_api_design_scratch">How do I design an API from scratch in OAS 3.0?</a></li>
	<li><a href="#oas30_api_design">How do I edit an API design in OAS 3.0?</a></li>
	<li><a href="#json_text_editor_using">Using the JSON Text Editor</a></li>
	<li><a href="#oas3_multiple_examples">Displaying multiple examples in your OAS 3.0 API documentation</a></li>
</ol>

<h4 style="color: gray;"><a href="#h_json_schema_editor">JSON Schema Editor:</a></h4>
<ol class="table_of_contents">
	<li><a href="#ov_json_schema_editor">Overview</a></li>
	<li><a href="#oas3_model_objects">Adding and editing model objects in OAS 3.0</a></li>
	<li><a href="#json_schema_editor_access">How do I access the JSON Schema Editor?</a></li>
	<li><a href="#json_schema_editor_using">Using the JSON Schema Editor</a></li>
	<li><a href="#json_schema_editor_validations">What validations can I add to model object properties in the JSON Schema Editor?</a></li>
	<li><a href="#json_schema_editor_dollarref">How do I define a $ref reference to another model in the JSON Schema Editor?</a></li>
</ol>

<h4 style="color: gray;"><a href="#h_oas3_apidoc">Generated API Documentation for OAS 3.0:</a></h4>
<ol class="table_of_contents">
	<li><a href="#oas3_apidoc_overview">Viewing documentation for the same API in different formats</a></li>
</ol>



<hr class="divide_hr" />
<h2 id="h_oas30">Working with OpenAPI 3.0:</h2>




<h2 id="oas3_support_overview">Open API 3.0 support: Overview</h2>
<p>With version 2019.0.0, the Akana API Platform supports OpenAPI version 3.0 (<a href="basics_glossary.htm#gl_oas30">OAS 3.0</a>) for creating and updating API definitions.</p>
<p>You can define an OAS 3.0 document by:</p>
<ul>
	<li>Uploading an existing OAS 3.0 API description document in JSON format.</li>
	<li>Designing from scratch: see <a href="#oas30_api_design_scratch">How do I design an API from scratch in OAS 3.0?</a></li>
</ul>
<p>Once you have the basic API definition in place, you can edit it in any of these ways:</p>
<ul>
	<li>By uploading a new API description document.</li>
	<li>By editing in the API Designer user interface. See <a href="#proc_api_edit_oas3">To edit an OAS 3.0 API definition in the API Designer</a>.</li>
	<li>By editing the Swagger definition in the Community Manager developer portal.</li>
</ul>
<p>Some of the features of OAS 3.0 that are improvements from Swagger 2.0:</p>
<ul>
	<li>The ability to define a response for each HTTP code/media type combination. For example, you can define an HTTP 200 (successful response) message for each Accept media type.</li>
	<li>Support includes an OAS Schema Form Editor, which is a graphical and text editor for authoring and editing Open API Specification v3 documents. The editor supports syntax and semantic validation on save or switch between text and graphical view, as well as code completion and syntax highlighting. The API Designer also supports dynamic switching between OAS 3.0 and other formats.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="oas30_api_design_scratch">How do I design an API from scratch in OAS 3.0?</h2>
<p><strong>Video content</strong>: <a href="https://www.akana.com/video-tutorials/develop-your-api" title="Learn how to use Akana to easily create an API from scratch or from a file import (OAS3/Swagger/RAML/WSDL/WADL)." target="_blank">Learn how to use Akana to easily create an API from scratch or from a file import (OAS3/Swagger/RAML/WSDL/WADL).</a></p>
<p>Follow the instructions for adding an API, providing the API name and clicking <strong>Save</strong>. For full instructions, see <a href="apiadmin_api_add.htm#add_api">How do I add an API?</a></p>

<h4 id="proc_api_add_oas3_from_scratch">To design an OAS 3.0 API from scratch</h4>
<ol>
	<li>Click the plus sign <strong>(+)</strong> in the middle of the top menu bar, and choose <strong>Add a New API</strong>.</li>
	<li>Optional: click the advanced options icon on the right, and choose a different implementation pattern. Proxy is the default, but you can also choose <strong>Orchestration</strong> or <strong>Physical Service</strong>. See <a href="apiadmin_api_add.htm#add_api_pattern">What is the API pattern and which pattern should I choose?</a></li>
	<li>Specify a name for the API, and click <strong>Save</strong>. The API Designer opens in the initial view so that you can start defining your API in the visual designer, as shown below.
	<p><img src="assets/api_add_oas3.0_initial_view.jpg" alt="API Designer, initial view" /></p></li>
	<li>Resources: Define resources as needed. For detailed instructions, see <a href="apiadmin_api_design.htm#h_apidesigner_resources">Resources (Operations)</a>.</li>
	<li>Models: Define models as needed. For detailed instructions, see <a href="apiadmin_api_design.htm#h_apidesigner_modelobjects">Model Objects</a>.</li>
	<li>Tags: Define tags as needed. For detailed instructions, see <a href="apiadmin_api_design.htm#h_apidesigner_tags">Tags</a>.</li>
	<li>Settings: In the Settings section, define default media types as needed. For detailed instructions, see <a href="apiadmin_api_design.htm#api_designer_media_types_default">What are default media types and how do I set them up?</a>
	</li>
	<li>When done, click <strong>Save</strong>.</li>
</ol>
<p><strong>Note</strong>: You can also define the API by working directly with the OAS 3.0 JSON definition rather than the visual editor. Just click the JSON tab at the top of the page. For more information, see <a href="#json_text_editor_using">Using the JSON Text Editor</a>. </p>
<p><a href="#top">Back to top</a></p>



<h2 id="oas30_api_design">How do I edit an API design in OAS 3.0?</h2>
<p>By default, the JSON Schema Editor converts any Swagger API description document to OAS 3.0. However, you can also choose Swagger 2.0.</p>

<h4 id="proc_api_edit_oas3">To edit an OAS 3.0 API definition in the API Designer</h4>
<ol>
	<li>Go to <strong>APIs</strong> &gt; <strong>My APIs</strong> &gt; choose API &gt; <strong>Details</strong>.</li>
	<li>In the <strong>Design</strong> section, on the right, click <strong>Edit</strong>. The JSON Schema Editor opens. By default, the API description is displayed as an OAS 3.0 document. 
		<p><strong>Note</strong>: You can also click the drop-down, as shown below, and choose Swagger 2.0.</p>
		<p><img src="assets/api_designer_swagger_version_dropdown.jpg" alt="Specifying the Swagger version" /></p>
		</li>
	<li>Edit any components of the API design. For details, refer to the linked procedure below. You can add, edit, or delete:
		<ul>
			<li><strong>Resources</strong>: See <a href="apiadmin_api_design.htm#h_apidesigner_resources">Resources (Operations)</a>.</li>
			<li><strong>Models</strong>: See <a href="apiadmin_api_design.htm#h_apidesigner_modelobjects">Model Objects</a>.</li>
			<li><strong>Tags</strong>: See <a href="apiadmin_api_design.htm#h_apidesigner_tags">Tags</a>.</li>
			<li><strong>Settings</strong>: set up default media types. See <a href="apiadmin_api_design.htm#api_designer_media_types_default">What are default media types and how do I set them up?</a></li>
		</ul>
		</li>
	
	<li>You can also directly edit the OAS 3.0 API description document: click the JSON tab to access the API description in the JSON Text Editor. See <a href="#json_text_editor_using">Using the JSON Text Editor</a>.</li>
	<li>When done, click <strong>Save</strong>.</li>
</ol>
<p><strong>Note</strong>: You can also define the API by working directly with the OAS 3.0 JSON definition rather than the visual editor. Just click the JSON tab at the top of the page. For more information, see <a href="#json_text_editor_using">Using the JSON Text Editor</a>. </p>
<p><a href="#top">Back to top</a></p>



<h2 id="json_text_editor_using">Using the JSON Text Editor</h2>
<p>If you prefer to edit the plain JSON for your API definition rather than working in the API Designer, click the JSON tab. The OpenAPI 3.0 swagger JSON file is displayed, as shown in the examples below.</p>
<h4>Sample OAS 3.0 file for a new API with no API definition</h4>
<p>If you choose to provide a name, and then design from scratch, the platform creates a placeholder OAS 3.0 Swagger document using the name you provided, as shown below.</p>
<p><img src="assets/api_designer_json_text_editor_placeholder.jpg" alt="JSON Text Editor with placeholder info" /></p>

<h4>Sample OAS 3.0 file when API definition document was uploaded</h4>
<p><img src="assets/api_designer_json_text_editor_content.jpg" alt="JSON Text Editor" /></p>

<h4 id="proc_json_text_editor">Editing in the JSON Text Editor</h4>
<p>In the JSON Text Editor you can directly modify your OAS 3.0 API definition. The Editor has built-in features to help you design your API, such as:</p>
<ul>
	<li>Syntax highlighting, as shown above.</li>
	<li>Code hinting as you type. An example is shown below.
		<p><img src="assets/api_designer_json_text_editor_hint_01.jpg" width="269" height="43" alt="JSON Text Editor: code hinting" /></p>
	</li>
	<li>Search for model objects includes typeahead search in popup dialog for search; the results are a drop-down list with hover for description.</li>
	<li>Contextual help. Type <strong>CTRL+Spacebar</strong> to access the contextual help, as shown in the example below.
<p><img src="assets/json_text_editor_contextual_help.png" alt="JSON Text Editor: accessing contextual help" /></p>
	</li>
	<li>Syntax and semantic validation when you switch between text and graphical view.</li>
	<li>Validation on save. You cannot save the file unless the JSON is valid and conforms to the OpenAPI 3.0 standard.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="oas3_multiple_examples">Displaying multiple examples in your OAS 3.0 API documentation</h2>
<h4 class="stamp">Valid in Version: 2020.2.8</h4>
<p>OAS 3.0 supports   displaying multiple examples in your OAS 3.0 API documentation, for parameters, request bodies, and responses.</p>
<p>In the OAS 3.0 file, you can use the <strong>examples</strong> attribute to include multiple <strong>example</strong> attributes.</p>
<p>In the Community Manager developer portal user interface, when users view the documentation, a drop-down allows the user to select from available examples. In the example below, there are two choices.</p>
<p><img src="assets/api_documentation_examples_multiple.png" alt="API documentation view: choosing from multiple examples in OAS 3.0" /></p>
<p>For more information about including multiple examples in your OAS 3.0 API documentation, refer to <a href="https://swagger.io/docs/specification/adding-examples/" title="Link to OAS 3.0 documentation re multiple examples" target="_blank">https://swagger.io/docs/specification/adding-examples/</a>.</p>
<p><strong>Note</strong>: Where a feature is supported in one or more API documentation formats but not others, converting to other formats is not supported. For example, conversion from OAS 3.0 to Swagger 2.0 might not be 100% because of differences in features supported by both specifications.</p>
<p><a href="#top">Back to top</a></p>




<hr class="divide_hr" />
<h2 id="h_json_schema_editor">JSON Schema Editor:</h2>




<h2 id="ov_json_schema_editor">Overview</h2>
<p>The JSON Schema Editor, new in version 2019.0.0, is a graphical user interface for creating and editing JSON schema definitions, using JSON Schema Draft 4. It includes such features as:</p>
<ul>
	<li>Code completion</li>
	<li>Syntax highlighting</li>
	<li>Syntax and semantic validation when you save or switch between text and graphical view</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="oas3_model_objects">Adding and editing model objects in OAS 3.0</h2>
<p>You can add and edit model objects in the API Design view, Models section.</p>
<p>With OAS 3.0, the default view in 2019.0.0, the tabs are:</p>
<ul>
	<li><strong>Editor</strong> (the default): the JSON Schema Editor.</li>
	<li><strong>JSON</strong>: when you click the JSON tab you can directly edit the OAS 3.0 Swagger document. For details, see <a href="#json_text_editor_using">Using the JSON Text Editor</a>.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="json_schema_editor_access">How do I access the JSON Schema Editor?</h2>
<p>The <a href="basics_glossary.htm#gl_jsonschemaeditor">JSON Schema Editor</a> is available in two places in the Community Manager developer portal:</p>
<ul>
	<li><strong>For the API Admin</strong>: in the API Designer.
	<p>Go to <strong>APIs</strong> &gt; <strong>My APIs</strong> &gt; choose API &gt; <strong>Details</strong>. In the Design section, click <strong>Edit</strong>. In the Models section, click <strong>Add</strong>, or select an existing model and click <strong>Edit</strong>.</p></li>
	<li><strong>For the Business Admin</strong>: in the context of a specific business model.
	<p>Go to <strong>More</strong> &gt; <strong>Organizations</strong> &gt; choose organization &gt; <strong>Models</strong> &gt; <strong>Add</strong>. Provide name and any other basic details and click <strong>Save</strong> to access the <strong>Edit Schema</strong> page. The JSON Schema Editor is the default view.</p></li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="json_schema_editor_using">Using the JSON Schema Editor</h2>
<p>The initial view in the JSON Schema Editor, after defining an API, is shown below.</p>
<p>With OAS 3.0, the default view in 2019.0.0, the tabs are:</p>
<ul>
	<li><strong>Editor</strong> (the default): the JSON Schema Editor.</li>
	<li><strong>JSON</strong>: when you click the JSON tab you can directly edit the OAS 3.0 Swagger document. For details, see <a href="#json_text_editor_using">Using the JSON Text Editor</a>.</li>
</ul>
<p><strong>Note</strong>: You can also define the API by working directly with the OAS 3.0 JSON definition rather than the visual editor. Just click the JSON tab at the top of the page. For more information, see <a href="#json_text_editor_using">Using the JSON Text Editor</a>. </p>

<h4>To author in the JSON Schema Editor</h4>
<ol>
	<li>Go to the Design page for your API and click <strong>Add Model</strong>. The initial view of the JSON Schema Editor, for a new model, is shown below.
		<p><img src="assets/model_add.png" alt="Add Model, initial view of JSON Schema Editor" /></p></li>
	<li>Enter the name for the model object.</li>
	<li>Define one or more properties. For each property:
		<ul>
			<li>Click the <strong>+</strong> sign, and then click <strong>object</strong> and specify the object type from the list below (your installation might include additional custom object definitions<strong>).</strong>
<p><img src="assets/json_schema_editor_object.png" alt="Specifying the object type" /></p>
				<p>Default object types available: String, Number, Integer, Boolean, Object, Array, $ref, oneOf, anyOf, allOf, patternProperty. For Array, you must specify the data type for the array (String, Number, Integer, Boolean, or $ref). For $ref, you must specify the referenced object. For patternProperty, you must specify the pattern (regular expression) that the value must match, and the object type.</p>
				</li>
			<li>Specify the ID (property name) and click <strong>Finish</strong>.</li>
			<li>Optional: on the right, click the <strong>Validations</strong> link to specify validations. For example, if you choose Integer, you can specify int32 or int64. When done, click <strong>Finish</strong> on the Validations overlay. For more information about validations that you can add, see <a href="#json_schema_editor_validations">What validations can I add to model object properties in the JSON Schema Editor?</a></li>
			<li>Optional: if the property is required, check the <strong>required</strong> box, as shown below.
			<p><img src="assets/json_schema_editor_required.png" alt="Specifying the object type" /></p></li>
		</ul>
	</li>
	
	<li>On the <strong>Add Model</strong> dialog, click <strong>Finish</strong> to save the new model. You are returned to the API Designer.
		<p><strong>Note</strong>: Changes are not permanently saved until you click Save on the API Designer page. Remember to save before exiting.</p>
		You can also switch between tabs. When you switch, the platform automatically validates the API description, and provides messaging if there are validation errors.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="json_schema_editor_validations">What validations can I add to model object properties in the JSON Schema Editor?</h2>
<p>When you're adding or modifying elements, in the JSON API description, you can specify validations that must be applied to various elements.</p>
<p>The specific validations available vary according to the type of element.</p>
<p>Some examples and their definitions are shown below, in these sections:</p>
<div class="relatedlinks">
<ul>
	<li><a href="#fields_validations_common">Common Validations</a></li>
	<li><a href="#fields_validations_string">String Validations</a></li>
	<li><a href="#fields_validations_number">Number Validations</a></li>
	<li><a href="#fields_validations_integer">Integer Validations</a></li>
	<li><a href="#fields_validations_boolean">Boolean Validations</a></li>
	<li><a href="#fields_validations_object">Object Validations</a></li>
</ul>
<ul>
	<li><a href="#fields_validations_array">$Array Validations</a></li>
	<li><a href="#fields_validations_dollarref">$ref Validations</a></li>
	<li><a href="#fields_validations_oneof">oneOf Validations</a></li>
	<li><a href="#fields_validations_anyof">anyOf Validations</a></li>
	<li><a href="#fields_validations_allof">allOf Validations</a></li>
	<li><a href="#fields_validations_patternproperty">patternProperty Validations</a></li>
</ul>
</div>

<h4 id="fields_validations_common">Common Validations</h4>
<p><img src="assets/json_schema_editor_val_common.png" alt="Validations: Common" /></p>
<dl>
	<dt>Dependencies</dt>
	<dd>If validation is required against other properties, specify the dependencies. An example from the Swagger Petstore API: id, quantity, shipDate, status, complete.</dd>
</dl>

<h4 id="fields_validations_string">String Validations</h4>
<p><img src="assets/json_schema_editor_val_string.png" alt="Validations: String" /></p>
<dl>
	<dt>Enum</dt>
	<dd>Enter the items for the enumerated list, with comma separators. For example: <strong>placed,approved,delivered</strong>.</dd>
	<dt>Format</dt>
	<dd>A valid sub-format for the data type. For Integer, options are: int32 or int64.</dd>
	<dt>Minimum Length</dt>
	<dd>Minimum allowable length for the string.</dd>
	<dt>Maximum Length</dt>
	<dd>Maximum allowable length for the string.</dd>
	<dt>Pattern (regexp)</dt>
	<dd>A regular expression pattern that the string must match.</dd>
</dl>

<h4 id="fields_validations_number">Number Validations</h4>
<p>See <a href="#fields_validations_integer">Integer Validations</a> below.</p>

<h4 id="fields_validations_integer">Integer Validations</h4>
<p><img src="assets/json_schema_editor_val_integer.png" alt="Validations: Integer" /></p>

<dl>
	<dt>Enum</dt>
	<dd>Enter the items for the enumerated list, with comma separators. For example: <strong>placed,approved,delivered</strong>.</dd>


	<dt>Format</dt>
	<dd>A valid sub-format for the data type. For Integer, options are: int32 or int64.</dd>


	<dt>Multiple Of</dt>
	<dd>An integer value that the property value must be a multiple of.</dd>


	<dt>Minimum</dt>
	<dd>Minimum allowable integer value for the property.</dd>
	<dt>Maximum</dt>
	<dd>Maximum allowable integer value for the property.</dd>
</dl>

<h4 id="fields_validations_boolean">Boolean Validations</h4>
<p>None except common validations (dependencies).</p>

<h4 id="fields_validations_object">Object Validations</h4>
<p><img src="assets/json_schema_editor_val_object.png" alt="Adding validations to the model object: example 2" /></p>
<dl>
	<dt>Minimum Number of Properties</dt>
	<dd>Enter an integer value.</dd>


	<dt>Maximum Number of Properties</dt>
	<dd>Enter an integer value.</dd>


	<dt>Additional Properties Allowed?</dt>
	<dd>Specify <strong>Yes</strong>, <strong>No</strong>, or <strong>Specify Properties Allowed</strong>. If you choose to specify, an additional field appears, for Additional Property Types:
		<p><img src="assets/json_schema_editor_val_object_additional.png" alt="Adding validations to the model object: example 2" /></p>
	</dd>
</dl>

<h4 id="fields_validations_array">Array Validations</h4>
<p>Arrays have these sets of validations:</p>
<ul>
	<li>Common Validations</li>
	<li>Validations for the data type specified for the array</li>
	<li>Array Validations listed below</li>
</ul>
<p><img src="assets/json_schema_editor_val_array.png" alt="Validations: Array" /></p>
<dl>
	<dt>Additional Items Allowed?</dt>
	<dd>Default is <strong>Yes</strong>. You can change to <strong>No</strong>, or click Specify Types Allowed and specify the data type for additional items allowed in the array. </dd>


	<dt>Minimum Number of Items</dt>
	<dd>The minimum allowable number of items for the array to be valid.</dd>


	<dt>Maximum Number of Items</dt>
	<dd>The maximum allowable number of items for the array to be valid.</dd>


	<dt>Unique Items</dt>
	<dd>Check the box to add validation that an item appears only once in the array.</dd>
</dl>

<h4 id="fields_validations_dollarref">$ref Validations</h4>
<p>When you're defining a $ref property, you must specify the destination object that's being referenced.</p>
<p>There are no other validations for $ref properties.</p>

<h4 id="fields_validations_oneof">oneOf Validations</h4>
<p>When you choose an object type of oneOf, a sub-object is created. You can then go in there and specify what the property must be one of, as shown below.</p>
<p>There are no other validations for oneOf properties.</p>
<p><img src="assets/json_schema_editor_val_oneof.png" alt="Validations: oneOf" /></p>

<h4 id="fields_validations_anyof">anyOf Validations</h4>
<p>In the same way as oneOf shown above, when you choose an object type of anyOf, a sub-object is created. You can then go in there and specify what the property must be any of.</p>
<p>There are no other validations for anyOf properties.</p>

<h4 id="fields_validations_allof">allOf Validations</h4>
<p>In the same way as oneOf shown above, when you choose an object type of allOf, a sub-object is created. You can then go in there and specify what the property must be all of.</p>
<p>There are no other validations for allOf properties.</p>

<h4 id="fields_validations_patternproperty">patternProperty Validations</h4>
<p>When you're defining a patternProperty property, you must specify the pattern (regular expression) that the value must match, and the object type. For example, if you specify a pattern of <span class="apidoc_code">[0-9]{3}</span>, the value must be three digits.</p>
<p>For validations available, refer to the validations for the object type you specify.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="json_schema_editor_dollarref">How do I define a $ref reference to another model in the JSON Schema Editor?</h2>
<p>When defining your models, it's best to define the models that are referenced by others, before adding the $ref references to those models.</p>
<p>When you add a $ref, you'll need to specify which model is being referenced. The portal offers you a list of valid models to choose from, as shown in the example below. Because of this, you really need to define the referenced model first.</p>
<p><img src="assets/json_schema_editor_dollarref.png" alt="Choosing from a list of valid objects to define a $ref property" /></p>
<p>For basic instructions on defining a model, see <a href="#json_schema_editor_using">Using the JSON Schema Editor</a>.</p>

<h4 id="model_object_selection_list">Notes re the model object selection list</h4>
<p>Two types of model objects might appear on the list:</p>
<ul>
	<li>Models already defined in the context of the current API.</li>
	<li>Models defined for the business.</li>
</ul>
<p>In the example above, the first model was defined in the context of the API and the other two are global model objects.</p>
<p>In addition, global model objects can have multiple versions. The version is included in the path so that it's clear what you're selecting.</p>
<p><strong>Note</strong>: When you choose a global model object, it becomes local to the API. At that point, you can change it without affecting the global definition. Changes to the global model object do not filter down to your API, and additional versions do not apply to the API. If you want to update to a newer global model object, go into the API definition, as above, and choose the new model from the list.</p>
<p><a href="#top">Back to top</a></p>




<hr class="divide_hr" />
<h2 id="h_oas3_apidoc">Generated API Documentation for OAS 3.0:</h2>




<h2 id="oas3_apidoc_overview">Viewing documentation for the same API in different formats</h2>
<p>When you define or upload your API, in Swagger 2.0 or OAS 3.0, API documentation is generated automatically from the API design.</p>
<p>You can control whether the API documentation is available in Swagger format (.swg file) or in OAS 3.0 format (.oas file). So, for example, if could create an API by uploading an OAS 3.0 API description document, you might choose to make your API documentation available in Swagger 2.0 as well, for users who are not familiar with OAS 3.0.</p>
<p>Because there are differences in the properties that are supported in OAS 3.0 versus Swagger 2.0, a specific property supported by only one version will only show up in that version of the API documentation.</p>
<p>For example, let's say you create your API by uploading an OAS 3.0 document, and the API includes the <strong>allOf</strong> property. You choose to make the API documentation available in Swagger 2.0 format as well as OAS 3.0 format. In this scenario, because <strong>allOf</strong>/<strong>oneOf</strong>/<strong>anyOf</strong> are only supported in OAS 3.0, the <strong>allOf</strong> property will not appear in the Swagger 2.0 generated API documentation. It will appear only in the OAS 3.0 version.</p>
<p><a href="#top">Back to top</a></p>



<hr class="divide_hr" />



<h2 id="related_topics">Related Topics</h2>
<div class="relatedlinks" id="api_admin">
<ul>
	<li><a href="apiadmin_getting_started.htm">Getting Started for API Developers</a></li>
	<li><a href="apiadmin_overview.htm">API Administration: Overview</a></li>
	<li><a href="api_admin_tutorial.htm">Tutorial (API Provider)</a></li>
	<li><a href="api_admin_management.htm">API Admin Management</a></li>
	<li><a href="bus_api_admin_forum.htm">Forum Moderation</a></li>
	<li><a href="apiadmin_promotion.htm">Promoting an API</a></li>
	<li><a href="apiadmin_api_add.htm">Adding an API</a></li>
	<li><a href="apiadmin_api_design.htm">Add or Modify an API Using API Designer</a></li>
</ul>
<ul>
	<li><a href="apiadmin_a_d_d_support.htm">API Description Language Support</a></li>
	<li><a href="apiadmin_implementations.htm">Manage API Implementations</a></li>
	<li><a href="api_admin_testing_tc.htm">API Testing with Test Client</a></li>
	<li><a href="uc_tc_okta.htm">Use Case: API testing in Test Client with Okta</a></li>
	<li><a href="api_admin_managing_contracts.htm">Managing Contracts for your API</a></li>
	<li><a href="apiadmin_monitoring.htm">Monitoring API Analytics</a></li>
	<li><a href="apiadmin_mydashboard.htm">Monitoring APIs with the My Dashboard Feature</a></li>
</ul>
<ul>
	<li><a href="api_admin_api_publishing.htm">API Settings and Visibility</a></li>
	<li><a href="apiadmin_manage_licensing.htm">API Licenses and Scopes</a></li>
	<li><a href="apiadmin_api_phys_svc.htm">Working with Physical Services</a></li>
	<li><a href="api_admin_oauth_support.htm">OAuth Support</a></li>
	<li><a href="api_admin_content_guidelines.htm">Content Development Guidelines for API Admins</a></li>
	<li><a href="api_admin_documentation_maintenance.htm">API Documentation Maintenance</a></li>
	<li><a href="api_admin_documentation_tagging.htm">API Documentation Visibility Tagging</a></li>
	<li><a href="api_admin_legal_agreement_maintenance.htm">Legal Agreement Maintenance</a></li>
	<li><a href="basics_glossary.htm">Glossary of Terms</a></li>
</ul></div>