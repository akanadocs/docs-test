---
layout: page
title: Open ID Connect Support | Business Administration | Akana API Platform Help
description: Configure a login domain or OpenID Relying Party domain to use the OpenID Connect protocol for authentication.
product: cm
category: learn
sub-nav-class: Business Administration
weight: 3218
type: page
nav-title: Open ID Connect Support
---
<h2 id="top">OpenID Connect Support</h2>
<p>Configure an OpenID Connect Relying Party domain that you can use for platform login or to support an OAuth Provider domain using OpenID Connect for authentication.</p>
<h5 class="stamp">API Platform Version: 8.1</h5>
<div class = "divider1"></div>


<h3 style="color: gray;">Table of Contents</h3>
<ol class="table_of_contents">
  <li><a href="#what_is_openid_connect">What is OpenID Connect?</a></li>
  <li><a href="#how_is_openid_connect_different_from_openid">How is OpenID Connect different from OpenID?</a></li>
  <li><a href="#how_is_openid_connect_different_from_saml">How is OpenID Connect different from SAML?</a></li>
  <li><a href="#diff_openid_connect_relying_party_and_openid_connect_provider">What's the difference between OpenID Connect Relying Party and OpenID Connect Provider?</a></li>
  <li><a href="#platform_roles_for_openid_connect">What roles can the platform fulfil in relation to OpenID Connect?</a></li>
  <li><a href="#openid_connect_provider_configure_multiple">Can I configure multiple OpenID Connect Providers?</a></li>
  <li><a href="#diff_openid_connect_providerand_oauth_provider">How is OpenID Connect Provider different from OAuth Provider?</a></li>
  <li><a href="#domain_setup_openid_connect_relying_party">How do I set up the platform to log in with an OpenID Connect Relying Party domain?</a></li>
  <li><a href="#what_value_should_i_use_for_the_redirect_uri_for_my_openid_connect_relying_party_domain">What value should I use for the Redirect URI for my OpenID Connect Relying Party domain?</a></li>
  <li><a href="#oauth_provider_configured_what_benefits">I already have an OAuth provider configured. How can I benefit from the platform's OpenID Connect support?</a></li>
  <li><a href="#can_i_integrate">Can I integrate some other OpenID Connect provider in the platform? If so, how? Which features of the platform can support an external OpenID Connect provider?</a></li>
  <li><a href="#what_are_the_openid_connect_oauth_urls_for_the_platform">What are the OpenID Connect OAuth URLs for the platform?</a></li>
  <li><a href="#what_signature_algorithms_are_supported_by_openidconnect_oauthprovider">What signature algorithms are supported by the platform's OpenID Connect OAuth provider?</a></li>
  <li><a href="#how_often_are_json_web_keys_rolled_over">How often are JSON web keys rolled over?</a></li>
  <li><a href="#how_do_i_configure_an_openid_connect_relying_party_domain">How do I configure an OpenID Connect Relying Party domain?</a></li>
  <li><a href="#how_do_i_choose_which_response_type_to_use">How do I choose which response type to use?</a></li>
  <li><a href="#related_topics">Related Topics</a></li>
</ol>



<div class = "divider1"></div>



<a name="what_is_openid_connect"></a><h3>What is OpenID Connect?</h3>
<p><a href="basics_glossary.htm#gl_openidconnect">OpenID Connect</a> is a popular protocol for user authentication; it is an identity layer on top of the OAuth 2.0 protocol that allows a client app to verify the identity of an end-user. It interoperates smoothly with OAuth to provide both authentication and authorization services. OpenID Connect was released in February 2014 and is gaining in popularity. For example, Google has moved from OpenID to OpenID Connect for products such as the Google+ API, used by the platform's Google login domain, and no longer supports OpenID. For more information, see <a href="http://openid.net/connect/" target="_blank">Welcome to OpenID Connect</a> (external site).</p>
<p>Although it can be used on its own for authentication, OpenID Connect is often used in combination with the OAuth 2.0 protocol to provide both authentication and authorization. An OpenID Connect provider performs the authentication, verifying the user's identity, and the OAuth provider performs the authorization, managing the process of the authenticated end-user giving permission to an application to access the user's resources. In this scenario, OpenID Connect allows the client application (Relying Party) to verify the identity of the end-user based on authentication by an <a href="basics_glossary.htm#gl_identityprovider">OpenID Connect Identity Provider</a> (IdP).</p>
<p>The IdP performs the authentication and sends back a token to the application; the application then sends the information, along with its own credentials, to the OAuth Authorization server.</p>
<p>Finally, the Authorization Server issues an access token, which the application sends to the Resource Server with its request for resources. The Resource Server responds with the resource access, and the application provides the requested service to the consumer.</p>
<p>OpenID Connect defines the following roles of users and applications:</p>
<ul>
  <li><strong>End-user</strong>&#8212;The user to be authenticated in order to then consume a service; the consumer.</li>
  <li><strong><a href="basics_glossary.htm#gl_identityprovider">OpenID Connect Identity Provider</a></strong>&#8212;The entity responsible for verifying identity and issuing user identity information via the OpenID Connect protocol.</li>
  <li><strong><a href="basics_glossary.htm#gl_relyingparty">Relying Party</a></strong>&#8212;The app or site that wants to verify the end-user identity. In the case of OpenID Connect used for login, the Relying Party is the developer portal. This role is also called Service Provider, because the app or site is providing a service to the consumer (end-user).</li>
  <li><strong>Server Agent</strong>&#8212;The server that verifies the end-user's OpenID Connect credentials. It is usually the same as the OpenID Connect Identity Provider.</li>
  <li><strong>User Agent</strong>&#8212;The program used by the end-user to access the relying party / service provider; usually a browser.</li>
  <li><a href="basics_glossary.htm#gl_oauth_authorizationserver"><strong>OAuth Authorization server</strong></a>&#8212;The server that issues an access token to the application (Relying Party) after authentication and authorization are complete.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<a name="how_is_openid_connect_different_from_openid"></a><h3>How is OpenID Connect different from OpenID?</h3>
<p>OpenID Connect has support for OAuth 2.0 built in, and is extensible. OpenID Connect is more API-friendly and is more flexible.</p>
<p>OpenID is now deprecated.</p>
<p><a href="#top">Back to top</a></p>



<a name="how_is_openid_connect_different_from_saml"></a><h3>How is OpenID Connect different from SAML?</h3>
<p>SAML and OpenID Connect are both very popular and mainstream standards that support single sign-on. OpenID Connect is essentially JSON-based, whereas SAML is an XML implementation.</p>
<p>There are two main reasons why you might choose SAML over OpenID Connect for your Policy Manager/developer platform implementation:</p>
<ul>
  <li>An existing SAML implementation</li>
  <li>The need to support webservices, REST APIs, and user login with a common infrastructure</li>
</ul>
<p>Reasons you might choose OpenID Connect rather than SAML for your implementation:</p>
<ul>
  <li>An existing OpenID Connect Relying Party implementation.</li>
  <li>The OpenID Connect Provider returns  tokens rather than SAML tokens. The  token can then be exchanged to get an access token for API consumption and to get more details of the user.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<a name="diff_openid_connect_relying_party_and_openid_connect_provider"></a><h3>What's the difference between OpenID Connect Relying Party and OpenID Connect Provider?</h3>
<p>In OpenID Connect, the term <a href="basics_glossary.htm#gl_relyingparty">Relying Party</a> refers to the application that wants to offer its services to users and wants to allow users to log in via an external third party, relying on the external identity provider for user authentication. Users authenticate via the app, and the app &ldquo;relies&rdquo; on the identity provider to provide authentication via the OpenID Connect protocol.</p>
<p>The OpenID Connect provider is the identity server that authenticates the user and exposes user identities to the app (relying party) with the consent of the user.</p>
<p>In connection with logging in to the platform, the platform acts as the relying party. For example, let's say that on the platform you want to use OpenID Connect for login authentication, and you set up a Google domain for login. When the user logs in with Google, the platform is the relying party and Google is the OpenID Connect provider.</p>
<p><a href="#top">Back to top</a></p>



<a name="platform_roles_for_openid_connect"></a><h3>What roles can the platform fulfil in relation to OpenID Connect?</h3>
<p>The platform supports OpenID Connect in the roles and scenarios listed below.</p>
<h5>As OpenID Connect Relying Party</h5>
<p>The platform can integrate with any OpenID Connect provider wherever SSO is needed. This includes the following scenarios:</p>
<ul>
  <li>The developer portal allows login with user accounts from any OpenID Connect provider.</li>
  <li>When the platform's OAuth/OpenID Connect provider is used, any OpenID Connect provider can be used as an SSO provider to authenticate end-users.</li>
</ul>
<h5>As OpenID Connect Identity Provider</h5>
<p>As an identity provider, the platform can integrate with any OpenID Connect provider to support the following:</p>
<ul>
  <li>The platform can act as an identity provider for any application/website wanting to offer SSO capabilities to the platform's user accounts.</li>
  <li>The platform's OAuth/OpenID Connect provider can be used by any app wanting to obtain an access token to consume an API. As the provider, the platform issues access tokens, validates access tokens, and manages user grants.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<a name="openid_connect_provider_configure_multiple"></a><h3>Can I configure multiple OpenID Connect providers?</h3>
<p>Yes. The platform deployment supports multiple OpenID Connect providers. In addition, if multiple tenants are configured, each tenant can support multiple OAuth/OpenID Connect providers. The platform identifies the target of the OAuth/OpenID Connect for each request based on the hostname of the HTTP request.</p>
<p><a href="#top">Back to top</a></p>



<a name="diff_openid_connect_providerand_oauth_provider"></a><h3>How is OpenID Connect provider different from OAuth provider?</h3>
<p>The OpenID Connect protocol is built on top of the OAuth 2.0 specification. Below are some of the additions and the specific ways OAuth is used in the OpenID Connect protocol:</p>
<ul>
  <li><strong>Discovery Configuration</strong>: OpenID Connect provider defines a <a href="basics_glossary.htm#gl_wellknownconfigurationurl">well-known configuration URL</a> that can be used for relying party applications to learn all the details about the OpenID Connect provider. This includes:
<ul>
      <li>URLs for Authorization Endpoint, Token Endpoint, JWKS Endpoint, and UserInfo Endpoint</li>
      <li>Supported scope names</li>
      <li>Other security-related configuration needed to interact with the OpenID Connect provider</li>
    </ul>
  </li>
  <li><strong>UserInfo Endpoint</strong>: OAuth 2.0 defines an Authorization Endpoint that is used for the resource owner (end user) to give consent to the app's request for access to the user's resources, and a Token Endpoint for the relying party (app) to obtain an access token for use when invoking APIs. This access token invokes the request with the security context of the end-user.
    <p>However, there was no standard way for the relying party app to collect information about the end user (resource owner). The OpenID Connect specification includes two ways for the app to learn information about the end user:</p>
    <ul>
      <li>The  OpenID Connect Provider can issue an ID Token ( token) from either the Authorization Endpoint or the Token Endpoint.</li>
      <li>The OpenID Connect Provider can publish a UserInfo endpoint. The relying party  app can then use the UserInfo endpoint to learn information about the end-user (who gave consent to the relying party).</li>
    </ul>
  </li>
  <li><strong>JWKS Endpoint</strong>: <a href="basics_glossary.htm#gl_jwt_token"> tokens</a> are signed, and optionally encrypted, using the JWK specification with rolling keys. The OpenID Connect provider publishes the JWKS endpoint with JSON Web Key Set for all valid  tokens issued by the provider.</li>
  <li><strong>Session Management</strong>: OpenID Connect supports logging the end user out from the OpenID Connect provider in two ways:
  <ul>
      <li>By initiating logout from the Relying Party app</li>
      <li>Logging out from the Relying Party app by initiating logout from the OpenID Connect Provider</li>
    </ul>
  <p>It also provides an option to include a Provider iFrame in a Relying Party web app that can help manage the end-user session with the relying party app if the OpenID Connect provider decides to end the end-user's session with the relying party.</p>
  <p><strong>Note</strong>: The developer portal's OpenID Connect Provider does not support OpenID Connect's Session Management features.</p></li>
  <li><strong>Dynamic Client Registration</strong>: OpenID Connect Provider supports an endpoint with standard interface to register Relying Party applications.
    <p><strong>Note</strong>: The platform does not support the standard OpenID Connect Provider Dynamic <a href="basics_glossary.htm#gl_client_registration_endpoint">Client Registration endpoint</a>. Instead, the platform has the proprietary API to register relying party applications.</p>
  </li>
</ul>
<p>The following specific OAuth Provider features are from the OpenID Connect specification:</p>
<ul>
  <li>The Relying Party must use one of the following OAuth grant types from the OAuth Provider to get the consent of the end-user for the relying party to use the end-user's security context:
    <ul>
      <li>Authorization Grant</li>
      <li>Implicit Grant</li>
    </ul>
  </li>
  <li>The OpenID Connect protocol does not use either of these two OAuth grant types:
    <ul>
      <li>Client Credentials</li>
      <li>Resource Owner Password Credentials</li>
      </ul>
  </li>
  <li>When using an Authorization Grant, OAuth issues an authorization code from the Authorization Endpoint. The Relying Party application should use the Token Endpoint to retrieve the access token. However, the OpenID Connect provider allows the relying party to obtain both the Authorization Code and the access token from the Authorization Endpoint.</li>
  <li>The OpenID Connect protocol extends the Authorization Endpoint to issue a  Token (id_token) from the Authorization Endpoint to the Relying Party. In this case, the Relying Party does not use the Token Endpoint or the UserInfo Endpoint.</li>
  <li>When using OpenID Connect, the OAuth Provider should issue a Bearer token only. Issuing a MAC token from the Authorization/Token Endpoint will limit the Relying Party from using the UserInfo Endpoint.</li>
  <li>POST response from Authorization Endpoint: the OpenID Connect provider functionality supports a query parameter to the Authorization Endpoint that requires the Authorization Endpoint to return the response parameters to an HTTP POST request at the redirect URL, instead of using a HTTP GET.
    <p><strong>Note</strong>: The platform's OpenID Connect provider does not support this option.</p></li>
</ul>
<p><a href="#top">Back to top</a></p>



<a name="domain_setup_openid_connect_relying_party"></a>
<h3>How do I set up the platform to log in with an OpenID Connect Relying Party domain?</h3>
<p>The platform supports single sign-on with an OpenID Connect Provider, for developer login to the platform. This option can be used to leverage user identities already created/maintained in another system that offers an OpenID Connect Provider interface. The platform acts as a <a href="basics_glossary.htm#gl_relyingparty">relying party</a> to the OpenID Connect provider.</p>
<p>To offer OpenID Connect as an option to your users for platform login, you must complete the following basic steps:</p>
<ul>
  <li>Create an account with an OpenID Connect provider.</li>
  <li>In the platform, set up an OpenID Connect Relying Party domain: see <a href="#how_do_i_configure_an_openid_connect_relying_party_domain">How do I configure an OpenID Connect Relying Party domain?</a></li>
  <li>In the platform, enable the domain for login on the <strong>Administration</strong> &gt; <strong>Config</strong> &gt; <strong>Logins</strong> page. See <a href="bus_admin_domains.htm#how_do_i_enable_a_domain_for_login">How do I enable a domain for login?</a></li>
</ul>
<p><a href="#top">Back to top</a></p>



<a name="what_value_should_i_use_for_the_redirect_uri_for_my_openid_connect_relying_party_domain"></a><h3>What value should I use for the Redirect URI for my OpenID Connect Relying Party domain?</h3>
<p>Depending on how you will be using the OpenID Connect Relying Party domain, there are two possible redirect URI values that you could use on your OpenID Connect provider site when registering your platform as an app with your provider. Choose the applicable value from the table below.</p>
<table cellspacing="0px" class="doctable" style="width: 98%;">
<thead>
  <tr>
    <th width="50%">Environment Scenario</th>
    <th width="50%">Redirect URL</th>
  </tr>
</thead>
<tbody>
  <tr class="t2row">
    <td>Akana API Platform Login</td>
    <td>{CMConsoleAddress}/api/login/ssoLogin</td>
  </tr>
  <tr class="t1row">
    <td>OAuth Provider Resource Owner domain</td>
    <td>{OAuthProviderAuthorizationServer}/oauth/auz/grants/provider/authcomplete</td>
  </tr>
</tbody>
</table>
<p><a href="#top">Back to top</a></p>



<a name="oauth_provider_configured_what_benefits"></a><h3>I already have an OAuth provider configured. How can I benefit from the platform's OpenID Connect support?</h3>
<p>To enable the OpenID Connect Provider features from the OAuth Provider, use the &quot;Edit OAuth Provider Domain&quot; wizard (Administration &gt; Domains). Once this option is enabled, allow a few minutes for the settings to refresh, so that the OAuth Provider feature will be enabled on the containers it's installed on. After that, the supported OpenID Connect Provider features can be accessed from the OAuth Provider.</p>
<p><a href="#top">Back to top</a></p>



<a name="can_i_integrate"></a><h3>Can I integrate some other OpenID Connect provider in the platform? If so, how? Which features of the platform can support an external OpenID Connect provider?</h3>
<p>Yes. You can integrate any OpenID Connect provider by setting up an OpenID Connect Relying Party domain: Administrator &gt; Domains &gt; Add Domain &gt; OpenID Connect Relying Party.</p>
<p>For instructions, see <a href="#how_do_i_configure_an_openid_connect_relying_party_domain">How do I configure an OpenID Connect Relying Party domain?</a></p>
<p>You can choose this domain  if you want the platform's OAuth or OpenID Connect provider to use an external OpenID Connect Provider for resource owner authentication or for login.</p>
<p>You can dynamically reference the provider's discovery URL (well-known configuration URL), you can read the metadata from that URL as a starting point and then modify the values, or you can configure the domain manually.</p>
<p><a href="#top">Back to top</a></p>



<a name="what_are_the_openid_connect_oauth_urls_for_the_platform"></a><h3>What are the OpenID Connect OAuth URLs for the platform?</h3>
<p>If you are using OpenID Connect for your OAuth provider domain, you will need to configure the applicable URLs. The relative paths shown below provide the exact URL to be used for each endpoint. You can get all the URLs by accessing the Discovery Endpoint below.</p>
<p>URLs:</p>
<ul>
  <li><strong>Discovery Endpoint</strong>: {oauth-provider-url}/.well-known/openid-configuration</li>
  <li><strong>Authorization Endpoint</strong>: {oauth-provider-url}/oauth/auz/authorize</li>
  <li><strong>Token Endpoint</strong>: {oauth-provider-url}/oauth/oauth20/token</li>
  <li><strong>UserInfo Endpoint</strong>: {oauth-provider-url}/oauth/userinfo</li>
  <li><strong>JWKS Endpoint</strong>: {oauth-provider-url}/oauth/jwks</li>
</ul>
<p><a href="#top">Back to top</a></p>



<a name="what_signature_algorithms_are_supported_by_openidconnect_oauthprovider"></a>
<h3>What signature algorithms are supported by the platform's OpenID Connect OAuth provider?</h3>
<p>The developer portal's OpenID Connect provider supports the following digital signature/MAC algorithms to sign ID tokens as defined in the <a href="https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-34" title="IETF specification" target="_blank">IETF JSON Web Algorithms specification</a>:</p>
<ul>
  <li>Symmetric Signature Algorithms:
    <ul>
      <li>HS256: HMAC using  <a href="basics_glossary.htm#gl_sha256">SHA-256</a></li>
      <li>HS384: <a href="basics_glossary.htm#gl_hmac">HMAC</a> using SHA-384</li>
      <li>HS512: HMAC using SHA-512</li>
    </ul>
  </li>
  <li>Asymmetric Signature Algorithms:
    <ul>
      <li>RS256: <a href="basics_glossary.htm#gl_rsa">RSA</a>SSA-PKCS-v1_5 using <a href="basics_glossary.htm#gl_sha256">SHA-256</a></li>
      <li>RS384: RSASSA-PKCS-v1_5 using SHA-384</li>
      <li>RS512: RSASSA-PKCS-v1_5 using SHA-512</li>
      <li>ES256: <a href="basics_glossary.htm#gl_ecdsa">ECDSA</a> using P-256 and SHA-256</li>
      <li>ES384: ECDSA using P-384 and SHA-384</li>
      <li>ES512: ECDSA using P-521 and SHA-512</li>
      <li>PS256: <a href="basics_glossary.htm#gl_rsa">RSA</a>SSA-PSS using SHA-256 and <a href="basics_glossary.htm#gl_mgf1">MGF1</a> with SHA-256</li>
      <li>PS384: RSASSA-PSS using SHA-384 and MGF1 with SHA-384</li>
      <li>PS512: RSASSA-PSS using SHA-512 and MGF1 with SHA-512</li>
    </ul>
  </li>
  </ul>
<p>The OpenID Connect Provider requires a default signature algorithm from the above list of algorithms to be used to  sign ID tokens it issues to relying party applications.</p>
<p>In the platform, the default signature algorithm is set up in Administration &gt; Domains &gt; Add Domain &gt; OAuth Provider, on the OpenID Connect page of the Add/Edit OAuth Provider wizard.</p>
<p>There are some limitations when HS256/HS384/HS512 algorithms are configured to sign ID tokens. The OpenID Connect specification recommends using relying party/application/client secrets when using symmetric signature algorithms (HS256/HS384/HS512) to sign ID tokens. For this reason, apps/clients must make sure that the app or client secret has sufficient entropy to be used as a cryptographic key with these algorithms.</p>
<p>When asymmetric signature algorithms are used to sign ID tokens, the public keys to verify the signature of the ID token are published at the JWKS endpoint. This is according to the <a href="https://tools.ietf.org/html/draft-ietf-jose-json-web-key-34#page-10" target="_blank">JSON Web Key specification, page 10</a>.</p>
<p><strong>Note</strong>: The auto-generated application secrets are compatible for use with HS256 only, which requires a minimum of 32 characters. If you want to use HS384/HS512 algorithms, application secrets must have a minimum of 48/64 characters respectively.</p>
<p><a href="#top">Back to top</a></p>



<a name="how_often_are_json_web_keys_rolled_over"></a><h3>How often are JSON Web Keys rolled over?</h3>
<p>When asymmetric signature keys are used to sign ID tokens, the keys are rolled over by periodically adding new keys to the <a href="basics_glossary.htm#gl_jsonwebkeyset">JWK Set</a>.</p>
<p>By default, all the JSON Web Keys created by the platform's OpenID Connect provider are valid for 24 hours. You can configure this value in the Admin Console of each container that the OAuth Provider is installed in. Go to the com.soa.oauth category and set the value for the following property:</p>
<pre>com.soa.oauth.provider.jwk.validityInSeconds</pre>
<p>Every time the platform's OpenID Connect provider needs to sign an ID token, it checks if there is a JWK with the default signing algorithm.</p>
<p>If it finds one, it then checks whether the JWK expires within the validity period of the ID token. If yes, the platform deprecates the existing JWK, creates a new JWK using the default algorithm, and adds it to the JWK Set that is published at the JWKS endpoint.</p>
<p>When a JWK is deprecated, it is still retained in the JWK Set until all ID tokens that were issued using that key have expired. At that point, the JWK is decommissioned/discarded from the platform.</p>
<p><a href="#top">Back to top</a></p>



<a name="how_do_i_configure_an_openid_connect_relying_party_domain"></a><h3>How do I configure an OpenID Connect Relying Party domain?</h3>
<p>Once the OpenID Connect provider account is set up, the Business Admin can set up the domain in the developer portal user interface. Follow the steps below.</p>
<h5>To configure an OpenID Connect Relying Party domain:</h5>
<ol>
  <li>Log in as the Business Admin and click the <strong>Administration</strong> quick filter (wrench icon).</li>
  <li>Click <strong>Domains</strong>. The <em>Domains Summary</em> page displays.</li>
  <li>On the right, click <strong>Add Domain</strong>.</li>
  <li>Choose OpenID Connect Relying Party. The wizard opens at the first tab.</li>
  <li>Follow the instructions for each tab. The information you'll provide depends on your OpenID Connect Provider and on how you are using the domain. For details on specific fields and options, if needed, refer to the additional information in <a href="#field_values_openid_connect_relying_party">OpenID Connect Relying Party Domain: Configuration Values</a> below. The wizard includes the following tabs:
    <ol>
      <li><strong>Details</strong>: the name and description you want to assign to the domain.</li>
      <li><strong>Configuration Method</strong>: the approach you want to use for setting up your domain. You can dynamically reference the provider metadata, read in the provider metadata and then modify it as needed, or do a completely manual configuration. For more information on values, see <a href="#oidcrp_domain_tab2">Tab 2: Configuration Method</a> below.</li>
      <li><strong>Provider</strong>: basic information about your OpenID Connect identity provider. The platform uses this to connect to the provider. For more information on values, see <a href="#oidcrp_domain_tab3">Tab 3: Provider</a> below.</li>
      <li><strong>Authentication</strong>: values associated with user authentication and how user information is returned to you. For more information on values, see <a href="#oidcrp_domain_tab4">Tab 4: Authentication</a> below.</li>
      <li><strong>App</strong>: the two values, App ID and Shared Secret, that uniquely identify your app with your OpenID Connect identity provider. For more information on values, see <a href="#oidcrp_domain_tab5">Tab 5: App</a> below.</li>
      <li><strong>Token</strong>: If you want claims to be returned from the token endpoint, you must configure values relating to the token. For more information on values, see <a href="#oidcrp_domain_tab6">Tab 6: Token</a> below.</li>
      <li><strong>User</strong>: If you want claims to be returned from the UserInfo endpoint, you must configure URI and HTTP method. For more information on values, see <a href="#oidcrp_domain_tab7">Tab 7: User</a> below.</li>
    </ol>
  </li>
  <li>Click <strong>Save</strong>.</li>
</ol>


<a name="field_values_openid_connect_relying_party"></a><h4>OpenID Connect Relying Party Domain: Configuration Values</h4>
<p>This topic provides reference information to help you configure your OpenID Connect Relying Party domain.</p>
<h4><a name="oidcrp_domain_tab2"></a>Tab 2: Configuration Method</h4>
<p>On this tab, you specify how you want to provide the information that the platform needs for your OpenID Connect Relying Party domain. Use the information below to help determine your choices.</p>
<p><strong>Select Configuration Method</strong></p>
<table cellspacing="0px" class="doctable" style="width: 98%;">
<thead>
  <tr>
    <th width="40%">Option...</th>
    <th width="60%">Meaning...</th>
  </tr>
</thead>
<tbody>
  <tr class="t2row">
    <td>Discover Provider Metadata</td>
    <td>Choose this option if you want the platform to read the configuration information dynamically from your provider's well-known configuration URL (discovery endpoint). Then provide the URL, and the platform populates the fields in the wizard. When you choose this option, the platform always references the configuration endpoint for the information; it is not stored locally. Values from the configuration file are displayed and cannot be changed.</td>
  </tr>
  <tr class="t1row">
    <td>Read Provider Metadata &amp; Edit Configuration</td>
    <td>Choose this option if you want the platform to read the configuration information from your provider's well-known configuration URL (discovery endpoint) and store it locally. Once the information is read in, you will be able to edit it. It is stored locally and is not updated from the configuration endpoint. Values from the configuration file are displayed, but can be changed.</td>
  </tr>
  <tr class="t2row">
    <td>Manual Configuration</td>
    <td>Choose this option if you want to set up your domain by providing all the values yourself, without reference to any external configuration information.</td>
  </tr>
</tbody>
</table>
<dl class="apidoc_dl">
<dt>Issuer/Well-Known Configuration URL</dt>
<dd>If you are referencing provider metadata, or reading provider metadata and then editing, you'll need to provide the <a href="basics_glossary.htm#gl_wellknownconfigurationurl">well-known configuration URL</a> (discovery URL) so that the platform can access the provider metadata. If you are doing a manual configuration, this URL is not applicable.</dd>
<dd><strong>Note</strong>: If the well-known configuration URL is HTTPS, the issuer certificate of the server must be trusted by the platform. For instructions, see <a href="bus_admin_domains.htm#p_https_cert_setup">To set up the PingFederate server certificate in Policy Manager</a>. The instructions are for PingFederate, but the steps are the same.</dd>
</dl>

<h4><a name="oidcrp_domain_tab3"></a>Tab 3: Provider</h4>
<p>On this tab, you specify basic information about your OpenID Connect identity provider. Use the information below to help determine your choices.</p>
<p>If you chose to reference provider metadata, some of the information is read in from the metadata file.</p>
<dl class="apidoc_dl">
<dt>Issuer</dt>
<dd>Enter the Issuer ID of your OpenID Connect provider.</dd>
<dd>If you provided a well-known configuration URL, the value is read from the provider's configuration file and displayed.</dd>
<dt>JWK Set URI</dt>
<dd>If your OpenID Connect provider will send an ID token signed with a private key, provide the URI for the JSON web key set where the corresponding public key can be read and used for ID token signature validation.</dd>
<dd>If you provided a well-known configuration URL, the value is read from the provider's configuration file and displayed.</dd>
</dl>
<p><strong>End-User Claims Available in</strong></p>
<table cellspacing="0px" class="doctable" style="width: 98%;">
<thead>
  <tr>
    <th width="40%">Option...</th>
    <th width="60%">Meaning...</th>
  </tr>
</thead>
<tbody>
  <tr class="t2row">
    <td>ID Token from Authorization Endpoint</td>
    <td><p>Choose this option if you want claims to be returned in the ID Token from the authorization endpoint. This is the most efficient option, but can be more complex because of the need to secure the ID token.</p>
      <p>If you choose this option, you only need to complete the first five tabs of the wizard. Tabs 6 and 7 are not necessary.</p>
      <p><strong>Note</strong>: with this option, the application communicates directly to the authorization endpoint via the user-agent; this means that the user can see the ID token. Because of this, TLS security cannot be used.</p></td>
  </tr>
  <tr class="t1row">
    <td>ID Token from Token Endpoint</td>
    <td><p>Choose this option if you want claims to be returned in the ID Token from the token endpoint. This option is a compromise between efficiency and security; it introduces a second step, but allows you to use transport-level security for securing the ID token.</p>
      <p>If you choose this option, you only need to complete the first six tabs of the wizard. Tab 7 is not necessary.</p>
      <p><strong>Note</strong>: with this option, the application communicates directly with the token endpoint. The user and user-agent do not have access to the information that's shared, which is an added security.</p></td>
  </tr>
  <tr class="t2row">
    <td>UserInfo from UserInfo Endpoint</td>
    <td><p>Choose this option if you want claims to be returned in the UserInfo response from the UserInfo endpoint, and/or for backwards compatibility with an earlier version of the developer portal. This option introduces a third step. An ID token is not involved; plain text JSON is used for claims. This option is the least efficient and least secure. It is the only option supported in earlier versions of the platform.</p>
      <p>If you choose this option, you must complete all seven tabs of the wizard.</p></td>
  </tr>
</tbody>
</table>


<h4><a name="oidcrp_domain_tab4"></a>Tab 4: Authentication</h4>
<p>On this tab, you specify values associated with user authentication and how user info is returned to you. Use the information below to help determine your choices.</p>

<dl class="apidoc_dl">
<dt>Authorization Endpoint URL</dt>
<dd>Your OpenID Connect Provider&rsquo;s authorization endpoint URL. This is where your provider authenticates the user and requests the user&rsquo;s consent to allow access to their resources.</dd>
<dd>If you provided a well-known configuration URL, the value is read from the provider's configuration file and displayed.</dd>

<dt>HTTP Method</dt>
<dd>The HTTP method to be used for the request to the authorization endpoint. POST is more secure, and is recommended. Use POST if your provider supports it.</dd>
<dd><strong>Note</strong>: In general, every server that relays the message will log query parameters, but not form parameters. For this reason, it is more secure to send information as form parameters in a POST request rather than as query parameters in a GET request.</dd>

<dt>Response Type</dt>
<dd>Indicates the type of response that the identity provider should send to the client. Choose from available values. Choices might be limited by what your provider supports. If you are doing a manual configuration, make sure you choose a response type that your provider supports. For more information, see <a href="#how_do_i_choose_which_response_type_to_use">How do I choose which response type to use?</a> below.</dd>

<dt>Response Mode</dt>
<dd>Indicates how the OpenID Connect Identity Provider should return/encode the response parameters in the Authorization response: as query parameters, as a fragment, or as HTML form parameters via HTTP POST.</dd>

<dt>Scopes</dt>
<dd>Enter one or more scopes that the relying party is requesting access to, separated by spaces. The developer portal relays the list of scopes to the authorization endpoint. If you are using OAuth and want the platform to relay a list of scopes from the inbound request, to ask the OpenID Connect provider for these scopes, use the {inbound_request_scope} placeholder. For example: name email {inbound_request_scope}. If the inbound request to the OAuth provider contains the scope email profile phone, when the relying party makes an authorization request the scope will contain the following value: openid name email profile phone. The relying party always sends the openid scope even if it is not part of the configured scope.</dd>

<dt>Use Inbound Request Client ID</dt>
<dd>Check this box if the domain will be used from the OAuth provider and you want to use the app ID of the application that is requesting the token, from the inbound request. The app ID of this domain will also be sent in the authorization request via this parameter: <strong>X_proxy_azp_client_id</strong>.</dd>

<dt>Transfer Inbound OAuth Client Redirect URI</dt>
<dd>Check this box if the domain will be used from the OAuth provider and you want to relay the Redirect URI of the application that is requesting the token, from the inbound request. The Redirect URI of this domain will also be sent in the authorization request via this parameter: <strong>X_proxy_redirect_uri</strong>.</dd>

<dt>Transfer OAuth Grant ID</dt>
<dd>Check this box if the domain will be used from the OAuth provider and you want to relay the Grant ID corresponding to the inbound authorization request. The Grant ID will be sent in the authorization request via this parameter: <strong>GrantID</strong>.</dd>
</dl>

<p><strong>Prompt</strong></p>
<p>Specify what prompt, if any, the Authorization Server should offer to the user. For additional information, refer to the table below.</p>
<table cellspacing="0px" class="doctable" style="width: 98%;">
<thead>
  <tr>
    <th width="40%">Option...</th>
    <th width="60%">Meaning...</th>
  </tr>
</thead>
<tbody>
  <tr class="t2row">
    <td>None</td>
    <td>The authentication server must not display any authentication or consent pages to the user. The user must already be authenticated.</td>
  </tr>
  <tr class="t1row">
    <td>Login</td>
    <td>The Authorization Server must prompt the user to log in and authenticate.</td>
  </tr>
  <tr class="t2row">
    <td>Consent</td>
    <td>The Authorization Server must prompt the user to give explicit consent for access.</td>
  </tr>
  <tr class="t1row">
    <td>Select_account</td>
    <td>The Authorization Server will prompt the user to select an account (for scenarios where users might have multiple accounts).</td>
  </tr>
  <tr class="t2row">
    <td>Delegate</td>
    <td>The domain will be used from the OAuth Provider and the prompt value received in the inbound request, from the application that is requesting the token, will be relayed.</td>
  </tr>
</tbody>
</table>


<h4><a name="oidcrp_domain_tab5"></a>Tab 5: App</h4>
<p>On this tab, you specify the two values, App ID and Shared Secret, that uniquely identify your app with your OpenID Connect identity provider.</p>
<p><strong>Is Platform Identity</strong>: Check this box if the credentials for the application are associated with an identity in Policy Manager. For symmetric encryption, storing credentials in a platform identity is recommended; for asymmetric encryption, it is required, since the UI collects only the app Shared Secret value. For more information, see <a href="bus_admin_domains.htm#why_platform_identity">Should I set up a platform identity, or provide the credentials in the domain configuration?</a></p>
<p>If you are configuring your domain by dynamically referencing the provider URL, this completes the domain setup, and you can save and close the wizard.</p>


<h4><a name="oidcrp_domain_tab6"></a>Tab 6: Token</h4>
<p>If in the Provider tab you chose <strong>ID Token from Token Endpoint</strong> as the way end-user claims would be returned to your app, you must provide values for receiving the token.</p>
<p>You only need to provide information on this tab if you are manually configuring your information, either completely or by starting with the information at the well-known configuration URL. If your domain setup dynamically references the well-known configuration URL, Tab 5 completes the setup.</p>

<dl class="apidoc_dl">
<dt>Token Endpoint URL</dt>
<dd>Your OpenID Connect Provider&rsquo;s token endpoint URL. The token endpoint authenticates the relying party&rsquo;s request for access. Once authentication is complete, it returns an access token.</dd>
<dd>If you provided a well-known configuration URL, the value is read from the provider's configuration file and displayed.</dd>

<dt>Client Authentication Method</dt>
<dd>The method that the token endpoint uses to authenticate the relying party (app). Make sure the option you choose is supported by your OpenID Connect provider. Values supported by the platform are:</dd>
<dd>- client_secret_basic</dd>
<dd>- client_secret_post</dd>
<dd>- client_secret_</dd>
<dd>If you provided a well-known configuration URL, only choices supported by your provider are displayed.</dd>

<dt>ID Token: Is symmetric key Base64 encoded?</dt>
<dd> If you have an OpenID Connect provider that uses the URL-safe Base64-decoded shared secret as the symmetric key for signing the ID token, such as Auth0, check this box.</dd>
<dd>When a symmetric signature algorithm such as HS256 is used, some OpenID Connect providers may Base64-decode the client's shared secret to come up with the secret key to sign the ID token. Certain OpenID Connect providers, such as Auth0, assume by default that the client secret is Base64-encoded. In this case, if the OpenID Connect provider is configured to sign the ID tokens using the symmetric signature algorithm, it will use Base64 URL-decoded bytes of the client secret as the symmetric signing key.</dd>
<dd>When this box is checked, the platform decodes the client secret first and then uses the symmetric key to verify the id_token signature. Note that in Base64 decoding, + (plus sign) and - (minus sign) both decode to 62; in addition, / (forward slash) and _ (underscore) both decode to 63. Invalid Base64 characters in the shared secret are skipped when decoding the client's secret. If the client's secret contains one or more padding = (equals) signs, the Base64 decoder skips any characters after the first = sign including the padding character itself.</dd>

</dl>

<h4><a name="oidcrp_domain_tab7"></a>Tab 7: User</h4>
<p>On this tab, you specify information relating to the UserInfo endpoint.</p>
<p>In each of the Claim fields in this tab, the default value is the standard claim name. If you use custom claim names, you can use these fields to specify the names you're using. For more information on <a href="basics_glossary.htm#gl_claim">claims</a>, refer to the <a href="http://openid.net/specs/openid-connect-core-1_0.html#StandardClaims" target="_blank">OpenID Connect specification, Standard Claims list</a>. </p>

<dl class="apidoc_dl">
<dt>UserInfo Endpoint URI</dt>
<dd>Your OpenID Connect Provider's UserInfo Endpoint URL. If you chose to have claims returned from the UserInfo endpoint, the client sends the access token to this endpoint, with information about the claims for which the user granted access permission, and the UserInfo Endpoint returns the user information in the form of a JSON object.</dd>
<dd>If you provided a well-known configuration URL, the value is read from the provider's configuration file and displayed.</dd>

<dt>HTTP method</dt>
<dd>The HTTP method to be used for the message to the UserInfo endpoint. POST is more secure, and is recommended. Use POST if your provider supports it.</dd>
<dt>Subject Claim</dt>
<dd>Optionally, you can specify the <a href="basics_glossary.htm#gl_claim">claim</a> name that refers to the subject identifier in /UserInfo claims. Default claim name: <strong>sub</strong>.</dd>
<dt>First Name Claim</dt>
<dd>Optionally, you can specify the claim name that refers to the first name of the user in /UserInfo claims. Default claim name: <strong>given_name</strong>.</dd>
<dt>Last Name Claim</dt>
<dd>Optionally, you can specify the claim name that refers to the last name of the user in /UserInfo claims. Default claim name: <strong>family_name</strong>.</dd>
<dt>Email Claim</dt>
<dd>Optionally, you can specify the claim name that refers to the user's email address in /UserInfo claims. Default claim name: <strong>email</strong>.</dd>
</dl>
<p><a href="#top">Back to top</a></p>


<a name="how_do_i_choose_which_response_type_to_use"></a><h3>How do I choose which response type to use?</h3>
<p>When you're configuring your OpenID Connect Relying Party domain, you'll need to choose a <strong>Response Type</strong> in <strong>Tab 4, Authentication</strong>. See <a href="#how_do_i_configure_an_openid_connect_relying_party_domain">How do I configure an OpenID Connect Relying Party domain?</a> above.</p>
<p>When you make choices earlier in the wizard, including manually providing values from your OpenID Connect Provider or reading in information from a Well-Known Configuration URL, the platform dynamically modifies the list so that you are only offered valid choices. However, there might be several options. The full set of possible options is shown below.</p>
<ul>
  <li>ID Token from Authorization Endpoint (platform required <strong>id_token</strong>):
<ul>
      <li>id_token</li>
      <li>id_token token</li>
      <li>code id_token</li>
      <li>code id_token token</li>
    </ul>
  </li>
  <li>ID Token from Token Endpoint (platform requires <strong>code</strong>):
<ul>
      <li>code</li>
      <li>code id_token</li>
      <li>code token</li>
      <li>code id_token token</li>
    </ul>
  </li>
  <li>UserInfo from UserInfo Endpoint (platform requires either <strong>code</strong> or <strong>token</strong>):
<ul>
      <li>code</li>
      <li>id_token token</li>
      <li>code id_token</li>
      <li>code token</li>
      <li>code id_token token</li>
    </ul>
  </li>
  </ul>
<p>The response type determines what gets returned in the response. From the perspective of the platform as an OpenID Relying Party, any available option is valid. The platform&rsquo;s minimum requirements for each of the choices are as follows:</p>
<ul>
  <li><strong>ID Token from Authorization Endpoint</strong>: The ID token (JWK token) is all that the platform requires, so the minimum requirement is <strong>id_token</strong>. The platform doesn't require code or token in the response_type. However, you might choose to include either or both of these values if your Identity Provider uses them.</li>
  <li><strong>ID Token from Token Endpoint</strong>: The platform gets the JWK token from the Token Endpoint. In order to send the response from the token endpoint, the OpenID Connect provider requires an authorization code as proof that the user has authorized the client to obtain the user profile. A response_type value of code returns the authorization code, which the app can then provide to the Token Endpoint to obtain the ID token. The Token Endpoint response also includes access_token; this can be ignored, since the id_token value includes the user profile information.
  <p>In this case, the platform's  minimum requirement for the response_type parameter is <strong>code</strong>. The token and id_token are not required. However, you might choose to include either or both of these values if your Identity Provider uses them.</p></li>
  <li><strong>UserInfo from UserInfo Endpoint</strong>: The platform gets the userinfo from the UserInfo Endpoint. To do that, the platform needs to get the access token, either from the Authorization Endpoint or from the Token Endpoint. To get the access token from the Authorization Endpoint, it must get the token. To get the access token from the token endpoint, it needs the code. So either <strong>code</strong> or <strong>token</strong> should be there in the response type.
<p>If you select <strong>code</strong>, there are three steps to the process flow: go to the Authorization Endpoint, then the Token Endpoint, and then the UserInfo Endpoint.</p>
<p>If you select <strong>token</strong>, there are two steps to the process flow: go to the Authorization Endpoint and then the UserInfo Endpoint. In this scenario, it&rsquo;s not necessary to go to the Token Endpoint, because the platform gets the access token directly from the Authorization Endpoint.</p>
<p>However, there are also security implications to these choices. The token is delivered via the browser, which is not as secure because it could potentially be captured by another application. Anything exchanged directly between the client and the Token Endpoint is much more secure. So, <strong>code</strong> is more secure, but <strong>token</strong> gives better performance.</p>
</li>
</ul>
<p>As well as the platform&rsquo;s minimum requirements, your OpenID Connect provider might have requirements, or might offer a different behavior based on your choice. If you&rsquo;re not sure which option to choose, consult with your OpenID Connect provider to determine what&rsquo;s best for your use case.</p>
<p><a href="#top">Back to top</a></p>



<div class = "divider1"></div>



<h3 id="related_topics">Related Topics</h3>
<table width="98%" border="0" cellspacing="0" cellpadding="2" class="doctable">
  <tr>
    <td width="33%"><ul>
      <li><a href="bus_admin_.htm">Business Admin Summary Page</a></li>
      <li><a href="bus_admin_overview.htm">Business Admin Responsibilities</a></li>
      <li><a href="bus_admin_organizations.htm">Organizations</a></li>
      <li><a href="bus_admin_export_import.htm">Export/Import</a></li>
      <li><a href="bus_admin_bus_admin.htm">Business Admins</a></li>
    </ul>
</td>
    <td width="33%"><ul>
      <li><a href="bus_admin_apis.htm">Organization APIs</a></li>
      <li><a href="bus_admin_apps.htm">Organization Apps</a></li>
      <li><a href="bus_admin_dzs.htm">Managing Deployment Zones</a></li>
      <li><a href="bus_api_admin_forum.htm">Forum Moderation</a></li>
      <li><a href="bus_admin_licenses.htm">Licenses</a></li>
      <li><a href="bus_admin_scopes.htm">Scopes</a></li>
    </ul></td>
    <td width="33%"><ul>
      <li><a href="bus_admin_domains.htm">Domains</a></li>
      <li><a href="bus_admin_domains_eoap.htm">External OAuth Provider Domain</a></li>
      <li><a href="bus_admin_ov_pf_endtoend.htm">PingFederate Setup</a></li>
      <li><a href="basics_glossary.htm">Glossary of Terms</a></li>
    </ul>
</td>
  </tr>
</table>
