---
layout: page
title: Using the API Consumer Application Security Policy
description: Learn how to configure authentication methods used to identify  an application that is attempting to consume an API.
product: ag
category: learn
sub-nav-class: Community Manager
weight:	11
subcategory:
type: page
nav-title: Using the API Consumer Application Security Policy

---
   <h2 name="top">Using the API Consumer Application Security Policy</h2>
    <p>Learn how to configure authentication methods used to identify  an application that is attempting to consume an API.</p>

      </ul>
  <a href="../policies/policy_management.htm" class="button secondary">Managing Policies</a>

    <p></p>

       <div class = "divider1"></div>
     <h3 style="color: gray;">Table of Contents</h3>

     <ol class="table_of_contents">

   <li><a href="#introduction">Introduction</a></li>


    <li><a href="#configuration">Configuration</a></li>


    </ol>
    <div class = "divider1"></div><p></p>

  <a name="introduction">
  <h3>Introduction</h3></a>

  <p>The &quot;API Consumer Application Security Policy&quot; is used to identify (authenticate) an application that is attempting to consume an API to determine if it is authorized or not. This policy type supports multiple mechanisms for the App to present its identity. See <em>Configuration Options</em> (below) for a list of supported authentication methods. </p>
  <p><em>Note: Use of this policy is reserved for API Administrators of the Community Manager application. </em></p>
  <h5>Configuration Options</h5>
  <p>The policy includes the following configuration options:</p>
  <p><strong>No Signature</strong></p>
  <p>A checkbox that allows you to perform authentication with no signature. If  enabled (checkbox selected), selection of algorithms is disabled. If disabled  (checkbox unselected), algorithms are enabled. </p>
  <p><strong>Algorithm(s)</strong></p>
  <p>If <strong>No Signature</strong> is disabled, configure one or more authentication algorithms based on your requirements. The authentication method(s) selected are based on the protocols supported by your API. </p>
  <p><em>Note: If your API supports OAuth the API Consumer Security Policy is not required. Refer to the <a href="http://docs.soa.com/ag/cm_policies/using_oauth_security_policy.htm">Using the OAuth Security Policy</a> or <a href="http://docs.soa.com/ag/cm_policies/using_oauth1a_security_policy.htm">Using the OAuth 1.0a Security Policy</em></a>.</p>

  <ul class="usingOrderedList">

    <li><strong>SHA1 (Shared Secret)</strong> -  SHA1 hash function.</li>
    <li><strong>SHA1 with RSA</strong> -  RSA encryption algorithms with SHA1  hash function.</li>
    <li><strong>SHA256 with RSA</strong> - RSA encryption algorithms with SHA-256 (32-bit words) hash function.  </li>
    <li><strong>HMAC SHA1</strong> - Keyed-hash message authentication code  with SHA1  hash function.</li>
    <li><strong>HMAC SHA256</strong> - Keyed-hash message authentication code  with  SHA-256 (32-bit words) hash function.  </li>
    <li><strong>Authorization Header Scheme</strong> - The name of the authorization header scheme.</li>
    <li><strong>Authorization Header Parameters Prefix</strong> - The authorization header parameters prefix.</li>
    <li><strong>Cookie Name</strong> - Name of the API authentication cookie. </li>
    <li><strong>ClockSkew (in seconds)</strong> -  Specify the clock skew (in seconds) that will be used to <SPAN lang="EN" xml:lang="EN">synchronize timestamps  across hosts.</SPAN></li>
  </ul>
  <p><a href="#top">Back to top</a></p>


  <a name="configuration">
  <h3>Configuration</h3></a>


  <p>Let's take a quick walkthrough of the API Consumer Application Security Policy configuration process to get your started.
  </p>
  <h5>Step 1: Add Policy</h5>

    <p>You can create an API Consumer Application Security Policy   instance using <strong>Add Policy</strong> in the <em>Policies &gt; Operational Policies</em> section.</p>
    <h5>Step 2: Modify Policy</h5>
  <p>When you <strong>Modify</strong> the API Consumer Application Security Policy on the <em>Policy Details</em> page the initial policy will look like this. The <strong>No Signature</strong> checked option provides a simple header security (e.g.,  ApplicationSecurityUnsigned) default policy. </p>
  <p><img src="images/modify_api_con_app_sec_policy.jpg" width="459" height="445"></p>
  <p>Another common simple header security policy for Community Manager applications provides SHA1 - Shared Secret (e.g.,  ApplicationSecuritySigned) support as follows: </p>
  <p><img src="images/shared_secret_default.jpg" width="445" height="438"></p>
  <p>You can get started using the default policy configurations (provided here), and then expand your configuration based on your requirements:</p>
  <h5>Step 2: Assign Policy to API in Community Manager</h5>
  <p>After you configure the policy, launch  Community Manager and  assign the policy:</p>
  <p>On the <em>API Details</em> page, select <strong>Edit</strong>, go to the <em>Proxy</em> page, select (e.g.,  <strong>ApplicationSecurityUnsigned</strong>), and save the configuration.</p>
  <p><img src="images/edit_api_menu.jpg" width="124" height="154"><img src="images/select api consumer policy.jpg" width="296" height="53"></p>
  <p>To verify  the policy is attached to the API in Policy Manager, launch the <em>Policy Manager Management Console</em>, go to the <em>Services</em> folder and select the service (i.e., API) that is added to the <em>Community Manager</em> portal. The policy will display in the <em>Policy Attachments &gt; Operational</em> section as illustrated below.</p>
  <p><img src="images/api_consumer_assign_policy.jpg" width="504" height="194"><br>
  </p>
<p><a href="#top">Back to top</a></p>
<div class = "divider1"></div>