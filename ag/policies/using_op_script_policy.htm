---
layout: page
title: Using the Operational Script Policy 7.x
description: Learn how to create your own custom policy and associate it with different components of a service's definition (e.g., organizations, services, operations, bindings, and access points).
product: ag
category: learn
sub-nav-class: Policies - Operational
weight: 04
type: page
nav-title: Operational Script (7.x)
---
<h2 id="top">Using the Operational Script Policy (7.x)</h2>
<p>Learn how to create your own custom policy and how to associate it with different components of a service's definition (organizations, services, operations, bindings, and access points).</p>

<p>
<a href="about_policies_view.htm" class="button secondary">About Policies</a>  
<a href="policy_management.htm" class="button secondary">Managing Policies</a>  
<a href="../apidoc_scripting_api_all.htm" class="button secondary">Policy Manager Scripting API</a>
</p>

<h5 class="stamp">Supported Platforms: 7.2</h5>

<div class = "divider1"></div>



<h3 style="color: gray;">Table of Contents</h3>
<ol class="table_of_contents">
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#configuration">Configuration</a></li>
</ol>
<div class = "divider1"></div>



<a name="introduction"></a><h3>Introduction</h3>
<p>The Operational Script Policy allows you create your own custom policy using custom utility scripts that you can associate with different components of a service's definition (organizations, services, operations, bindings, and access points). Scripts can be defined using JavaScript, Jython, or BeanShell script languages.</p>
<p>The Policy Manager Scripting API, located in the \docs\scriptDocs folder of the Policy Manager installation folder, provides a series of interfaces and classes you can use to build process-related scripts. The API includes lots of use cases and sample code you can experiment with and use as a baseline when building your own custom operational policy scripts.</p>
<p>You can also access the API on the Akana docs site: <a href="../apidoc_scripting_api_all.htm" >Policy Manager Scripting API</a>.</p>
<p><em><strong>Note</strong>: This policy is considered <strong>Private</strong> and is not available to the Network Director when attached to a physical service.</em></p>
<h5>Configuration Options</h5>
<p>The policy includes the following configuration options:</p>
<ul>
  <li><strong>Imports</strong>: This section includes common functions that you might need to perform in your scripts that have been saved in Script objects, using the <strong>Policy Manager</strong> &gt; <strong>Workbench</strong> &gt; <strong>Organization</strong> &gt; <strong>Scripts</strong> &gt; <strong> Add Script</strong> function. The available scripts are listed in the <strong>Available Scripts</strong> tree. You can move any number of the scripts in that tree to the <strong>Imported Scripts</strong> list box. Only scripts that match the language type are available for selection in the tree.</li>
  <li><strong>Script Language</strong>: A drop-down list box that allows you to select the script language for the script to be added. Supported options: JavaScript, Jython, and BeanShell Engine script language types.</li>
  <li><strong>Expression</strong>: A text box that allows you to enter your script.</li>
  <li><strong>Test Script</strong>: A button that allows you to test the entered expression to make sure it is properly formed.</li>
</ul>



<a name="configuration"></a><h3>Configuration</h3>
<p>Let's take a quick walkthrough of the Policy configuration process to get you started.</p>
<h5>Step 1: Review Script Creation Process</h5>
<p>The first step is to review the following documentation, to become familiar with the script creation process, available tools, and the Policy Manager scripting API:</p>
<ul>
  <li><a href="../scripts/getting_started_with_scripts.htm">Getting Started with Scripts</a></li>
  <li><a href="../apidoc_scripting_api_all.htm">Policy Manager Scripting API</a></li>
</ul>
<h5>Step 2: Add Policy</h5>
<p>In Policy Manager, to create an Operational Script Policy instance, go to <strong>Policies</strong> &gt; <strong>Operational Policies</strong> and choose <strong>Add Policy</strong>.</p>
<h5>Step 3: Modify Policy</h5>
<p>When you click <strong>Modify</strong> to make changes to the Operational Script Policy on the <strong>Policy Details</strong> page, the initial policy looks like this:</p>
<p><img src="images/modify_op_script_policy.jpg" alt="" /></p>
<p>To illustrate how to use the policy, we are going to add script code that will generate an Alert that we can check at the registry level.</p>
<p>In the <em>Source</em> section, select <strong>JavaScript</strong> as the Script Language, add the following code to the Expression section, and save the policy:</p>
<pre>alerter.alert(&quot;12121212&quot;,&quot;Operational Script policy Enforced&quot;);</pre>
<p><img src="images/op_script_alert_code.jpg" alt="" /></p>
<h5>Step 4: Attach Policy</h5>
<p>After you've saved your policy, attach it to a web service operation.</p>
<p><img src="images/attach_op_script_policy.jpg" alt="" /></p>
<h5>Step 5: Test Policy</h5>
<p>To test the policy, send a request, and then view the <em>Alerts</em> portlet in the <strong>Registry</strong> of the Organization Tree. An alert is generated for each request sent.</p>
<p><img src="images/op_script_alert_example.jpg" alt="" /></p>
<p><a href="#top">Back to top</a></p>

