---
layout: page
title: Using the Operational Script Policy
description: Learn how to create your own custom policy and associate it with different components of a service's definition (e.g., organizations, services, operations, bindings, and access points).
product: ag
category: learn
weight:	5
type: page
nav-title: Using the Operational Script Policy
---
  <h2 name="top">Using the Operational Script Policy</h2>
  <p>Learn how to create your own custom policy and associate it with different components of a service's definition (e.g., organizations, services, operations, bindings, and access points). </p>

  <p>NOTE: This policy type is only available with Policy Manager version 7.1 and greater.</p>


<a href="../scripts/getting_started_with_scripts.htm" class="button secondary">Getting Started with Scripts</a>


 <a href="policy_management.htm" class="button secondary">Managing Policies</a>


 <a href="../assets/scriptDocs/index.html" class="button secondary">Policy Manager Scripting API</a><br> <br>




  <div class = "divider1"></div>
   <h3 style="color: gray;">Table of Contents</h3>

   <ol class="table_of_contents">

 <li><a href="#introduction">Introduction</a></li>

  <li><a href="#configuration">Configuration</a></li>


  </ol>
  <div class = "divider1"></div><p></p>



<a name="introduction">
<h3>Introduction</h3></a>

<p>The Operational Script Policy allows you create your own custom policy using custom utility scripts that you can associate with different components of a service's definition (e.g., organizations, services, operations, bindings, and access points). Scripts can be defined using JavaScript, Jython, or BeanShell script languages.</p>
<p>The Policy Manager Scripting API located in the \sm70\docs\scriptDocs folder of the Policy Manager 7.x Release Folder provides a series of interfaces and classes you can use to build process related scripts. The API includes lots of use cases and sample code you can experiment with and use as a baseline when building your own custom operational policy  scripts. You can also access the API on the SOA Software Documentation Repository: <a href="http://docs.soa.com/ag/assets/index.html" >Policy Manager Scripting API</a></p>
<h5>Configuration Options</h5>
<p>The policy includes the following configuration options:<br>
</p>
<ul class="usingOrderedList">
  <li><strong>Imports</strong> - Common functions that you may need to perform in your scripts that have been saved in Script objects using the Add Script function in the Scripts section of each Organization in the Policy Manager Workbench are listed in this section. The available scripts are listed in the Available Scripts tree. Any number of Scripts in that tree can be moved to the Imported Scripts list box. Only scripts that match the language type will be available for selection in the tree. </li>
  <li><strong>Script Language</strong> - A drop-down list box that allows you to select the script language for the script    to be added. JavaScript, Jython, and BeanShell Engine script language types are supported.<br>
  </li>
  <li><strong>Expression </strong> - A text box that allows you to enter your script.</li>
  <li><strong>Test Script</strong> - A button that allows you to test the entered expression to determine if it is properly<br>
    formed.</li>
</ul>
<a name="configuration">
<h3>Configuration</h3></a>
<p>Let's take a quick walkthrough of the Policy configuration process to get your started.</p>
<h5>Step 1: Review Script Creation Process</h5>
<p>The first step is to review  <a href="getting_started_with_scripts.htm" >Getting Started with Scripts</a> to become familiar with the script creation process, available tools, and the   <a href="http://docs.soa.com/ag/assets/index.html" >Policy Manager Scripting API</a>.</p>
<h5>Step 2: Add Policy</h5>
<p>In Policy Manager, you can create a Operational Script Policy instance using <strong>Add Policy</strong> in the <em>Policies &gt; Operational Policies</em> section. </p>
<h5>Step 3: Modify Policy</h5>
<p>When you <strong>Modify</strong> the Operational Script Policy  on the <em>Policy Details</em> page the initial policy will look like this:</p>
<p><img src="images/modify_op_script_policy.jpg" width="594" height="415"></p>
<p>To illustrate how to use the policy, we are going to add  script code that will generate an Alert that we can check at the registry level. </p>
<p>In the <em>Source</em> section, select  <strong>JavaScript</strong> as the Script Language,  add the following code to the Expression section and save the policy:</p>
<p><strong>alerter.alert(&quot;12121212&quot;,&quot;Operational Script policy Enforced&quot;);</strong></p>
<p><img src="images/op_script_alert_code.jpg" width="547" height="396" /></p>
<h5>Step 4: Attach Policy</h5>
<p>After you have saved your policy   attach it to a web service   operation. </p>
<p><img src="images/attach_op_script_policy.jpg" width="654" height="221"></p>
<h5>Step 5: Test Policy</h5>
<p>To test the policy, send a request and view the <em>Alerts</em> portlet in the <strong>Registry</strong> of the Organization Tree. An alert will be generated for each request sent.</p>
<p><img src="images/op_script_alert_example.jpg" width="638" height="162" /></p>
<p><a href="#top">back to top</a>
</p>
<div class = "divider1"></div>