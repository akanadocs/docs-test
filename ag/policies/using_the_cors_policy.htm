---
layout: page
title: Using the CORS Policy
description: Learn how to manage cross-origin requests for REST APIs using the CORS (Cross Origin Resource Sharing) Policy.
product: ag
category: learn
sub-nav-class: Security
weight:	5
sub-nav-class: Operational Policies
type: page
nav-title: Using the CORS Policy
---
  <h2 name="top">Using the CORS Policy</h2>
  <p>Learn how to manage cross-origin requests for REST APIs using the CORS (Cross Origin Resource Sharing) Policy.</p>

  <p>NOTE: This topic  describes features only available in API Gateway version 7.0 or greater.</p>
  
  <a href="../assets/cors_policy_use_cases.pdf" target="_blank" class="button secondary">Use Cases</a>
  

<a href="policy_management.htm" class="button secondary">Managing Policies</a>

  <p></p>

  <div class = "divider1"></div>
   <h3 style="color: gray;">Table of Contents</h3>

   <ol class="table_of_contents">

 <li><a href="#introduction">Introduction</a></li>

  <li><a href="#scope">Scope</a></li>


  <li><a href="#assertion">CORS Policy Assertion</a></li>


  <li><a href="#configuration">Configuration</a></li>


  </ol>
  <div class = "divider1"></div>
  <a name="introduction">
  <h3>Introduction</h3></a>

<p> CORS (Cross Origin Resource Sharing)  enables users to access  resources from within the browser serving a web page  and defines  a way in which the browser and the server can interact to determine whether or not to allow the cross-origin request. This technique is commonly used on the web to   load  (i.e., share) resources such as CSS style sheets, images, scripts, and other resources in a cross-site manner. Refer to the &quot;Cross-origin resource sharing&quot; wiki page for technical overview of CORS functionality. </p>
<p>Many HTTP (REST) APIs require support for CORS. Policy Manager provides a   CORS Policy that dictates how CORS requests or headers should be processed.</p>
<a name="scope">
  <h3>Scope</h3></a>
<p>A CORS policy applies only to REST APIs, or service endpoints implementing the HTTP binding. Accordingly the CORS assertion is allowed to have the following Policy Subjects as defined in the WS-PolicyAttachment specification:</p>
<ul class="usingOrderedList">
  <li>Endpoint Policy Subject</li>
  <li>Binding Policy Subject</li>
</ul>
<p>WS-PolicyAttachment defines a set of WSDL/1.1 policy attachment points for each of the above Policy Subjects. A CORS policy assertion can be attached to the following physical WSDL policy attachment points.</p>
<ul class="usingOrderedList">
  <li>wsdl:port</li>
  <li>wsdl:binding</li>
</ul>
<p>A CORS policy dictates behavior that is not required by a consumer in order to exchange messages between a consumer and a Provider. Instead it dictates behavior that a provider must follow only. Therefore it is recommended that CORS policies be classified as &ldquo;public&rdquo; by including the gmp:Visibility attribute in the enclosing wsp:Policy element with a value of &ldquo;public.&rdquo;</p>
  <p>The following is an example of a CORS policy attached to WSDL components:</p>
<p><img src="images/cors_policy_attachedwsdl.jpg" width="580" height="408" /></p>
<p>Lines 02 through 06 contain a policy named "CORS" that holds a CORS assertion. The CORS policy is applied to the "ep1" endpoint on line 28.</p>

<p><a href="#top">Back to top</a></p>
<h3><a name="assertion">CORS Policy Assertion</a></h3>
<p>The CORS assertion specifies how responses to CORS requests, simple or preflight, will be made. Each CORS response header, with the exception of Access-Control-Request-Method, is represented with a sub-assertion to identify how it should be returned. The Access-Control-Request-Method response is determined by the API definition.</p>
<p>The syntax of the CORS policy assertion is as follows: </p>
<h5>Syntax</h5>
<p><img src="images/cors_assertion_syntax.jpg" width="600" height="240"></p>
<dl>
  <dt>cors:CORS</dt>
  <dd>CORS  assertion element.</dd>
</dl>
<dl>
  <dt>cors:CORS/wsp:Policy</dt>
  <dd>This element defines additional requirements for the CORS policy. </dd>
</dl>
<dl>
  <dt>cors:CORS/wsp:Policy/cors:AllowOrgins</dt>
  <dd>This mandatory element is an assertion that specifies the set of origins that are allowed. If no child elements (allowed origins) are defined,  Access-Control-Allow-Origin response header is not displayed.</dd>
</dl>
<dl>
  <dt>cors:CORS/wsp:Policy/cors:AllowOrigins/cors:Origin</dt>
</dl>
<dl>
  <dd>This optional string element identifies an allowed origin. The string can either be a host name by itself or a protocol schema and host such as http://acme.com. If no scheme is specified all schemes for that host are allowed.</dd>
</dl>
<dl>
  <dt>cors:CORS/wsp:Policy/cors:AllowCredentials</dt>
  <dd>This optional element is an assertion that when present indicates that the Access-Control-Allow-Credentials response header will be &ldquo;true.&rdquo; When absent it will be &ldquo;false.&rdquo;</dd>
</dl>
<dl>
  <dt>cors:CORS/wsp:Policy/cors:ExposeHeaders</dt>
  <dd>This optional element is an assertion that specifies what headers should be returned in the Access-Control-Expose-Headers response header. If not present no headers will be returned. </dd>
</dl>
<dl>
  <dt>cors:CORS/wsp:Policy/cors:ExposeHeader/cors: Header</dt>
  <dd>This optional string element identifies an exposed header. </dd>
</dl>
<dl>
  <dt>cors:CORS/wsp:Policy/cors:AllowHeaders</dt>
  <dd>This optional element is an assertion that specifies what headers should be returned in the Access-Control-Allow-Headers response header. If not present no headers will be returned. </dd>
</dl>
<dl>
  <dt>cors:CORS/wsp:Policy/cors:AllowHeaders/cors:Header</dt>
  <dd>This optional string element identifies an allowed header.</dd>
</dl>
<dl>
  <dt>cors:CORS/wsp:Policy/cors:MaxAge</dt>
  <dd>This optional element defines the time period in seconds. When the max age is set, a CORS request will not need to be preflighted, if it has already been preflighted, and falls within the max age duration. </dd>
</dl>
<dl>
  <dt>cors:CORS/wsp:Policy/cors:MaxAge /@duration</dt>
  <dd>This mandatory integer attribute holds the value that will be returned in the Access-Control-Max-Age response header. </dd>
</dl>
<p>
  An example of a CORS policy is illustrated below:</p>
</dl>
<img src="images/cors_policy_example.jpg" width="603" height="210"><br><br>

<p>The acme.com origin is permitted only on line 05. Credentials are allowed on line 07. The X-PINGOTHER header is allowed on line 09. A max duration of 3600000, or one hour, is stated on line 11. The CORS response headers that will be returned to a preflight request with an Origin of http://acme.com are shown below. </p>
<p><em><strong>Note:</strong> Allowed Methods are outside the scope of the CORS Policy. Policy Manager returns methods based on how the service is defined. For example, if you defined a REST service in Policy Manager and defined operating using HTTP methods, Policy Manager would return the HTTP methods you defined for the service. </em></p>
<p><img src="images/cors_policy_example_accesscontrol.jpg" width="602" height="59"></p>
<p>Note there is no Access-Control-Expose-Headers response header as there was no assertion present. Since the policy did not specify a protocol scheme for the allowed origin a request with an Origin header of https://acme.com would have also been permitted.</p>
<h5>Configuration Options</h5>
<p>The policy includes the following configuration options:</p>
<table width="515" cellspacing="0px" class="doctable">
  <thead>
    <th width="155">Option</th>
    <th width="333">Description</th>
    <td width="19"></thead>
    <tr class="t2row">
      <td height="36">Max Age</td>
      <td>This optional element defines the time period in seconds. When the max age is set, a CORS request will not need to be preflighted, if it has already been preflighted, and falls within the max age duration.</td>
    </tr>
  <tr class="t1row">
    <td>Allow Credentials</td>
    <td>Enable sending credentials (i.e., cookies and HTTP Authentication data) with requests. </td>
  </tr>
  <tr class="t2row">
    <td height="91">Allow Origins</td>
    <td><p>List of origin domains that are permitted to make a request against the service via CORS.  The origin domain is the domain from which the request originates</p>
      <p>If no child elements (allowed origins) are defined,  Access-Control-Allow-Origin response header is not displayed.<br>
        <br>
        Each header can include one domain.<br>
        <br>
    </p></td>
  </tr>
  <tr class="t1row">
    <td>Allow Headers</td>
    <td>Request headers that the origin domain may specify on the CORS request. </td>
  </tr>
  <tr class="t2row">
    <td>Expose Headers</td>
    <td>Response headers that may be sent in the response to the CORS request and exposed by the browser to the request issuer. </td>
  </tr>
</table>
<p><a href="#top">Back to top</a></p>

<a name="configuration">
<h3>Configuration</h3>
</a>
<p>Let's take a quick walkthrough of the CORS Policy configuration process to get you started.</p>
<h5>Step 1: Add Policy</h5>
<p>You can create a CORS   Policy instance using <strong>Add Policy</strong> in the <em>Policies &gt; Operational Policies</em> section.. </p>

<h5>Step 2: Modify Policy</h5>
<p>When you <strong>Modify</strong> the CORS  Policy on the <em>Policy Details</em> page the initial policy will look like this:</p>
<p><img src="images/cors_modify_policy.jpg" width="482" height="519"></p>

<p>Configure the CORS Options based on your requirements. </p>
<h5>Step 3: Attach Policy</h5>
<p>After you have saved your policy you can  attach it to a web service at the  Service  level.</p>
<p><img src="images/cors_attach_policy.jpg" width="648" height="252"></p>
<h5>Step 4: Test Policy and View Monitoring Data</h5>
<p>After you attached the CORS Policy to a service, send a request to your service and view the results in your client. You can also go to the  <em>Services &gt; Monitoring</em> section to view the results for Logs (i.e., View Usage Record Details), Real Time Charts, and Historical Charts. Refer to the Policy Manager Online Help (i.e., Help button) for more information on the using the monitoring functions. </p>
<ul class="usingOrderedList">
  <li>If CORS is enabled for the service and there is a CORS policy assertion that matches the preflight request, the service responds with a status code 200 (OK), and includes the required Access-Control headers in the response.</li>
  <li>If CORS is not enabled for the service, the request is not preflighted. </li>
  <li>If the request does not contain the required CORS headers, the request is not preflighted and continues to run normally, and the browser behaves accordingly. </li>
  <li>If the Origin header is present, this  indicates that the request is a CORS request. The service will then check  the matching CORS policy assertion configuration for a match. If found,  the Access-Control headers are added to the response and sent back to the client. If not found,  the CORS Access-Control headers are not returned. </li></ul>
<p>Review the <a href="cors_policy_use_cases.pdf" >usage scenarios</a> for more information on the configuration and test cycle. </p>
<p><a href="#top">Back to top</a></p>

<div class = "divider1"></div>