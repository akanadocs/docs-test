---
layout: page
title: Using the HTTP Malicious Patterns Detection Policy in Policy Manager 7.x
description: Learn how to use regular expressions or java markup tags in an HTTP Malicious Pattern Policy to inspect HTTP messages for malicious content.
product: ag
category: learn
sub-nav-class: Security
weight:	5
sub-nav-class: Operational Policies
type: page
nav-title: Using the HTTP Malicious Pattern Policy
---

<h2 name="top">Using the HTTP Malicious Patterns Detection Policy</h2>
<p>Learn how to use regular expressions or java markup tags in an HTTP Malicious Patterns Detection Policy to inspect messages for malicious content, and reject them, returning a fault, if a match is found.</p>

<a href="policy_management.htm" class="button secondary">Managing Policies</a>

  <p></p>


  <div class = "divider1"></div>
   <h3 style="color: gray;">Table of Contents</h3>

   <ol class="table_of_contents">

 <li><a href="#introduction">Introduction</a></li>


 <li><a href="#examples">Examples</a></li>

  <li><a href="#configuration">Configuration</a></li>


  </ol>
  <div class = "divider1"></div><p></p>

<a name="introduction">
<h3>Introduction</h3></a>

<p>The &quot;HTTP Malicious Patterns Detection Policy&quot; is used to inspect the HTTP messages for content that could be considered dangerous to an API or web service, and reject the message returning a fault if any of the defined expressions match the content.</p>
<ul class="usingOrderedList">
  <li>Regular expressions are used to define the content that could be considered dangerous that would warrant a message being rejected.</li>
  <li>Typical uses of this policy are for SQL Injection detection or JavaScript detection. </li>
  <li>Two sample policies are provided (HTTPJavascriptInjection and HTTPSQLInjection) in the root level Policies folder that you can directly attach to a service or operation. </li>
</ul>
<p><a href="#top">Back to top</a></p>

<a name="examples">
<h3>Examples</h3></a>

<p>The product includes the following out-of-the-box examples that illustrate usage of the HTTP Malicious Pattern Detection Policy.  You can use the sample policies located in the root Policies folder as-is or you can customize the configuration to suit your needs and then attach them directly to a service or operation. </p>
<h5>SQL Injection RegEx</h5>
<p>A sample <strong>HTTPSQLInjection </strong>policy is included out-of-box. It includes  three regular expressions that match SQL keywords and symbols.</p>
<p><img src="images/httpsqlinjection_sample.jpg" alt="" width="460" height="503"></p>
<h5>JavaScript Script Markup Tags</h5>
<p>A sample <strong>HTTPJavascriptInjection</strong> policy  is also included out-of-the-box. It includes expressions that match
JavaScript script markup tags.</p>
<p><img src="images/httpjavascriptinjection_sample.jpg" alt="" width="452" height="497"></p>
<h5>Configuration Options</h5>

<p>The policy includes the following configuration options:</p>
<ul class="usingOrderedList">
  <li><strong>Inspect Headers</strong> - Optionally HTTP headers can be scanned for patterns. If selected all headers will be scanned. To only scan certain headers header names can be entered in the header table.</li>
  <li><strong>Inspect Path</strong> - Checking this box will cause the HTTP path to be scanned.</li>
  <li><strong>InspectÂ Parameters</strong> - Checking this box will cause the HTTP query parameters to be scanned.</li>
  <li><strong>Exclude Markup</strong> - This option applies to content with markup like XML or JSON. If markup is excluded only the content of the properties, not the markup itself, will be scanned. For example, a JSON property name will not be scanned, just the property value.</li>
  <li><strong>Patterns</strong> - One or more regular expression patterns to scan for. Any match will cause the message to be rejected.</li>
</ul>
<p><a href="#top">Back to top</a></p>


<a name="configuration">
<h3>Configuration</h3></a>

<p>Let's take a quick walkthrough of the HTTP Malicious Pattern  Detection policy configuration process to get your started.</p>
<h5>Step 1: Add Policy / Use Sample Policy</h5>
<ul class="usingOrderedList">
  <li>You can create a HTTP Malicious Pattern  Detection  policy instance using <strong>Add Policy</strong> in the <em>Policies &gt; Operational Policies</em> section.</li>
  <li>Use one of the HTTP Malicious Pattern Detection sample policies (HTTP Malicious Pattern Detection or  HTTPJavascriptInjection). You can  attach the policy &quot;as is&quot; or modify it.  </li>
</ul>
<h5>Step 2: Modify Policy</h5>
<p>When you <strong>Modify</strong> the HTTP Malicious Pattern  Detection Policy on the <em>Policy Details</em> page the initial policy will look like this:</p>
<p><img src="images/http_mal_pattern_detection_default.jpg" width="440" height="488"></p>

<h5>Step 3: Configure</h5>
<p>The next step is to configure your policy with a regular expression or JavaScript markup tags. You will need a good working knowledge of regular expressions to be able to get the most out of the this policy.  There are some useful online tools:</p>
<ul class="usingOrderedList">
  <li><strong>Regular Expression Tester</strong> - <a href="http://rubular.com/">Rubular.com</a> provides a nice online test tool</li>
  <li><strong>Regular Expression Builder</strong> - <a href="https://www.debuggex.com/">Debuggex.com</a> provides a more sophisticated (and complex) tool for building an validating regular expressions</li>
</ul>

<h5>Step 4: Attach Policy</h5>
<p>After you have saved your policy you can  attach it to a web service  or you can attach the policy at the Organization level and the policy will be active for all services defined within the orgnization. </p>
<p><img src="images/attach policy_http_malicious.jpg" width="528" height="314"></p>

<p><a href="#top">Back to top</a></p>

<div class = "divider1"></div>