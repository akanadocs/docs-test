---
layout: page
title: Using the Public and Private Operational Script Policy (PM8x)
description: Learn how to create your own custom policy and associate it with different components of a service's definition (e.g., organizations, services, operations, bindings, and access points).
product: ag
category: learn
sub-nav-class: Operational Policies
weight:	5
type: page
nav-title: Using the Public and Private Operational Script Policies (8.x)
---
<h2 name="top">Using the Public and Private Operational Script Policies in Policy Manager 8.x </h2>
  <p>Learn how to create your own custom public and private policies and associate it with different components of a service's definition (e.g., organizations, services, operations, bindings, and access points). </p>

  <p><a href="../scripts/getting_started_with_scripts_pm8x.htm" class="button secondary">Getting Started with Scripts (8.x)</a>


    <a href="policy_management.htm" class="button secondary">Managing Policies</a>


    <a href="../assets/scriptDocs_pm80/index.html" class="button secondary">Policy Manager Scripting API (8.x)</a><p></p>

<h5 class="stamp">Supported Platforms: 8.x</h5>
<p></p>




  <div class = "divider1"></div>
   <h3 style="color: gray;">Table of Contents</h3>

   <ol class="table_of_contents">

 <li><a href="#introduction">Introduction</a></li>
 
  <li><a href="#config_options">Configuration Options</a></li>

  <li><a href="#configuration">Configuration</a></li>


  </ol>
  <div class = "divider1"></div><p></p>



<a name="introduction">
<h3>Introduction</h3></a>

<p>The Operational Script Policy allows you create your own custom policy using custom utility scripts that you can associate with different components of a service's definition (e.g., organizations, services, operations, bindings, and access points). Scripts can be defined using JavaScript, Jython, or BeanShell script languages.</p>
<p>The Policy Manager Scripting API located in the \docs\scriptDocs folder of the Policy Manager 8.x Release Folder provides a series of interfaces and classes you can use to build process related scripts. The API includes lots of use cases and sample code you can experiment with and use as a baseline when building your own custom operational policy  scripts. You can also access the API on the Akana Documentation Repository: <a href="../assets/scriptDocs_pm80/index.html" >Policy Manager Scripting API</a></p>

<h5>Private Operational Script Policy</h5>
<ul class="usingOrderedList">
  <li>Policy Manager 7.1 and above includes the <em>Operational Script Policy</em>. </li>
  <li>This policy is considered <strong>Private</strong> and is not available to the Network Director when attached to a physical service. </li>
  <li>In Policy Manager 8.x, this policy has been renamed to the <em>Private Operational Script Policy</em>.</li>
</ul>
<h5>Public Operational Script Policy</h5>
<ul class="usingOrderedList">
  <li>To support  executing a <em>Operational Script Policy</em> as a <strong>Consumer</strong> when  calling a physical service, Policy Manager 8.x includes the <em>Public  Operational Script Policy</em>.</li>
</ul>

<a name="config_options">
<h3>Configuration Options</h3></a>
<p>The policies include the following configuration options:</p>
<ul class="usingOrderedList">
  <li><strong>Imports</strong> - Common functions that you may need to perform in your scripts that have been saved in Script objects using the Add Script function in the Scripts section of each Organization in the Policy Manager Workbench are listed in this section. The available scripts are listed in the Available Scripts tree. Any number of Scripts in that tree can be moved to the Imported Scripts list box. Only scripts that match the language type will be available for selection in the tree. </li>
  <li><strong>Script Language</strong> - A drop-down list box that allows you to select the script language for the script    to be added. JavaScript, Jython, and BeanShell Engine script language types are supported.<br>
  </li>
  <li><strong>Expression </strong> - A text box that allows you to enter your script.</li>
</ul>
<a name="configuration">
<h3>Configuration</h3></a>
<p>Let's take a quick walkthrough of the configuration process for each policy  to get your started.</p>
<h4>Review Script Creation Process</h4>
<p>The first step is to review  <a href="../scripts/getting_started_with_scripts_pm8x.htm">Getting Started with Scripts (PM8x)</a> to become familiar with the script creation process, available tools, and the   <a href="../assets/scriptDocs_pm80/index.html" >Policy Manager Scripting API (PM8x)</a>.</p>
<p><a href="#top">back to top</a></p>



<a name="config_private_op_script_pol"><h4>Configure Private Operational Script Policy</h4></a>
<h5>Step 1: Add Policy</h5>
<p>In Policy Manager, you can create a Public Operational Script Policy instance using <strong>Add Policy</strong> in the <em>Policies &gt; Operational Policies</em> section. </p>
<h5>Step 3: Modify Policy</h5>
<p>When you <strong>Modify</strong> the Public Operational Script Policy  on the <em>Policy Details</em> page the initial policy will look like this:</p>
<p><img src="images/modify_private_op_script_policy_8x.jpg" width="552" height="392" /></p>
<p>To illustrate how to use the policy, we are going to add  script code that gets the Service Details.</p>
<p>In the <em>Source</em> section, select  <strong>JavaScript</strong> as the Script Language,  add the following code to the Expression section and save the policy:</p>
<code>exchange = messageContext.getExchange();
auditLog.debug("Service Name : " + exchange.getServiceName()+ "\n" + "Operation Name : " + exchange.getOperationName()+ "\n" +"Endpoint Name : " + exchange.getEndpointName());
</code>
<p></p>
<p>The script editor will look similar to the following:</p>
<p><img src="images/modify_private_op_script_policy_8x_example.jpg" width="590" height="420" /></p>
<h5>Step 4: Attach Policy</h5>
<p>After you have saved your policy, activate it, and attach it to a web service   operation. </p>
<p><img src="images/attach_private_op_script_policy_8x.jpg" width="646" height="177" /></p>
<h5>Step 5: Test Policy</h5>
<p>To test the policy, send a request and select <em>Monitoring &gt; Logs &gt; View Usage Record Details &gt; Recorded Messages</em> to view the DEBUG  statement that prints the service details.</p>
<p><img src="images/opt_private_script_debug_example.jpg" width="543" height="513" /></p>
<p><a href="#top">back to top</a>
</p>

<h4>Configure Public Operational Script Policy</h4>
<h5>Step 1: Add Policy</h5>
<p>In Policy Manager, you can create a Public Operational Script Policy instance using <strong>Add Policy</strong> in the <em>Policies &gt; Operational Policies</em> section. </p>
<h5>Step 3: Modify Policy</h5>
<p>When you <strong>Modify</strong> the Public Operational Script Policy  on the <em>Policy Details</em> page the initial policy will look like this:</p>
<p><img src="images/modify_public_op_script_policy_8x.jpg" width="559" height="393" /></p>
<p>To illustrate how to use the policy, we are going to add   script code that will get public credentials. </p>
<p>In the <em>Source</em> section, select <strong>JavaScript</strong> as the Script Language,  add the following code to the Expression section and save the policy:<br />
  <br />
  <code> msg  = messageContext.getMessage();<br />
  subject=msg.getSecuritySubjects().get(&quot;urn:org:federatedgovernance:security:subject-category:enduser&quot;);<br />
  creds  = subject.getPublicCredentials();<br />
  var  printString =&quot;&quot;;<br />
  for(var i=0; i&lt;creds.length;  i++){               <br />
  printString += creds[i]  +&quot;\n&quot;<br />
  }<br />
auditLog.debug(printString);</code></p>
<p>The script editor will look similar to the following:</p>
<p><img src="images/modify_public_op_script_policy_8x_example.jpg" width="554" height="392" /></p>
<h5>Step 4: Attach Policy</h5>
<p>After you have saved your policy, activate it, and attach it to a web service   operation. </p>
<p><img src="images/attach_public_op_script_policy_8x.jpg" width="648" height="174" /></p>
<h5>Step 5: Test Policy</h5>
<p>To test the policy, send a request and select  <em>Monitoring &gt; Logs &gt; View Usage Record Details &gt; Recorded Messages</em> to view the DEBUG  statement that includes the public credentials.</p>
<p><img src="images/public_op_script_policy_8x_test.jpg" width="551" height="449" /></p>
<p><a href="#top">back to top</a></p>