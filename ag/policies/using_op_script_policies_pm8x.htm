---
layout: page
title: Using the Public and Private Operational Script Policy (PM8x)
description: Learn how to create your own custom policy and how to associate it with organizations, services, operations, bindings, and access points.
product: ag
category: learn
sub-nav-class: Policies - Operational
weight: 04
type: page
nav-title: Public and Private Operational Script Policies (8.x) - Using
---
<h2 id="top">Using the Public and Private Operational Script Policies in Policy Manager 8.x </h2>
<p>Learn how to create your own custom public and private policies and how to associate each policy with different components of a service's definition such as organizations, services, operations, bindings, and access points.</p>

<p>
<a href="about_policies_view.htm" class="button secondary">About Policies</a>  
<a href="policy_management.htm" class="button secondary">Managing Policies</a>  
<a href="../scripts/getting_started_with_scripts.htm" class="button secondary">Getting Started with Scripts</a>
<a href="../apidoc_scripting_api_all.htm" class="button secondary">Policy Manager Scripting API</a>
</p>

<h5 class="stamp">Supported Platforms: 8.x</h5>

<div class = "divider1"></div>



<h3 style="color: gray;">Table of Contents</h3>
<ol class="table_of_contents">
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#config_options">Configuration Options</a></li>
  <li><a href="#configuration">Configuration</a></li>
</ol>
<div class = "divider1"></div>



<a name="introduction"></a><h3>Introduction</h3>
<p>The Operational Script Policy allows you create your own custom policy using custom utility scripts that you can associate with different components of a service's definition such as organizations, services, operations, bindings, and access points. Scripts can be defined using JavaScript, Jython, or BeanShell script languages.</p>
<p>The Policy Manager Scripting API, located in the \docs\scriptDocs folder of the Policy Manager installation folder, provides a series of interfaces and classes you can use to build process-related scripts. The API includes lots of use cases and sample code you can experiment with and use as a baseline when building your own custom operational policy scripts.</p>
<p>You can also access the Scripting API on the Akana docs site: <a href="../apidoc_scripting_api_all.htm" >Policy Manager Scripting API</a>.</p>

<h5>Private Operational Script Policy</h5>
<ul>
  <li>Policy Manager 7.1 and above includes the <em>Operational Script Policy</em>.</li>
  <li>This policy is considered <strong>Private</strong> and is not available to the Network Director when attached to a physical service.</li>
  <li>In Policy Manager 8.x, this policy has been renamed to the <em>Private Operational Script Policy</em>.</li>
</ul>
<h5>Public Operational Script Policy</h5>
<ul>
  <li>To support executing an <em>Operational Script Policy</em> as a <strong>Consumer</strong> when calling a physical service, Policy Manager 8.x includes the <em>Public Operational Script Policy</em>.</li>
</ul>
<p><a href="#top">back to top</a></p>



<a name="config_options"></a><h3>Configuration Options</h3>
<p>Both policies include the following configuration options:</p>
<ul>
  <li><strong>Imports</strong>: This section includes common functions that you might need to perform in your scripts that have been saved in Script objects, using the <strong>Policy Manager</strong> &gt; <strong>Workbench</strong> &gt; <strong>Organization</strong> &gt; <strong>Scripts</strong> &gt; <strong> Add Script</strong> function. The available scripts are listed in the <strong>Available Scripts</strong> tree. You can move any number of the scripts in that tree to the <strong>Imported Scripts</strong> list box. Only scripts that match the language type are available for selection in the tree.</li>
  <li><strong>Script Language</strong>: A drop-down list box that allows you to select the script language for the script to be added. Supported options: JavaScript, Jython, and BeanShell Engine script language types.</li>
  <li><strong>Expression</strong>: A text box that allows you to enter your script.</li>
</ul>
<p><a href="#top">back to top</a></p>



<a name="configuration"></a><h3>Configuration</h3>
<p>Let's take a quick walkthrough of the configuration process for each policy to get you started.</p>
<h4>Review Script Creation Process</h4>
<p>The first step is to review the following documentation, to become familiar with the script creation process, available tools, and the Policy Manager scripting API:</p>
<ul>
  <li><a href="../scripts/getting_started_with_scripts.htm">Getting Started with Scripts</a> </li>
  <li><a href="../apidoc_scripting_api_all.htm" >Policy Manager Scripting API</a></li>
</ul>
<p><a href="#top">back to top</a></p>



<a name="config_private_op_script_pol"></a><h4>Configure Private Operational Script Policy</h4>
<p>To configure a private operational script policy, follow these steps:</p>
<ol>
  <li><a href="#step1_private">Step 1: Add Policy</a></li>
  <li><a href="#step2_private">Step 2: Modify Policy</a></li>
  <li><a href="#step3_private">Step 3: Specify Function</a></li>
  <li><a href="#step4_private">Step 4: Attach Policy</a></li>
  <li><a href="#step5_private">Step 5: Test Policy</a></li>
</ol>

<a name="step1_private"></a><h5>Step 1: Add Policy</h5>
<p>In Policy Manager, to create a Private Operational Script Policy instance, go to <strong>Policies</strong> &gt; <strong>Operational Policies</strong> and choose <strong>Add Policy</strong>.</p>

<a name="step2_private"></a><h5>Step 2: Modify Policy</h5>
<p>When you click <strong>Modify</strong> to make changes to the Private Operational Script Policy on the <strong>Policy Details</strong> page, the initial policy looks like this:</p>
<p><img src="images/modify_private_op_script_policy_8x.jpg" width="552" height="392" alt="" /></p>
<p>To illustrate how to use the policy, we are going to add script code that gets the Service Details.</p>
<p>In the <em>Source</em> section, select <strong>JavaScript</strong> as the Script Language, add the following code to the Expression section, and then save the policy.</p>
<pre>exchange = messageContext.getExchange();
auditLog.debug("Service Name : " + exchange.getServiceName()+ "\n" + "Operation Name : " + exchange.getOperationName()+ "\n" +"Endpoint Name : " + exchange.getEndpointName());
</pre>
<p>The script editor will look similar to the following:</p>
<p><img src="images/modify_private_op_script_policy_8x_example.jpg" width="590" height="420" alt="" /></p>


<a name="step3_private"></a>
<h5>Step 3: Specify Function</h5>
<p>In the Function drop-down, as shown below, you can specify a function.</p>
<p><img src="images/op_script_function_menu_private.jpg" alt="Function menu (private operational policy" /></p>
<p>All policy handlers in the policy framework execute in an order dictated by the function they provide. In the Akana Administration Console there is an ordered list of policy functions, and this dictates the policies that are applied and the sequence. You can also:</p>
<ul>
  <li>Create your own policy handlers and either use one of the functions listed or create a new function and add it into the list.</li>
  <li>Manage the order in which policies are executed. This allows more predictable ordering of the sequence in which different policies are executed or implemented. For example, Wire-Security policies are enforced before Transformation policies.</li>
</ul>
<p>Operational Script policies are essentially custom policies that you can write using JavaScript instead of Java. When adding an operational script, you must let the platform know when to execute the script in relation to the other policy handlers in the framework. To do this, you can define a function that your script is performing. The platform executes this according to the function list of the policy framework.</p>
<p>There might be one or more policies that have a specific function. The functions are as follows:</p>
<ul>
  <li><strong>Pre-policy Auditing</strong>: Performs the function of auditing, or message logging, before any other policies can affect the message.</li>
  <li><strong>Denial of Service</strong>: Addresses any potential denial of service attacks.</li>
  <li><strong>Wire Security</strong>: Enforces security on the message, ensuring that the message was delivered securely; for example, verifying that a message was signed or encrypted.</li>
  <li><strong>Authentication</strong>: Authenticates any credentials sent in the message.</li>
  <li><strong>Authorization</strong>: Authorizes the authenticated user.</li>
  <li><strong>Threat</strong>: Addresses any message threats such as script injection, SQL injection, or viruses.</li>
  <li><strong>Transformation</strong>: Changes the content of the message.</li>
  <li><strong>Caching</strong>: Returns cached responses if possible.</li>
  <li><strong>Post-policy Auditing</strong>: Performs the function of auditing, or message logging, after all policies have been enforced.</li>
</ul>

<h5>Admin Console Settings for Policy Function</h5>
<p>In the Akana Administration Console, to manage the policy settings: <strong>Configuration</strong> &gt; <strong>com.soa.policy.framework</strong>:</p>
<ul>
  <li>Public Operational Script Policy:
    <ul>
      <li><strong>Setting</strong>: policy.framework.settings.consumerHandlerFunctions</li>
      <li><strong>Default values</strong>: pre-auditing, custom, transform, sec-ctx, message-sec, wire-sec, post-auditing</li>
    </ul>
 </li>
  <li>Private Operational Script Policy: 
    <ul>
      <li><strong>Setting</strong>: policy.framework.settings.providerHandlerFunctions</li>
      <li><strong>Default values</strong>: pre-auditing, dos, pre-flight, sec-ctx, wire-sec, message-sec, auth, auz, threat, transform, custom, caching, post-auditing</li>
    </ul>
 </li>
  </ul>


<a name="step4_private"></a><h5>Step 4: Attach Policy</h5>
<p>After you've saved your policy, activate it, and attach it to a web service operation.</p>
<p><img src="images/attach_private_op_script_policy_8x.jpg" width="646" height="177" alt="" /></p>


<a name="step5_private"></a><h5>Step 5: Test Policy</h5>
<p>To test the policy, send a request and select <em>Monitoring &gt; Logs &gt; View Usage Record Details &gt; Recorded Messages</em> to view the DEBUG statement that prints the service details.</p>
<p><img src="images/opt_private_script_debug_example.jpg" width="543" height="513" alt="" /></p>
<p><a href="#top">back to top</a></p>



<h4>Configure Public Operational Script Policy</h4>
<p>To configure a public operational script policy, follow these steps:</p>
<ol>
  <li><a href="#step1_public">Step 1: Add Policy</a></li>
  <li><a href="#step2_public">Step 2: Modify Policy</a></li>
  <li><a href="#step3_public">Step 3: Specify Function</a></li>
  <li><a href="#step4_public">Step 4: Attach Policy</a></li>
  <li><a href="#step5_public">Step 5: Test Policy</a></li>
</ol>


<a name="step1_public"></a><h5>Step 1: Add Policy</h5>
<p>In Policy Manager, to create a Public Operational Script Policy instance, go to <strong>Policies</strong> &gt; <strong>Operational Policies</strong> and choose <strong>Add Policy</strong>.</p>


<a name="step2_public"></a><h5>Step 2: Modify Policy</h5>
<p>When you click <strong>Modify</strong> to make changes to the Public Operational Script Policy on the <em>Policy Details</em> page, the initial policy looks like this:</p>
<p><img src="images/modify_public_op_script_policy_8x.jpg" width="559" height="393" alt="" /></p>
<p>To illustrate how to use the policy, we are going to add script code that will get public credentials.</p>
<p>In the <em>Source</em> section, select <strong>JavaScript</strong> as the Script Language, add the following code to the Expression section, and then save the policy.</p>
<pre>msg = messageContext.getMessage();
subject=msg.getSecuritySubjects().get(&quot;urn:org:federatedgovernance:security:subject-category:enduser&quot;);
creds = subject.getPublicCredentials();
var printString =&quot;&quot;;
for(var i=0; i&lt;creds.length; i++){
printString += creds[i] +&quot;\n&quot;
}
auditLog.debug(printString);</pre>
<p>The script editor will look similar to the following:</p>
<p><img src="images/modify_public_op_script_policy_8x_example.jpg" width="554" height="392" alt="" /></p>



<a name="step3_public"></a><h5>Step 3: Specify Function</h5>
<p>In the Function drop-down, as shown below, you can specify a function.</p>
<p><img src="images/op_script_function_menu_public.jpg" alt="Function menu (public operational policy" /></p>
<p>All policy handlers in the policy framework execute in an order dictated by the function they provide. In the Akana Administration Console there is an ordered list of policy functions, and this dictates the policies that are applied and the sequence. You can also:</p>
<ul>
  <li>Create your own policy handlers and either use one of the functions listed or create a new function and add it into the list.</li>
  <li>Manage the order in which policies are executed. This allows more predictable ordering of the sequence in which different policies are executed or implemented. For example, Wire-Security policies are enforced before Transformation policies.</li>
</ul>
<p>Operational Script policies are essentially custom policies that you can write using JavaScript instead of Java. When adding an operational script, you must let the platform know when to execute the script in relation to the other policy handlers in the framework. To do this, you can define a function that your script is performing. The platform executes this according to the function list of the policy framework.</p>
<p>There might be one or more policies that have a specific function. The functions are as follows:</p>
<ul>
  <li><strong>Pre-policy Auditing</strong>: Performs the function of auditing, or message logging, before any other policies can affect the message.</li>
  <li><strong>Denial of Service</strong>: Addresses any potential denial of service attacks.</li>
  <li><strong>Wire Security</strong>: Enforces security on the message, ensuring that the message was delivered securely; for example, verifying that a message was signed or encrypted.</li>
  <li><strong>Authentication</strong>: Authenticates any credentials sent in the message.</li>
  <li><strong>Authorization</strong>: Authorizes the authenticated user.</li>
  <li><strong>Threat</strong>: Addresses any message threats such as script injection, SQL injection, or viruses.</li>
  <li><strong>Transformation</strong>: Changes the content of the message.</li>
  <li><strong>Caching</strong>: Returns cached responses if possible.</li>
  <li><strong>Post-policy Auditing</strong>: Performs the function of auditing, or message logging, after all policies have been enforced.</li>
</ul>

<h5>Admin Console Settings for Policy Function</h5>
<p>In the Akana Administration Console, to manage the policy settings: <strong>Configuration</strong> &gt; <strong>com.soa.policy.framework</strong>:</p>
<ul>
  <li>Public Operational Script Policy:
    <ul>
      <li><strong>Setting</strong>: policy.framework.settings.consumerHandlerFunctions</li>
      <li><strong>Default values</strong>: pre-auditing, custom, transform, sec-ctx, message-sec, wire-sec, post-auditing</li>
    </ul>
 </li>
  <li>Private Operational Script Policy: 
    <ul>
      <li><strong>Setting</strong>: policy.framework.settings.providerHandlerFunctions</li>
      <li><strong>Default values</strong>: pre-auditing, dos, pre-flight, sec-ctx, wire-sec, message-sec, auth, auz, threat, transform, custom, caching, post-auditing</li>
    </ul>
 </li>
</ul>


<a name="step4_public"></a><h5>Step 4: Attach Policy</h5>
<p>After you've saved your policy, activate it, and attach it to a web service operation.</p>
<p><img src="images/attach_public_op_script_policy_8x.jpg" width="648" height="174" alt="" /></p>


<a name="step5_public"></a><h5>Step 5: Test Policy</h5>
<p>To test the policy, send a request and select <em>Monitoring &gt; Logs &gt; View Usage Record Details &gt; Recorded Messages</em> to view the DEBUG statement that includes the public credentials.</p>
<p><img src="images/public_op_script_policy_8x_test.jpg" width="551" height="449" alt="" /></p>
<p><a href="#top">Back to top</a></p>

