---
layout: page
title: Using the HTTP Malicious Pattern Detection Policy in Policy Manager
description: Learn how to use regular expressions or java markup tags in an HTTP Malicious Pattern Policy to inspect HTTP messages for malicious content.
product: ag
category: learn
sub-nav-class: Policies - Operational 
weight: 04
type: page
nav-title: HTTP Malicious Pattern Detection
---
<h1 id="top">Using the HTTP Malicious Pattern Detection Policy</h1>
<p>Learn how to use regular expressions or Java markup tags in an HTTP Malicious Pattern Detection Policy to inspect messages for malicious content and to reject the messages, returning a fault, if a match is found.</p>
<p>For information about using policies in the context of the Community Manager developer portal, see <a href="../../cm/learnmore/bus_admin_organizations.htm#h_business_policies">Business Policies</a>.</p>
<hr class="divide_hr" />



<h2 style="color: gray;">Table of Contents</h2>
<ol class="table_of_contents">
	<li><a href="#introduction">Introduction</a></li>
	<li><a href="#http_mal_pattern_det_create">Creating a Malicious Pattern Detection Policy</a></li>
	<li><a href="#http_mal_pattern_det_config">Configuring the Malicious Pattern Detection Policy</a></li>
	<li><a href="#config_options">Configuration Options</a></li>
	<li><a href="#policy_activating">Activating a policy</a></li>
	<li><a href="#policy_attach">Attaching a policy</a></li>
	<li><a href="#resources">Resources</a></li>
	<li><a href="#http_mal_pattern_det_uc_00">HTTP Malicious Pattern Detection Policy: Use Cases</a></li>
</ol>
<hr class="divide_hr" />



<h2 id="introduction">Introduction</h2>
<p>The HTTP Malicious Pattern Detection Policy is used to inspect HTTP messages for content that could be considered dangerous to an API or web service. If the message content matches any of the expressions identified in the policy as potentially dangerous, the policy rejects the message and returns a fault.</p>
<p>Notes:</p>
<ul>
	<li>This policy uses regular expressions to define the content that could be considered dangerous, that would warrant a message being rejected.</li>
	<li>Typical uses of this policy are for SQL injection detection or JavaScript detection.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="http_mal_pattern_det_create">Creating a Malicious Pattern Detection Policy</h2>
<p>The first step in creating a policy is to define the basic policy information.</p>

<h4>To add an operational policy</h4>
<ol>
	<li>Go to <strong>Workbench</strong> &gt; <strong>Browse</strong> &gt; <strong>Organization</strong>, and select <strong>Policies</strong> &gt; <strong>Operational Policies</strong>. The <strong>Policies Summary</strong> is displayed.</li>
	<li>Click <strong>Add Policy</strong>.</li>
	<li>Choose the policy type and click <strong>Next</strong>.</li>
	<li>Specify a name (required) and description (optional) and click <strong>Finish</strong>. At the <strong>Completion Summary</strong>, click <strong>Close</strong>. The <strong>Add Policy</strong> Wizard creates a draft policy instance that you can then configure on the <strong>Policy Details</strong> page.</li>
</ol>
<p>For more information, see <a href="policy_management.htm#add_policy">Add Policy</a>.</p>
<p>At this point, you've created the policy, but it doesn't do anything. The next step is to configure the policy details. See <a href="#http_mal_pattern_det_config">Configuring the Malicious Pattern Detection Policy</a> below.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="http_mal_pattern_det_config">Configuring the Malicious Pattern Detection Policy</h2>
<p>To configure your Malicious Pattern Detection policy, follow the steps below.</p>

<h4 id="proc_http_mal_pattern_det_config">To configure the Malicious Pattern Detection policy:</h4>
<ol>
	<li>Create the policy as covered above.</li>
	<li>At the <strong>Policies Summary</strong> page, in the <strong>HTTP Malicious Pattern Detection Policy</strong> section, click <strong>Modify</strong>. The <strong>Modify HTTP Malicious Pattern Detection Policy</strong> page appears, as shown below.
		<p><img src="images/http_mal_pattern_detection_default.jpg" alt="" /></p>
		</li>
	<li>Configure your policy with a regular expression or JavaScript markup tags. For information about the options available, see <a href="#config_options">Configuration Options</a>.
	<p><strong>Note</strong>: To get the most out of this policy, you'll need a good working knowledge of regular expressions. For more information, see <a href="policy_management.htm#policies_regex">Using Regular Expressions in Policies</a>.</p></li>
	<li>Click <strong>Apply</strong>. The policy is saved.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="config_options">Configuration Options</h2>
<p>The policy includes the configuration options shown below.</p>
<dl>
<dt>Inspect Headers</dt>
<dd>Leave this box cleared.</dd>


<dt>Inspect Path</dt>
<dd>Check this box if you want the HTTP path to be scanned.</dd>


<dt>Inspect Parameters</dt>
<dd>Check this box if you want the HTTP query parameters to be scanned.</dd>


<dt>Exclude Markup</dt>
<dd>This option applies to content with markup such as XML or JSON. If markup is excluded, only the content of the properties, not the markup itself, will be scanned. For example, a JSON property name will not be scanned, just the property value.</dd>


<dt>Patterns</dt>
<dd>One or more regular expression patterns to scan for. Any match will cause the message to be rejected.</dd>
</dl>

<p>For examples of how you can configure these properties, see <a href="#http_mal_pattern_det_uc_00">HTTP Malicious Pattern Detection Policy: Use Cases</a>.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="policy_activating">Activating a policy</h2>
<p>When you create and configure a policy, the policy is in <strong>Draft</strong> state. When the policy configuration is complete, activate the policy: click <strong>Activate Policy</strong> and then confirm. See <a href="policy_management.htm#policy_activate">Activate a Policy</a>.</p>
<p>A policy in Draft state is not available for general use. Once you activate the policy, it is in <strong>Active</strong> state and is available for use.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="policy_attach">Attaching a policy</h2>
<p>After you've saved and activated your policy, you can attach it:</p>
<ul>
	<li>To an individual web service, to apply it to that service.</li>
	<li>At the Organization level, to apply it to all services defined within the organization.</li>
</ul>
<p><img src="images/attach policy_http_malicious.jpg" alt="" /></p>
<p><a href="#top">Back to top</a></p>



<h2 id="resources">Resources</h2>
<p>To get the most out of this policy, you will need a good working knowledge of regular expressions. Some online tools:</p>
<ul>
	<li><a href="http://rubular.com/" target="_blank">rubular.com</a> is a free online regular expression editor based on Ruby.</li>
	<li><a href="https://regex101.com/" title="link to https://regex101.com/" target="_blank">regex101.com</a> is another useful free resource.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="http_mal_pattern_det_uc_00">HTTP Malicious Pattern Detection Policy: Use Cases</h2>
<p>This section includes the following examples:</p>
<ul>
	<li><a href="#http_mal_pattern_det_uc_01">Policy Example #1: detecting SQL injections</a></li>
	<li><a href="#http_mal_pattern_det_uc_02">Policy Example #2: detecting JavaScript injections</a></li>
</ul>


<h3 id="http_mal_pattern_det_uc_01">Policy Example #1: detecting SQL injections</h3>
<p>One example of using the Malicious Pattern Detection policy is to look for SQL injections and other attempts to query or change database tables.</p>
<p>Any input field (path parameter, query parameter, header) could potentially be used to send a database query, instead of a required request parameter. For example, a field expecting an integer could instead have an escape character and then a database SQL query.</p>
<p><img src="images/http_mal_pattern_detection_example01.jpg" alt="HTTP Malicious Pattern Detection policy, example" /></p>
<p>For this example, first create the policy, following the procedure in <a href="#http_mal_pattern_det_create">Creating a Malicious Pattern Detection Policy</a> above.</p>
<p>Then, follow the procedure in <a href="#http_mal_pattern_det_config">Configuring the Malicious Pattern Detection Policy</a> above, and choose the following configuration settings: </p>
<ul>
	<li><strong>Inspect Headers</strong>: Leave the checkbox cleared.</li>
	<li><strong>Inspect Path</strong>: Check this box.</li>
	<li><strong>Inspect Parameters</strong>: Check this box.</li>
	<li><strong>Exclude Markup</strong>: Leave the checkbox cleared.</li>
	<li><strong>Patterns</strong>: Specify these three patterns, putting each on a separate line:
		<ul>
			<li><pre>\w*(%27|')\s*(%6F|o|%4F)(%72|r|%52)</pre></li>
			<li><pre>(%27|')\s*(union|select|insert|update|delete|join|merge|drop|alter|create)</pre></li>
			<li><pre>exec(\s|\+)+(s|x)p\w+</pre></li>
		</ul>
	</li>
	</ul>
	<p><strong>Note</strong>: Regular expressions work only with certain content types. For example, you cannot use regular expressions with application/json or application/xml content. Use XPath only with XML payloads. Use JSONPath only with JSON messages. Use RegEx if the content type is neither XML nor JSON.</p>
<p>The policy configuration should look like the below:</p>
<p><img src="images/http_mal_pattern_detection_uc_02_01.jpg" alt="HTTP Malicious Pattern Detection policy, use case: summary page" /></p>
<p>Once you've saved the policy, you can activate it and then attach it to a service. In the example below, two separate HTTP Malicious Detection policies are attached to the service. One protects against JavaScript injections (see <a href="#http_mal_pattern_det_uc_02">Policy Example #2: detecting JavaScript injections</a> below), and one protects against SQL injections.</p>
<p><img src="images/http_mal_pattern_detection_uc_02_02.jpg" alt="HTTP Malicious Pattern Detection policy, use case: attaching policy to service" /></p>
<p>When malicious content is detected in a message, the platform returns an error, and the malicious content is rejected:</p>
<p><img src="images/http_mal_pattern_detection_uc_02_03.jpg" alt="HTTP Malicious Pattern Detection policy, use case: error response" /></p>
<p>An alert is generated, as shown below.</p>
<p><img src="images/http_mal_pattern_detection_uc_02_04.jpg" alt="HTTP Malicious Pattern Detection policy, use case: Alert generated" /></p>


<h3 id="http_mal_pattern_det_uc_02">Policy Example #2: detecting JavaScript injections</h3>
<p>To configure this policy to detect JavaScript injections, follow the same configuration steps given in the previous example, but use the pattern below:</p>
<pre>&lt;\s*script\b[^&gt;]*&gt;[^&lt;]+&lt;\s*/\s*script\s*&gt;</pre>
<p><img src="images/http_mal_pattern_detection_uc_02_05.jpg" alt="" /></p>
<p><a href="#top">Back to top</a></p>



<hr class="divide_hr" />



<h2 id="related_topics">Related Topics</h2>
<div class="relatedlinks">
<ul>
	<li><a href="about_policies_view.htm">About Policies</a></li>
	<li><a href="policy_management.htm">Managing Policies</a></li>
	<li><a href="policies_operational_about.htm">About Operational Policies</a></li>
</ul>
<ul>
	<li><a href="../../cm/learnmore/basics_glossary.htm">Glossary of Terms for the Community Manager developer portal</a></li>
</ul>
</div>
