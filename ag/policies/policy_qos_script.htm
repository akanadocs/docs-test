<---
layout: page
title: Using the QoS Script Policy
description: Learn how to add custom utility scripts for performing different actions to the policy definition, using JavaScript, Jython, or BeanShell script languages.
product: ag
category: learn
sub-nav-class: Policies - QoS
weight: 04
type: page
nav-title: QoS Script
---
<h2 id="top">Using the QoS Script Policy</h2>
<p>Learn how to add custom utility scripts for performing different actions to the policy definition, using JavaScript, Jython, or BeanShell script languages.</p>


<p>
<a href="about_policies_view.htm" class="button secondary">About Policies</a>  
<a href="policy_management.htm" class="button secondary">Managing Policies</a>  
<a href="qos_policies_intro.htm" class="button secondary">QoS Policies</a>
</p>

<p><a href="../scripts/getting_started_with_scripts.htm" class="button secondary">Getting Started with Scripts</a>  
<a href="../apidoc_scripting_api_all.htm" class="button secondary">Policy Manager Scripting API</a></p>
<p>For information about using policies in the context of the developer portal, see <a href="../../cm/learnmore/bus_admin_organizations.htm#h_business_policies">Business Policies</a>.</p>



<div class = "divider1"></div>
<h3 style="color: gray;">Table of Contents</h3>
<ol class="table_of_contents">
	<li><a href="#introduction">Introduction</a></li>
	<li><a href="#options">Script Policy Options</a></li>
	<li><a href="#configuration">Configuration</a></li>
	<li><a href="#pm_usecases">QoS Script Policy: use cases for Policy Manager</a></li>
	<li><a href="#uc_policy_qos_script">QoS Script Policy: use cases for the Akana API Platform (Community Manager)</a></li>
</ol>
<div class = "divider1"></div>



<h3 id="introduction">Introduction</h3>
<p>The Quality of Service (QoS) Script Policy allows you to add custom utility scripts for performing different actions to the policy definition, using JavaScript, Jython, or BeanShell script languages.</p>
<p>The Policy Manager Scripting API, located in the \docs\scriptDocs folder of the Policy Manager installation folder, provides a series of interfaces and classes you can use to build process-related scripts. The API includes lots of use cases and sample code you can experiment with and use as a baseline when building your own custom quota management scripts.</p>
<p>You can also access the API on the Akana Documentation Repository: <a href="../apidoc_scripting_api_all.htm">Policy Manager Scripting API</a>.</p>



<h3 id="options">Script Policy Options</h3>
<p>The policy includes the configuration options shown below.</p>

<h5>Script Policy Details</h5>
<ul>
	<li><strong>Name</strong>: A read-only field that displays the name of the Script Policy.</li>
	<li><strong>Description</strong>: A read-only field that displays the description of the Script Policy.</li>
</ul>
<h5>Script Policy</h5>
<ul>
	<li><strong>Imports</strong>: This section includes common functions that you might need to perform in your scripts that have been saved in Script objects, using the <strong>Policy Manager</strong> &gt; <strong>Workbench</strong> &gt; <strong>Organization</strong> &gt; <strong>Scripts</strong> &gt; <strong> Add Script</strong> function. The available scripts are listed in the <strong>Available Scripts</strong> tree. You can move any number of the scripts in that tree to the <strong>Imported Scripts</strong> list box. Only scripts that match the language type are available for selection in the tree.</li>
	<li><strong>Script Language</strong>: A drop-down list box that allows you to select the script language for the script to be added. Supported options: JavaScript, Jython, and BeanShell Engine script language types.</li>
	<li><strong>Expression</strong>: A text box that allows you to enter your script.</li>
	<li><strong>Test Script</strong>: A button that allows you to test the entered expression to determine if it is properly formed. <em><strong>This option is available in Policy Manager version 7.x only.</strong></em></li>
</ul>



<h3 id="configuration">Configuration</h3>
<p>Let's take a quick walkthrough of the Script Policy configuration process to get you started.</p>
<h5>Step 1: Review Script Creation Process</h5>
<p>The first step is to review the following documentation, to become familiar with the script creation process, available tools, and the Policy Manager scripting API:</p>
<ul>
	<li>Scripting documentation: <a href="../scripts/getting_started_with_scripts.htm">Getting Started with Scripts</a></li>
	<li>Policy Manager Scripting API, applicable version: <a href="../apidoc_scripting_api_all.htm">Policy Manager Scripting API</a></li>
  </ul>
<h5>Step 2: Add Policy</h5>
<p>In Policy Manager, you can create a Script Policy instance using <strong>Add Policy</strong> in the <em>Policies &gt; QoS Policies</em> section.</p>
<h5>Step 3: Modify Policy</h5>
<p>When you click <strong>Modify</strong> to make changes to the Script Policy on the <em>Policy Details</em> page, the initial policy looks like this:</p>
<p><img src="images/modify script policy_screen1.jpg" alt="" /></p>
<p>Select the script language from the drop-down list box (JavaScript, Jython, or BeanShell Engine), and enter your script into the <strong>Expression</strong> text box.</p>
<p>Click <strong>Test Script</strong> (<em>version 7.x only</em>) to verify that your script is properly formed. Make adjustments as needed. Click <strong>Finish</strong> to add your script, and then click <strong>Close</strong> to exit the wizard.</p>
<h5>Step 4: Activate Policy</h5>
<p>If you are using Policy Manager 7.2 or above, activate the policy in the Policy Workflow Portlet. Otherwise, skip this step.</p>
<h5>Step 5: Attach Policy</h5>
<p>After you've saved your policy, attach it to a web service operation.</p>
<h5>Step 6: Test Policy</h5>
<p>To test the policy, send a request and view the <em>Alerts</em> portlet in the <strong>Registry</strong> of the Organization Tree. An alert is generated for each request sent.</p>
<p><a href="#top">back to top</a></p>



<h3 id="pm_usecases">QoS Script Policy: use cases for Policy Manager</h3>
<p>For a walkthrough on how to use scripts and access to the Policy Manager Scripting API for each Policy Manager version, see <a href="../scripts/getting_started_with_scripts.htm" target="_blank">Getting Started with Scripts</a>.</p>
<p><a href="#top">back to top</a></p>



<h3 id="uc_policy_qos_script">QoS Script Policy: use cases for the Akana API Platform (Community Manager)</h3>
<p>This section provides a list of Community Manager-specific usage scenarios for the Script Policy.</p>
<p>It includes:</p>
<ol>
	<li><a href="#uc_policy_qos_script_cm_00">Add / Configure Script Policy</a></li>
	<li><a href="#uc_policy_qos_script_cm_01">How Do I Verify Script Policy at the Service Level?</a></li>
	<li><a href="#uc_policy_qos_script_cm_02">How Do I Verify Script Policy at the Contract Level?</a></li>
	<li><a href="#uc_policy_qos_script_cm_03">How Do I Verify Script Policy at the License &gt; Term Level?</a></li>
</ol>


<h4 id="uc_policy_qos_script_cm_00">Add / Configure Script Policy</h4>
<p>This example will configure s Script Policy using JavaScript.</p>
<p><strong>Note</strong>: If you are using a Script Policy with Community Manager, you must first add the policy to the Community Manager Tenant Organization in Policy Manager. Once that's done, it will be available for selection in the developer portal.</p>
<ol>
	<li>Go to the Policy Manager Management Console &gt; Tenant Organization &gt; <strong>Policies</strong> &gt; <strong>QoS Policies</strong> and choose <strong>Add Policy</strong>.
  <p><img src="images/script_01.jpg" alt="" /></p></li>
	<li>Specify Policy Name, Policy Type (Script Policy), click <strong>Finish</strong>, and then click <strong>Close</strong>.
  <p><img src="images/script_02.jpg" alt="" /></p></li>
	<li>On the Script Policy Details screen, click <strong>Modify</strong>.
  <p><img src="images/script_03.jpg" alt="" /></p></li>
	<li>Select the script language (for example, JavaScript) and specify the following script:
  <pre>alerter.alert("22222222","Custom alert code which is user defined.");</pre>
  <p><img src="images/script_04.jpg" alt="" /></p></li>
	<li>Click <strong>Finish</strong>.</li>
	<li>Activate the policy.
  <p><img src="images/script_05.jpg" alt="" /></p>
  <p><img src="images/script_06.jpg" alt="" /></p></li>
</ol>


<h4 id="uc_policy_qos_script_cm_01">How Do I Verify Script Policy at the Service Level?</h4>
<ol>
	<li>Launch Community Manager.</li>
	<li>Attach the Script Policy at the Service Level as shown below in the <strong>Edit API Wizard</strong> &gt; <strong>Proxy</strong> section.
<p><img src="images/script_07.jpg" alt="" /></p></li>
	<li>Now send requests from the app in Test Client. An alert is generated for each request. You can see these alerts in Policy Manager &gt; Registry level.
    <p><img src="images/script_08.jpg" alt="" /></p></li>
</ol>


<h4 id="uc_policy_qos_script_cm_02">How do I Verify Script Policy at the Contract Level?</h4>
<ol>
	<li>Launch Community Manager.</li>
	<li>While requesting API Access, select the <strong>Script Policy</strong> checkbox and finish the process. Make sure the contract is activated.
<p><img src="images/script_09.jpg" alt="" /></p></li>
	<li>Send a request from the app in Test Client. The request should be successful and you will see the following alert type for each request.
    <p><img src="images/script_10.jpg" alt="" /></p></li>
</ol>


<h4 id="uc_policy_qos_script_cm_03">How Do I Verify Script Policy at the License &gt; Term Level?</h4>
<ol>
	<li>Launch Community Manager.</li>
	<li>Choose <strong>Edit License</strong> and attach the Script Policy.
<p><img src="images/script_11.jpg" alt="" /></p></li>
	<li>Select the scope that is used with your license.
  <p><img src="images/script_12.jpg" alt="" /></p></li>
	<li>Request API access and select the same license.
    <p><img src="images/script_13.jpg" alt="" /></p></li>
	<li>Activate the contract.</li>
	<li>Go to Test Client and send a request. You'll see an alert in Policy Manager for each request.
    <p><img src="images/script_14.jpg" alt="" /></p></li>
</ol>

<p><a href="#top">Back to top</a></p>



<div class = "divider1"></div>



<h3 id="related_topics">Related Topics</h3>
<div class="relatedlinks">
<ul>
	<li><a href="about_policies_view.htm">About Policies</a></li>
	<li><a href="policy_management.htm">Managing Policies</a></li>
	<li><a href="policies_operational_about.htm">About Operational Policies</a></li>
</ul>
<ul>
	<li><a href="../../cm/learnmore/basics_glossary.htm">Glossary of Terms for the Developer Portal</a></li>
</ul>
</div>