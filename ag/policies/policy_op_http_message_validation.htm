---
layout: page
title: Using the HTTP Message Validation Policy
description: Learn how to use the HTTP Message Validation policy to validate HTTP messages based on criteria contained in the API description document that was used to define the API (Swagger, RAML, or WADL).
product: ag
category: learn
sub-nav-class: Policies - Operational
weight: 04
type: page
nav-title: HTTP Message Validation
---
<h1 id="top">Using the HTTP Message Validation Policy </h1>
<p>Learn how to use the HTTP Message Validation policy to validate HTTP messages based on criteria contained in the API description document that was used to define the API (Swagger, RAML, or WADL).</p>
<p>For information about using policies in the context of the developer portal, see <a href="../../cm/learnmore/bus_admin_organizations.htm#h_business_policies">Business Policies</a>.</p>
<h4 class="stamp">Supported Platforms: 8.4.19 and later</h4>
<hr class="divide_hr" />



<h2 style="color: gray;">Table of Contents</h2>
<ol class="table_of_contents">
	<li><a href="#introduction">Introduction</a>
		<ul>
			<li><a href="#http_message_uk_ob_support">UK Open Banking support</a> (Version: 2018.0.4 and later)</li>
		</ul>
		</li>
	
	<li><a href="#http_message_validation_create">Creating an HTTP Message Validation Policy</a></li>
	<li><a href="#http_message_config">Configuring the HTTP Message Validation Policy</a></li>
	<li><a href="#http_message_options">HTTP Message Validation Policy options</a>
		<ul>
			<li><a href="#format_keyword_options"><strong>Format</strong> keyword options</a></li>
			</ul>
	</li>
	<li><a href="#policy_activating">Activating a policy</a></li>
	<li><a href="#policy_attach">Attaching a policy</a></li>
	<li><a href="#policy_regex">Using regular expressions</a></li>
	<li><a href="#http_message_validation_examples">HTTP Message Validation Policy: examples</a></li>
</ol>
<hr class="divide_hr" />



<h2 id="introduction">Introduction</h2>
<p>The HTTP Message Validation Policy allows you to validate HTTP messages based on criteria specified in the API description document that was used to create the API in the developer portal (Swagger, RAML, or WADL). For information on supported versions, see <a href="../../cm/learnmore/apiadmin_api_add.htm#what_types_of_a_d_d">What types of API description document can I use to define my API?</a></p>
<p>It includes:</p>
<ul>
	<li>Validation of form, query, and header parts.</li>
	<li>Complete validation of JSON message payloads based on JSON Schemas contained in the Swagger or RAML documents used to define the API.</li>
</ul>
<p>For information about the JSON Schema rules for HTTP message validation, see:</p>
<ul>
	<li><a href="https://tools.ietf.org/html/draft-wright-json-schema-01" title="JSON Schema specification" target="_blank">https://tools.ietf.org/html/draft-wright-json-schema-01</a></li>
	<li><a href="https://tools.ietf.org/html/draft-wright-json-schema-validation-01" title="JSON Schema specification" target="_blank">https://tools.ietf.org/html/draft-wright-json-schema-validation-01</a></li>
</ul>
<p>For information about defining an API description document, refer to the applicable specification. For example, for Swagger 2.0: <a href="https://swagger.io/specification/v2/" title="Swagger 2.0 specification" target="_blank">https://swagger.io/specification/v2/</a>.</p>


<h3 id="http_message_uk_ob_support">UK Open Banking support</h3>
<p><strong>Valid in version: 2018.0.4 and later</strong></p>
<p>This policy also supports conformance to the UK <a href="../../cm/learnmore/basics_glossary.htm#gl_openbanking">Open Banking</a> specification (version 3.1) with regard to error messaging. When the <a href="#http_msg_validation_uk_ob">UK Open Banking option</a> is enabled for version 3.1, the error messages returned to the API client application are formatted according to the <a href="https://openbanking.atlassian.net/wiki/spaces/DZ/pages/937656404/Read+Write+Data+API+Specification+-+v3.1#Read/WriteDataAPISpecification-v3.1-ErrorResponseStructure" title="Open Banking 3.1 specification, section titled Standard Error Code(s)" target="_blank">Open Banking 3.1 specification, section titled Standard Error Code(s)</a>.</p>
<p>In version 2019.1.0 and later, you can customize the URL field returned in the error message, as defined in the specification. For details, see <a href="#http_msg_validation_uk_ob_docurl">Documentation URL</a> below.</p>



<h2 id="http_message_validation_create">Creating an HTTP Message Validation Policy</h2>
<p>The first step in creating a policy is to define the basic policy information.</p>

<h4>To add an operational policy</h4>
<ol>
	<li>Go to <strong>Workbench</strong> &gt; <strong>Browse</strong> &gt; <strong>Organization</strong> and select <strong>Policies</strong> &gt; <strong>Operational Policies</strong>. The <strong>Policies Summary</strong> is displayed.</li>
	<li>Click <strong>Add Policy</strong>.</li>
	<li>Choose the policy type and click <strong>Next</strong>.</li>
	<li>Specify a name (required) and description (optional) and click <strong>Finish</strong>. At the <strong>Completion Summary</strong>, click <strong>Close</strong>. The <strong>Add Policy</strong> Wizard creates a draft policy instance that you can then configure on the <strong>Policy Details</strong> page.</li>
</ol>
<p>For more information, see <a href="policy_management.htm#add_policy">Add Policy</a>.</p>
<p><a href="#top">back to top</a></p>



<h2 id="http_message_config">Configuring the HTTP Message Validation Policy</h2>
<p>Once you've defined the basic policy information, you can configure the technical details that determine how the policy works when it's attached to a service.</p>

<h4 id="proc_config_http_message">To configure an HTTP Message Validation Policy</h4>
<ol>
	<li>Go to <strong>Workbench</strong> &gt; <strong>Browse</strong> &gt; <strong>Organization</strong> and select the <strong>Policies</strong> &gt; <strong>Operational Policies</strong> folder. The <strong>Policies Summary</strong> is displayed.</li>
	<li>Find the policy on the list and double-click to go to the <strong>Details</strong> page for the policy.</li>
	<li>In the second panel, click <strong>Modify</strong> to access the <strong>Specify HTTP Message Validation Policy Options</strong> page.</li>
	<li>Choose one or more validation scopes to determine which messages in a transaction should be validated by the policy. <strong>Request</strong> is the default. For details, see <a href="#http_message_options_scope">Validation Scope</a> below.</li>
	<li>Choose one or more processing options. For details, see <a href="#http_message_options_proc">Processing Options</a> below.</li>
	<li>Click <strong>Finish</strong>.</li>
</ol>
<p>After you've configured your policy, you can activate it, then attach it to a web service, operation, or binding.</p>
<p><a href="#top">back to top</a></p>



<h2 id="http_message_options">HTTP Message Validation Policy options</h2>
<p><img src="images/http_message_validation.png" alt="Specify HTTP Message Validation Policy Options" /></p>
<p>On this page, you can specify:</p>
<ul>
	<li><a href="#http_message_options_scope">Validation Scope</a>: Which messages the policy is applied to.</li>
	<li><a href="#http_message_options_proc">Processing Options</a>: Configuration settings to fine-tune how the policy works.</li>
</ul>
<p>Refer to the field descriptions below.</p>


<h3 id="http_message_options_scope">Validation Scope</h3>
<p>Identifies which messages in a transaction should be validated by the policy. Choose one or more of the following (<strong>Request</strong> is the default value):</p>
<ul>
	<li><strong>Request</strong>: All input messages, coming in from client applications, are validated.</li>
	<li><strong>Response</strong>: All normal output messages, being returned from the API endpoint, are validated.</li>
	<li><strong>Fault</strong>: Error responses returned from the API endpoint are validated.</li>
</ul>


<h3 id="http_message_options_proc">Processing Options</h3>
<p>This section has options to enable or disable several features of the message validation and reporting of detected errors.</p>

<dl>
<dt>Fail early</dt>
<dd>If this option is enabled, the policy stops processing the message after the first validation error. If not enabled (the default), the policy continues to test all remaining validation rules and report any other errors in the message.</dd>
<dd>This option enables you to reduce the overhead of message validating by terminating validation at the first error. A typical use is in a production environment where processing speed is particularly important.</dd>
<dd><strong>Note</strong>: If the policy encounters a significant issue, such as a type validation error, it fails even if this setting is cleared.</dd>
<dd><strong>Key benefit</strong>: Enabled: efficiency. Disabled: more detailed validation errors.</dd>



<dt>Enable format validation</dt>
<dd>If this option is enabled, the policy applies stricter validation by enabling the <strong>format</strong> JSON Schema keyword. For example, the rules for date-time formats and for email addresses are strict. If disabled (the default), less strict validation is applied.</dd>
<dd>Per the JSON Schema specification, this validation is optional. For more information, see <a href="https://tools.ietf.org/html/draft-wright-json-schema-validation-01#page-14" title="Semantic validation with the format keyword" target="new">https://tools.ietf.org/html/draft-wright-json-schema-validation-01#page-14: Section 8: Semantic Validation with "Format"</a>. For valid values, see <a href="#format_keyword_options">Format keyword options</a> below.</dd>
<dd><strong>Key benefit</strong>: Enabled: stricter adherence to JSON Schema rules. Disabled: less processing overhead.</dd>

<dt>Verbose errors</dt>
<dd>If this option is enabled, detailed validation error messages are returned to the API client application. If disabled (the default), a generic summary error message is returned.</dd>
<dd><strong>Note</strong>: The Gateway container log always contains all message validation error details.</dd>
<dd><strong>Key benefit</strong>: Enabled: more detailed error messaging. Disabled: less processing overhead.</dd>


<dt>Coerce strings</dt>
<dd>With this option enabled, the policy treats strings as numeric, Boolean, or null values as appropriate for validation purposes. For example, if a string looks like a number and the validation rules expect a number, the rule will pass. By default, all validation is applied to values exactly as they are presented.</dd>
<dd><strong>Key benefit</strong>: Enabled: efficiency. Disabled: stricter validation.</dd>


<dt>Exact decimals</dt>
<dd>Controls how decimal numbers are compared. Normal comparison of decimal numbers treats values such as 2.25 and 2.250 as being equal. If this option is enabled, the number of significant digits becomes a factor in the comparison of decimal numbers; values such as 1.1 and 1.100 are not considered equal, since they do not have the same number of significant digits. With this option disabled, decimal numbers are compared based on their actual value without regard to the number of trailing significant zeroes.</dd>
<dd><strong>Key benefit</strong>: Enabled: stricter validation. Disabled: more relaxed validation.</dd>


<dt>Treat [null] as [&#160;]</dt>
<dd>With this option enabled, the policy treats an array of null ([null]) the same as an empty array ([]). An empty array in JSON schema is often defined as a null array. By default, strict JSON Schema rules are applied, so these two arrays are not equal.</dd>
<dd><strong>Key benefit</strong>: Enabled: more relaxed validation. Disabled: stricter adherence to JSON Schema rules.</dd>


<dt id="http_msg_validation_uk_ob">UK Open Banking</dt>
<dd><strong>Version: 2018.0.4 and later</strong></dd>
<dd>Enable this option for conformance to the UK <a href="../../cm/learnmore/basics_glossary.htm#gl_openbanking">Open Banking</a> specification with regard to the format of error messages returned to the client application. Check the box and then specify the version. Versions up to 3.1 are supported, as shown below.</dd>
<dd>When this option is enabled for version 3.1, the error messages returned to the API client application are formatted according to the Open Banking specification version 3.1; see <a href="https://openbanking.atlassian.net/wiki/spaces/DZ/pages/937656404/Read+Write+Data+API+Specification+-+v3.1#Read/WriteDataAPISpecification-v3.1-ErrorResponseStructure" title="Open Banking 3.1 specification, section titled Standard Error Code(s)" target="_blank">Open Banking 3.1 specification, section titled Standard Error Code(s)</a>. By default, when the option is not enabled, only a generic summary error message is returned.</dd>
<dd><strong>Note</strong>: The API Gateway container log always contains all message validation error details.</dd>
<dd><strong>Version: 2019.1.0 and later</strong></dd>
<dd id="http_msg_validation_uk_ob_docurl"><strong>Documentation URL</strong>: If you choose Version 3.1, an additional field appears, <strong>Documentation URL</strong>:</dd>
<dd><img src="images/http_msg_validation_ukob_31_docurl.png" alt="Specify JOSE Policy v2 Option for Open Banking version 3.1: Documentation URL" /></dd>
<dd>In this field, you can specify the documentation URL to include as part of Open Banking-compliant error messages returned by the policy. The default value is the URL for the UK Open Banking Read/Write Data Specification version 3.1.1: <a href="https://openbanking.atlassian.net/wiki/spaces/DZ/pages/1000702294/Read+Write+Data+API+Specification+-+v3.1.1" title="https://openbanking.atlassian.net/wiki/spaces/DZ/pages/1000702294/Read+Write+Data+API+Specification+-+v3.1.1" target="_blank">https://openbanking.atlassian.net/wiki/spaces/DZ/pages/1000702294/Read+Write+Data+API+Specification+-+v3.1.1</a>. You can change the value to another valid URL, which will be used in the <strong>Url</strong> field in error messages returned by the HTTP Message Validation policy, as specified in the <a href="https://openbanking.atlassian.net/wiki/spaces/DZ/pages/1000702294/Read+Write+Data+API+Specification+-+v3.1.1#Read/WriteDataAPISpecification-v3.1.1-ErrorResponseStructure" title="Link to Error Response Structure section of the UK Open Banking specification" target="_blank">Error Response Structure</a> section of the specification.</dd>


<dt id="http_msg_validation_allow_addnl_props">Allow additional properties by default</dt>
<dd><strong>Version: 2019.1.0 and later</strong></dd>
<dd>Determines the default behavior when an <strong>additionalProperties</strong> property in a Schema object is <strong>not</strong> specified in a Swagger schema:
<ul>
		<li>Enabled (the default value): all additional properties are allowed.</li>
		<li>Cleared: additional properties are not allowed for that schema.</li>
	</ul></dd>
<dd>For more information about Swagger support of the <strong>additionalProperties</strong> property in a Schema object, refer to the specification: <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#schemaObject" title="Link to Swagger 2.0 specification re additionalProperties property" target="_blank">Swagger 2.0</a> or <a href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#schemaObject" title="Link to OAS 3.0 specification re additionalProperties property" target="_blank">OAS 3.0</a>.</dd>


<dt id="log_additional_properties">Log additional properties</dt>
<dd><strong>Version: 2020.1.3 and later</strong></dd>
<dd>Indicates the behavior if the <strong>Allow additional properties by default</strong> field is enabled and the request message includes additional properties that are not defined in the API schema (from the uploaded API definition document, or as defined in the developer portal in the API Designer):
<ul>
		<li>Disabled (the default value) additional properties are allowed, and no alert is generated.</li>
		<li>Enabled: all additional properties are allowed, and an alert is generated.</li>
	</ul></dd>
<dd><strong>Note</strong>: If there is a Basic Auditing or Detailed Auditing policy on the API, the additional properties are also logged in the usage logs (unknown_validation_properties) if this setting is enabled.</dd>
<dd>If the <strong>Allow additional properties by default</strong> setting is disabled, or the API definition schema itself disallows additional properties, this setting does not have any effect.</dd>
<dd>Default: Disabled.</dd>


<dt id="ignore_extra_json">Ignore extra JSON in payload</dt>
<dd><strong>Version: 2019.1.5 and later</strong></dd>
<dd>Determines the behavior if a JSON payload includes extra content. By default, an error is returned if any extra content is encountered after the initial JSON object in the payload.</dd>
<dd>If you disable this option, and there is extra content after the initial JSON object in the payload, it is ignored.</dd>
<dd>Default: Enabled.</dd>


<dt id="http_msg_validation_allow_all">Allow All Headers</dt>
<dd><strong>Version: 2019.0.0 and later</strong></dd>
<dd>With this option enabled (the default), all headers are allowed, and are validated if they are specified in the schema for the calling operation.</dd>
<dd>If you want to specify one or more headers that should not be allowed, clear the <strong>Allow All Headers</strong> box and then, in the <strong>Headers not allowed</strong> table, specify the bad headers. Then specify the action to be taken if bad headers are found. Options:
	<ul>
		<li><strong>Strip unallowed headers</strong> checked: All headers listed in the <strong>Headers not allowed</strong> table are stripped, and the message is sent on without them.</li>
		<li><strong>Strip unallowed headers</strong> cleared: If any headers listed in the <strong>Headers not allowed</strong> table are found, an error is thrown and the message is aborted.</li>
	</ul>
	<p>If you want one or more headers to be excluded from validation, add them in the <strong>Headers excluded from validation</strong> table.</p>
	<p>An example is shown below.</p>
	<p><img src="images/http_message_validation_headers.jpg" alt="Specify HTTP Message Validation Policy Options for headers" /></p>
	<p><strong>Note</strong>: certain headers, such as the Accept header, are vital to the HTTP message and should never be included in the list of headers that are not allowed.</p></dd>



</dl>


<h3 id="format_keyword_options">Format keyword options</h3>
<p>Refer to the tables below for the validation specification for <strong>format</strong> keyword options.</p>
<ul>
	<li><a href="#format_keyword_examples">Examples</a></li>
	<li><a href="#format_keyword_not_supported">Options not yet implemented/supported</a></li>
</ul>

<h4 id="format_keyword_examples">Examples</h4>
<p>Below are some examples of type within the format keyword.</p>
<table class="doctable">
	<thead>
		<tr>
			<th>value</th>
			<th>Validation spec</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>int32</td>
			<td>32-bit signed integer</td>
		</tr>
		<tr>
			<td>int64</td>
			<td>64-bit signed integer</td>
		</tr>
		<tr>
			<td>float</td>
			<td>Single-precision floating point</td>
		</tr>
		<tr>
			<td>double</td>
			<td>Double-precision floating point</td>
		</tr>
		<tr>
			<td>binary</td>
			<td>All strings validate true</td>
		</tr>
		<tr>
			<td>password</td>
			<td>All strings validate true</td>
		</tr>
		<tr>
			<td>byte</td>
			<td>Standard Base64 encoded strings</td>
		</tr>
		<tr>
			<td>date</td>
			<td>yyyy-mm-dd</td>
		</tr>
		<tr>
			<td>date-time</td>
			<td>RFC 3339</td>
		</tr>
		<tr>
			<td>email</td>
			<td>RFC 5322, section 3.4.1</td>
		</tr>
		<tr>
			<td>hostname</td>
			<td>RFC 1034, section 3.1</td>
		</tr>
		<tr>
			<td>ipv4</td>
			<td>RFC 2673, section 3.2</td>
		</tr>
		<tr>
			<td>ipv6</td>
			<td>RFC 2373, section 2.2</td>
		</tr>
		<tr>
			<td>uri</td>
			<td>URIs (absolute) as per RFC 3986</td>
			</tr>
		<tr>
			<td>uri-reference</td>
			<td>URI Reference (URI or relative URI) as per RFC 3986</td>
		</tr>
		<tr>
			<td>base64</td>
			<td>Standard <strong>base64</strong> encoding for RFC 3548 or RFC 4648</td>
			</tr>
		<tr>
			<td>base64url</td>
			<td>Standard <strong>base64url</strong> with URL and Filename Safe Alphabet (RFC 4648 sec 5 Table 2: <strong>The "URL and Filename safe" Base 64 Alphabet</strong>)</td>
		</tr>
		<tr>
			<td>regex</td>
			<td><p>Regular Expressions (java.util.regex.Pattern rules)</p>
				<strong>Note</strong>: If you're using regular expressions, refer to <a href="#policy_regex">Using regular expressions</a> for information on syntax and limitations.</td>
		</tr>
		<tr>
			<td>time</td>
			<td>ISO-8601 extended local time format.</td>
		</tr>
		<tr>
			<td>uuid</td>
			<td>RFC 4122</td>
		</tr>
	</tbody>
</table>


<h4 id="format_keyword_not_supported">Options not yet implemented/supported</h4>
<p>The following options for the <strong>format</strong> keyword are not yet available.</p>
<table class="doctable">
	<thead>
		<tr>
			<th>value</th>
			<th>Validation spec</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td>json-pointer</td>
			<td>(not yet supported)</td>
		</tr>
		<tr>
			<td>uri-template</td>
			<td>(not yet implemented)</td>
		</tr>
	</tbody>
</table>
<p><a href="#top">Back to top</a></p>



<h2 id="policy_activating">Activating a policy</h2>
<p>When you create and configure a policy, the policy is in <strong>Draft</strong> state. When the policy configuration is complete, activate the policy: click <strong>Activate Policy</strong> and then confirm. See <a href="policy_management.htm#policy_activate">Activate a Policy</a>.</p>
<p>A policy in Draft state is not available for general use. Once you activate the policy, it is in <strong>Active</strong> state and is available for use.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="policy_attach">Attaching a policy</h2>
<p>To use the HTTP Message Validation Policy, go to the <strong>Policies</strong> folder in the respective organization and attach the policy to a web service, binding, or binding operation.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="policy_regex">Using regular expressions</h2>
<p>If you're using regular expressions, remember that the JSON Schema Validation specification (<a href="https://tools.ietf.org/html/draft-wright-json-schema-validation-01" title="JSON Schema specification" target="_blank">https://tools.ietf.org/html/draft-wright-json-schema-validation-01</a>) includes the following stipulations regarding use of regular expressions:</p>
<ul>
	<li>It supports a specific version of regular expression syntax, ECMA 262 (see the <a href="https://www.ecma-international.org/publications/standards/Ecma-262.htm" title="Link to ECMA 262 specification" target="_blank">ECMA 262 specification</a>).</li>
	<li>There are certain specific limitations, as laid out in the standard.</li>
</ul>
<p>For details, refer to the applicable section of the specification: <a href="https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-3.3" title="JSON Schema Validation spec, Section 3.3, Regular Expressions" target="_blank">section 3.3, regular expressions</a>.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="http_message_validation_examples">HTTP Message Validation Policy: examples</h2>
<p>This section includes a couple of request and response examples, with explanations how the HTTP Message Validation Policy would work in these scenarios. It includes:</p>
<ul>
	<li><a href="#sample_request">Sample request JSON</a></li>
	<li><a href="#sample_response_success">Sample success response</a></li>
	<li><a href="#sample_response_error">Sample error response</a></li>
</ul>

<h4 id="sample_request">Sample request JSON</h4>
<p>In the example below, from a Swagger definition, properties are defined for the request. The policy matches the incoming API request against this definition, and returns an error if any of the fields don't match the definition. In this example, the properties are named to indicate the type of acceptable input.</p>
<p>For example, the policy would reject a request to this API if a mandatory field is missing, if the specified data type doesn't match, or if a field value doesn't match specified constraints.</p>
<pre>{
  "mandatoryString": "String",
  "mandatoryDate": "2018-07-04T11:53:00.123Z",
  "mandatoryBoolean": true,
  "mandatoryNumber": 12345,
  "mandatoryInteger": 123,
  "mandatoryNull": null,
  "mandatoryEnum": "one",
  "optionalString": "String",
  "optionalDate": "2018-07-04T11:53:00.456Z",
  "optionalBoolean": true,
  "optionalNumber": 12345,
  "optionalInteger": 123,
  "optionalNull": null,
  "optionalRestrictedLengthString": "abcdefgh",
  "optionalMultipleOf": 20,
  "optionalInclusiveNumberRange": 10,
  "optionalExclusiveNumberRange": 99,
  "optionalAllOf": 30,
  "optionalArray": ["string1","string2","string3"],
  "optionalObject":{
  "objectProperty1": "one",
  "objectProperty2": 2,
  "objectProperty3": 3
  },
  "optionalContainsArray": ["string1","string2","2018-07-04T11:53:00.123Z"],
  "optionalIP": "256.123.123.123",
  "optionalUKPostcode": "W3 1WW",
  "optionalZipcode": "90210",
  "optionalEmail": "me@me.com",
  "anotherProperty":"value"
}</pre>

<h4 id="sample_response_success">Sample success response</h4>
<p>In the above example, a request that matches the API definition would pass validation, and the response below is returned from the back-end API.</p>
<pre>{
  "message": "Request validated successfully. Timestamp Thu Jul 05 2018 05:34:24 GMT-0700 (PDT)"
}</pre>

<h4 id="sample_response_error">Sample error response</h4>
<p>In the example below, the API definition for a PUT operation included validation that the body exists. When an API call is sent with no message body, this error response is returned.</p>
<pre>{
  "errorCount": 1,
  "errors": [
    {
      "seq": 1,
      "errorCode": "base.missing.instance",
      "errorMsg": "Required message part is missing",
      "path": "body:body#"
    }
  ]
}</pre>
<p><a href="#top">Back to top</a></p>



<hr class="divide_hr" />



<h2 id="related_topics">Related Topics</h2>
<div class="relatedlinks">
<ul>
	<li><a href="about_policies_view.htm">About Policies</a></li>
	<li><a href="policy_management.htm">Managing Policies</a></li>
	<li><a href="policies_operational_about.htm">About Operational Policies</a></li>
</ul>
<ul>
	<li><a href="../../cm/learnmore/basics_glossary.htm">Glossary of Terms for the Developer Portal</a></li>
</ul>
</div>