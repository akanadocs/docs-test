---
layout: page
title: Using the Concurrency Quota policy
description: Learn how to monitor web service concurrency performance by specifying a concurrency limit (quota).
product: ag
category: learn
sub-nav-class: Policies - QoS
weight: 04
type: page
nav-title: Concurrency Quota
---
<h1 id="top">Using the Concurrency Quota policy</h1>
<p>Learn how to monitor web service concurrency performance by specifying a concurrency limit (quota).</p>
<p>For information about using policies in the context of the Community Manager developer portal, see <a href="../../cm/learnmore/bus_admin_organizations.htm#h_business_policies">Business Policies</a>.</p>
<hr class="divide_hr" />



<h2 style="color: gray;">Table of Contents</h2>
<ol class="table_of_contents">
	<li><a href="#introduction">Introduction</a></li>
	<li><a href="#concurrency_quota_create">Creating a Concurrency Quota policy</a></li>
	<li><a href="#options">Concurrency Quota policy options</a></li>
	<li><a href="#configuration">Configuration</a></li>
	<li><a href="#policy_activating">Activating a policy</a></li>
	<li><a href="#policy_attach">Attaching a policy</a>	</li>
	<li><a href="#policy_qos_concurrency_quota_behavior_00">Concurrency Quota policy behavior</a>
		<ol>
<li><a href="#policy_qos_concurrency_quota_behavior_01">Policy behavior&#8212;summary</a></li>
			<li><a href="#policy_qos_concurrency_quota_behavior_02">Runtime behavior: default</a></li>
			<li><a href="#policy_qos_concurrency_quota_behavior_04">Runtime behavior with grid services enabled (com.soa.grid)</a></li>
			<li><a href="#policy_qos_concurrency_quota_behavior_05">Response time effect on concurrency quota counter</a></li>
		</ol>
	</li>
	<li><a href="#uc_policy_qos_concurrency_quota_pm">Concurrency Quota policy: use cases for Policy Manager</a></li>
	<li><a href="#uc_policy_qos_concurrency_quota_cm">Concurrency Quota policy: use cases for Community Manager</a></li>
		</ol>
	</li>
</ol>
<hr class="divide_hr" />



<h2 id="introduction">Introduction</h2>
<p>A Concurrency Quota policy is a Quality of Service (QoS) policy that allows you to:</p>
<ul>
	<li>Specify a limit (quota) for the number of concurrent requests allowed to the API/service.</li>
	<li>Configure a fault message that is returned to the consumer, and an alert that is generated, if a request exceeds the predefined quota.</li>
</ul>
<p>You can define a fault message by specifying the following values:</p>
<ul>
	<li>Name (Fault Message)</li>
	<li>SOAP fault element that holds errors and status information for a SOAP message (Fault Element Name)</li>
	<li>URL that points to the fault code schema (Fault Namespace URI)</li>
</ul>
<p>You can also define Alert Codes in the <strong>Alerts</strong> &gt; <strong>Alert Codes</strong> section and enable and select them in the policy definition. For more information, see <a href="../alerts/using_alert_codes.htm">Using Alert Codes</a>.</p>
<p>If the specified concurrency limit is exceeded, Policy Manager returns a fault and sends an alert.</p>



<h2 id="concurrency_quota_create">Creating a Concurrency Quota policy</h2>
<p>The first step in creating a policy is to define the basic policy information.</p>

<h4>To add a QoS policy</h4>
<ol>
	<li>Go to <strong>Workbench</strong> &gt; <strong>Browse</strong> &gt; <strong>Organization</strong>, and select <strong>Policies</strong> &gt; <strong>QoS Policies</strong>. The <strong>Policies Summary</strong> is displayed.</li>
	<li>Click <strong>Add Policy</strong>.</li>
	<li>Choose the policy type and click <strong>Next</strong>.</li>
	<li>Specify a name (required) and description (optional) and click <strong>Finish</strong>. At the <strong>Completion Summary</strong>, click <strong>Close</strong>. The <strong>Add Policy</strong> Wizard creates a draft policy instance that you can then configure on the <strong>Policy Details</strong> page.</li>
</ol>
<p>For more information, see <a href="policy_management.htm#add_policy">Add Policy</a>.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="options">Concurrency Quota policy options</h2>
<p>The policy includes the configuration options listed below.</p>

<ul>
	<li><strong>Concurrency Limit</strong>: Allows you to specify a concurrency limit (quota) that represents the maximum number of concurrent requests allowed. If the limit is exceeded, a fault message is returned to the consumer and an alert is logged.</li>
	<li><strong>Fault Message</strong>: The name of the SOAP fault message to be returned if the quota is exceeded (&lt;faultString&gt;).</li>
	<li><strong>Fault Element Name</strong>: The name of the SOAP fault element that holds errors and status information for a SOAP message.</li>
	<li><strong>Fault Namespace URI</strong>: The URL that points to the fault code schema.</li>
	<li><strong>Fault Namespace Prefix</strong>: Allows you to enter the fault namespace prefix.</li>
	<li><strong>Time to Clear Alert(s)</strong>: Allows you to enter the length of time for which the throughput needs to be within the limit before a second alert is sent to signify that the consumer is once again within the quota.</li>
	<li><strong>Set Reminder Alert</strong>: Enables the Reminder Alert function. This function sends the alert that is selected on the Alert Code drop-down list. The alert is sent at the <strong>Reminder Alert Interval</strong> until the consumer is within the quota.</li>
	<li><strong>Reminder Alert Interval(s)</strong>: Allows you to enter an interval (in seconds) at which Reminder Alerts are sent until the consumer is within the quota.</li>
	<li><strong>Alert Code</strong>: A drop-down menu that displays a list of custom alert codes that you have defined. If you have &quot;Send Reminder Alert&quot; selected, alerts are sent based on the alert interval defined using the selected Alert Code. For more information on defining an Alert Code, see <a href="../alerts/using_alert_codes.htm">Using Alert Codes</a>.</li>
	<li><strong>Clear Alert Code</strong>: A drop-down menu that displays a list of custom alert codes that you have defined. If you have &quot;Send Reminder Alert&quot; selected, alerts are sent when the alert condition no longer exists.</li>
	<li><strong>Reminder Alert Code</strong>: A drop-down menu that displays a list of custom alert codes that you have defined. If you have &quot;Send Reminder Alert&quot; selected, alerts are sent based on the specified interval when the condition continues to be exceeded.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="configuration">Configuration</h2>
<p>Let's take a quick walkthrough of the Concurrency Quota policy configuration process to get you started.</p>

<h4>Step 1: Add policy</h4>
<p>In Policy Manager, to create a Concurrency Quota policy instance, go to <strong>Policies</strong> &gt; <strong>QoS Policies</strong> and choose <strong>Add Policy</strong>.</p>

<h4>Step 2: Modify policy</h4>
<p>When you click <strong>Modify</strong> to make changes to the Concurrency Quota policy on the <strong>Policy Details</strong> page, the initial policy looks like this:</p>
<p><img src="images/concurrency_quota.jpg" alt="Modify Concurrency Quota page" /></p>
<p>Configure the policy options based on your requirements and click <strong>Apply</strong>.</p>


<h4 id="step_03_act">Step 3: Activate policy</h4>
<p>When the policy configuration is complete, activate the policy so that you can use it.</p>


<h4>Step 4: Attach policy</h4>
<p>After you've saved and activated your policy, you can attach it to a contract or service.</p>


<h4>Step 5: Test policy and view monitoring data</h4>
<p>After you've attached the Concurrency Quota policy to a contract or service, send a request to your service and go to the <strong>Services</strong> &gt; <strong>Monitoring</strong> section to view the results for Logs, Real Time Charts, and Historical Charts.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="policy_activating">Activating a policy</h2>
<p>When you create and configure a policy, the policy is in <strong>Draft</strong> state. When the policy configuration is complete, activate the policy: click <strong>Activate Policy</strong> and then confirm. See <a href="policy_management.htm#policy_activate">Activate a Policy</a>.</p>
<p>A policy in Draft state is not available for general use. Once you activate the policy, it is in <strong>Active</strong> state and is available for use.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="policy_attach">Attaching a policy</h2>
<p>To use the policy, go to the <strong>Policies</strong> folder in the respective organization and attach the policy.</p>
<p>You can attach the Concurrency Quota policy to:</p>
<ul>
	<li>A contract</li>
	<li>A service
	<p><strong>Note</strong>: Although the Community Manager developer portal user interface allows attaching a policy at the operation level, the Concurrency Quota policy works correctly only when attached to the service, not to an individual operation.</p></li>
</ul>
<p>Depending on where the policy is attached, the concurrency counter, which tracks the number of open requests, is activated for the service or for the contract.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="policy_qos_concurrency_quota_behavior_00">Concurrency Quota policy behavior</h2>
<p>In this section:</p>
<ul>
	<li><a href="#policy_qos_concurrency_quota_behavior_01">Policy behavior&#8212;summary</a></li>
	<li><a href="#policy_qos_concurrency_quota_behavior_02">Runtime behavior: default</a></li>
	<li><a href="#policy_qos_concurrency_quota_behavior_04">Runtime behavior with grid services enabled (com.soa.grid)</a></li>
	<li><a href="#policy_qos_concurrency_quota_behavior_05">Response time effect on concurrency quota counter</a></li>
</ul>


<h3 id="policy_qos_concurrency_quota_behavior_01">Policy behavior&#8212;summary</h3>
<p>When the Concurrency Quota policy is in use, there is a counter to determine whether the concurrency limit has been reached. </p>
<p>If the policy is attached at the contract level, the counter name is derived from the contract key. If the policy is attached at the service level, the counter name is based on the service key.</p>
<p>When this policy is attached to a service or contract, the Network Director does the following:</p>
<ol>
	<li>When a message request is received:
		<ol>
			<li>Checks to see if there is an existing counter. If there is no counter for the API contract or service, it creates a counter with a value of 0, following a specific naming convention for the contract or service.
				<p>The counter represents the number of threads active for the API based on its context (contract or service, depending on where the policy is attached), when the limit has not been exceeded.</p>
				</li>
			<li>Increments the counter by 1.</li>
			</ol>
			<p>Conditional: If the pre-set limit is exceeded, the Network Director initiates alert processing as defined in the policy.</p>
	</li>
	<li>When the corresponding response is received, the Network Director sends the response back to the client. At this point, transaction processing is complete. The Network Director then decrements the counter by 1.</li>
</ol>


<h3 id="policy_qos_concurrency_quota_behavior_02">Runtime behavior: default</h3>
<p>By default, the Concurrency Quota policy settings apply only to messages processed by the container, even if the container is in a cluster.</p>
<p>For example, if the policy allows 16 concurrent requests, and the Network Director container receives an additional request while 16 requests are still open, alert processing is initiated.</p>

<h3 id="policy_qos_concurrency_quota_behavior_04">Runtime behavior with grid services enabled (com.soa.grid)</h3>
<p>With grid services enabled, the counter is shared across all Network Director containers in a cluster.</p>
<p>For example, if the Concurrency Quota policy is set to 16 requests, and there are four Network Director containers, the limit is 16 requests between all four Network Director containers.</p>
<p>For more information about enabling grid services, see <a href="../../sp/platform_management/using_clusterable_cache.htm">Using the Grid Cache Service for Clustered Cache</a>.</p>
<h3 id="policy_qos_concurrency_quota_behavior_05">Response time effect on concurrency quota counter</h3>
<p>The counter is incremented for each request, and decremented when each response is complete. Therefore, if the response time is longer, it is more likely that the error limit will be reached since the counter is not decremented until the response is sent back to the client and the handlers are closed.</p>
<p>Let's say for example you attach this policy to two APIs, one of which has a significantly slower response time. With the same number of messages to both APIs, the API with the slower response time is likely to reach the concurrency limit sooner than the API with the faster response time.</p>
<p>In addition, if the policy is attached to an API that has multiple operations, and one of the operations has a higher response time, taking longer to process, the total number of requests for this one operation could keep the counter value high for a longer duration. This could result in calls to the other operations being rejected, even though the other operations have a much faster response time.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="uc_policy_qos_concurrency_quota_pm">Concurrency Quota policy: use cases for Policy Manager</h2>
<p>This section provides a list of Policy Manager-specific usage scenarios for the Concurrency Quota policy.</p>
<p>It includes:</p>
<ol>
	<li><a href="#uc_policy_qos_concurrency_quota_pm_01">Scenario 1: Generate alert when concurrent requests received</a></li>
	<li><a href="#uc_policy_qos_concurrency_quota_pm_02">Scenario 2: Generate reminder alert when concurrent requests received</a></li>
	<li><a href="#uc_policy_qos_concurrency_quota_pm_03">Scenario 3: Generate alert when using contracts</a></li>
	<li><a href="#uc_policy_qos_concurrency_quota_pm_04">Scenario 4: Generate clear alert when concurrency exceeds specified interval</a></li>
</ol>



<h3 id="uc_policy_qos_concurrency_quota_pm_01">Scenario 1: Generate alert when concurrent requests received</h3>
<p>Generate an alert and send an email to the administrators if a service receives more than 10 concurrent requests.</p>
<ol>
	<li>Create a physical service in the Policy Manager Management Console using <strong>Create Physical Service</strong>.</li>
	<li>Provide service details and click <strong>Finish</strong>.</li>
	<li>Using <strong>Virtualize Service</strong>, virtualize and host the physical service on Network Director (<strong>ND1</strong>), and assign a name (for example, V<strong>s1</strong>).</li>
	<li>Navigate to <strong>Organization</strong> &gt; <strong>Policies</strong> &gt; <strong>QoS Policies</strong> and use <strong>Add Policy</strong> to create a Concurrency Quota policy.</li>
	<li>Configure the Concurrency Quota policy with 10 Concurrency Limit and a custom Fault message.
		<p><img src="images/concurrency_quota_uc_pm_01.jpg" alt="" /></p>
	</li>
	<li>Activate the policy, and attach it to the Vs1 service in the <strong>Service Details</strong> &gt; <strong>Policy Attachments</strong> &gt; <strong>QoS</strong> section.</li>
	<li>Send 20 concurrent requests from the application/client to the Vs1 service.</li>
	<li>When the concurrency limit has been exceeded, the Fault Message is returned to the service consumer and an alert is logged at the service level.
		<p><img src="images/concurrency_quota_uc_pm_02.jpg" alt="" /></p></li>
	<li>The details in the usage logs show the error being displayed as configured in the policy.
		<p><img src="images/concurrency_quota_uc_pm_03.jpg" alt="" /></p>
	</li>
	<li>In the alert code, an email must be configured that will be sent to the administrator(s).</li>
	<li>Timeline
		<p><img src="images/concurrency_quota_uc_pm_04.jpg" alt="" /></p>
	</li>
</ol>


<h3 id="uc_policy_qos_concurrency_quota_pm_02">Scenario 2: Generate reminder alert when concurrent requests received</h3>
<p>Generate a remainder alert and run a Management Script if more than 10 concurrent requests per 10 seconds are received repeatedly by a service in the 100 seconds.</p>
<ol>
	<li>Create a physical service in the Policy Manager Management Console using <strong>Create Physical Service</strong>.</li>
	<li>Provide service details and click <strong>Finish</strong>.</li>
	<li>Using <strong>Virtualize Service</strong>, virtualize and host the physical service on Network Director (<strong>ND1</strong>), and assign a name (for example, V<strong>s1</strong>).</li>
	<li>Navigate to <strong>Organization</strong> &gt; <strong>Policies</strong> &gt; <strong>QoS Policies</strong> and use <strong>Add Policy</strong> to create a Concurrency Quota policy.</li>
	<li>Configure the Concurrency Quota policy with 10 Concurrency Limit and a custom Fault message. Set Remainder Alert interval to 10 seconds and Clear alert time interval to 100 seconds.
		<p><img src="images/concurrency_quota_uc_pm_05.jpg" alt="" /></p>
	</li>
	<li>Activate the policy, and attach it to the Vs1 service in the <strong>Service Details</strong> &gt; <strong>Policy Attachments</strong> &gt; <strong>QoS</strong> section.</li>
	<li>Send 20 concurrent requests from the application/client to the Vs1 service. Results:
		<ol>
			<li>When the concurrency limit has been exceeded, the Fault Message is returned to the service consumer and an alert is logged at the service level.</li>
			<li>The details in the usage logs show the error being displayed as configured in the policy.</li>
		</ol>
	</li>
	<li>Keep sending 20 concurrent requests from the application/client to the Vs1 service. Results:
		<ol>
			<li>During the first 10 seconds no alert is shown.</li>
			<li>If the concurrency hits are seen after 10 seconds, a remainder alert is thrown which is valid for the next 10 seconds.</li>
			 <li>After the first interval of 10 seconds, if the concurrency hits are still observed, there is another remainder alert.
				<p><img src="images/concurrency_quota_uc_pm_06.jpg" alt="" /></p></li>
			<li>Within the clear interval, for every 10 seconds, this alert is thrown if validation crosses</li>
			<li>In the Alert code, a script can be configured to run (for example, to store any sort of information related to the alert).</li>
		</ol>
	</li>
</ol>


<h3 id="uc_policy_qos_concurrency_quota_pm_03">Scenario 3: Generate alert when using contracts</h3>
<p>Generate an alert if an application hits a contract when sending more than 15 concurrent requests to various services using the contract</p>
<ol>
	<li>Create a physical service in the Policy Manager Management Console using <strong>Create Physical Service</strong>.</li>
	<li>Provide service details and click <strong>Finish</strong>.</li>
	<li>Using <strong>Virtualize Service</strong>, virtualize and host the physical service on Network Director (<strong>ND1</strong>), and assign a name (for example, V<strong>s1</strong>).</li>
	<li>Navigate to <strong>Organization</strong> &gt; <strong>Policies</strong> &gt; <strong>QoS Policies</strong> and use <strong>Add Policy</strong> to create a Concurrency Quota policy.</li>
	<li>Configure the Concurrency Quota policy with 15 Concurrency Limit and a custom Fault message.</li>
	<li>Activate the policy, and attach the Concurrency Quota policy to a contract which serves Vs1 and Vs2 services.
		<p><img src="images/concurrency_quota_uc_pm_07.jpg" alt="" /></p></li>
	<li>Send 25 concurrent requests from the application/client to Vs1 and Vs2 services all together
		<ol>
			<li>When the concurrency limit has been exceeded, the Fault Message is returned to the service consumer and an alert is logged at contract level.</li>
			<li>The details in the usage logs show the error being displayed as configured in the policy.</li>
		</ol>
	</li>
</ol>


<h3 id="uc_policy_qos_concurrency_quota_pm_04">Scenario 4: Generate clear alert when concurrency exceeds specified interval</h3>
<p>Generate a clear alert and send an email to the administrator when concurrency is no more exceeded in the 100 seconds interval</p>
<ol>
	<li>Create a physical service in the Policy Manager Management Console using <strong>Create Physical Service</strong>.</li>
	<li>Provide service details and click <strong>Finish</strong>.</li>
	<li>Using <strong>Virtualize Service</strong>, virtualize and host the physical service on Network Director (<strong>ND1</strong>), and assign a name (for example, V<strong>s1</strong>).</li>
	<li>Navigate to <strong>Organization</strong> &gt; <strong>Policies</strong> &gt; <strong>QoS Policies</strong> and use <strong>Add Policy</strong> to create a Concurrency Quota policy.</li>
	<li>Configure the Concurrency Quota policy with 10 Concurrency Limit and a custom Fault message.</li>
	<li>Activate the policy, and attach it to the Vs1 service in the <strong>Service Details</strong> &gt; <strong>Policy Attachments</strong> &gt; <strong>QoS</strong> section.</li>
	<li>Send 20 concurrent requests from the application/client to the Vs1 service.
		<ol>
			<li>When the concurrency limit has been exceeded, the Fault Message is returned to the service consumer and an alert is logged at the service level.</li>
			<li>The details in the usage logs show the error being displayed as configured in the policy.</li>
			<li>In the next 100 seconds, if the policy is not violated, a clear alert is sent.
				<p><img src="images/concurrency_quota_uc_pm_08.jpg" alt="" /></p></li>
			<li>In the clear alert code, an email must be configured that will be sent to the administrator(s).</li>
		</ol>
	</li>
</ol>
<h3>Timeline (Scenarios 2 and 4)</h3>
<p><img src="images/concurrency_quota_uc_pm_09.jpg" alt="" /></p>
<p><a href="#top">Back to top</a></p>





<h2 id="uc_policy_qos_concurrency_quota_cm">Concurrency Quota policy: use cases for Community Manager</h2>
<p>This section provides a list of Community Manager-specific usage scenarios for the Concurrency Quota policy.</p>
<p>It includes:</p>
<ol>
	<li><a href="#uc_policy_qos_concurrency_quota_cm_00">Add / configure Concurrency Quota policy</a></li>
	<li><a href="#uc_policy_qos_concurrency_quota_cm_01">Scenario 1: How do I verify Concurrency Quota policy at the service level?</a></li>
	<li><a href="#uc_policy_qos_concurrency_quota_cm_02">Scenario 2: How do I verify Concurrency Quota policy at the contract level?</a></li>
	<li><a href="#uc_policy_qos_concurrency_quota_cm_03">Scenario 3: How do I verify Concurrency Quota policy at the license &gt; term level?</a></li>
</ol>


<h3 id="uc_policy_qos_concurrency_quota_cm_00">Add / configure Concurrency Quota policy</h3>
<p>If you are using a Concurrency Quota policy with Community Manager, you must first add the policy to the Community Manager Tenant Organization in Policy Manager. Once that's done, it is available for selection in the Community Manager developer portal.</p>
<ol>
	<li>Go to the Policy Manager Management Console &gt; Tenant Organization &gt; <strong>Policies</strong> &gt; <strong>QoS Policies</strong> and click <strong>Add Policy</strong>.
<p><img src="images/concurrency_quota_uc_cm_01.jpg" alt="" /></p></li>
	<li>Specify Policy Name, Policy Type (Concurrency Quota policy), click <strong>Finish</strong>, and then click <strong>Close</strong>.
		<p><img src="images/concurrency_quota_uc_cm_02.jpg" alt="" /></p>
	</li>
	<li>On the <strong>Concurrency Quota policy Details</strong> screen, click <strong>Modify</strong>.
		<p><img src="images/concurrency_quota_uc_cm_03.jpg" alt="" /></p>
	</li>
	<li>Provide the policy details and click <strong>Finish</strong>.
		<p><img src="images/concurrency_quota_uc_cm_04.jpg" alt="" /></p>
	</li>
	<li>Activate the policy.
		<p><img src="images/concurrency_quota_uc_cm_05.jpg" alt="" /></p>
		<p><img src="images/concurrency_quota_uc_cm_06.jpg" alt="" /></p>
	</li>
</ol>


<h3 id="uc_policy_qos_concurrency_quota_cm_01">Scenario 1: How do I verify Concurrency Quota policy at the service level?</h3>
<ol>
	<li>Launch Community Manager.</li>
	<li>Attach the Concurrency Quota policy to the API implementation.
		<p><img src="images/concurrency_quota_uc_cm_07.jpg" alt="" /></p>
	</li>
	<li>Request API access. Verify that the contract is activated.
		<p><img src="images/concurrency_quota_uc_cm_08.jpg" alt="" /></p></li>
	<li>Go to Test Client and send continuous requests. This policy condition is met only when hitting concurrent requests (i.e., sending multiple requests in 1 second). This behavior is shown below using SoapUI and Test Client.</li>
	<li>Start one load test to send continuous requests from SoapUI. Also send requests from Test Client one by one. When multiple requests are received, the policy condition is met and you'll see a fault message in the response window.
		<p><img src="images/concurrency_quota_uc_cm_09.jpg" alt="" /></p>
	</li>
	<li>Alerts are displayed in the Community Manager API &gt; board (as shown below).
		<p><img src="images/concurrency_quota_uc_cm_10.jpg" alt="" /></p>
	</li>
</ol>


<h3 id="uc_policy_qos_concurrency_quota_cm_02">Scenario 2: How do I verify Concurrency Quota policy at the contract level?</h3>
<ol>
	<li>Attach the Concurrency Quota policy at the Contract Level and activate the contract.
		<p><img src="images/concurrency_quota_uc_cm_11.jpg" alt="" /></p>
	</li>
	<li>Now Go to Test Client and send continuous requests. This policy condition will meet only when hitting concurrent requests (i.e., sending multiple requests in 1 second).</li>
	<li>This behavior is shown below using SoapUI and Test Client.</li>
	<li>Start one load test to send continuous requests from SoapUI. Also send requests from Test Client one by one. When multiple requests are received, the policy condition is met and you'll see a fault message in the response window.
		<p><img src="images/concurrency_quota_uc_cm_12.jpg" alt="" /></p>
	</li>
	<li>Alerts are displayed in the Board for the API.
		<p><img src="images/concurrency_quota_uc_cm_13.jpg" alt="" /></p>
	</li>
	<li>Alerts will also be displayed in the Policy Manager Registry.
		<p><img src="images/concurrency_quota_uc_cm_14.jpg" alt="" /></p>
	</li>
</ol>


<h3 id="uc_policy_qos_concurrency_quota_cm_03">Scenario 3: How do I verify Concurrency Quota policy at the license &gt; term level?</h3>
<ol>
	<li>Edit License and attach Concurrency Quota policy.
		<p><img src="images/concurrency_quota_uc_cm_15.jpg" alt="" /></p></li>
	<li>Next, test the Concurrency Quota policy at the License term level. This assumes that the same scope (as above) is used for Scope mapping, and the same license is selected while requesting API access.</li>
	<li>Go to Test Client and send continuous requests. This policy condition is met only when hitting concurrent requests (that is, sending multiple requests in 1 second).</li>
	<li>This behavior is shown below using SoapUI and Test Client.</li>
	<li>Start one load test to send continuous requests from SoapUI. Also send requests from Test Client one by one. When multiple requests are received, the policy condition is met and you'll see a fault message in the response window.
		<p><img src="images/concurrency_quota_uc_cm_16.jpg" alt="" /></p></li>
	<li>Alerts are displayed in Community Manager, in the Board for the API.
		<p><img src="images/concurrency_quota_uc_cm_17.jpg" alt="" /></p>
		<p><img src="images/concurrency_quota_uc_cm_18.jpg" alt="" /></p>
		<p><img src="images/concurrency_quota_uc_cm_19.jpg" alt="" /></p>
		<p>In the API Monitoring Logs, the following logs will display for concurrency faults.</p>
		<p><img src="images/concurrency_quota_uc_cm_20.jpg" alt="" /></p></li>
</ol>
<p><a href="#top">Back to top</a></p>



<hr class="divide_hr" />



<h2 id="related_topics">Related Topics</h2>
<div class="relatedlinks">
<ul>
	<li><a href="about_policies_view.htm">About Policies</a></li>
	<li><a href="policy_management.htm">Managing Policies</a></li>
	<li><a href="policies_operational_about.htm">About Operational Policies</a></li>
</ul>
<ul>
	<li><a href="../../cm/learnmore/basics_glossary.htm">Glossary of Terms for the Community Manager developer portal</a></li>
</ul>
</div>