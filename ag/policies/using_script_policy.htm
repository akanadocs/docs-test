---
layout: page
title: Using the QoS Script Policy
description: Learn how to add custom utility scripts for performing different actions to the policy definition, using JavaScript, Jython, or BeanShell script languages.
product: ag
category: learn
weight: 05
sub-nav-class: Policies - QoS
type: page
nav-title: Using the QoS Script Policy
---
<h2 id="top">Using the QoS Script Policy</h2>
<p>Learn how to add custom utility scripts for performing different actions to the policy definition, using JavaScript, Jython, or BeanShell script languages.</p>


<p>
<a href="../scripts/getting_started_with_scripts.htm" class="button secondary">Getting Started with Scripts (PM7x)</a>  
<a href="../scripts/getting_started_with_scripts_pm8x.htm" class="button secondary">Getting Started with Scripts (PM8x)</a>  
<a href="qos_policies.htm" class="button secondary">QoS Policies</a></p>

<p><a href="{{ site.baseurl }}/ag/assets/scriptDocs/index.html" class="button secondary">Policy Manager Scripting API (7.0 / 7.1)</a>  
<a href="{{ site.baseurl }}/ag/assets/scriptDocs_pm72/index.html" class="button secondary">Policy Manager Scripting API (7.2)</a>  
<a href="{{ site.baseurl }}/ag/assets/scriptDocs_pm80/index.html" class="button secondary">Policy Manager Scripting API (8.0)</a></p>

<h5 class="stamp">Supported Platforms: 7.x, 8.0</h5>

<div class = "divider1"></div>



<h3 style="color: gray;">Table of Contents</h3>
<ol class="table_of_contents">
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#options">Script Policy Options</a></li>
  <li><a href="#configuration">Configuration</a></li>
  <li><a href="#pm_usecases">Use Cases for Policy Manager</a></li>
  <li><a href="#cm_usecases">Use Cases for the Akana API Platform (Community Manager)</a></li>
</ol>
<div class = "divider1"></div>



<a name="introduction"></a><h3>Introduction</h3>
<p>The Quality of Service (QoS) Script Policy allows you to add custom utility scripts for performing different actions to the policy definition, using JavaScript, Jython, or BeanShell script languages.</p>
<p>The Policy Manager Scripting API, located in the \docs\scriptDocs folder of the Policy Manager installation folder, provides a series of interfaces and classes you can use to build process-related scripts. The API includes lots of use cases and sample code you can experiment with and use as a baseline when building your own custom quota management scripts.</p>
<p>You can also access the API on the Akana Documentation Repository:</p>
<ul>
  <li><a href="{{ site.baseurl }}/ag/assets/scriptDocs/index.html">Policy Manager Scripting API (7.0 / 7.1)</a></li>
  <li><a href="{{ site.baseurl }}/ag/assets/scriptDocs_pm72/index.html">Policy Manager Scripting API (7.2)</a></li>
  <li><a href="{{ site.baseurl }}/ag/assets/scriptDocs_pm80/index.html">Policy Manager Scripting API (8.0)</a></li>
</ul>



<a name="options"></a><h3>Script Policy Options</h3>
<p>The policy includes the configuration options shown below.</p>

<h5>Script Policy Details</h5>
<ul>
  <li><strong>Name</strong>: A read-only field that displays the name of the Script Policy.</li>
  <li><strong>Description</strong>: A read-only field that displays the description of the Script Policy.</li>
</ul>
<h5>Script Policy</h5>
<ul>
  <li><strong>Imports</strong>: This section includes common functions that you might need to perform in your scripts that have been saved in Script objects, using the <strong>Policy Manager</strong> &gt; <strong>Workbench</strong> &gt; <strong>Organization</strong> &gt; <strong>Scripts</strong> &gt; <strong> Add Script</strong> function. The available scripts are listed in the <strong>Available Scripts</strong> tree. You can move any number of the scripts in that tree to the <strong>Imported Scripts</strong> list box. Only scripts that match the language type are available for selection in the tree.</li>
  <li><strong>Script Language</strong>: A drop-down list box that allows you to select the script language for the script to be added. Supported options: JavaScript, Jython, and BeanShell Engine script language types.</li>
  <li><strong>Expression</strong>: A text box that allows you to enter your script.</li>
  <li><strong>Test Script</strong>: A button that allows you to test the entered expression to determine if it is properly formed. <em><strong>This option is available in Policy Manager version 7.x only.</strong></em></li>
</ul>
<a name="configuration">
</a><h3>Configuration</h3>
<p>Let's take a quick walkthrough of the Script Policy configuration process to get you started.</p>
<h5>Step 1: Review Script Creation Process</h5>
<p>The first step is to review the following documentation, to become familiar with the script creation process, available tools, and the Policy Manager scripting API:</p>
<ul>
  <li>Scripting documentation, applicable version:
    <ul>
      <li><a href="../scripts/getting_started_with_scripts.htm" >Getting Started with Scripts (PM7x)</a></li>
      <li><a href="../scripts/getting_started_with_scripts_pm8x.htm" >Getting Started with Scripts (PM8x)</a></li>
    </ul>
  </li>
  <li>Policy Manager Scripting API, applicable version:
    <ul>
      <li><a href="{{ site.baseurl }}/ag/assets/scriptDocs/index.html">Policy Manager Scripting API (7.0 / 7.1)</a></li>
      <li><a href="{{ site.baseurl }}/ag/assets/scriptDocs_pm72/index.html">Policy Manager Scripting API (7.2)</a></li>
      <li><a href="{{ site.baseurl }}/ag/assets/scriptDocs_pm80/index.html" >Policy Manager Scripting API (8.0)</a></li>
    </ul>
  </li>
  </ul>
<h5>Step 2: Add Policy</h5>
<p>In Policy Manager, you can create a Script Policy instance using <strong>Add Policy</strong> in the <em>Policies &gt; QoS Policies</em> section.</p>
<h5>Step 3: Modify Policy</h5>
<p>When you click <strong>Modify</strong> to make changes to the Script Policy on the <em>Policy Details</em> page, the initial policy looks like this:</p>
<p><img src="images/modify script policy_screen1.jpg" width="586" height="379" alt="" /></p>
<p>Select the script language from the drop-down list box (JavaScript, Jython, or BeanShell Engine), and enter your script into the <strong>Expression</strong> text box.</p>
<p>Click <strong>Test Script</strong> (<em>version 7.x only</em>) to verify that your script is properly formed. Make adjustments as needed. Click <strong>Finish</strong> to add your script, and then click <strong>Close</strong> to exit the wizard.</p>
<h5>Step 4: Activate Policy</h5>
<p>If you are using Policy Manager 7.2 or above, activate the policy in the Policy Workflow Portlet. Otherwise, skip this step.</p>
<h5>Step 5: Attach Policy</h5>
<p>After you've saved your policy, attach it to a web service operation.</p>
<h5>Step 6: Test Policy</h5>
<p>To test the policy, send a request and view the <em>Alerts</em> portlet in the <strong>Registry</strong> of the Organization Tree. An alert is generated for each request sent.</p>
<p><a href="#top">back to top</a></p>



<a name="pm_usecases"></a>
<h3>Use Cases for Policy Manager</h3>
<p>For a walkthrough on how to use scripts and access to the Policy Manager Scripting API for each Policy Manager version, see <a href="{{ site.baseurl }}/ag/scripts/getting_started_with_scripts.htm" target="_blank">Getting Started with Scripts (PM7x)</a> or <a href="{{ site.baseurl }}/ag/scripts/getting_started_with_scripts.htm" target="_blank">Getting Started with Scripts (PM8x)</a>.</p>
<p><a href="#top">back to top</a></p>



<a name="cm_usecases"></a>
<h3>Use Cases for the Akana API Platform (Community Manager)</h3>
<p>For a list of use cases for the Script Policy, specific to the Akana API platform, see <a href="../assets/pm_qos/cm_script_policy_use_cases.pdf" target="_blank">Script Policy Usage Scenarios for Community Manager</a>.</p>
<p><a href="#top">Back to top</a></p>

