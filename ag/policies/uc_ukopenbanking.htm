---
layout: page
title: Use Case - Open Banking
description: An end-to-end example of using the JOSE Security Policy v2 to successfully implement the UK Open Banking standard.
product: ag
category: learn
sub-nav-class: Policies - Operational
weight: 39
type: page
nav-title: Use Case - UK Open Banking
---
<h1 id="top">Use Case: Open Banking</h1>
<p>An end-to-end example of successfully implementing the UK Open Banking standards via the Akana API Platform, using the JOSE Security Policy v2.</p>
<p><a href="../../cm/learnmore/basics_glossary.htm#gl_fapi">FAPI</a>, the financial-grade API security standard, covers critical aspects of API authentication and authorization. The UK Open Banking standard extends it in part; for example, by requiring payload protection using JOSE security for its Payment Initiation API.</p>
<p>This use case focuses on the use of the Akana JOSE Security Policy v2 to send a message that is protected in accordance with the UK Open Banking specification, for an API secured with OAuth 2.0 over mutual TLS, and demonstrates how this approach ensures message integrity and non-repudiation.</p>
<p>The example described here could also be applied to alternative standards, such as the ones being created by the Berlin Group for PSD2 and CDS for Australian Open Banking.</p>
<p>In this use case, payload content is signed but not encrypted. The policy also supports encryption of JSON Web Tokens, but this is not mandated under the standard, and is not covered in this use case.</p>
<p>For information about using policies in the context of the Community Manager developer portal, see <a href="../../cm/learnmore/bus_admin_organizations.htm#h_business_policies">Business Policies</a>.</p>
<hr class="divide_hr" />



<h2 style="color: gray;">Table of Contents</h2>
<ol class="table_of_contents">
	<li><a href="#uc_uk_ob_overview">Use case overview</a>
		<ul>
			<li><a href="#uc_ob_prerequisites">Prerequisites</a></li>
			<li><a href="#tc_ukob_setup">Setting up the use case: summary</a></li>
		</ul>
		</li>
	<li><a href="#s01">Step 1: Set up the OAuth Provider domain</a>
		<ul>
			<li><a href="#s01_01">Step 1-1: Create the OAuth Provider domain</a></li>
			<li><a href="#s01_01">Step 1-2: </a><a href="#s01_02">Add the authorization server URL as a trusted hostname</a></li>
		</ul>
	</li>
	<li><a href="#s02_policies">Step 2: Create the policies</a>
		<ul>
			<li><a href="#s02_policies_01">Policy overview</a></li>
			<li><a href="#s02_policies_02">Setting up the policies</a></li>
		</ul></li>
	<li><a href="#s03_api">Step 3: Create and configure the API</a>
		<ul>
			<li><a href="#s03_01">Step 3-1: Create the API</a></li>
			<li><a href="#s03_02">Step 3-2: Modify the API implementation so that only mutual HTTPS is valid</a></li>
			<li><a href="#s03_03">Step 3-3: Turn off anonymous access</a></li>
			<li><a href="#s03_04">Step 3-4: Turn on debug mode</a></li>
			<li><a href="#s03_05">Step 3-5: Attach the policies to the API</a></li>
			<li><a href="#s03_06">Step 3-6: Create a mock response</a></li>
			<li><a href="#s03_07">Step 3-7: Set up the API OAuth Details</a></li>
		</ul>
	</li>
	<li><a href="#s04_app">Step 4: Create the app</a></li>
	<li><a href="#s05_contract">Step 5: Create a contract between the app and the API</a></li>
	<li><a href="#s06_keystore">Step 6: Create the keystore/certificate</a>
		<ul>
			<li><a href="#note_tc_upload_p12">Note: Uploading the p12 file to Test Client</a></li>
			<li><a href="#s06_keystore_01">Step 6-1: Keystore Explorer: Generate a new key pair</a></li>
			<li><a href="#s06_keystore_01">Step 6-2: </a><a href="#s06_keystore_02">Keystore Explorer: Generate a certificate signing request (csr file)</a></li>
			<li><a href="#s06_keystore_01">Step 6-3: </a><a href="#s06_keystore_03">Community Manager developer portal: Import certificate signing request to app (csr file)</a></li>
			<li><a href="#s06_keystore_01">Step 6-4: </a><a href="#s06_keystore_04">Community Manager developer portal: Export signed certificate (certificate.cer file)</a></li>
			<li><a href="#s06_keystore_01">Step 6-5: </a><a href="#s06_keystore_05">Keystore Explorer: Import certificate (cer file)</a></li>
			<li><a href="#s06_keystore_01">Step 6-6: </a><a href="#s06_keystore_06">Keystore Explorer: Save the keystore as a p12 file</a></li>
		</ul>
	</li>
	<li><a href="#tc_ukob_run">Running the use case</a>
		<ul>
			<li><a href="#tc_ukob_test">Testing in Test Client</a></li>
			<li><a href="#tc_ukob_results">Results</a></li>
			<li><a href="#tc_ukob_trace_tab">Reviewing the Trace tab</a></li>
			<li><a href="#tc_ukob_token_decode">Decoding the JWT token</a></li>
			<li><a href="#tc_ukob_metrics">Reviewing the metrics</a></li>
		</ul></li>
	<li><a href="#tc_ukob_resources">Additional information/resources</a>
		<ul>
			<li><a href="#tc_ukob_resources_01">Input Swagger file for the API</a></li>
			<li><a href="#tc_ukob_resources_02">Request content for the Test Client message</a></li>
			<li><a href="#tc_ukob_resources_03">Response content for the Content Activity in the Process Editor</a> (set up in <a href="#s03_06">Step 3-6: Create a mock response</a>)</li>
			<li><a href="#tc_ukob_resources_04">A valid keystore</a></li>
			<li><a href="#tc_ukob_policies">Policy details</a></li>
		</ul></li>
	<li><a href="#tc_ukob_on_prem_00">Extra steps for on-prem setup</a>
		<ul>
			<li><a href="#tc_ukob_on_prem_https_listener">On-prem setup: Setting up the HTTPS listener</a></li>
			<li><a href="#tc_ukob_on_prem_hosts_file">On-prem setup: Updating the etc/hosts file</a></li>
		</ul>
	</li>
</ol>
<hr class="divide_hr" />



<h2 id="uc_uk_ob_overview">Use case overview</h2>
<p>The UK Open Banking security profile is based on a layered architecture. Security is implemented:</p>
<ol>
	<li>At the transport layer.</li>
	<li>At the client authorization layer.</li>
	<li>At the message level, with the JOSE Security Policy v2 which ensures the integrity of the message.</li>
</ol>
<p>This example shows all three layers:</p>
<ol>
	<li>Mutual TLS via certificate-based client authentication applied to the transport layer (explicitly enforced by the <a href="#policy_http_security">HTTP Security Policy</a>).</li>
	<li>Client authorization using OAuth 2.0 (which some API resources will require to be extended with OpenID Connect for explicit resource owner authentication and consent). Enforced by the <a href="#policy_oauth">OAuth Policy</a>.</li>
	<li>Message security, with the security requirements specific to the UK Open Banking standard in place (enforced by the <a href="#policy_jose_security_v2">JOSE Security Policy v2</a>).</li>
</ol>
<p class="Note"><strong>Note</strong>: This example uses the UK Open Banking specification version 3.1, as set up in the JOSE Security Policy v2 configuration.</p>
<p>In this use case we will set up:</p>
<ul>
	<li><strong>Domain</strong>: An OAuth Provider domain</li>
	<li><strong>API</strong>: An API that is created by importing a Swagger/OAS document that describes the UK Open Banking interface, as published by the UK Open Banking Implementation Entity.
		<p>Note that this is an example for illustration purposes; of course, the API does not actually connect with a bank. This is a sandbox API scenario. If the API is called successfully and all the security rules are satisfied, a static response is returned.</p></li>
	<li><strong>App</strong>: An app that accesses the API, has an active contract with the API, has a certificate in place, and presents the certificate when calling the API in Test Client. You'll be able to send a message and receive a successful response, and you can see the JOSE headers in action and see how the integrity of the message is preserved.</li>
</ul>
<p>In this example the content is signed, but not encrypted.</p>
<p>This use case includes all artifacts and instructions you'll need to set up the use case yourself, in the <a href="#tc_ukob_resources">Additional information/resources</a> section.</p>
<h3 id="uc_ob_prerequisites">Prerequisites</h3>
<p>To run this use case you'll need the following:</p>
<ul>
	<li>A working installation of the Akana API Platform, either on-prem or a SaaS account. The API Gateway must be configured to have an HTTPS listener that accepts (or requires) client certificates:
		<ul>
			<li><strong>SaaS</strong>: If you are using the SaaS platform, the HTTPS listener is already configured for you, but you must be sure to use the mTLS endpoint (hostname includes <strong>mtl</strong>). In this use case, this is set up in <a href="#s03_02">Step 3-2: Modify the API implementation so that only mutual HTTPS is valid</a>.</li>
			<li><strong>On-Prem</strong>: If you have an on-prem installation, set up an inbound HTTPS listener for any Network Director container that needs it. For more information, see <a href="#tc_ukob_on_prem_https_listener">On-prem setup: Setting up the HTTPS listener</a>.</li>
		</ul>
	</li>
	<li>A keystore, in&#160;.p12 format, or a way of generating it. The keystore contains the cryptographic private key and corresponding certificate chain. The platform supports both&#160;.p12 and&#160;.jks format. This use case includes instructions for using Keystore Explorer to generate a keystore in .p12 format. See <a href="#s06_keystore">Create the keystore/certificate</a>.
		<p>These are required for setting up the mutual TLS connection and also for signing the message (JWT) as required by the JOSE Security policy.</p></li>
	</ul>
<p><a href="#top">Back to top</a></p>



<h3 id="tc_ukob_setup">Setting up the use case: summary</h3>
<p>To set up this use case in the Akana API platform you'll need to:</p>
<ul>
	<li><a href="#s01">Step 1: Set up the OAuth Provider domain</a> (Business Admin/Site Admin)</li>
	<li><a href="#s02_policies">Step 2: Create the policies</a> (Business Admin)</li>
	<li><a href="#s03_api">Step 3: Create and configure the API</a></li>
	<li><a href="#s04_app">Step 4: Create the app</a></li>
	<li><a href="#s05_contract">Step 5: Create a contract between the app and the API</a></li>
	<li><a href="#s06_keystore">Step 6: Create the keystore/certificate</a></li>
	</ul>
<p>Once all the above is set up, you're ready to test the API in Test Client: see <a href="#tc_ukob_run">Running the use case</a>.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="s01">Step 1: Set up the OAuth Provider domain</h2>
<p>In this section:</p>
<ul>
	<li><a href="#s01_01">Step 1-1: Create the OAuth Provider domain</a> (Business Admin task)</li>
	<li><a href="#s01_01">Step 1-2: </a><a href="#s01_02">Add the authorization server URL as a trusted hostname</a> (Site Admin task)</li>
</ul>


<h3 id="s01_01">Step 1-1: Create the OAuth Provider domain</h3>
<p>You'll need to have Business Admin permissions to set up the OAuth provider domain (or ask a Business Admin to do it for you).</p>
<ol>
	<li>Go to <strong>More</strong> &gt; <strong>Admin</strong> &gt; <strong>Domains</strong> and click <strong>Add Domain</strong>.</li>
	<li>Choose <strong>Akana OAuth/OIDC Provider</strong>.</li>
	<li>In the <strong>Add OAuth/OIDC Provider</strong> wizard, set values as follows:
		<ul>
			<li><strong>Tab 1</strong>: Name, optional description. In this example: <strong>OAuth_OIDC_UK_OB_UC</strong>.</li>
			<li><strong>Tab 2, Grant Types</strong>: Choose <strong>Client Credentials</strong>.
				<p class="Note"><strong>Note</strong>: For simplicity, this example uses the Client Credentials grant type. The scenario could easily be extended to support additional grant types, such as Authorization Code, which would require a Resource Owner Authentication Domain.</p></li>
			<li><strong>Tab 3, Token</strong>: Choose <strong>Referenced Bearer</strong>.</li>
			<li><strong>Tab 4</strong>: no setup needed.</li>
			<li><strong>Tab 5, Scopes</strong>: Create one scope, <strong>payments</strong>. This is required to comply with the UK Open Banking specification. In this use case:
			<p><strong>Name</strong>: <strong>payments</strong></p>
			<p><strong>Short Description</strong>: <strong>payments scope for UK_OB_UC</strong></p>
			<p><strong>Full Description</strong>: <strong>payments scope for UK Open Banking use case</strong></p>
			<p><strong>Default Scope</strong>: leave it as checked. </p>
			<p class="Note"><strong>Note</strong>: By default, the <strong>Default Scope</strong> box is checked, meaning that the new scope is granted automatically to any client that passes validation for accessing any API that uses this OAuth Provider domain. In a production scenario it might not be a good idea to allow a scope to be granted by default. However, for the purposes of this use case it's convenient, and means that you don't need to specify the scope in the request when testing in Test Client.</p>
			</li>
			<li><strong>Tab 6</strong>: no setup needed.</li>
			<li><strong>Tab 7, Branding</strong>: Enter the Authorization Server URL for your own Community Manager developer portal. In this example: <strong>https://oauth-uk-ob-uc.acmepaymentscorp.apiportal.akana.com</strong>.
				<p class="Note"><strong>Note</strong>: If you're not sure what value to use for the authorization Server URL, see <a href="#oauth_provider_domain_auth_server_url_defining">Defining the authorization server URL</a> below.</p></li>
		</ul>
		</li>
	<li>Click <strong>Save</strong>.</li>
</ol>

<h4 id="oauth_provider_domain_auth_server_url_defining">Defining the authorization server URL</h4>
<p>The authorization server URL must be unique. Unless you have a unique URL, you can create a valid authorization server URL for your new OAuth Provider domain as follows:</p>
<ul>
	<li>Prefix your tenant hostname with some unique characters.</li>
	<li>Keep the protocol the same.</li>
	<li>End with the domain designation (for example, .com). </li>
</ul>
<p>For example:</p>
<ul>
	<li><strong>Community Manager developer portal URL</strong>: <strong>https://acmepaymentscorp.akana.com/#/home/landing</strong></li>
	<li><strong>Authorization server URL</strong>: <strong>https://oauth-uk-ob-uc.acmepaymentscorp.akana.com</strong></li>
</ul>
<p>The prefix value can be anything that meets normal URL guidelines, as long as it is unique over all your domains.</p>
<p><a href="#top">Back to top</a></p>



<h3 id="s01_02">Step 1-2: Add the authorization server URL as a trusted hostname</h3>
<p>You must make sure that the Authorization Server URL you set up in the OAuth Provider domain in the previous step (<strong>Tab 7, Branding</strong>) is trusted:</p>
<ul>
	<li><strong>All users</strong>: Add the authorization server URL in the Community Manager developer portal site settings. You'll need to have Site Admin permissions for this step. See below.</li>
	<li><strong>On-prem only</strong>: Add the authorization server URL to your <strong>etc/hosts</strong> file. See <a href="#tc_ukob_on_prem_hosts_file">On-prem setup: Updating the etc/hosts file</a>.</li>
</ul>
<h4 id="proc_site_settings_auth_server_url">To add the authorization server URL in the site settings as a trusted hostname</h4>
<ol>
	<li>Log in to the Community Manager developer portal as a Site Admin.</li>
	<li>Go to <strong>More</strong> &gt; <strong>Admin</strong> &gt; <strong>Site</strong>.</li>
	<li>In the <strong>Themes</strong> section, find the theme you're using. To the right, click the arrow and choose <strong>Edit Theme</strong>.</li>
	<li>In the <strong>Edit Theme</strong> dialog box, in the <strong>Virtual Hosts / Vanity Hostnames</strong> field, <strong>add</strong> the authorization server URL. In this example, <strong>oauth-uk-ob-uc.rcoaless.apiportal.akana.com</strong>. Use a comma separator between multiple hostnames, as shown below.
		<p><strong>Important</strong>: Be sure to leave your existing hostname untouched. Add the authorization server URL as an additional hostname.</p>
		<p><img src="images_uc_uk_ob/uc_ukob_dp_site.png" alt="Adding the Authorization Server URL to the site settings"/></p>
	</li>
	<li>Click Finish.</li>
	<li>In the <strong>Site Settings</strong> page, click <strong>Save</strong>.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="s02_policies">Step 2: Create the policies</h2>
<p>In this section:</p>
<ul>
	<li><a href="#s02_policies_01">Policy overview</a></li>
	<li><a href="#s02_policies_02">Setting up the policies</a></li>
</ul>


<h3 id="s02_policies_01">Policy overview</h3>
<p>In this use case you'll set up and apply the four policies listed below. For more information about the individual policies and what each is doing, see <a href="#tc_ukob_policies">Policy details</a>.</p>
<p>Note:</p>
<ul>
	<li>The <a href="#policy_detailed_auditing">Detailed Auditing</a> policy is optional for logging, and is not required for UK Open Banking.</li>
	<li>The <a href="#policy_oauth">OAuth Policy</a> and <a href="#policy_detailed_auditing">Detailed Auditing</a> policy do not require configuration.</li>
</ul>
<p>These two policies require setup and configuration by the Business Admin:</p>
<ul>
	<li><a href="#policy_http_security">HTTP Security</a></li>
	<li><a href="#policy_jose_security_v2">JOSE Security Policy v2</a></li>
</ul>
<h3 id="s02_policies_02">Setting up the policies</h3>
<p>You'll need to have Business Admin permissions to create and configure the policies for this use case (or ask a Business Admin to do it for you).</p>
<h4>To create the policies</h4>
<ol>
	<li>Log in to the Community Manager developer portal as a Business Admin.</li>
	<li>Go to <strong>More</strong> &gt; <strong>Organizations</strong> &gt; <strong>All Organizations</strong> and choose your organization.</li>
	<li>From the left menu, choose <strong>Policies</strong>.</li>
	<li>Create the HTTP Security policy:
		<ul>
			<li>Click <strong>Add</strong>.</li>
			<li>Specify policy name. In this example: <strong>HTTP Security Policy_UK_OB_UC</strong>.</li>
			<li>For <strong>Policy Category</strong>, choose <strong>Operational Policy</strong>.</li>
			<li>For <strong>Policy Sub-Type</strong>, choose <strong>HTTP Security Policy</strong>.</li>
			<li>Click <strong>Save</strong>.</li>
			</ul>
		</li>
	
	<li>Configure the HTTP Security policy:
		<ul>
			<li>In the <strong>Policy Summary</strong> section, click <strong>Edit</strong>.</li>
			<li>For <strong>Authentication Options</strong>, choose <strong>Client Certificate</strong>.</li>
			<li>Click <strong>Finish</strong> and then click <strong>Close</strong>.</li>
		</ul>
		</li>
	
	<li>Activate the HTTP Security policy: from the drop-down arrow at the top right, choose <strong>Activate Policy</strong>, enter a comment, and confirm.</li>
	<li>Click <strong>Go back to policies</strong>.</li>
	<li>Create the JOSE Security Policy v2:
		<ul>
			<li>Click <strong>Add</strong>.</li>
			<li>Specify policy name. In this example: <strong>JOSE Policy v2_UK_OB_UC</strong>.</li>
			<li>For <strong>Policy Category</strong>, choose <strong>Operational Policy</strong>.</li>
			<li>For <strong>Policy Sub-Type</strong>, choose <strong>JOSE Security Policy v2 (Unencoded Payload Support)</strong>.</li>
			<li>Click <strong>Save</strong>.</li>
		</ul>
	</li>
	<li>Configure the JOSE Security Policy v2 policy options:
		<ul>
			<li>In the <strong>Policy Summary</strong> section, click <strong>Edit</strong>.</li>
			<li>In the <strong>Options</strong> page, for <strong>Protection Scope</strong>, choose <strong>IN</strong> (this means in from the client to the Gateway)</li>
			<li>For <strong>Serialization</strong>, leave it as <strong>Compact</strong> (the default).</li>
			<li>For <strong>Role</strong>, leave it as <strong>Provider</strong> (the default).</li>
			<li><strong>Unencoded Detached Payload</strong>: Check the box.</li>
			<li><strong>Header Parameter Name</strong>: <strong>x-jws-signature</strong></li>
			<li><strong>Enforce Appendix F</strong>: check the box.</li>
			<li><strong>UK Open Banking</strong>: Check the box, and set the version to <strong>Version 3.1</strong>.</li>
			<li>Click <strong>Next</strong>.</li>
		</ul>
	</li>
	<li>Specify the following JOSE Security Policy v2 IN message options (leave other options unchanged):
		<ul>
			<li><strong>Signed Content</strong>: check the box.</li>
			<li><strong>Private Headers</strong>: check the box and specify three UK Open Banking headers: <strong>http://openbanking.org.uk/iat</strong> (&quot;issued at&quot; header), <strong>http://openbanking.org.uk/iss</strong> (&quot;issuer&quot; header), and <strong>http://openbanking.org.uk/tan</strong>, the <strong>tan</strong> header required by the UK Open Banking specification version 3.1. For the <strong>tan</strong> header, provide a value of <strong>OpenBankingTrustAnchor</strong>. The private headers are shown in the example below.
				<p><img src="images_uc_uk_ob/uc_ukob_policy_josev2_in_options.png" alt="JOSE Security Policy v2: setting up the private headers"/></p></li>
			<li>Click <strong>Finish</strong> and then click <strong>Close</strong>.</li>
			</ul>
	</li>
	
	<li>Activate the JOSE Security Policy v2: from the drop-down arrow at the top right, choose <strong>Activate Policy</strong>, enter a comment, and confirm.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="s03_api">Step 3: Create and configure the API</h2>
<p>In this section:</p>
<ol>
	<li><a href="#s03_01">Step 3-1: Create the API</a></li>
	<li><a href="#s03_02">Step 3-2: Modify the API implementation so that only mutual HTTPS is valid</a></li>
	<li><a href="#s03_03">Step 3-3: Turn off anonymous access</a></li>
	<li><a href="#s03_04">Step 3-4: Turn on debug mode</a></li>
	<li><a href="#s03_05">Step 3-5: Attach the policies to the API</a></li>
	<li><a href="#s03_06">Step 3-6: Create a mock response</a></li>
	<li><a href="#s03_07">Step 3-7: Set up the API OAuth Details</a></li>
</ol>


<h3 id="s03_01">Step 3-1: Create the API</h3>
<p>This example uses a version of the Swagger for the Open Banking Payment Initiation API, one of the APIs published by the UK Open Banking Implementation Entity. For the Swagger JSON file, see <a href="#tc_ukob_resources_01">Input Swagger file for the API</a>.</p>
<p>In <strong>Add API</strong>:</p>
<ol>
	<li>Choose <strong>APIs</strong> &gt; <strong>Add API</strong>.</li>
	<li>Upload the Swagger file. In this use case we are using the Open Banking Payment Initiation API. For the Swagger file, see <a href="#tc_ukob_resources_01">Input Swagger file for the API</a>.</li>
	<li>Click the <strong>Advanced Options</strong> slider bar to see additional settings.</li>
	<li>Choose Implementation Pattern of <strong>Orchestration</strong>.
		<p class="Note"><strong>Note</strong>: This use case uses Orchestration so that we can set up a mock response, in the Process Editor.</p></li>
	<li>In the <strong>Implementation</strong> field, click the drop-down list and choose Sandbox, then choose the Deployment Zone. An example is shown below.
<p><img src="images_uc_uk_ob/uc_ukob_api_add_sandbox.png" alt="Add API - specifying Sandbox implementation"/></p>
</li>
<li>Click <strong>Save</strong>.</li>
	<li>Optional: in this use case, for clarity, edit the API description to modify the title:
		<ul>
			<li><strong>Old title</strong>: Payment_Initiation_API</li>
			<li><strong>New title</strong>: Payment_Initiation_API_UK_OB_UC</li>
		</ul>
		</li>
</ol>
<h3 id="s03_02">Step 3-2: Modify the API implementation so that only mutual HTTPS is valid</h3>
<p>When you create the API, by default it is connected to all valid endpoints. Follow the steps below to delete any protocols other than Mutual HTTPS.</p>
<h4>To modify the Sandbox implementation</h4>
<ol>
	<li>Go to <strong>API</strong> &gt; <strong>Implementations</strong> and choose the <strong>Sandbox</strong> implementation (it should be the only one).</li>
	<li>In the <strong>Deployments</strong> section, click <strong>Edit</strong>.</li>
<li>Delete all protocols except <strong>mutual-https</strong>. In this example, there are two protocols to delete, <strong>default-http0</strong> and <strong>default-https</strong>, as shown below.
		<p><img src="images_uc_uk_ob/uc_ukob_api_delete_protocols.png" alt="Process Editor -- setting up the mock response"/></p>
</li>
<li>Click <strong>Save</strong>.</li>
</ol>


<h3 id="s03_03">Step 3-3: Turn off anonymous access</h3>
<p>By default, a Sandbox implementation allows anonymous access. Make sure this setting is turned off.</p>
<h4>To disable anonymous access</h4>
<ol>
	<li>Go to <strong>API</strong> &gt; <strong>Implementations</strong> and choose the <strong>Sandbox</strong> implementation.</li>
	<li>In the top section, click <strong>Edit</strong>.</li>
	<li>Clear the <strong>Allow Anonymous Access</strong> checkbox.</li>
	<li>Click <strong>Save</strong>.</li>
</ol>


<h3 id="s03_04">Step 3-4: Turn on debug mode</h3>
<p>Debug mode is not necessary, and is not recommended in a production environment. However, turning on debug mode for this use case will enable you to see additional details of the transactions, when reunning the use case: see <a href="#tc_ukob_metrics_debug_mode">Debug mode</a> below.</p>
<p>For instructions for turning on debug mode in your implementation, see <a href="../../cm/learnmore/apiadmin_implementations.htm#debug_mode_enable">How do I turn on debug mode for my implementation?</a> (Community Manager developer portal help documentation).</p>


<h3 id="s03_05">Step 3-5: Attach the policies to the API</h3>
<ol>
	<li>Go to <strong>API</strong> &gt; <strong>Implementations</strong> and choose the Sandbox implementation.</li>
	<li>In the <strong>Policies</strong> section, click <strong>Edit</strong>.</li>
	<li>Add the following policies to the API:
		<ul>
			<li><strong>Detailed Auditing</strong> (for tracking message requests and responses for information and debug purposes)</li>
			<li><strong>OAuth Security Polic</strong>y (so that you can use OAuth)</li>
			<li><strong>HTTP Security Policy</strong> (to enforce Mutual TLS)</li>
			<li><strong>JOSE Security Policy v2</strong> (to enforce UK Open Banking requirements)</li>
		</ul>
	</li>
	<li>Click <strong>Save</strong> to save the policy selections.</li>
</ol>


<h3 id="s03_06">Step 3-6: Create a mock response</h3>
<p>The next step is to modify the first resource in this API, <strong>CreateAccountAccessConsent</strong>, which allows the <a href="../../cm/learnmore/basics_glossary.htm#gl_tpp">third-party provider</a> (TPP) to request access consent in order to provide a service to the consumer. In the Process Editor for the <strong>CreateAccountAccessConsent</strong> operation, create a mock response.</p>

<h4>To create the mock response</h4>
<ol>
	<li>Go to <strong>API</strong> &gt; <strong>Implementations</strong> and choose the <strong>Sandbox</strong> implementation.</li>
	<li>Scroll down to the bottom section, <strong>Resources</strong>.</li>
	<li>In the top row, for the <strong>/domestic-payment-consents</strong> operation, click the drop-down arrow to the right and choose <strong>Edit Process</strong>, as shown below.
	<p><img src="images_uc_uk_ob/uc_ukob_api_implementation_edit_process.png" alt="API Implementation - Accesing the Process Editor"/></p>
	</li>
	<li>In the Process Editor, add a <strong>Content Activity</strong> (on the left, third or fourth icon from the top). Connect it in between the Receive and Reply nodes.</li>
	<li>Double-click to edit the Content Activity. Set up values as shown below: From <strong>Static Content</strong>, Content Type <strong>application/json</strong>. In the box, paste the static text for the response: see <a href="#tc_ukob_resources_03">Response content for the Content Activity in the Process Editor</a>.
		<p class="Note"><strong>Note</strong>: For additional information on working with the Process Editor, see <a href="../processes/process_management.htm">Managing Processes</a>.</p>
		<p><img src="images_uc_uk_ob/uc_ukob_process_editor.png" alt="Process Editor -- setting up the mock response"/></p>
	</li>
	<li>Click <strong>Finish</strong> to save the Content Activity.</li>
	<li>In the Process Editor, click the <strong>Save</strong> icon (on the left, fifth icon from the bottom) to save the process changes.</li>
	<li>Click <strong>Finish</strong> to exit the Process Editor.</li>
</ol>


<h3 id="s03_07">Step 3-7: Set up the API OAuth Details</h3>
<p>You'll need to set up the OAuth Details so that the API can use the domain that you set up, as an OAuth Provider domain.</p>

<h4>To set up the API OAuth details</h4>
<ol>
	<li>Go to <strong>API</strong> &gt; <strong>Details</strong>. From the drop-down on the right, choose <strong>OAuth Details</strong>.</li>
	<li>In <strong>Tab 1</strong>, <strong>Provider</strong>, set up the following:
<ol>
			<li>OAuth Provider: choose the OAuth Provider domain you set up earlier. For this use case, the OAuth Provider domain was <strong>OAuth_OIDC_UK_OB_UC</strong>.</li>
			<li>Click <strong>Add Provider</strong>.</li>
			<li>Make sure OAuth 2.0 is selected and no other OAuth version.</li>
			<li>In the <strong>Apply OAuth Settings to the Following Endpoint(s)</strong> field, make sure only the <strong>Sandbox</strong> implementation is selected. In this use case, it is the only one.</li>
		</ol>
	</li>
	<li>In <strong>Tab 2</strong>, <strong>Scope Mapping</strong>, choose <strong>API-Wide Scope Mapping</strong> and then choose the <strong>payments</strong> scope: click <strong>Edit</strong>, check the box for the <strong>payments</strong> scope, and then click <strong>Finish</strong>.</li>
	<li>In the API OAuth Settings wizard, click <strong>Finish</strong> to save and close.</li>
</ol>


<h2 id="s04_app">Step 4: Create the app</h2>
<p>Create an app.</p>
<ol>
	<li>Navigation: <strong>Apps</strong> &gt; <strong>Add App</strong>.</li>
	<li>Provide required values:
		<ul>
			<li><strong>App Name</strong>: In this use case, <strong>PaymentsApp_UK_OB_UC</strong></li>
			<li><strong>Version ID</strong>: In this use case, <strong>v1</strong></li>
		</ul>
		</li>
	
	<li>Click <strong>Finish</strong>.</li>
</ol>



<h2 id="s05_contract">Step 5: Create a contract between the app and the API</h2>


<h4 id="contract_request">To request a contract</h4>
<ol>
	<li>Go to the <strong>Overview</strong> page for the API you created. In this example: <strong>Payment_Initiation_API_UK_OB_UC</strong>.</li>
	<li>At the top right, click <strong>Access</strong>.</li>
	<li>In the API Access Wizard, choose:
		<ul>
			<li><strong>Tab 1, Select App</strong>: Choose the app that you created. In this example, <strong>PaymentsApp_UK_OB_UC</strong>.</li>
			<li><strong>Tab 2, Endpoint</strong>: Choose Sandbox.</li>
		</ul>
		<p class="Note"><strong>Note</strong>: Depending on platform configuration, you might see additional tabs in the API Access Wizard. If so, you can skip them. No additional changes are needed. For details, see <a href="../../cm/learnmore/app_access_apis_api_access.htm#api_access_wizard">The API Access Wizard</a> (Community Manager developer portal help).</p>
	</li>
	<li>Click <strong>Save</strong>.</li>
</ol>
<p class="Note"><strong>Note</strong>: Because this is a Sandbox implementation, activation is immediate. By default, API Admin approval is not required for a contract in the Sandbox implementation.</p>



<h2 id="s06_keystore">Step 6: Create the keystore/certificate</h2>
<p>This example uses Keystore Explorer to generate the keystore needed to authenticate the app when accessing the API in Test Client. Whatever tool you use to manage your keystore, the steps are the same:</p>
<ol>
	<li><a href="#s06_keystore_01">Step 6-1: Keystore Explorer: Generate a new key pair</a></li>
	<li><a href="#s06_keystore_01">Step 6-2: </a><a href="#s06_keystore_02">Keystore Explorer: Generate a certificate signing request (csr file)</a></li>
	<li><a href="#s06_keystore_01">Step 6-3: </a><a href="#s06_keystore_03">Community Manager developer portal: Import certificate signing request to app (csr file)</a></li>
	<li><a href="#s06_keystore_01">Step 6-4: </a><a href="#s06_keystore_04">Community Manager developer portal: Export signed certificate (certificate.cer file)</a></li>
	<li><a href="#s06_keystore_01">Step 6-5: </a><a href="#s06_keystore_05">Keystore Explorer: Import certificate (cer file)</a></li>
	<li><a href="#s06_keystore_01">Step 6-6: </a><a href="#s06_keystore_06">Keystore Explorer: Save the keystore as a p12 file</a></li>
</ol>


<h3 id="note_tc_upload_p12">Note: Uploading the p12 file to Test Client</h3>
<p>In this scenario, for testing purposes, Test Client is emulating the API. Test Client needs the private key, included in the p12 file (Step 6), for two reasons:</p>
<ul>
	<li>To take care of the client part of the TLS handshake (mTLS = client authentication at the transport layer). Test Client takes care of this configuration to ensure that a client-authenticated TLS session is setup with the API Gateway.</li>
	<li>To sign the JWT, as required by the JOSE Security Policy v2.</li>
</ul>
<p>Of course, in a production scenario you would not upload the private key. Make sure that you are using a temporary keystore that you will not use in your production implementation.</p>
<p class="Note"><strong>Note</strong>: Test Client supports upload of only one keystore; therefore, in this scenario, the same keystore is used for both mTLS and JOSE Policy v2 signing requirements. In a production scenario, you would probably use two separate keystores/certificates for these two functions. For testing purposes, Test Client demonstrates that the keystore/certificate process works as expected.</p>



<h3 id="s06_keystore_00">Certificate Process: Overview</h3><p></p>
<p>When you create the keystore, you create a private and public key pair. To turn that into something that you can use, you need a certificate. It&rsquo;s the certificate that you exchange with others. The private key, you store in a secure location such as a vault, to keep it safe.</p>
<p>	The CSR (Certificate Signing request) is essentially a copy of your public key, signed with your private key, which you submit to a Certificate Authority.</p>
<p>The Certificate Authority verifies your identity and generates a certificate, signed by the Certificate Authority and with its seal on the certificate. From then on, the certificate binds that public key to the private key, which is kept secret.</p>
<p>	When the CA verifies a CSR and then puts its seal on a certificate, the CA is vouching that the public key is valid and will only work in conjunction with the private key of the party that has handed over the CSR.</p>
<p>	As the final step, to have your public key as a vouched-for public key in your keystore, you import the CER reply back to the keystore. At that point, the keystore has three things:</p>
<ul>
	<li>The public key</li>
	<li>The private key</li>
	<li>The seal of the vouching Certificate Authority (trust anchor), confirming that the public key is valid</li>
</ul>
<p>At this point, for the purpose of this use case, you can generate the .p12 file, which Test Client uses to:</p>
<ul>
	<li>Govern the establishment of the client-authenticated mutual TLS (mTLS) connection.</li>
	<li>Create the JWS signature required by the JOSE Security Policy v2.</li>
</ul>
<p class="Note"><strong>Note</strong>: The .p12 file contains the private key, which you would not normally share. For testing purposes, it's necessary to share the private key with Test Client. Although Test Client does not store this information, it's important to have a separate public/private key pair that you use only for testing, and a different key store that you use for production.</p>


<h3 id="s06_keystore_01"><a href="#s06_keystore_01">Step 6-1: </a>Keystore Explorer: Generate a new key pair</h3>
<p>The first step is to generate a public/private key pair.</p>
<ol>
	<li>In Keystore Explorer, click the <strong>Create a new KeyStore</strong> icon.</li>
	<li>In the <strong>New KeyStore Type</strong> dialog box, choose <strong>PKCS12</strong> and click <strong>OK</strong>.
		<p>A new, unnamed keystore is created.</p></li>
	<li>Click the <strong>Generate Key Pair</strong> icon to create a new key pair:
		<p><img src="images_uc_uk_ob/uc_ukob_ks_generate_key_pair.png" alt="Keystore Explorer - Generate Key Pair"/></p>
		</li>
	<li>In the <strong>Generate Key Pair</strong> dialog box, choose <strong>RSA</strong> and click <strong>OK</strong>. </li>
	<li>At the <strong>Generate Key Pair Certificate</strong> dialog box, in the <strong>Name</strong> field, click the book icon.</li>
	<li>In the <strong>Name</strong> dialog box, specify values for each field. These values are used later. In this example:
		<ul>
			<li>CN: <strong>PaymentsApp_UK_OB_UC</strong>
			<p class="Note"><strong>Note</strong>: It's a good idea to use the app name as the Common Name (CN), for simplicity.</p></li>
			<li>OU: <strong>payments</strong></li>
			<li>O: <strong>akana</strong></li>
			<li>L: <strong>EUS</strong></li>
			<li>ST: <strong>FL</strong></li>
			<li>C: <strong>US</strong></li>
		</ul>
		<p class="Note"><strong>Note</strong>: Make sure there are no leading or trailing spaces in the values.</p>
</li>
	<li>Click <strong>OK</strong>.</li>
	<li>At the <strong>Generate Key Pair Certificate</strong> dialog box, copy the value from the <strong>Name</strong> field and save it out (for example, to a text file:
		<p><img src="images_uc_uk_ob/uc_ukob_ks_generate_key_pair_certificate.png" alt="Keystore Explorer - Saving the name"/></p>
	</li>
	<li>Click <strong>OK</strong>.</li>
	<li>At the <strong>New Pair Key Entry Alias</strong> dialog box, enter an alias. It's a good idea to use the app name. By default, Keystore Explorer uses the CN from the Name field, so if you used the app name for the Common Name, you can just accept the default.</li>
	<li>At the <strong>New Pair Key Entry Password</strong> dialog box, specify the password and then confirm it. Make sure you remember the password.</li>
	<li>Click <strong>OK</strong>.
		<p>The key pair is generated, and you'll see a confirmation message.</p></li>
</ol>


<h3 id="s06_keystore_02"><a href="#s06_keystore_01">Step 6-2: </a>Keystore Explorer: Generate a certificate signing request (csr file)</h3>
<p>The next step is to generate a Certificate Signing Request in the form of a csr file, which you will then import into the Community Manager developer portal.</p>
<ol>
	<li>In Keystore Explorer, right-click the key pair file and choose <strong>Generate CSR</strong>.</li>
	<li>In the <strong>CSR File</strong> field, browse to the location where you want to store the CSR, and then click <strong>OK</strong>. You'll see a confirmation message: <strong>CSR Generation Successful</strong>.</li>
</ol>


<h3 id="s06_keystore_03"><a href="#s06_keystore_01">Step 6-3: </a>Community Manager developer portal: Import certificate signing request to app (csr file)</h3>
<p>The next step is to import the certificate signing request (csr file) to the Community Manager developer portal. </p>
<ol>
	<li>In the Community Manager developer portal, go to the app's <strong>Details</strong> page.</li>
	<li>In the <strong>Security</strong> section, click <strong>Show Keys</strong>, and then click <strong>Import Credentials</strong>.</li>
	<li>Browse to the location of the CSR file and choose it.</li>
	<li>Enter a comment and then click <strong>Save</strong>.</li>
</ol>


<h3 id="s06_keystore_04"><a href="#s06_keystore_01">Step 6-4: </a>Community Manager developer portal: Export signed certificate (certificate.cer file)</h3>
<p>Now, download the certificate (.cer file) that the platform provides based on the CSR that you uploaded.</p>
<ol>
	<li>In the Community Manager developer portal, in the app's <strong>Details</strong> page, <strong>Security</strong> section, click <strong>Show Keys</strong>, and then click <strong>Export Credentials</strong>, as shown below.
		<p><img src="images_uc_uk_ob/uc_ukob_ks_export_credentials.png" alt="Community Manager developer portal - Export credentials"/></p>
	</li>
	<li>Browse to the location where you want to save the file, and save it.
		<p class="Note"><strong>Note</strong>: It's a good idea to use the same location for all files, and to change from the default file name, <strong>certificate.cer</strong>, so that the name matches the .csr file. In this example: <strong>paymentsapp_uk_ob_uc.cer</strong>.</p>
	</li>
</ol>


<h3 id="s06_keystore_05"><a href="#s06_keystore_01">Step 6-5: </a>Keystore Explorer: Import certificate (cer file)</h3>
<p>The next step is to import the certificate (cer file) that the platform generated, to Keystore Explorer, so that the keystore will include the certificate information along with the public and private key pair.</p>
<ol>
	<li>In Keystore Explorer, right-click and choose <strong>Import CA Reply</strong>, then choose <strong>From File</strong>, as shown below.
		<p><img src="images_uc_uk_ob/uc_ukob_ks_import_ca_reply.png" alt="Keystore Explorer - Import CA Reply"/></p>
	</li>
	<li>Browse to the location of the certificate (cer file) that you exported from the Community Manager developer portal and import it. You'll see a confirmation message, <strong>CA Reply Import Successful</strong>.
		<p class="Note"><strong>Note</strong>: If there is any problem with the certificate, Keystore Explorer returns an error message. Validation is done before import.</p>
	</li>
</ol>


<h3 id="s06_keystore_06"><a href="#s06_keystore_01">Step 6-6: </a>Keystore Explorer: Save the keystore as a p12 file</h3>
<p>The final step is to save the keystore as a <strong>.p12</strong> file, which you can then import to Test Client for authenticating the app. The <strong>.p12</strong> file includes the private key and the digital certificate.</p>
<h4>To create the p12 file</h4>
<ol>
	<li>In Keystore Explorer, click <strong>File</strong> &gt; <strong>Save As</strong>.</li>
	<li>In the <strong>Set KeyStore Password</strong> dialog, specify the password, confirm it, and then click <strong>OK</strong>. Make sure you can remember the password.</li>
	<li>Navigate to the location where you want to save the file. In the <strong>Save as type</strong> field, specify file type of <strong>p12</strong>, and then, in the <strong>File name</strong> field, make sure the extension is p12. Click <strong>Save</strong>. In this example: <strong>paymentsapp_uk_ob_uc.p12</strong>.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="tc_ukob_run">Running the use case</h2>
<p>At this point, everything is set up. It's time to test the API in Test Client to see how the UK Open Banking rules are enforced.</p>
<p>In this section:</p>
<ul>
	<li><a href="#tc_ukob_test">Testing in Test Client</a></li>
	<li><a href="#tc_ukob_trace_tab">Reviewing the Trace tab</a></li>
	<li><a href="#tc_ukob_results_headers">Reviewing the Headers tab</a></li>
	<li><a href="#tc_ukob_token_decode">Decoding the JWT token</a></li>
	<li><a href="#tc_ukob_metrics">Reviewing the metrics</a></li>
</ul>


<h3 id="tc_ukob_test">Testing in Test Client</h3>
<p>In the context of your API, you can test the API with the contracted app, uploading the credentials, and see how Test Client applies the policy settings to enforce the UK Open Banking specification.</p>

<h4>To run the use case</h4>
<ol>
	<li>Go to the <strong>API</strong> &gt; <strong>Test Client</strong>.</li>
	<li>In the Operation drop-down list, make sure the operation you used in <a href="#s03_06">Step 3-6: Create a mock response</a> is selected. It's the first operation so should be the default.</li>
	<li>Provide a value for some of the custom headers that are part of this operation, as indicated below. Test Client does not validate these headers; you can use any string value. Where indicated, leave the headers blank.
		<ul>
			<li><strong>Authorization</strong>: Leave blank.</li>
			<li><strong>x-customer-user-agent</strong>: Provide any value.</li>
			<li><strong>x-fapi-auth-date</strong>: Provide any value.</li>
			<li><strong>x-fapi-customer-ip-address</strong>: Provide any value.</li>
			<li><strong>x-fapi-interaction-id</strong>: Provide any value.</li>
			<li><strong>x-idempotency-key</strong>: Provide any value.</li>
			<li><strong>x-jws-signature</strong>: Leave blank.</li>
		</ul>
	</li>
	<li>In the <strong>Content</strong> field, paste the content included in <a href="#tc_ukob_resources_02">Request content for the Test Client message</a> below.
<p class="Note"><strong>Note</strong>: It really doesn't matter what the request content is, as long as you use valid JSON. You could just include one set of curly braces: {}. The validation is the important thing. However, the example provided with this use case is the standard request format for this operation, per the API definition.</p></li>
	<li>Click the <strong>Setup</strong> button. In the <strong>Setup</strong> dialog box:
		<ul>
			<li>Make sure the correct app is displayed.</li>
			<li>Check the <strong>Upload Keystore</strong> box.</li>
			<li>For <strong>Keystore Type</strong>, choose <strong>PKCS12</strong>.
				<p class="Note"><strong>Note</strong>: In this scenario, you are uploading the p12 file, which includes the private key. Make sure that you are using a temporary keystore that you will not use in your production implementation. For more information, see <a href="#note_tc_upload_p12">Note: Uploading the p12 file to Test Client</a>.</p></li>
			<li>In <strong>File to Upload</strong>, browse to the location of the .p12 file, and upload it. In this example: <strong>paymentsapp_uk_ob_uc.p12</strong>.</li>
			<li>Enter the password, and click <strong>Save</strong>.</li>
			</ul>
		</li>
	<li>Click the <strong>Security</strong> button.</li>
	<li>In the page for the OAuth policy, choose <strong>Client Credentials</strong> and click <strong>Get Token</strong> to generate the OAuth access token. Click <strong>Next</strong>.
	<p class="Note"><strong>Note</strong>: The sequence of the pages for the policies might not match the sequence given in the next few steps. Follow the steps for each policy page as it appears.</p>
	</li>
	<li>In the <strong>HTTP Security Policy</strong> page, click <strong>Next</strong>.</li>
	<li>In the <strong>JOSE Security Policy v2</strong> page:
	<ul>
		<li>In the <strong>Signature/MAC Algorithm</strong> field, choose <strong>RS256</strong>. The UK Open Banking standard requires an RS value. HS256 is the default value, so you must change it.
			<p class="Note"><strong>Note</strong>: It's easy to miss this step. If you don't choose the RS256 algorithm, the message will fail. The UK Open Banking specification requires an RS* algorithm.</p>
			<p>The JSON web token, which Test Client will create to satisfy the JOSE Security Policy v2, will be signed using the keystore that you just uploaded. The same keystore is used for the TLS connection (HTTP Security Policy) and to sign the JSON web token (JWT) for the JOSE Security Policy v2.</p>
		</li>
		<li>In the <strong>Private Headers</strong> section, add the <strong>http://openbanking.org.uk/iat</strong> (&quot;issued at&quot; header) in the <strong>Name</strong> field, and provide any value. At runtime, Test Client updates with the correct value (date/time in <a href="../../cm/learnmore/basics_glossary.htm#gl_epochtime">Epoch</a> format).</li>
		<li>In the <strong>Private Headers</strong> section, add the <strong>http://openbanking.org.uk/iss</strong> (&quot;issuer&quot; header) in the <strong>Name</strong> field, and then, in the <strong>Value</strong> field, provide the Subject DN. This value must match the subject DN from the certificate that corresponds with the keystore that you just uploaded. In this use case:
			<pre>CN=PaymentsApp_UK_OB_UC,OU=payments,O=Akana,L=EUS,ST=FL,C=US</pre></li>
		<li>In the <strong>Private Headers</strong> section, add the <strong>http://openbanking.org.uk/tan</strong> (&quot;trust anchor&quot; header), with a value of <strong>OpenBankingTrustAnchor</strong> as defined in the policy configuration.</li>
		<li>Click <strong>Next</strong>.</li>
		</ul>
		</li>
	<li>In the SameOriginPolicy page, click <strong>Finish</strong>.</li>
	<li>In Test Client, click <strong>Invoke</strong>.</li>
	<li>Review the successful response, as shown in the <a href="#tc_ukob_results">Results</a> section below. See also:
		<ul>
			<li><a href="#tc_ukob_trace_tab">Reviewing the Trace tab</a></li>
			<li><a href="#tc_ukob_results_headers">Reviewing the Headers tab</a></li>
			<li><a href="#tc_ukob_token_decode">Decoding the JWT token</a></li>
			<li><a href="#tc_ukob_metrics">Reviewing the metrics</a></li>
		</ul>
		</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h3 id="tc_ukob_results">Results</h3>
<p>The illustration below shows the request in Test Client.</p>
<p><img src="images_uc_uk_ob/uc_tc_results_request.png" alt="UK Open Banking use case: request in Test Client" /></p>
<p>The illustration below shows the successful response.</p>
<p><img src="images_uc_uk_ob/uc_tc_results_response.png" alt="UK Open Banking use case: response in Test Client" /></p>
<p><a href="#top">Back to top</a></p>



<h3 id="tc_ukob_trace_tab">Reviewing the Trace tab</h3>
<p>In Test Client, review the <strong>Trace</strong> tab. The results should look something like the below.</p>
<p><img src="images_uc_uk_ob/uc_tc_results_trace.png" alt="UK Open Banking use case: Trace tab in Test Client" /></p>
<p>You can see that:</p>
<ul>
	<li>The JOSE Authorization header has been prepared.</li>
	<li>The JWT has been generated and added to the <strong>x-jws-signature</strong> request header.</li>
<!--	<li>Because of the OAuth configuration used, in this example there is a second JWT token, a Bearer token, generated for the message. This is the OAuth access token. It contains the information that this is a valid client, and that the client identity has been validated against the identity store configured for the OAuth provider.</li>-->
</ul>


<h3 id="tc_ukob_results_headers">Reviewing the Headers tab</h3>
<p>In Test Client, review the <strong>Headers</strong> tab. You can see the custom headers and the <strong>x-jws-signature</strong> header, as shown in the example below.</p>
<p><img src="images_uc_uk_ob/uc_tc_results_headers.png" alt="UK Open Banking use case: Headers tab in Test Client" /></p>


<h3 id="tc_ukob_token_decode">Decoding the JWT token</h3>
<p>You can copy the token in the <strong>x-jws-signature</strong> header and decode it in the JWT debugger at <a href="https://jwt.io/" title="https://jwt.io/" target="_blank">https://jwt.io/</a>. An example is shown below.</p>
<p><img src="images_uc_uk_ob/uc_results_jwt_jose.png" alt="UK Open Banking use case: JWT token, decoded" /></p>
<p class="Note"><strong>Note</strong>: Since this example uses the Detached Payload option, the payload is not included in the JWT token, so the Payload section of the token is empty.</p>
<p><a href="#top">Back to top</a></p>



<h3 id="tc_ukob_metrics">Reviewing the metrics</h3>
<p>You can also review the analytics information.</p>
<p>In the Community Manager developer portal, in the context of the API, go to <strong>Analytics</strong> &gt; <strong>Logs</strong>. Choose one of the messages you just sent. You can look at the Info, Body, and Headers. In the Body tab you'll be able to see that the policies were enforced successfully.</p>
<p>The <strong>Info</strong> tab is shown below.</p>
<p><img src="images_uc_uk_ob/uc_results_logs_info.png" alt="UK Open Banking use case: reviewing the logs -- Info tab" /></p>
<p>The <strong>Body</strong> tab:</p>
<p><img src="images_uc_uk_ob/uc_results_logs_body.png" alt="UK Open Banking use case: reviewing the logs -- Body tab" /></p>

<h4 id="tc_ukob_metrics_debug_mode">Debug mode</h4>
<p>If you turned on Debug Mode in your implementation (see <a href="#s03_04">Step 3-4: Turn on debug mode</a> above), you'll also be able to view additional details. Click the Debug magnifying glass as shown below.</p>
<p><img src="images_uc_uk_ob/uc_results_logs_debug_mode.png" alt="UK Open Banking use case: reviewing the logs -- Debug Mode" /></p>
<p>You can see from the above that the API Platform validated the certificate and authenticated that the client is a valid entity associated with the certificate.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="tc_ukob_resources">Additional information/resources</h2>
<p>Resources for this use case include:</p>
<ul>
	<li><a href="#tc_ukob_resources_01">Input Swagger file for the API</a></li>
	<li><a href="#tc_ukob_resources_02">Request content for the Test Client message</a></li>
	<li><a href="#tc_ukob_resources_03">Response content for the Content Activity in the Process Editor</a> (set up in <a href="#s03_06">Step 3-6: Create a mock response</a>)</li>
	<li><a href="#tc_ukob_resources_04">A valid keystore</a></li>
</ul>


<h3 id="tc_ukob_resources_01">Input Swagger file for the API</h3>
<p>This example uses the Open Banking Payment Initiation API. The OAS JSON file for this API is available at the following URL:</p>
<ul>
	<li><a href="https://raw.githubusercontent.com/OpenBankingUK/read-write-api-specs/master/dist/openapi/payment-initiation-openapi.json" title="Link to source content for OAS 3.0 version" target="_blank">https://raw.githubusercontent.com/OpenBankingUK/read-write-api-specs/master/dist/openapi/payment-initiation-openapi.json</a></li>
</ul>
<p>For this use case, we've made two slight modifications to the JSON file:</p>
<ul>
<li>Slightly modified the JSON to remove the application/jose+jwe content type, for simplicity since this use case does not use JWE, which is not mandatory for UK Open Banking compliance, and the application/jose+jwe content-type would display as the default in Test Client (since available content-type values are displayed alphabetically).</li>
<li>Removed the charset values from the parameters. In the original file, the default values for Consumes and Produces include a charset parameter: application/json; charset=utf-f. Both versions of the UK Open Banking Specification state that the media type must be application/json (apart from specific exceptions).</li>
</ul>
<p>The file used in this use case is available here:</p>
<ul>
<li><a href="images_uc_uk_ob/payment-initiation-openapi-3.1.6-modified.json">OAS 3.0 version of the Open Banking Payment Initiation API</a></li>
</ul>


<h3 id="tc_ukob_resources_02">Request content for the Test Client message</h3>
<p>The message POST content used in the use case is below.</p>
<pre>{
  "Data":{
    "Permissions":[
      "ReadAccountsBasic",
      "ReadBalances"
    ],
    "ExpirationDateTime":"2020-06-09T13:44:07.946Z",
    "TransactionFromDateTime":"2020-06-09T13:44:07.947Z",
    "TransactionToDateTime":"2020-06-09T13:44:07.947Z"
  },
  "Risk":{
    
  }
}</pre>
<p><a href="#top">Back to top</a></p>



<h3 id="tc_ukob_resources_03">Response content for the Content Activity in the Process Editor</h3>
<p>Because this use case is run in the Sandbox implementation and is not really accessing an Open Banking API, the API response is defined as a static response that is returned when the operation is accessed successfully. The response content is shown below.</p>
<p>This content is used in <a href="#s03_06">Step 3-6: Create a mock response</a>.</p>
<p>It really doesn't matter what content you define since the response is static. However, this is an example of what a response for this operation might look like in a production environment.</p>
<pre>{
  "Data":{
    "ConsentId":"string",
    "CreationDateTime":"2020-10-16T19:15:28.891Z",
    "Status":"Authorised",
    "StatusUpdateDateTime":"2020-10-16T19:15:28.891Z",
    "CutOffDateTime":"2020-10-16T19:15:28.891Z",
    "ExpectedExecutionDateTime":"2020-10-16T19:15:28.891Z",
    "ExpectedSettlementDateTime":"2020-10-16T19:15:28.891Z",
    "Charges":[
      {
        "ChargeBearer":"BorneByCreditor",
        "Type":[
          "UK.OBIE.CHAPSOut",
          "UK.OBIE.BalanceTransferOut",
          "UK.OBIE.MoneyTransferOut"
        ],
        "Amount":{
          "Amount":"string",
          "Currency":"string"
        }
      }
    ],
    "Initiation":{
      "InstructionIdentification":"string",
      "EndToEndIdentification":"string",
      "LocalInstrument":[
        "UK.OBIE.BACS",
        "UK.OBIE.BalanceTransfer",
        "UK.OBIE.CHAPS",
        "UK.OBIE.Euro1",
        "UK.OBIE.FPS",
        "UK.OBIE.Link",
        "UK.OBIE.MoneyTransfer",
        "UK.OBIE.Paym",
        "UK.OBIE.SEPACreditTransfer",
        "UK.OBIE.SEPAInstantCreditTransfer",
        "UK.OBIE.SWIFT",
        "UK.OBIE.Target2"
      ],
      "InstructedAmount":{
        "Amount":"string",
        "Currency":"string"
      },
      "DebtorAccount":{
        "SchemeName":[
          "UK.OBIE.BBAN",
          "UK.OBIE.IBAN",
          "UK.OBIE.PAN",
          "UK.OBIE.Paym",
          "UK.OBIE.SortCodeAccountNumber"
        ],
        "Identification":"string",
        "Name":"string",
        "SecondaryIdentification":"string"
      },
      "CreditorAccount":{
        "SchemeName":[
          "UK.OBIE.BBAN",
          "UK.OBIE.IBAN",
          "UK.OBIE.PAN",
          "UK.OBIE.Paym",
          "UK.OBIE.SortCodeAccountNumber"
        ],
        "Identification":"string",
        "Name":"string",
        "SecondaryIdentification":"string"
      },
      "CreditorPostalAddress":{
        "AddressType":"Business",
        "Department":"string",
        "SubDepartment":"string",
        "StreetName":"string",
        "BuildingNumber":"string",
        "PostCode":"string",
        "TownName":"string",
        "CountrySubDivision":"string",
        "Country":"string",
        "AddressLine":[
          "string"
        ]
      },
      "RemittanceInformation":{
        "Unstructured":"string",
        "Reference":"string"
      },
      "SupplementaryData":{
        
      }
    },
    "Authorisation":{
      "AuthorisationType":"Any",
      "CompletionDateTime":"2020-10-16T19:15:28.891Z"
    }
  },
  "Risk":{
    "PaymentContextCode":"BillPayment",
    "MerchantCategoryCode":"string",
    "MerchantCustomerIdentification":"string",
    "DeliveryAddress":{
      "AddressLine":[
        "string"
      ],
      "StreetName":"string",
      "BuildingNumber":"string",
      "PostCode":"string",
      "TownName":"string",
      "CountrySubDivision":[
        "string"
      ],
      "Country":"string"
    }
  },
  "Links":{
    "Self":"string",
    "First":"string",
    "Prev":"string",
    "Next":"string",
    "Last":"string"
  },
  "Meta":{
    "TotalPages":0,
    "FirstAvailableDateTime":"2020-10-16T19:15:28.891Z",
    "LastAvailableDateTime":"2020-10-16T19:15:28.891Z"
  }
}</pre>
<p><a href="#top">Back to top</a></p>



<h3 id="tc_ukob_resources_04">A valid keystore</h3>
<p>For this example, you'll need to be able to generate a keystore, including generating the public and private key pair, creating a certificate signing request, importing a signed certificate, and generating a P12 file. For details of the steps, see <a href="#s06_keystore">Step 6: Create the keystore/certificate</a>.</p>
<p>For these activities, you could use a tool such as Keystore Explorer, downloadable from <a href="http://keystore-explorer.org/downloads.html" title="Link to Keystore Explorer, Downloads page" target="_blank">http://keystore-explorer.org/downloads.html</a>.</p>
<p><a href="#top">Back to top</a></p>

	
<h3 id="tc_ukob_policies">Policy details</h3>
<p>The table below summarizes information about the policies used in this use case, in <a href="#s02_policies_02">Setting up the policies</a>.</p>
<table class="doctable">
	<thead>
		<tr>
			<th>Policy Name</th>
			<th>Function</th>
			<th>Comments</th>
		</tr>
	</thead>
	<tbody>
		<tr>
			<td id="policy_oauth">OAuth</td>
			<td>Enforces OAuth.</td>
			<td><p>When the OAuth policy is attached to an API, and the user invokes the API in Test Client, the client is redirected to an authorization server to get an access token in order to be able to access the API. Test Client uses the authorization server specified in the API's configuration (API OAuth Details). This use case uses the Client Credentials OAuth grant; therefore, the user must provide the credentials in Test Client. When the client's credentials are validated, the authorization server generates the token, which is sent with the message request.</p>
				<p>In the context of this example, OAuth scopes are not a significant factor.</p>
				<p>No configuration required.</p></td>
		</tr>
		<tr>
			<td id="policy_http_security">HTTP Security</td>
			<td>Validates whether a valid client certificate is presented by the client.</td>
			<td><p>When the HTTP Security policy is attached to an API, the HTTP security policy validates the client certificate that is presented by the client invoking the API.</p>
				<p>It is a good practice to use this policy to explicitly specify that a client certificate is required.</p>
				<p>With the policy configuration given in this use case, this policy extracts the client certificate from the TLS context. Note that this requires that the API is called over an HTTPS connection, with the API Gateway HTTPS listener configured to either <strong>accept</strong> or <strong>require</strong> client certificates.</p>
				<p>On the Akana SaaS Platform, an HTTPS endpoint has already been preconfigured for this purpose.</p>
				<p>At runtime, once an HTTPS connection has been established, the policy explicitly validates the presence of a valid client certificate, and only allows the process to continue to execute if a valid certificate is found.</p>
				<p>Akana Test Client allows the user to upload a keystore. If a valid keystore has been uploaded, with this use case Test Client uses the certificate to:</p>
				<ul>
					<li>Establish the mutually secured HTTPS connection.</li>
					<li>Sign the JWT that is generated by Test Client (to comply with JOSE Security Policy configuration).</li>
				</ul>
				<p>The HTTP Security policy comes into play in the second part of <a href="#tc_ukob_run">Running the use case</a>.</p>
				<p>Configuration required.</p></td>
		</tr>
		<tr>
			<td id="policy_jose_security_v2">JOSE Security Policy v2</td>
			<td>Enforces UK Open Banking rules.</td>
			<td><p>The JOSE Security Policy v2 adds very specific security to the part of the message exchange where the message is coming in from the client. The message is subjected to a number of rules, as specified by UK Open Banking standard and as configured in the JOSE Security Policy v2.</p>
				<p>Configuration required.</p></td>
		</tr>
		<tr>
			<td id="policy_detailed_auditing">Detailed Auditing</td>
			<td>Logs message information for later review.</td>
			<td><p>Because the use case is a test scenario, it's a good idea to add the Detailed Auditing policy, so that you can view transaction details. This doesn't relate to Open Banking; it’s just for developer convenience.</p>
				<p>No configuration required.</p></td>
		</tr>
	</tbody>
</table>
<p><a href="#top">Back to top</a></p>




<h2 id="tc_ukob_on_prem_00">Extra steps for on-prem setup</h2>
<p>If you're setting up and running this use case in an on-prem scenario, there are a couple of extra setup steps that are already done for you in the SaaS environment:</p>
<ul>
	<li><a href="#tc_ukob_on_prem_https_listener">On-prem setup: Setting up the HTTPS listener</a></li>
	<li><a href="#tc_ukob_on_prem_hosts_file">On-prem setup: Updating the etc/hosts file</a></li>
</ul>


<h3 id="tc_ukob_on_prem_https_listener">On-prem setup: Setting up the HTTPS listener</h3>
<p>This use case requires HTTPS. If you have an on-prem installation, you'll need to have an inbound HTTPS listener for any Network Director or Policy Manager container that will process messages for this use case.</p>
	<p>It's best to set up the listener before starting the use case steps. It's listed in the prerequisites section.</p>
<p>For instructions on setting up an HTTPS listener, including explanations for each field, see <a href="../listeners/about_listeners.htm#proc_listener_add">Adding a Listener</a>.</p>
<p>Configure your HTTPS listener with these settings:</p>
<ul>
	<li><strong>Listener Type</strong>: HTTPS.</li>
	<li><strong>Listener Name</strong>: make sure the name is unique for the container.</li>
	<li><strong>Bind to all interfaces</strong>: Check the box to set this field to <strong>true</strong>.</li>
	<li><strong>Port Number</strong>: Specify the port. Make sure you choose a port that isn't already in use.</li>
	<li><strong>Client Certificates</strong>: Set to either <strong>accept</strong> or <strong>require</strong>. If you choose <strong>require</strong>, the listener will reject any connection request that does not offer a valid client certificate.</li>
	<li><strong>Clone services hosted on other listener(s)</strong>: Check the box.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h3 id="tc_ukob_on_prem_hosts_file">On-prem setup: Updating the etc/hosts file</h3>
<p>If you're running the use case in an on-prem scenario, you'll need to update the etc/hosts file on the server to make sure that the URLs that you are using are trusted. Specifically, in <a href="#s01_02">Step 1-2: Add the authorization server URL as a trusted hostname</a> you define the Authorization Server URL, needed for using OAuth. You'll need to add this URL to the <strong>etc/hosts</strong> file.</p>
<p>The location of the file depends on local setup. For example, on a Windows machine it might be in this location: <strong>C:\Windows\System32\drivers\etc\hosts</strong>.</p>
<p><a href="#top">Back to top</a></p>



<hr class="divide_hr" />



<h2 id="related_topics">Related Topics</h2>
<div class="relatedlinks">
<ul>
	<li><a href="about_policies_view.htm">About Policies</a></li>
	<li><a href="policy_management.htm">Managing Policies</a></li>
	<li><a href="policies_operational_about.htm">About Operational Policies</a></li>
</ul>
<ul>
	<li><a href="../../cm/learnmore/basics_glossary.htm">Glossary of Terms for the Community Manager developer portal</a></li>
</ul></div>