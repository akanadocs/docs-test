---
layout: page
title: Use Case - UK Open Banking
description: An end-to-end example of using the JOSE Policy v2 to successfully implement the UK Open Banking standard.
product: ag
category: learn
sub-nav-class: Policies - Operational
weight: 04
type: page
nav-title: Use Case - UK Open Banking
---
<h2 id="top">Use Case: UK Open Banking</h2>
<p>An end-to-end example of successfully implementing the UK Open Banking standards via the Akana API Platform, using the JOSE Policy v2.</p>
<p>This example could also be applied to alternative standards, such as the ones being created by the Berlin Group and STET for PSD2.</p>
<p>
<a href="about_policies_view.htm" class="button secondary">About Policies</a> 
<a href="policy_management.htm" class="button secondary">Managing Policies</a> 
<a href="qos_policies_intro.htm" class="button secondary">QoS Policies</a>
</p>
<p>For information about using policies in the context of the developer portal, see <a href="../../cm/learnmore/bus_admin_organizations.htm#h_business_policies">Business Policies</a>.</p>



<div class = "divider1"></div>
<h3 style="color: gray;">Table of Contents</h3>
<ol class="table_of_contents">
	<li><a href="#introduction">Introduction</a></li>
	<li><a href="#uc_overview">Use case overview</a></li>
	<li><a href="#setup">Setting up the use case</a></li>
	<li><a href="#run">Running the use case</a></li>
	<li><a href="#ob_uc_results">Results</a></li>
	<li><a href="#ob_uc_metrics">Review metrics</a></li>
	<li><a href="#ob_uc_resources">Resources</a></li>
</ol>
<div class = "divider1"></div>



<h3 id="introduction">Introduction</h3>
<p>The UK Open Banking security profile is based on a layered architecture. Security is implemented:</p>
<ol>
	<li>At the transport layer.</li>
	<li>At the client authorization layer.</li>
	<li>At the message level, with the JOSE policy which ensures the integrity of the message.</li>
</ol>
<!--<p>{OvG 8/27/19: <span class="apidoc_red">For a comprehensive use case, it would be best to include all three aspects. Essentially: 1. Mutual TLS (certificate-based client authentication), 2. OAuth2.0 / OpenID Connect (client authorization based on resource owner authentication and consent) and 3. JOSE security (message security )</span>.}</p>-->
<p>This example shows all three layers:</p>
<ol>
	<li>Mutual TLS via certificate-based client authentication.</li>
	<li>Client authorization based on resource owner authentication and consent using OAuth 2.0/OpenID Connect.</li>
	<li>Message security using the JOSE policy, with all the security requirements specific to the UK Open Banking standard in place.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h3 id="uc_overview">Use case overview</h3>
<p>This use case sets up an API with the JOSE policy assigned to it. We will create a contract between the app and the API, and test in Test Client. You'll be able to see the JOSE headers in action and see how the integrity of the message is preserved.</p>
<p>This example illustrates how the JOSE policy protects the API and enforces the UK Open Banking rules.</p>
<p>Note that this is an example for illustration purposes; the API does not actually connect with a bank. This is a sandbox API scenario. If the API is called successfully and all the security rules are satisfied, a mock response is returned.</p>
<p>This procedure includes all artifacts and instructions you'll need to set up the use case yourself.</p>
<p>Once you have the use case set up and running successfully, you can also use negative testing to see how the JOSE policy protects the message, so that it fails if any of the values are tampered with.</p>

<h5 id="uc_ob_prerequisites">Prerequisites</h5>
<p>To run this use case you'll need the following:</p>
<ul>
	<li>A working installation of the Akana API Platform, either on-prem or a SaaS account.</li>
	<li>A keystore, in&nbsp;.p12 or&nbsp;.jks format. The keystore contains the cryptographic primary key and corresponding certificate chain.
		<p>These are required for setting up the mutual TLS connection and also for signing the message (JWT) as required by the JOSE Security policy.</p></li>
	<li>The API Gateway must be configured to have an HTTPS listener that accepts (or requires) client certificates.
	<p><strong>Note</strong>: If you are using the SaaS platform, this is already configured for you.</p></li>
</ul>
<p><a href="#top">Back to top</a></p>



<h3 id="setup">Setting up the use case</h3>
<p>To get this use case working in the Akana API platform you'll need to:</p>
<ul>
	<li><a href="#s01">Set up the OAuth Provider domain</a> {<span class="apidoc_red">To comply with the spec, a scope called &ldquo;accounts&rdquo; must be configured with the Domain. So perhaps this calls for a distinct domain….One tricky bit here: the Authorization Server URL has to be unique. If a domain is already present that uses the &lsquo;default&rsquo; tenant hostname for its Authorization Server, then an additional virtual host must be configured (domain configuration will reject duplicate use of a hostname).</span>}</li>
	<li>Create and configure the API:
		<ul>
			<li><a href="#s02">Create the API</a></li>
			<li><a href="#s03">Modify the API implementation so that there is only a Sandbox implementation</a></li>
			<li><a href="#s04">Create a mock response</a></li>
		</ul>
	</li>
	<li>Secure the API:
		<ul>
			<li><a href="#s05">Set up the API OAuth Details</a></li>
			<li><a href="#s06">Set up the policies</a></li>
			<li><a href="#s07">Attach the policies to the API</a></li>
			</ul>
	</li>
	<li><a href="#s08">Create the app</a></li>
	<li><a href="#s09">Request, and approve, a contract between the app and the API</a></li>
	</ul>
<p>Once all the above is set up, you're ready to test the API in Test Client: see <a href="#run">Running the use case</a>.</p>


<h4 id="s01">Set up the OAuth Provider domain</h4>
<p>You'll need to have Site Admin permissions to set up the OAuth provider domain.</p>
<ol>
	<li>Go to <strong>Admin</strong> &gt; <strong>Domains</strong> and click <strong>Add Domain</strong>.</li>
	<li>Choose OAuth/OIDC Provider {<span class="apidoc_red">And, do we also need to set up an authentication domain first?</span>}. Note that this example uses the Client Credentials grant type. The scenario could easily be extended to support additional grant types, such as Authorization Code, which would require a Resource Owner Authentication Domain.</li>
	<li>On Tab 2, <strong>Grant Types</strong>, choose <strong>Authorization Code</strong> and <strong>Client Credentials</strong>.</li>
	<li>On Tab 3, <strong>Token</strong>, choose <strong>Referenced Bearer</strong>. {<span class="apidoc_red">OvG can we say something about our choice here, bit of info?</span>}</li>
	<li>Set up the values listed below and save your domain.</li>
</ol>
<p><strong>Values:</strong></p>
<ul>
	<li>Grant type: Client Credentials</li>
	<li>To comply with the spec, a scope called <strong>accounts</strong> must be configured with the domain. </li>
</ul>
<p>xxx</p>


<h4 id="s02">Create the API</h4>
<p>This example uses the Swagger for the Account and Transaction API, one of the xxx one of the APIs published by the UK Open Banking Implementation Entity.</p>
<p><a href="assets/account-info-swagger-3.0-x.json">Account and Transaction API Swagger file</a></p>
<p>Create the API by uploading the Swagger file, and save.</p>


<h4 id="s03">Modify the API implementation so that there is only a Sandbox implementation</h4>
<p>Go to <strong>API</strong> &gt; <strong>Implementations</strong> and do the following:</p>
<ol>
	<li>Add a Sandbox implementation, with URL xxx {<span class="apidoc_red">OvG comment: &quot;In order to apply mTLS, the (ND) container listener must be configured as such.&quot; Not sure what I need to do with this anyway.</span>}</li>
	<li>Delete the Live implementation.</li>
	</ol>
<p>{<span class="apidoc_red">OvG I had trouble even creating the Sandbox implementation with only Mutual HTTPS.</span>}</p>


<h4 id="s04">Create a mock response</h4>
<p>The next step is to modify the first resource in this API, <strong>CreateAccountAccessConsent</strong>, which allows the third-party provider (TPP) to request access consents in order to provide a service to the consumer.</p>
<p>In the Process Editor for the CreateAccountAccessConsent operation, create a mock response</p>
<p>Go to <strong>API</strong> &gt; <strong>Implementations</strong> and do the following:</p>
<ol>
	<li>Go to the xxx</li>
</ol>


<h4 id="s05">Set up the API OAuth Details</h4>
<ol>
	<li>Go to <strong>API</strong> &gt; <strong>Details</strong>. From the drop-down on the right, choose <strong>OAuth Details</strong>.</li>
	<li>Set up the following:
		<ol>
			<li>Page 1, Sandbox endpoint: xxx</li>
			<li>Page 2, Scope Mapping, choose the <strong>accounts</strong> scope.</li>
		</ol>
	</li>
	<li>Save.</li>
</ol>


<h4 id="s06">Set up the policies</h4>
<p>{<span class="apidoc_red">OvG: you have HTTP Security and also don't have AtmoApplicationSecurityPolicy... not needed?</span>}</p>
<p>This use case includes the following policies attached to the API:</p>
<p>{<span class="apidoc_red">OvG not sure what you mean re your comment, what changes to make: &quot;<strong>I think it would be good to have a bit of a “policy sale” here. Though it may look pretty tedious at first, I think it’s pretty powerful that the entire Open Banking security profile is covered through three out-of-the-box configurable policies, that can be reused across APIs once configured (and that can easily be updated, should that be necessary – after which they will immediately be effective on the APIs they have been associated with).</strong>&quot;</span>}</p>
<dl>
<dt>HTTP Security Policy</dt>
<dd>This policy validate the identity as it is presented through a certificate with the internal client identity store. It’s an authentication step. When this policy is attached to an API, and the user invokes the API in Test Client, the user must present a valid keystore, that is then validated by the Gateway. Test Client extracts the details from the TLS context, from the transport layer, to validate the certificate.</dd>
<!--<dd>{<span class="apidoc_red">OvG edit 8/27/19, stashing for now: "An INTERNAL note here: strictly speaking, this policy is not necessary, as the mutual TLS connection will have been set up irrespective of the policy being there or not (in fact, a successful mTLS connection is a precondition for the policy to work – otherwise, there would be no client certificate to lift from the connection, right). But it does show our capability of associating a keystore with a distinct client (App) and validate that at runtime. As an ADDITIONAL note: in a PSD2 context, we would have to extract some distinct values from the certificate (the Third Party Provider roles – account provider and/or payment initiator – and the TPP unique identifier). Or at least, I think this is something that the API Gateway may be expected to do. Currently, we do not offer that capability out-of-the-box, but I’d expect that to be covered through an extension of the policy."</span>}-->


<dt>OAuth Policy</dt>
<dd>This policy enforces OAuth. There is no policy configuration involved. When this policy is attached to an API, and the user invokes the API in Test Client, the client is redirected to an authorization server to get an access token in order to be able to access the API. Test Client uses the internal Akana authorization server. Once the client's credentials are validated, the authorization server generates the token, which is sent with the message request.</dd>
<dd>In the context of this example, OAuth scopes are not a significant factor.</dd>


<dt>JOSE policy v2</dt>
<dd>The JOSE policy adds very specific security to the part of the message exchange where the message is coming in from the client. The message is subjected to a number of rules, as specified by the UK OB rules and as configured in the JOSE policy.</dd>


<dt>Detailed Auditing Policy (optional, allows viewing transaction info)</dt>
<dd>We're using the Detailed Auditing policy just for the purposes of this use case, since it's a test scenario, so that you can view transaction details. This doesn't relate to UK Open Banking; it’s just for developer convenience.</dd>
</dl>

<h5>To create the policies</h5>
<ol>
	<li>xxx</li>
	<li>Create and configure the HTTP Security policy:
		<ul>
			<li>xxx</li>
			<li>xxx</li>
			</ul>
		</li>
	
	<li>Create and configure the Detailed Auditing Policy. 
		<ul>
			<li>xxx</li>
			<li>xxx</li>
			</ul>
		</li>
	
	<li>Create and configure the JOSE policy options:
		<ul>
			<li><strong>Protection Scope</strong>: <strong>IN</strong> (in from the client to the Gateway)</li>
			<li><strong>Serialization</strong>: Compact.</li>
			<li><strong>Unencoded Detached Payload</strong>: Check the box.</li>
			<li><strong>Header Parameter Name</strong>: <strong>x-jws-signature</strong></li>
			<li><strong>UK Open Banking</strong>: Check the box.</li>
			</ul>
		</li>
	<li>Specify the JOSE policy IN message options:
		<ul>
			<li><strong>Signed Content</strong>: check the box.</li>
			<li><strong>Private Headers</strong>: check the box and specify the two UK Open Banking headers, <strong>http://openbanking.org.uk/iat</strong> (&quot;issued at&quot; header) and <strong>http://openbanking.org.uk/iss</strong> (&quot;issuer&quot; header).</li>
		</ul>
		</li>
	
	<li>Save the JOSE policy v2.</li>
	<li>xxx</li>
</ol>


<h4 id="s07">Attach the policies to the API</h4>
<ol>
	<li>Go to <strong>API</strong> &gt; <strong>Implementations</strong> and choose the Sandbox implementation.</li>
	<li>In the <strong>Policies</strong> section, click <strong>Edit</strong>.</li>
	<li>Add the following policies to the API:
		<ul>
			<li>AtmosphereApplicationSecurityPolicy {<span class="apidoc_red">why not?</span>}</li>
			<li>HTTP Security Policy {<span class="apidoc_red">why?</span>}</li>
			<li>OAuthSecurity</li>
			<li>JOSE Security Policy v2</li>
			<li>DetailedAuditing</li>
		</ul>
	</li>
	<li>Click <strong>Save</strong> to save the policy selections.</li>
	<li>On the API Details page, click <strong>Save</strong> again to confirm your changes.</li>
</ol>
<h4 id="s08">Create the app</h4>
<p>Create an app. For this example, the app name is <strong>AccountsApp</strong>.</p>


<h4 id="s09">Request, and approve, a contract between the app and the API</h4>
<p>xxx</p>


<h4 id="sxxx">xxx</h4>
<p>xxx</p>
<p><a href="#top">Back to top</a></p>



<h3 id="run">Running the use case</h3>
<p>Showtime!</p>
<p>Go to the <strong>API</strong> &gt; <strong>Test Client</strong>.</p>
<p>In Test Client:</p>
<ol>
	<li>Choose the app</li>
	<li>Choose the operation (xxx)</li>
	<li>Add the following headers:
		<ul>
			<li>{<span class="apidoc_red">OvG where did those headers come from? xxx</span>}</li>
			<li>x-fapi-financial-id : xxx</li>
			<li>x-fapi-financial-id : xxx</li>
			</ul>
		</li>
	
	<li>In the Content box, provide the message payload. For this example, use the content provided in <a href="#ob_uc_resources_02">Content for the Test Client message</a> below.</li>
	<li>Click the <strong>Setup</strong> button.</li>
	<li>xxx</li>
	<li>Uploading the P12 file: questions. {<span class="apidoc_red">does it have to be a P12 file or what else can it be in the Test Client dialog? Does PKCS12 mean P12? Need to update Test Client doc: app_testing_tc.htm#tc_upload_keystore</span>} Test Client needs the private key in order to sign the request being sent to the API.</li>
	<li>Click the <strong>Security</strong> button.</li>
	<li>In the page for the JOSE Security policy:
	<ul>
		<li>In the <strong>Signature/MAC Algorithm</strong> field, choose RS256.</li>
		<li>In the <strong>Private Headers</strong> section, add the <strong>http://openbanking.org.uk/iat</strong> (&quot;issued at&quot; header) and provide any value. At runtime, Test Client updates with the correct value.</li>
		<li>In the <strong>Private Headers</strong> section, add the <strong>http://openbanking.org.uk/iss</strong> (&quot;issuer&quot; header) and provide the Subject DN. This value must match the subject DN from the certificate that corresponds with the keystore that you just uploaded. For example: {<span class="apidoc_red">OvG could I borrow the value you used please? I will change it. Or I need to use mine</span>}
			<pre>xxx</pre></li>
		<li>Click <strong>Next</strong>.</li>
	</ul>
	</li>
	
	<li>In the page for the OAuth policy, choose <strong>Client Credentials</strong> and click <strong>Get Token</strong> to generate the OAuth access token.</li>
	<li>In the SameOriginPolicy page, click <strong>Finish</strong>.</li>
	<li>In Test Client, click <strong>Invoke</strong>.</li>
	<li>Review the successful response</li>
	<li>{<span class="apidoc_red">do we need to decode any tokens or anything?</span>}</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h3 id="ob_uc_results">Results</h3>
<p>The illustration below shows a successful response in Test Client.</p>
<p><img src="assets/uc_results.png" alt="UK Open Banking use case: result in Test Client" /></p>
<p><a href="#top">Back to top</a></p>



<h3 id="ob_uc_trace_tab">Review Trace tab and decode token</h3>
<p>In Test Client, review the <strong>Trace</strong> tab. The results should look something like the below.</p>
<p><img src="assets/uc_results_trace.png" alt="UK Open Banking use case: Trace tab in Test Client" /></p>
<p>You can see that:</p>
<ul>
	<li>The JOSE Authorization header has been prepared.</li>
	<li>The <strong>x-jws-signature</strong> header, specified in the JOSE policy, has been sent. {<span class="apidoc_red">Is that the same as the JOSE Authorization header?</span>}</li>
	<li>Because of the OAuth configuration used, in this example there is a second JWT token, a Bearer token, generated for the message. This is the OAuth access token. It contains the information that this is a valid client, and that the client identity has been validated against the identity store configured for the OAuth provider.</li>
</ul>
<p>You can copy the token in the <strong>x-jws-signature</strong> header and decode it in the JWT debugger at <a href="https://jwt.io/" title="https://jwt.io/" target="_blank">https://jwt.io/</a>. The above example is decoded below.</p>
<p><img src="assets/uc_results_jwt_jose.png" alt="UK Open Banking use case: JWT token, decoded" /></p>
<p><strong>Note</strong>: Since this example uses the Detached Payload option, the payload is not included in the JWT token, so the Payload section of the token is empty.</p>
<p>When decoded at <a href="https://jwt.io/" title="https://jwt.io/" target="_blank">https://jwt.io/</a>, the Bearer token looks like this:</p>
<p><img src="assets/uc_results_jwt_bearer.png" alt="UK Open Banking use case: JWT token, decoded" /></p>
<p>This token shows the claims that are valid for the OAuth authorization context. The API Gateway validates these claims.</p>
<p><a href="#top">Back to top</a></p>



<h3 id="ob_uc_metrics">Review metrics</h3>
<p>You can also review the analytics information.</p>
<p>In the developer portal, go to <strong>Analytics</strong> &gt; <strong>Logs</strong>. Choose one of the messages you just sent. You can look at the Info, Body, and Headers. In the Body tab you'll be able to see that the policies were enforced successfully.</p>
<p>The <strong>Info</strong> tab is shown below.</p>
<p><img src="assets/uc_results_logs_info.png" alt="UK Open Banking use case: reviewing the logs -- Info tab" /></p>
<p>The <strong>Body</strong> tab:</p>
<p><img src="assets/uc_results_logs_body.png" alt="UK Open Banking use case: reviewing the logs -- Body tab" /></p>
<p>You can see from the above that the API Platform validated the certificate and authenticated that the client is a valid entity associated with the certificate.</p>
<p><a href="#top">Back to top</a></p>



<h3 id="ob_uc_resources">Resources</h3>
<p>Resources for this use case include:</p>
<ul>
	<li><a href="#ob_uc_resources_01">The input Swagger file for the API</a></li>
	<li><a href="#ob_uc_resources_02">The content for the Test Client message</a></li>
	<li><a href="#ob_uc_resources_03">A valid keystore</a></li>
</ul>


<h4 id="ob_uc_resources_01">Input Swagger file</h4>
<p>This example uses the Open Banking Account and Transaction API, available at the following URLs:</p>
<ul>
	<li><strong>Version 3.1.1</strong>: <a href="https://openbanking.atlassian.net/wiki/spaces/DZ/pages/999622968/Account+and+Transaction+API+Specification+-+v3.1.1#AccountandTransactionAPISpecification-v3.1.1-SwaggerSpecification" title="Link to Atlassian site for 3.1.1 Swagger" target="_blank">https://openbanking.atlassian.net/wiki/spaces/DZ/pages/999622968/Account+and+Transaction+API+Specification+-+v3.1.1#AccountandTransactionAPISpecification-v3.1.1-SwaggerSpecification</a></li>
	<li><strong>Version 3.1.2</strong>: <a href="https://openbanking.atlassian.net/wiki/spaces/DZ/pages/1077805296/Account+and+Transaction+API+Specification+-+v3.1.2#AccountandTransactionAPISpecification-v3.1.2-SwaggerSpecification" title="Link to Atlassian site for 3.1.2 Swagger" target="_blank">https://openbanking.atlassian.net/wiki/spaces/DZ/pages/1077805296/Account+and+Transaction+API+Specification+-+v3.1.2#AccountandTransactionAPISpecification-v3.1.2-SwaggerSpecification</a></li>
</ul>
<p>However, the default Swagger file for this API, in the default values for <strong>Consumes</strong> and <strong>Produces</strong>, includes a charset parameter: <strong>application/json; charset=utf-f</strong>.</p>
<p>Both versions of the UK Open Banking Specification state that the media type must be <strong>application/json</strong> (apart from specific exceptions), and the Akana JOSE v2 policy expects these values exactly. With the charset parameter, the messages fail.</p>
<p>Therefore, for this use case, the Swagger has been slightly modified; the default media type values have been replaced with <strong>application/json</strong>:</p>
<ul>
	<li><a href="assets/account-info-swagger-3.0-x.json">Modified Swagger file</a></li>
</ul>


<h4 id="ob_uc_resources_02">Content for the Test Client message</h4>
<p>The message POST content used in the use case is below.</p>
<pre>{
  "Data":{
    "Permissions":[
      "ReadAccountsDetail",
      "ReadBalances",
      "ReadBeneficiariesDetail",
      "ReadDirectDebits",
      "ReadProducts",
      "ReadStandingOrdersDetail",
      "ReadTransactionsCredits",
      "ReadTransactionsDebits",
      "ReadTransactionsDetail",
      "ReadOffers",
      "ReadPAN",
      "ReadParty",
      "ReadPartyPSU",
      "ReadScheduledPaymentsDetail",
      "ReadStatementsDetail"
    ],
    "ExpirationDateTime":"2017-05-02T00:00:00+00:00",
    "TransactionFromDateTime":"2017-05-03T00:00:00+00:00",
    "TransactionToDateTime":"2017-12-03T00:00:00+00:00"
  },
  "Risk":{

  }
}</pre>
<p><a href="#top">Back to top</a></p>



<h4 id="ob_uc_resources_03">A valid keystore</h4>
<p>For this example, you'll need to be able to generate a keystore for the xxx.</p>
<p>You could use a tool such as Keystore Explorer.</p>
<p><a href="#top">Back to top</a></p>



<div class = "divider1"></div>



<h3 id="related_topics">Related Topics</h3>
<div class="relatedlinks">
<ul>
	<li><a href="about_policies_view.htm">About Policies</a></li>
	<li><a href="policy_management.htm">Managing Policies</a></li>
	<li><a href="policies_operational_about.htm">About Operational Policies</a></li>
</ul>
<ul>
	<li><a href="../../cm/learnmore/basics_glossary.htm">Glossary of Terms for the Developer Portal</a></li>
</ul>
</div>