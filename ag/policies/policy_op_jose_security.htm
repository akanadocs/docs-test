---
layout: page
title: Using the JOSE Security Policy
description: Learn how to use the JOSE security policy to sign and encrypt message content.
product: ag
category: learn
sub-nav-class: Policies - Operational
weight: 04
type: page
nav-title: JOSE Security Policy
---
<h2 id="top">Using the JOSE Security Policy</h2>
<p>Learn how to use the JOSE security policy to sign and encrypt JSON message content.</p>

<p>
<a href="about_policies_view.htm" class="button secondary">About Policies</a>  
<a href="policy_management.htm" class="button secondary">Managing Policies</a>  
<a href="policies_operational_about.htm" class="button secondary">About Operational Policies</a>
</p>


<h5 class="stamp">Supported Platforms: 8.2x and later</h5>


<div class = "divider1"></div>
<h3 style="color: gray;">Table of Contents</h3>
<ol class="table_of_contents">
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#jose_create_config">Creating and Configuring the JOSE Security Policy</a></li>
  <li><a href="#jose_config_policy_options">Configuring JOSE Security Policy Options</a></li>
  <li><a href="#jose_config_audit_options">Configuring JOSE Security Audit Options</a></li>
  <li><a href="#jose_policy_attach">Attaching the policy</a></li>
  <li><a href="#uc_policy_op_jose">JOSE Security Policy: use case</a></li>
</ol>
<div class = "divider1"></div>



<a name="introduction"></a><h3>Introduction</h3>
<p>The JOSE Security Policy is an out-of-the-box operational policy that is part of the Policy Manager default installation. You can attach this policy to RESTful and Messaging services to secure any message content; it signs and/or encrypts the message content. Configuration options are flexible so that you can add more or less security as needed. You can also configure the Initiator Subject category that the authenticated identity will be used as.</p>
<p>This policy conforms to the following standards:</p>
<ul>
  <li>JSON Web Signature (JWS) (<a href="https://tools.ietf.org/html/rfc7515" title="JWS standard" target="_blank">https://tools.ietf.org/html/rfc7515</a>) </li>
  <li>JSON Web Encryption (JWE) (<a href="https://tools.ietf.org/html/rfc7516" title="JWE standard" target="_blank">https://tools.ietf.org/html/rfc7516</a>)</li>
</ul>
<p><a href="#top">back to top</a></p>



<a name="jose_create_config"></a><h3>Creating and Configuring the JOSE Security Policy</h3>
<p>There are two main tasks in configuring the JOSE Security Policy:</p>
<ul>
  <li>Creating the policy. See <a href="#proc_jose_policy_create">To create the JOSE security policy</a>. This defines a draft policy with no settings.</li>
  <li>Configuring the policy details. See <a href="#proc_jose_policy_configure">To configure the JOSE security policy</a>. This defines the policy settings.</li>
  </ul>

<a name="proc_jose_policy_create"></a><h5>To create the JOSE security policy:</h5>
<ol>
  <li>Log in to Policy Manager: {protocol}://{hostname}:{port}/ms/index.do.</li>
  <li>Go to <strong>Workbench</strong> &gt; <strong>Browse</strong> and choose the organization that includes services you want to add this policy to.</li>
  <li>Go to the <strong>Policies</strong> &gt; <strong>Operational </strong>folder.</li>
  <li>In the right pane, at the <strong>Policies Summary</strong> page, click <strong>Add Policy</strong>.</li>
  <li>On the <strong>Select Policy Creation Option</strong> page, in the <strong>Add Policy</strong> field, choose <strong>JOSE Security Policy</strong>, and then click <strong>Next</strong>.</li>
  <li>On the <strong>Specify Policy Details</strong> page, provide:
    <ul>
      <li><strong>Name</strong>: Required</li>
      <li><strong>Policy Key</strong>: Optional. If you don't provide a policy key, the platform automatically assigns one. If you do provide one, it must be an absolute URI; for example, 	<strong>urn:uuid:fb984a5e-2156-17e8-bx02-a97cb5827beb</strong>.</li>
      <li><strong>Description</strong>: Optional</li>
    </ul>
  </li>
  <li>Click <strong>Finish</strong> and then click <strong>Close</strong>.</li>
</ol>

<a name="proc_jose_policy_configure"></a><h5>To configure the JOSE security policy:</h5>
<ol>
  <li>Create the policy as covered above.</li>
  <li>At the <strong>Policies Summary</strong> page, in the <strong>JOSE Security Policy</strong> section, click <strong>Modify</strong>. The <strong>Specify JOSE Security Policy Options</strong> page appears, as shown below.
    <p><img src="images/jose_policyoptions.jpg" alt="JOSE policy options page" /></p>
  </li>
  <li>Specify values. For information about the fields, refer to <a href="#jose_config_audit_options">Configuring JOSE Security Policy Options</a> below.</li>
  <li>Click <strong>Next</strong>. The <strong>Specify JOSE Security Audit Options</strong> page appears, as shown below.
  <p><img src="images/jose_audit_options.jpg" alt="JOSE security policy, audit options" /></p></li>
  <li>Specify values. For information about the fields, refer to <a href="#jose_config_audit_options">Configuring JOSE Security Audit Options</a> below.</li>
  <li>When done, click <strong>Finish</strong>. The completion summary is displayed. An example is shown below.
    <p><img src="images/jose_completionsummary.jpg" alt="JOSE Security Policy completion summary" /></p>
  </li>
  <li>Click <strong>Close</strong>.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<a name="jose_config_policy_options"></a><h3>Configuring JOSE Security Policy Options</h3>
<p>Once you've created the policy, you can configure the policy options.</p>
<p>There are five main configuration sections you can use to tailor your JOSE security policy options:</p>
<ul>
  <li><strong>Protection Scope</strong>: Identifies which messages in a message exchange will be protected by the policy. Choices:
<ul>
<li><strong>IN</strong>: protects all incoming messages.</li>
<li><strong>OUT</strong>: protects all outgoing messages.</li>
<li><strong>FAULT</strong>: protects all fault messages.</li>
</ul>
 </li>
  <li><strong>Serialization</strong>: You can specify Compact or JSON serialization. For information about these values, refer to the applicable sections in the JWS RFC: <a href="https://tools.ietf.org/html/rfc7515#section-7.1" title="Link to JWS RFC for JSON compact serialization" target="_blank">JWS Compact Serialization</a> and <a href="https://tools.ietf.org/html/rfc7515#section-7.2" title="Link to JWS RRC for JWS JSON serialization" target="_blank">JWS JSON Serialization</a>.</li>
  <li><strong>Sign Content</strong>: If this box is checked, the content is signed using the selected Signature/MAC algorithm.
<p>By default, the checkbox is cleared, so this section is disabled. To enable it, just check the box, and then specify the algorithm from the drop-down list. For available values, see <a href="#sig_mac_alg_jose">Sign Content: supported Signature/MAC Algorithms</a> below.</p>
  <p>If needed, you can also check the optional <strong>Embed Key</strong> box. The public key (corresponding to the private key used to sign the content) is embedded in the JSON structure in the <strong>jwk</strong> header, so that it can be verified later. <span class="apidoc_red">If you add this option when the JOSE Security policy is applied to OUT messages, it ensures that the client has the key to verify the signature.</span></p>
  </li>
  <li><strong>Encrypt Content</strong>: if this box is checked, the content is encrypted using the selected Encryption Algorithm. 
    <p>By default, this checkbox is cleared, so this section is disabled. To enable it, just check the box. The default Signature/MAC algorithm value is HS256, and the default Key Management Algorithm value is <strong>None</strong>. For available values, see <a href="#encryption_alg_jose">Encrypt Content: supported Encryption Algorithms</a> below.</p>
    <p>You can also protect the encryption key by selecting an optional Key Management Algorithm. For available values, see <a href="#key_mgmt_alg_jose">Encrypt Content: supported Key Management Algorithms</a> below.<!-- {<span class="apidoc_red">CR comment 1/24/18: The text where it says "You can also protect the encryption key by selecting an optional Key Manager Algorithm" I don't think is true.  An algorithm must always be selected that will be used to generate the signature and the algorithm used to verify the signature. (TBD, need input on this one)</span>}--></p>
    <p>If needed, you can also check the optional <strong>Embed Key</strong> box. The public key (corresponding to the private key used to sign the content) is embedded in the JSON structure in the <strong>jwk</strong> header, so that it can be verified later. <span class="apidoc_red">If you add this option when the JOSE Security policy is applied to OUT messages, it ensures that the client has the key to verify the encryption.</span></p>
  </li>
  <li><strong>Initiator Subject Category</strong>: <span class="apidoc_red">Here, you  can specify the subject category of the inbound identity that will be used for the outbound identity.</span> This is the identity whose private key is used to sign the IN message and whose public key is used to encrypt OUT and FAULT messages. Options: <strong>Consumer</strong>, <strong>End-User</strong>, <strong>User-Defined</strong>, and <strong>None</strong>. For more information, see <a href="#initiator_subject_category_jose">Initiator Subject Category options</a> below.</li>
</ul>


<a name="sig_mac_alg_jose"></a><h4>Sign Content: supported Signature/MAC Algorithms</h4>
<p>The Signature/MAC algorithms supported by the JOSE Security policy for signing content are:</p>
<ul>
  <li>HS256</li>
  <li>HS384</li>
  <li>HS512</li>
  <li>RS256</li>
  <li>RS384</li>
  <li>RS512</li>
  <li>ES256</li>
  <li>ES384</li>
  <li>ES512</li>
</ul>


<a name="encryption_alg_jose"></a><h4>Encrypt Content: supported Encryption Algorithms</h4>
<p>The encryption algorithms supported by the JOSE Security policy for encrypting content are:</p>
<ul>
  <li>A128CBC-HS256</li>
  <li>A192CBC-HS384</li>
  <li>A256CBC-HS512</li>
  <li>A128GMC</li>
  <li>A192GMC</li>
  <li>A256GMC</li>
</ul>


<a name="key_mgmt_alg_jose"></a><h4>Encrypt Content: supported Key Management Algorithms</h4>
<p>The Key Management algorithms supported by the JOSE Security policy for encrypting content are:</p>
<ul>
  <li>None</li>
  <li>RSA1_5</li>
  <li>RSA-OAEP</li>
  <li>A128KW</li>
  <li>A192KW</li>
  <li>A256KW</li>
  <li>A128GCMKW</li>
  <li>A192GCMKW</li>
  <li>A256GCMKW</li>
</ul>


<a name="initiator_subject_category_jose"></a><h4>Initiator Subject Category options</h4>
<p>In the <strong>Initiator Subject Category</strong> field, you  can specify the subject category of the inbound identity that will be used for the outbound identity. This is the identity whose private key is used to sign the IN message and whose public key is used to encrypt OUT and FAULT messages.</p>
<p>The Initiator Subject Category options supported by the JOSE Security policy are:</p>
<ul>
  <li><strong>Consumer</strong>: The consumer of the service; the client application. This is the default and most common value.</li>
  <li><strong>End-User</strong>: The end-user of the client application.</li>
  <li><strong>User-Defined</strong>: You can define a specific subject category that will be used for identification purposes. If you choose this option, specify the value that will be used.&nbsp;Make sure you spell it exactly correctly, including capitalization.</li>
  <li><strong>None</strong>: If you choose <strong>None</strong>, the selection of the identity whose keys should be used for signing and encrypting content is not specified by the policy.</li>
</ul>
<p><a href="#top">Back to top</a></p>



<a name="jose_config_audit_options"></a><h3>Configuring JOSE Security Audit Options</h3>
<p>Once you've created the policy, you can configure the audit options.</p>
<p>Choose from the available options controlling the audit data that is captured:</p>
<ul>
  <li><strong>Generate Audit Data</strong>: captures all message data, whether success or failure, for all message exchanges.</li>
  <li><strong>On Error Only</strong>: Captures audit data only when an error occurs on a message exchange.</li>
</ul>



<a name="jose_policy_attach"></a><h3>Attaching the Policy</h3>
<p>To use the JOSE security policy, go to the <strong>Policies</strong> folder in the Root Organization and attach the policy to a web service, binding, or binding operation.</p>
<p><a href="#top">Back to top</a></p>



<a name="uc_policy_op_jose"></a><h3>JOSE Security Policy: use case</h3>
<p>The follow use case illustrates a scenario where the JOSE Security policy is used to secure the Swagger Petstore API. In this example, we're creating an API secured with HTTP Basic authentication that signs the response based on the client's certificate. The Authentication policy and HTTP Security policies secure the API with Basic Auth. The JOSE Security policy takes the consumer information and signs the output based on the JOSE policy configuration.</p>
<p>In this example:</p>
<ul>
  <li>The information is signed but not encrypted.</li>
  <li>Signing is applied to the OUT message.</li>
</ul>
<p>This example:</p>
<ul>
  <li>Assumes some setup in Policy Manager and Community Manager.</li>
  <li>Outlines the key steps for setting up the app, API, and contract, assigning the policy, and viewing the JSON response content.</li>
</ul>
<p>This use case  includes the following steps:</p>
<ul>
  <li><a href="#prereq_pm">Prerequisites in Policy Manager</a></li>
  <li><a href="#prereq_cm">Prerequisites in the Developer Portal</a></li>
  <li><a href="#01">Step 1: In Policy Manager, Create, Configure, and Activate JOSE Security Policy</a></li>
  <li><a href="#02">Step 2: In the developer portal, create the Swagger Petstore API (without policies)</a></li>
  <li><a href="#03">Step 3: In the developer portal, create an app to consume the API</a></li>
  <li><a href="#04">Step 4: In the developer portal, create and activate a contract between the app and the API</a></li>
  <li><a href="#05">Step 5: access the API in an external client such as Postman</a></li>
  <li><a href="#06">Step 6: In the developer portal, add policies to the API</a></li>
  <li><a href="#07">Step 7: Save out the app credentials</a></li>
  <li><a href="#08">Step 8: Generate PKI keys and certificate for the app</a></li>
  <li><a href="#09">Step 9: In external client, access the API using authentication</a></li>
  <li><a href="#10">Step 10: View the JOSE response</a></li>
</ul>

<a name="prereq_pm"></a><h5>Prerequisites in Policy Manager</h5>
<p>In Policy Manager, this use case assumes that you have:</p>
<ul>
  <li>Defined, configured, and activated the following operational policies:
    <ul>
      <li><a name="policy_auth"></a><strong>Authentication Policy</strong>: Subject Category = Consumer. Domain=LocalDomain
<p><img src="images/jose_01.jpg" alt="Authentication Policy" /></p></li>
      <li><a name="policy_http_security"></a><strong>HTTP Security Policy</strong>: HTTP Basic authentication, Subject Category = Consumer.
        <p><img src="images/jose_02.jpg" alt="HTTP Security Policy" /></p></li>
    </ul>
  </li>
  <li>Defined a certificate authority at the root level (<strong>Configure</strong> &gt; <strong>Security</strong> &gt; <strong>Certificates</strong> &gt; <strong>Certificate Authority</strong> &gt; <strong>Configure Certificate Authority</strong>).</li>
</ul>

<a name="prereq_cm"></a><h5>Prerequisites in the Developer Portal</h5>
<p>In the developer portal, this use case assumes that you have:</p>
<ul>
  <li>Configured a deployment zone (<strong>Admin</strong> &gt; <strong>Deployment Zones</strong>).</li>
</ul>

<a name="01"></a><h5>Step 1: In Policy Manager, Create, Configure, and Activate JOSE Security Policy</h5>
<p>Create the JOSE Security Policy with the following settings, as shown below:</p>
<ul>
  <li><strong>Protection Scope</strong>: OUT</li>
  <li><strong>Sign Content</strong>: checked</li>
  <li><strong>Signature/MAC Algorithm</strong>: RS256</li>
</ul>
<p><img src="images/jose_03.jpg" alt="JOSE Security Policy" /></p>
<p>Save the policy, and activate it.</p>

<a name="02"></a><h5>Step 2: In the developer portal, create the Swagger Petstore API (without policies)</h5>
<p>In the developer portal, at the root level, create the API, using the following values:</p>
<ul>
  <li>Reference the standard Swagger JSON file URL: <a href="http://petstore.swagger.io/v2/swagger.json" target="_blank">http://petstore.swagger.io/v2/swagger.json</a><strong>.</strong></li>
  <li>Disable anonymous access (<strong>Implementations</strong> &gt; <strong>Live</strong> &gt; <strong>Edit</strong> &gt; clear check box and save).</li>
  <li>Update the URL context path: <strong>Implementations</strong> &gt; <strong>Live</strong> &gt; <strong>Deployments</strong> &gt; <strong>Context Path</strong>. For example, change it to: <strong>/josepolicytest</strong>.</li>
  <li>Do not add policies to the API at this point. You'll add the policies in a later step.</li>
</ul>

<a name="03"></a><h5>Step 3: In the developer portal, create an app to consume the API</h5>
<p>In the developer portal:</p>
<ul>
  <li>Create an app.</li>
</ul>
<p><a name="04"></a></p>
<h5>Step 4: In the developer portal, create and activate a contract between the app and the API</h5>
<p>In the developer portal:</p>
<ul>
  <li>Go to the <strong>Overview</strong> page for the API and click <strong>Access</strong>.</li>
  <li>Request a contract for the app you created in <a href="#03">Step 3</a>.</li>
  <li>As the API Admin, approve and activate the contract.</li>
  </ul>
<p>At this point, the app can access the API.</p>
<a name="05"></a><h5>Step 5: access the API in an external client such as Postman</h5>
<p>In an external client, access one of the operations for the API. The example below uses Get Pet By ID, and uses an ID that was previously added.</p>
<p>If you're not sure what URL to use, look in the developer portal: go to the API and to the specific implementation, and copy the URL listed in Endpoints. An example is shown below.</p>
<p><img src="images/jose_04_endpoint.jpg" alt="Getting the endpoint" /></p>
<p>The response should look something like the below:</p>
<p><img src="images/jose_04_results_noauth.jpg" alt="Results in Postman: no auth" /></p>
<p>Now it's time to add the JOSE policy to the API.</p>

<a name="06"></a><h5>Step 6: In the developer portal, add policies to the API</h5>
<p>Now, in the developer portal, add the following policies to the API's implementation. You defined these policies in earlier steps:</p>
<ul>
  <li><a href="#policy_auth">Authentication Policy</a></li>
  <li><a href="#policy_http_security">HTTP Security Policy</a></li>
  <li>JOSE Security Policy which you defined in <a href="#01">Step 1: In Policy Manager, Create, Configure, and Activate JOSE Security Policy</a></li>
</ul>

<a name="07"></a><h5>Step 7: Save out the app credentials</h5>
<p>Go to the <strong>Details</strong> page for your app that has a contract with the API.</p>
<p>Save out these two values to a notepad or other text application:</p>
<ul>
  <li>App ID</li>
  <li>Shared Secret (click <strong>Show Keys</strong> and then <strong>Click to View</strong>)</li>
</ul>
<p>These are the credentials for the app, and will be needed to access the API, which now has the JOSE Security Policy attached to it.</p>
<p>An example is shown below.</p>
<p><img src="images/jose_05_app_credentials.jpg" alt="Saving out the app credentials" /></p>

<a name="08"></a><h5>Step 8: Generate PKI keys and certificate for the app</h5>
<p>You'll need to generate PKI keys so that the platform has a private key for the app, to use in applying the JOSE Security policy.</p>
<p>To do this in Policy Manager:</p>
<ol>
  <li><strong>Security</strong> &gt; <strong>Users</strong> &gt; find the app on the list &gt; click <strong>Manage PKI Keys</strong>.</li>
  <li>Choose <strong>Generate PKI Keys and X.509 Certificate</strong> and click <strong>Next</strong>.</li>
  <li>Fill in the certificate details and click <strong>Finish</strong>.</li>
</ol>
<p>The platform now has a certificate associated with the app, that it can use for signing and encrypting.</p>

<a name="09"></a><h5>Step 9: In external client, access the API using authentication</h5>
<p>Now, in your client, call the API again. You'll get a 401 Unauthorized response.</p>
<p>You'll need to add Basic authorization onto the API in your client, as shown below, and send the app credentials in order to get a successful response.</p>
<p>The example below shows the credentials added for the authorization, and also shows the JWT response.</p>
<p><img src="images/jose_06_results_auth.jpg" alt="Results in Postman: with policies attached" /></p>

<a name="10"></a><h5>Step 10: View the decoded JWT response</h5>
<p>Copy the response content into the JSON Web Token debugger at <a href="https://jwt.io/" target="_blank">https://jwt.io/</a>. In the right pane, you'll see the response message, as in the example below.</p>
<p><img src="images/jose_07_token.jpg" alt="Viewing the token" /></p>
<p><a href="#top">Back to top</a></p>