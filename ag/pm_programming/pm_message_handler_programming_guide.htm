---
layout: page
title: Policy Manager 7.x Message Handler Programming Guide
description: Provides information about the Akana Container Message Handler Framework.
product: ag
category: ref
sub-nav-class: Policy Manager Programming
weight: 06
type: page
nav-title: Message Handler Programming Guide (HTML)
---
<h2 id="top">Message Handler Programming Guide</h2>
<p>This document provides information about the Akana OSGi Container Message Handler Framework. It describes the architecture of the framework, the framework API, and how to deploy extensions to the framework.</p>
<p>To effectively use this guide, you should have access to and a working knowledge of the concepts outlined in the following Policy Manager product documentation:</p>
<ul>
  <li><a href="../../sp/platform_install/installing_akana_api_platform_v84.htm">Installing the Akana API Platform 8.4x</a></li>
</ul>


<div class = "divider1"></div>
<h3 style="color: gray;">Table of Contents</h3>


<ol class="table_of_contents">
	<li><a href="#s01_architecture">1: Message Handler Framework Architecture</a>
		<ul>
			<li><a href="#s01_01_overview">Overview</a></li>
			<li><a href="#s01_04_message_handlers">Message Handlers</a></li>
			<li><a href="#s01_04b_handler_factories">Handler Factories</a></li>
			<li><a href="#s01_04c_handler_chains">Handler Chains</a></li>
			<li><a href="#s01_07_framework_nd">The Framework in the Network Director Feature</a></li>
			</ul>
		</li>
	<li><a href="#s02_framework">2: Message Handler Framework API</a></li>
	<li><a href="#s03_deployment">3: Message Handler Deployment</a></li>
	<li><a href="#s04_development">4: Developing a Message Handler</a>
		<ul>
			<li><a href="#s04_02_source_code">Source Code</a></li>
			<li><a href="#s04_03_bundle">Bundle</a></li>
			<li><a href="#s04_4_deployment">Deployment</a></li>
			</ul>
	</li>
</ol>



<h3 id="s01_architecture">1: Message Handler Framework Architecture</h3>


<h4 id="s01_01_overview">Overview</h4>
<p>The Akana OSGi Container uses an extensible Message Handler Framework for implementing and enforcing policies on messages. The Message Handler Framework is an extension of the Message Handler Framework (see the <a href="http://docs.akana.com/ag/assets/PM7x_Policy_Handler_Programming_Guide_v1.pdf" title="Policy Manager Message Handler Programming Guide" target="_blank">Policy Manager Message Handler Programming Guide</a>, specialized for runtime policies, both Operational and Quality of Service.</p>
<p>The Message Handler framework provides a set of interfaces that can be implemented by developers that would like to extend the base capabilities of a SOA Container. Many of the base capabilities in the container are also implemented using the same framework.</p>
<p>The handler framework is used to process incoming and outgoing messages of web services. The processing is typically constrained to binding specific logic, header processing, and minor transformations. It is not intended to provide orchestration, content based routing, or major transformations. Those capabilities should be pursued through the Virtual Service Orchestration Framework.</p>
<p>The Message Handler Framework is used by individual features such as the Network Director. Due to the different purposes of the features, they each make use of the framework in different ways. For example, the Agent only takes on the role of a provider and processes incoming message exchanges, and therefore the framework is only used to handle incoming requests and their responses. Conversely, the Delegate feature acts as a consumer and only processes outgoing message exchanges. The Network Director acts as a provider and consumer of services and therefore the framework is used for processing both incoming and outgoing message exchanges.</p>
<p><strong>Note</strong>: this document covers only Network Director use of the Message Handler Framework.</p>
<p>In all the features, the Message Handler Framework is made up of the same fundamental components:</p>
<ul>
	<li><a href="#s01_04_message_handlers">Message Handlers</a></li>
	<li>Handler Factories</li>
	<li><a href="#s01_06_handler_chains">Handler Chains</a></li>
</ul>
<p><a href="#top">back to top</a></p>


<h4 id="s01_04_message_handlers">Message Handlers</h4>
<p>A MessageHandler is a Java class that is given a message from a message exchange to perform some business logic. The handler might or might not make changes to the message. For example, it might process a SOAP WS-Security header and remove it from the message, or it might store some metrics about the message without making any modifications. The MessageHandler can provide feedback that would dictate future processing of the message exchange, such as returning a fault to the consumer.</p>
<p><a href="#top">back to top</a></p>


<h4 id="s01_04b_handler_factories">Handler Factories</h4>
<p>A MessageHandler is constructed by a HandlerFactory. The framework presents context to the HandlerFactory, and the HandlerFactory uses this context to create the handler. As illustrated in upcoming sections, the context will be different for certain factories based on how they are deployed in the framework. Some examples of the context provided to factories are:</p>
<ul>
	<li>WSDL descriptions of a service (service-specific)</li>
	<li>WSDL descriptions of a specific operation (operation-specific)</li>
	<li>An Effective WS-Policy (policy enforcement/implementation)</li>
</ul>
<p><a href="#top">back to top</a></p>

<h4 id="s01_04c_handler_chains">Handler Chains</h4>
<p>A HandlerChain is a list of MessageHandlers that are invoked in order, each being given the same message as context. The context supports the addition and retrieval of properties. This allows MessageHandlers to associate data with a context without changing the message that a subsequent handler in the chain can use in its business logic.</p>
<p>In two-way message exchanges, one HandlerChain is used to process both request (IN) and response (OUT) messages. The order of handler invocation for OUT messages is configurable. Handlers can be called:</p>
<ul>
	<li>In reverse order for OUT messages:
	<p><img src="images/pmmhpgm_01_01.jpg" alt="OUT message in reverse order to IN messages" /></p></li>
	<li>in the same order as was followed for IN messages:
	<p><img src="images/pmmhpgm_01_02.jpg" alt="OUT message in the same order as IN messages" /></p></li>
</ul>
<p>A handler can dictate the flow of the HandlerChain by reporting to the chain either of the following:</p>
<ul>
	<li>That a fault has been encountered.</li>
	<li>That the handler believes all processing should stop and the exchange should be completed.</li>
</ul>
<p>For example, if a handler encounters an error processing the SOAP WS-Security header of a message, it can relay the error to the HandlerChain, which will then relay the error to the framework, which will return a fault.</p>
<p><a href="#top">back to top</a></p>


<h4 id="s01_07_framework_nd">The Framework in the Network Director Feature</h4>
<p>The Network Director acts as an intermediary, and therefore both a provider and consumer. It incorporates the use of the framework in a similar way to both the Agent and the Delegate, but is more complex because of its multiple binding and mediation support.</p>
<p><img src="images/pmphpgm_01_03.jpg" alt="Framework in the Network Director feature" /></p>
<p>The Network Director supports any number of bindings for both incoming and outgoing message exchanges.</p>
<p>Based on routing dictated by the Virtual Service engine, messages received on one binding may or may not be forwarded on to the downstream service using the same type of binding.</p>
<p>Every binding implementation is different. Third parties and customers themselves can implement their own bindings. Bindings developed by Akana all incorporate the Message Handler Framework in a consistent fashion. The handlers created and invoked within the bindings may be different based on binding type, but the frameworks share a similar organization.</p>
<p>For IN bindings, the framework is organized in the same fashion as the Agent. Each binding only deploys binding handlers that are specific to the matching type of binding in addition to all global handlers. However, there is one organizational difference in the Network Director; in Network Director the WS-Policy handlers are divided between the IN bindings and the Virtual Service Engine.</p>
<p>The Virtual Service Engine deploys all WS-Policy handlers for policies that are attached to the abstract WSDL components of a Service:</p>
<ul>
	<li>PortType</li>
	<li>PortType Operation</li>
	<li>Service</li>
</ul>
<p>The IN bindings deploy the WS-Policy handlers that are specific to the concrete WSDL components of a service:</p>
<ul>
	<li>Binding</li>
	<li>Binding Operation</li>
	<li>Port</li>
</ul>
<p>This enables virtual services to invoke other locally-deployed virtual services while still having policies enforced.</p>
<p>For OUT bindings, the framework is organized in the same fashion as the Delegate, with the additional binding-specific group described for IN bindings.</p>
<p><a href="#top">back to top</a></p>



<h3 id="s02_framework">2: Message Handler Framework API</h3>
<p>The core of the Message Handler Framework is composed of a small number of interfaces and classes, and includes an API for creating handlers. This section provides a brief description of these interfaces and classes. A detailed description of the API can be found with the API documentation installed with the Policy Manager product. A UML diagram of the primary interfaces and classes of the framework is illustrated below.</p>
<p><img src="images/pmmhpgm_02_01.jpg" alt="UML diagram of the primary interfaces and classes of the framework" /></p>
<dl>
<dt id="messagehandler">MessageHandler</dt>
<dd>The <strong>MessageHandler</strong> interface is implemented to provide the business logic to perform on a message. The framework will invoke the handleMessage() method with a MessageContext object. The same method is invoked for IN, OUT, and FAULT messages. Depending on deployment, the same instance of a MessageHandler may or may not be called. The close() method is invoked by the framework after it has completed all handler invocations for a given message. This allows handlers to de-allocate resources and perform cleanup outside the processing time of the message itself.</dd>


<dt id="messagecontext">MessageContext</dt>
<dd>The <strong>MessageContext</strong> interface gives a MessageHandler access to all the information the framework knows about the message and exchange being processed. The message itself is provided in the context as well as properties about the message that may have been created from other handlers. The exchange is also available in the context. If processing an OUT message, the IN message will be available from the exchange. Also, properties that are associated with the exchange as a whole can also be created and retrieved.</dd>


<dt id="handlerfactory">HandlerFactory</dt>
<dd>The <strong>HandlerFactory</strong> interface is implemented to create instances of a MessageHandler implementation. It is the HandlerFactory implementations that are deployed to the framework. They in turn create the MessageHandler implementations when requested based on how they are deployed. The HandlerFactory is given a HandlerContext that provides contextual information that the factory can use to configure the instance of the MessageHandler.</dd>


<dt id="handlercontext">HandlerContext</dt>
<dd>The <strong>HandlerContext</strong> interface gives a HandlerFactory access to deployment information. For example, if the HandlerFactory is deployed in the global group, it is given very minimal information. However if the HandlerFactory is deployed in the message specific group, it is given access to the WSDL that describes the message that will need to be processed.</dd>


<dt id="chainhandler">ChainHandler</dt>
<dd>The <strong>ChainHandler</strong> is a MessageHandler implementation that aggregates a list of MessageHandlers and invokes them in order. An author of a MessageHandler may find it useful to aggregate other MessageHandlers, in which case the ChainHandler would be ideal.</dd>


<dt id="handlerchainfactory">HandlerChainFactory</dt>
<dd>The <strong>HandlerChainFactory</strong> is a HandlerFactory implementation that creates a ChainHandler. It aggregates other HandlerFactory implementations that will create the MessageHandler implementations that the ChainHandler will aggregate.</dd>
</dl>
<p><a href="#top">back to top</a></p>



<h3 id="s03_deployment">3: Message Handler Deployment</h3>
<p>The Network Director, Agent, and Delegate use the OSGi (Open Services Gateway initiative) framework for deploying features and extensions.</p>
<p>In each of these environments, the Message Handler Framework, will dynamically construct the chain of handlers by discovering message handler factories published as OSGi services by OSGi bundles.</p>
<p>
The Message Handler Framework registers with the OSGi framework for services that implement the HandlerFactory interface. It organizes the HandlerFactory services into groups, as described earlier, through the use of attributes that the HandlerFactory services can use to describe themselves. The following are the attributes the Message Handler Framework will use to group services.
</p>
<dl>
<dt id="attrib_name">name</dt>
<dd>Names the handler. Can be used by another handler if it needs to state a direct dependency on this handler (see <a href="#attrib_before"><strong>before</strong></a> and <a href="#attrib_after"><strong>after</strong></a> attributes).</dd>


<dt id="attrib_scope">scope</dt
>
<dd><strong>Note</strong>: The <strong>scope</strong> attribute will have different values for WS-Policy Handlers which are not detailed in this document. See <a href="pm_policy_handler_programming_guide.htm#attrib_scope">Policy Handler Deployment: scope attribute</a>.</dd>
<dd>Indicates which organizational group the handlers from the factory should be placed in. The values are:
<ul>
<li>
	<p><strong>all</strong>&#8212;Deploy a MessageHandler instance for all messages.</p>
This is a <strong>global</strong> handler.</li>
<li><strong>binding&#8212;</strong>Deploy a MessageHandler instance for a specific type of binding (see binding attribute for which type).</li>
<li><strong>binding.operation</strong>&#8212;Deploy a MessageHandler instance for each operation message. This is a <strong>message</strong> handler.</li>
</ul>
</dd>


<dt id="attrib_binding">binding</dt>
<dd>Indicates which binding the handlers from the factory should be deployed for (if the <a href="#attrib_scope"><strong>scope</strong></a> attribute value is <strong>binding</strong>). {<span class="apidoc_red">GWQ: policy handler guide says binding comes into play if scope is concrete. Here, it's if scope is binding. Is that correct?</span>}</dd>


<dt id="attrib_role">role</dt>
<dd>Indicates whether the handlers from the factory should be used for IN messages (Agent and IN bindings) or OUT messages (Delegate and OUT bindings). The values are:
<ul>
	<li><strong>consumer</strong>&#8212;Used for OUT messages</li>
	<li><strong>provider</strong>&#8212;Used for IN messages</li>
</ul></dd>

<dt id="attrib_before">before</dt>
<dd>Specifies an ordering requirement or dependency within the group of handlers it is deployed to. The value is either the name of another handler or the wildcard (<strong>*</strong>). If the wildcard (<strong>*</strong>) is specified, the handler must be placed before all other handlers in the group.</dd>
<dd>If multiple handlers have the same value, the framework orders them in the order the OSGi framework discovers them.</dd>


<dt id="attrib_after">after</dt>
<dd>Specifies an ordering requirement or dependency within the group of handlers it is deployed to. The value is either the name of another handler or the wildcard (<strong>*</strong>). If the wildcard (<strong>*</strong>) is specified, the handler must be placed before all other handlers in the group.</dd>
<dd>If multiple handlers have the same value, the framework orders them in the order the OSGi framework discovers them. WS-Policy handlers are not included as they are described in a separate technical note&nbsp;(see <a href="pm_policy_handler_programming_guide.htm#s03_deployment">Policy Handler Programming Guide: Policy Handler Deployment</a>).</dd>
</dl>
<p>The following is an example of how handlers can be defined as OSGi services, and the resulting invocation order:</p>
<ul>
	<li><a href="#s03_01_definition">Definition of services in an agent</a></li>
	<li><a href="#s03_01_results">Resulting deployment</a></li>
</ul>

<h5 id="s03_01_definition">Definition of services in an Agent: </h5>
<p><strong>Handler1</strong></p>
<ul>
	<li>Name: Handler1</li>
	<li>Scope: all</li>
	<li>Role: provider</li>
</ul>
<p><strong>Handler2</strong></p>
<ul>
	<li>Name: Handler2</li>
	<li>Scope: all</li>
	<li>Role: provider</li>
	<li>Before: *</li>
</ul>
<p><strong>Handler3</strong></p>
<ul>
	<li>Name: Handler3</li>
	<li>Scope: binding</li>
	<li>Binding: soap</li>
	<li>Role: provider</li>
</ul>
<p><strong>Handler4</strong></p>
<ul>
	<li>Name: Handler4</li>
	<li>Scope: binding.operation</li>
	<li>Binding: soap</li>
	<li>Role: provider</li>
	<li>After: Handler5</li>
</ul>
<p><strong>Handler5</strong></p>
<ul>
	<li>Name: Handler5</li>
	<li>Scope: binding.operation</li>
	<li>Binding: soap</li>
	<li>Role: provider</li>
</ul>
<h5 id="s03_01_results">Resulting deployment:</h5>
<p><img src="images/pmmhpgm_03_01.jpg" alt="Resulting deployment" /></p>
<p><strong>In this example:</strong></p>
<ul>
	<li>Handler1, Handler2, and Handler3 are in the same global/binding group and are deployed first.</li>
	<li>Handler2 is given the first position in the invocation order because it specified a <strong>before</strong> attribute of <strong>*</strong>.</li>
	<li>Handler1 or Handler3 could have been second since there were no ordering constraints on either one, but in this example Handler1 will be second. Handler4 and Handler5 are in the second message-specific group.</li>
	<li>Handler5 will be deployed before Handler4 though because of Handler4's <strong>after</strong> attribute which referred directly to Handler5.</li>
</ul>
<p>In the Delegate, these same example services would be defined with the same attributes except that the <strong>role</strong> attribute would have the value of <strong>consumer</strong>. The deployment order would be the same.</p>
<p><a href="#top">back to top</a></p>



<h3 id="s04_development">4: Developing a Message Handler</h3>
<p>This section describes the steps necessary to develop and deploy a Message Handler to an OSGi container. The sample artifacts described are available in the /samples directory installed with the product. {<span class="apidoc_red">GWQ are they? I see the folder and various subfolders... can't tell.</span>}</p>
<p>In the example, a MessageHandler will be developed that will simply log the contents of the IN and OUT messages of a message exchange. The MessageHandler will be a <strong>global</strong> handler and can therefore be deployed to any binding.</p>
<p>This section includes:</p>
<ul>
	<li><a href="#s04_01_schema">Policy Assertion Schema</a></li>
	<li><a href="#s04_02_source_code">Source Code</a></li>
	<li><a href="#s04_03_bundle">Bundle</a></li>
	<li><a href="#s04_4_deployment">Deployment</a></li>
</ul>
<p><a href="#top">back to top</a></p>


<h4 id="s04_01_schema">Policy Assertion Schema</h4>
<p>The assertion used in the example is defined by the XML schema shown below.</p>
<pre>01)   &lt;?xml version="1.0" encoding="UTF-8"?&gt;
02)   &lt;xs:schema targetNamespace="http://soa.com/products/policymanager/examples/policy/complex" 
elementFormDefault="qualified" attributeFormDefault="unqualified" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
03)    &lt;xs:element name="Complex"&gt;
04)      &lt;xs:complexType&gt;
05)        &lt;xs:sequence&gt;
06)          &lt;xs:element name="HeaderName" type="xs:string"&gt;&lt;/xs:element&gt;
07)          &lt;xs:element name="Optional" type="xs:boolean"&gt;&lt;/xs:element&gt;
08)        &lt;/xs:sequence&gt;
09)      &lt;/xs:complexType&gt;
10)    &lt;/xs:element&gt;
11)   &lt;/xs:schema&gt;</pre>
<p>The assertion name is <strong>Complex</strong> as defined on line 03. The assertion has two elements:</p>
<ul>
	<li><strong>HeaderName</strong> on line 06 identifies the name of the header that the operation name must be in.</li>
	<li><strong>Optional</strong> on line 07 indicates whether the presence of the header is optional or required.</li>
</ul>
<p><a href="#top">back to top</a></p>


<h4 id="s04_02_source_code">Source Code</h4>
<p>The source code of the LoggingHandler (a MessageHandler implementation) is as follows:</p>
<pre>01) package com.soa.examples.handler.logging;
02)
03) import java.io.StringWriter;
04)
05) import javax.xml.transform.Source;
06) import javax.xml.transform.Transformer;
07) import javax.xml.transform.TransformerFactory;
08) import javax.xml.transform.stream.StreamResult;
09)
10) import com.digev.fw.log.Log;
11) import com.digev.fw.log.LogLevel;
12) import com.soa.message.handler.MessageContext;
13) import com.soa.message.handler.MessageFaultException;
14) import com.soa.message.handler.MessageHandler;
15)
16) /**
17) * MessageHandler implementation that logs the content of a message.
18) */
19) public class LoggingHandler implements MessageHandler {
20)
21)    private static final Log log = Log.getLog(LoggingHandler.class);
22)
23)    public void close(MessageContext context) {
24)    // no cleanup necessary
25)    }
26)
27)    /* Logs the content of the message */
28)    public boolean handleMessage(MessageContext context)
29)    throws MessageFaultException {
30)    try {
31)    // get the message from the context
32)    Source msgContent = context.getMessage().getContent();
33)    // log the message content as an informative message
34)    log.logText(msgToString(msgContent), LogLevel.INFO);
35)    return true; // continue handler processing
36)    } catch (Exception e) {
37)    throw new MessageFaultException(e);
38)    }
39)    }
40)
41)    /* Transforms the Source content of a message to a String for
42)    * logging.
43)    */
44)    private String msgToString(Source msg) throws Exception {
45)    Transformer xformer =
46)    TransformerFactory.newInstance().newTransformer();
47)    StringWriter writer = new StringWriter();
48)    StreamResult result = new StreamResult(writer);
49)    xformer.transform(msg, result);
50)    return writer.toString();
51)    }
52)  }</pre>
<p>In this example:</p>
<ul>
	<li>On line 32, the message content is retrieved from the message context as a java.xml.transform.Source object.</li>
	<li>That content is converted to a String for logging using the msgToString() method on lines 44&#8211;51.</li>
	<li>The SOA Software Logging Framework is used to log the content to the SOA Container’s log file on line 34.</li>
	<li>If any exception is thrown during the processing a fault will be returned to the consumer and all remaining handlers in the chain will not be invoked. This is done by creating a MessageFaultException in the catch block on lines 36&#8211;38. The MessageFaultException supports defining fault context information such as a code and description. In this example, nothing is provided except the causing exception which will result in a default fault code being used.</li>
	<li>If the logic completes without exception the handler returns true on line 35. This indicates to the framework that it should continue invoking handlers in the handler chain.</li>
	<li>The close() method on lines 23&#8211;25 perform no function in this example. If the handler were to have allocated resources that should be cleaned up only after the entire handler chain had finished it’s processing, it would have been done here.</li>
</ul>
<p>The source code of the LoggingHandlerFactory (a HandlerFactory implementation) is as follows:</p>
<pre>01) package com.soa.examples.handler.logging;
02)
03) import com.digev.fw.exception.GException;
04) import com.soa.message.handler.HandlerContext;
05) import com.soa.message.handler.HandlerFactory;
06) import com.soa.message.handler.HandlerRole;
07) import com.soa.message.handler.MessageHandler;
08)
09) /**
10) * Creates a LoggingHandler.
11) */
12) public class LoggingHandlerFactory implements HandlerFactory {
13)
14)    public MessageHandler create(HandlerContext context,
15)    HandlerRole    role)
16)    throws GException {
17)    return new LoggingHandler();
18)    }
19) }</pre>
<p>Since there is no configuration needed, the only step for the factory is to construct a new LoggingHandler with the default constructor.</p>


<h4 id="s04_03_bundle">Bundle</h4>
<p>The LoggingHandler and LoggingHandlerFactory classes need to be packaged in an OSGi Bundle so that they can be deployed to the SOA Container. The LoggingHandlerFactory needs to be published as an OSGi service so that the Message Handler Framework can load it. In this example, Spring DM (Distributed Modules for OSGi) is used to construct and publish the LoggingHandlerFactory OSGi service. Spring DM is not a requirement but is used here for simplicity.</p>
<pre>01) &lt;?xml version="1.0" encoding="UTF-8"?&gt;
02)
03) &lt;!--
04)	Spring definition for the logging handler OSGi integration.
05) --&gt;
06) &lt;beans xmlns="http://www.springframework.org/schema/beans"
07)	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
08)	xmlns:osgi="http://www.springframework.org/schema/osgi"
09)	xsi:schemaLocation="http://www.springframework.org/schema/beans
10) http://www.springframework.org/schema/beans/spring-beans.xsd
11) http://www.springframework.org/schema/osgi
12) http://www.springframework.org/schema/osgi/spring-osgi.xsd"&gt;
13)
14)	&lt;osgi:service interface="com.soa.message.handler.HandlerFactory"&gt;
15)	&lt;osgi:service-properties&gt;
16)	&lt;entry key="name" value="examples.logging.factory"/&gt;
17)	&lt;entry key="scope" value="all"/&gt;
18)	&lt;entry key="role" value="provider"/&gt;
19)	&lt;/osgi:service-properties&gt;
20)	&lt;bean class="com.soa.examples.handler.logging.LoggingHandlerFactory"/&gt;
21)	&lt;/osgi:service&gt;
22)
23) &lt;/beans&gt;</pre>
<p>In this example:</p>
<ul>
	<li>The OSGi service is defined on lines 14&#8211;21. The service is published as an implementation of the HandlerFactory interface using the <strong>interface</strong> attribute.</li>
	<li>The service has three attributes defined on lines 15&#8211;19. The scope is <strong>all</strong> which indicates to the framework to deploy this handler as a <strong>global</strong> handler to all bindings of the container. The role is <strong>provider</strong> which indicates to the framework that the handler will process incoming messages to the container. This would not work in the Delegate as the Delegate acts only as a <strong>consumer</strong>.</li>
	<li>The construction of the LoggingHandlerFactory is specified on line 20. Since only the default constructor is needed to create the factory, there is nothing more than the identification of the class to instantiate required here.</li>
</ul>
<p>An OSGi Bundle must have a Manifest to define its dependencies. The following is the Manifest for this example.</p>
<pre>01) Manifest-Version: 1.0
02) Bundle-ManifestVersion: 2
03) Bundle-Name: Logging MessageHandler Example
04) Bundle-SymbolicName: com.soa.examples.handler.logging
05) Bundle-Version: 1.0.0
06) Bundle-Vendor: SOA Software
07) Import-Package: com.digev.fw.exception;version="6.0.0",
08) com.digev.fw.log;version="6.0.0",
09) com.soa.message;version="6.0.0",
10) com.soa.message.handler;version="6.0.0",
11) javax.xml.transform,
12) javax.xml.transform.stream</pre>
<p>In this example:</p>
<ul>
	<li>Lines 01&#8211;06 hold general information about the Bundle.</li>
	<li>Lines 07&#8211;12 hold the package dependencies for the Bundle. All packages not defined within the bundle that are imported by code in the Bundle must be listed here. The only exceptions to this are packages that are in the global classpath of the SOA Container such as the Java JRE and Spring packages. A full list of the globally available packages is listed below.</li>
</ul>
<p><a href="#top">back to top</a></p>


<h4 id="s04_4_deployment">Deployment</h4>
<p>An Akana OSGi container will have a folder on the file system with a name that matches the key of the container seen in the Policy Manager Management Console. Under that folder is a sub-folder named  <strong>deploy</strong>. </p>
<p>Bundles that provide extensions to the container, such as additional message handlers, are placed in the  <strong>deploy</strong>  folder.</p>
<p>When the container is restarted, the services published within any Bundles in the  <strong>deploy</strong>  folder are imported into the container, and all published handler factories are deployed by the Message Handler Framework.</p>
<p><a href="#top">back to top</a></p>



<div class = "divider1"></div>



<h3 id="related_topics">Related Topics</h3>
<div class="relatedlinks">
<ul>
	<li><a href="../policies/about_policies_view.htm">About Policies</a></li>
	<li><a href="../policies/policy_management.htm">Managing Policies</a></li>
	<li><a href="../policies/policies_operational_about.htm">About Operational Policies</a></li>
</ul>
<ul>
	<li><a href="http://docs.akana.com/cm/learnmore/basics_glossary.htm">Glossary of Terms for the Developer Portal</a></li>
</ul>
</div>