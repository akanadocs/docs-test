---
layout: page
title: Enable HTTPS Access to the SOA Software Administration Console for Policy Manager 6.x/7.x
description: Configure container system.properties to enable HTTPS access to the SOA Software Administration Console.
product: ag
category: learn
sub-nav-class: Operations
weight:	6
subcategory: Technical Note
type: page
nav-title: Enable HTTPS Access to the SOA Software Administration Console

---
<h2 name="top">Enable HTTPS Access to the SOA Software Administration Console for Policy Manager 6.x/7.x</h2>

<p>Configure container system.properties to enable HTTPS access to the SOA Software Administration Console.</p>

<p>NOTE: This article applies to version 6.x and greater.</p>


<div class = "divider1"></div>



<ol class="table_of_contents">

<br> <li><a href="#introduction">Introduction</a></li>
<li><a href="#configuration">Configuration</a></li>
<li><a href="#troubleshooting">Troubleshooting</a></li>







</ol>
  <div class = "divider1"></div>
  <a name="introduction">
<h3>Introduction</h3></a>

  <p>If you would like to facilitate your own role-based access to the SOA Software Administration Console, you can do so by enabling an HTTPS port.

  </p>
  <p><em>Note: This article can be used for Policy Manager 6.x and 7.x releases. The \sm60 and \sm70 release directories are presented as &lt;release_directory&gt; in the examples. </em></p>
  <p>This process involves:</p>

  <ul class="usingOrderedList">
    <li><strong>Adding an HTTPS listener to Policy Manager, Network Director, or Agent container instance folders (&lt;release_directory&gt;\instances):</strong> This can be done by adding an HTTPS port to the system.properties file (for UI browsing only), or by adding an HTTPS listener to the Policy Manager Management Console and to the system.properties file (for hosting services and UI browsing). </li>
    <li><strong>Adding a new configuration category to the SOA Software Administration Console to control whether you want \admin access for both HTTP and HTTPS, or HTTPS only:</strong> This can be done by manually adding a .cfg file to the \deploy folder of the &lt;release_directory&gt;\instances\&lt;container name&gt;\deploy folder. </li>
  </ul>
  <h5>Notes on Configuring an HTTPS Listener</h5>
  <p>Several important points to note on configuring an HTTPS listener:  </p>
  <ul class="usingOrderedList">
    <li>If you add an HTTPS listener to the system.properties file (as described in the following scenarios) <em>before</em> you install the Policy Manager features, the HTTPS listener will be registered automatically in the database when you install the Policy Manager features and the listener will be present in the <em>Containers</em> section of the <em>Policy Manager Management Console</em>. </li>
    <li>If you add an HTTPS listener to the system.properties file <em>after</em> you install the Policy Manager features, the HTTPS listener will not registered automatically in the database and you will need to add an HTTPS listener using the <strong>Add Container Listener</strong> function in the Policy Manager &quot;Containers&quot; section in order to update the container metadata. Note that the HTTPS listener configuration should have &quot;Bind to all interfaces&quot; checked, and you can optionally choose to clone services hosted on other listeners. You must also generate a certificate for the listener after it is defined using the <strong>Manage PKI Keys </strong>option. See screen examples below. </li>
    <li>If you add a UI-Browsing listener to the system.properties file, Policy Manager will get the listener information from the system.properties file. </li>
  </ul>
<p><img src="images/add_https_listener.jpg" width="503" height="372"></p>
<p><img src="images/manage_pki_keys.jpg" width="509" height="138"></p>
<p><a href="#top">Back to top</a></p>
<h3><a name="configuration">Configuration</a></h3>
  <p>Let's take a quick walkthrough of the HTTPS configuration process to get your started. </p>
  <h5>Step 1: Add HTTPS Listener (Options)</h5>
  <p>To enable an HTTPS listener  you must update the system.properties file in the \&lt;release_directory&gt;\instances  folder. Load the system.properties file into an editor and configure it based on the following SOA Software Administration Console access scenarios. We use port 9446 in these examples.</p>
  <p><img src="images/system_properties_folder.jpg" width="566" height="299"></p>
  <p> </p>
  <h5>Option 1: HTTPS Access / UI Browsing Only</h5>
<p>This option restricts access to the SOA Software Administration Console to the specified HTTPS listener. </p>
<p><strong><em>Note:</em></strong><em> You must also delete the HTTP listener defined in the Policy Manager Management Console.</em></p>

<p>
  <strong>com.soa.http.bind.all=true (Remove for  HTTPS access ONLY)</strong><br>
  <strong>com.soa.http.bind.all.secure=true (Add to enable HTTPS access)</strong><br>
  <strong>org.osgi.service.http.port=9000 (Remove for HTTPS access only)</strong><br>
  <strong>org.osgi.service.http.port.secure=9446 (Add to enable HTTPS access)</strong><br>

  <h5>Option 2: HTTPS and HTTP Access</h5>
  <p>This option restricts access to the<em> SOA Software Administration Console</em> to the specified HTTPS listener and the default HTTP listener defined in the <em>Policy Manager Management Console</em>. You can have a UI browsing only HTTPS listener (i.e., listener is not configured in Policy Manager), or a listener that can host services (i.e., listener must be configured in Policy Manager ). <br>
  <em>Note: If you would like your HTTPS listener to host services you must manually add it to the Policy Manager Management Console. You must also configure keys for this listener using the Manage PKI Keys function. </em></p>
  <p><strong>com.soa.http.bind.all.secure=true (Add to enable HTTPS access)</strong><br>
  <strong>org.osgi.service.http.port.secure=9446 (Add to enable HTTPS access)</strong>
  <br></p>
  <h5>Option 3: Multiple HTTPS Listeners</h5>
  <p>If you would like to have multiple HTTPS listeners, you can add one UI browsing only HTTPS listener, and one HTTPS listener to the Policy Manager Management Console and specify both listeners in the system.properties file. </p>
  <p><em>Note that you must add a certificate to the listener in Policy Manager using the <strong>Manage PKI Keys</strong> function.</em></p>
  <p><strong>com.soa.http.bind.all.secure=true (Add to enable HTTPS access)</strong><br>
  <strong>org.osgi.service.http.port.secure=9446 (Add to enable HTTPS access - UI Browsing Only - No listener configured in Policy Manager)</strong><strong><br>
  <strong>org.osgi.service.http.port.secure=9448 (Add to enable HTTPS access - For Hosting Services - Listener configured in Policy Manager)</strong></strong></p>
<h5>Step 2: Configure HTTPS Access to SOA Software Administration Console</h5>
<p>If you want access to the SOA Software Administration Console via HTTPS, you must add a new configuration category. You can do this manually by adding a .cfg file to the \&lt;release_directory&gt;\instances\&lt;container name&gt;\deploy folder. </p>
  <h5>Add Configuration Category File</h5>
<ul>
  <li>Create a new file in the \&lt;release_directory&gt; directory and call it:<br>

    <strong><br>com.soa.admin.console.cfg</strong><strong><br>
    </strong></li><br>
  <li>Add the following line to the file:<br>
    <br>
    <strong>admin.console.access.restricted=true</strong> (if you want /admin access to be HTTPS only). <br>
    <strong>admin.console.access.restricted=false</strong> (if you want /admin access to be HTTP and HTTPS).</li>
</ul>
<ul class="usingOrderedList">
  <br>

   <li>Copy the file to the  \deploy folder as illustrated below:<br>
     <br>
     <img src="images/admin_console_config.jpg" width="603" height="169"><br><br>
   </li>

   <li>Restart the container.
</li>
</ul>
<h5>Step 3: Test HTTPS Access to SOA Software Administration Console</h5>
  <p>When the container is up and running launch the SOA Software Administration console (https://localhost:&lt;port&gt;/admin/). It should only  accessible on the port defined in Step 1, and comply with the rules for the configuration category you selected as follows:  </p>

    <h5>com.soa.admin.console.cfg enabled (True)</h5>
    <ul>
      <li>You can access the SOA Software Administration Console through HTTPS port only. </li>
      <li>If you try to access SOA Software Administration Console using the default HTTP port you will receive a 404 error.</li>
    </ul>
<h5>com.soa.admin.console.cfg enabled (False)</h5>
  <ul>
      <li>You can access the SOA Software Administration Console through the HTTP port  and through the HTTPS port.</li>
  </ul>

  </li>
  <img src="images/admin_config_category.jpg">
  </ul>
  <br>
<br>
<p><a href="#top">back to top</a>
</p>
  <h3><a name="troubleshooting">Troubleshooting</a></h3>
<p>If everything appears to be configured correctly and you are receiving 404 errors when you try to launch Policy Manager,  Network Director, or Agent instances, review the following steps to attempt to troubleshoot the problem.</p>
<h5>Step 1: Inspect Log</h5>
  <p>Inspect the container logs in &lt;release_directory&gt;\instances\&lt;instance name&gt;\logs and search for the following errors which occur near the startup:  </p>
  <p>Caused by: java.net.BindException: Address already in use<br>
    at java.net.PlainSocketImpl.socketBind(Native Method)<br>
    at java.net.PlainSocketImpl.bind(Unknown Source)<br>
    at java.net.ServerSocket.bind(Unknown Source)<br>
  at java.net.ServerSocket.&lt;init&gt;(Unknown Source) </p>
  <p>These errors mean that the container is trying to start its listener, but something is already listening.  </p>
  <h5>Step 2: Resolve</h5><br>


  <ol class="usingOrderedList">
  <li>Stop the container and check to make sure that nothing is running on the port that the container is configured to run on. <strong>If nothing is running</strong>, it means that the container is trying to start <strong>TWO</strong> listeners on the same port. </li>
  <li>Check system.properties in the container directory. It will have the listeners specified that the container uses on initial startup. For example:<br>
    <br>
com.soa.http.host=hostname <br>
org.osgi.service.http.port=9900<br>
org.osgi.service.http.port.secure=9446 <br>
com.soa.http.bind.all=true<br>
com.soa.http.bind.all.secure=true <br>
    </li>
  <li>Compare the host, port and bind settings above (for HTTP and HTTPS) with the actual Policy Manager listeners defined in the Policy Manager Management Console. (*.secure just refers to the HTTPS options – the same rules apply to HTTP and HTTPS). If the ports specified in system.properties are different to the ports specified in Policy Manager, then the problem must exist elsewhere. If the port numbers match, then either: <br>
    <br>
    com.soa.http.bind.all in system.properties AND &quot;Bind to All Interfaces&quot; option for the HTTPS Container Listener in the Policy Manager Management Console must both be set, <br>
    <br>
    OR<br>
    <br>
The com.soa.http.host in system.properties and &quot;hostname&quot; in the Policy Manager Management Console  must match.<br>
<br>
<br>
The reason is that when Policy Manager starts its listener is tries to determine  if one already exists on the same port and host. If it finds one already running then it  uses it. If the host names are different (or they are not running on all interfaces) then it might not be able to find the listener already running and try to start a new one on the same port. <br>
  </li>
  </ol>


  <p><a href="#top">Back to top</a></p>
<div class = "divider1"></div>
