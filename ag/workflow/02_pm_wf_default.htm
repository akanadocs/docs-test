---
layout: page
title: Default Workflow 
description: Description of Policy Manager service, contract, and policy default workflows. 
product: ag
category: learn
sub-nav-class: Workflow
weight: 03
type: page
nav-title: Default Workflows
---
<h2 id="top">Default Workflows</h2>
<p>Description of Policy Manager service, contract, and policy default workflows.</p>

<p><a href="01_pm_wf_management.htm" class="button secondary">Workflow Management</a>  
<a href="00_pm_wf_library.htm" class="button secondary">Workflow Library</a>  
</p>


<div class = "divider1"></div>
<h3 style="color: gray;">Table of Contents</h3>


<ol class="table_of_contents">
	<li><a href="#introduction">Introduction</a></li>
	<li><a href="#using_workflow">Using Workflow Definitions</a></li>
	<li><a href="#default_service">Default Services Workflow</a></li>
	<li><a href="#default_contract">Default Contract Workflow</a></li>
	<li><a href="#default_policy">Default Policy Workflow</a></li>
</ol>
<div class = "divider1"></div>



<h3 id="introduction">Introduction</h3>
<p>The Policy Manager default installation installs three default workflow definitions for services, contracts, and policies.</p>
<ul>
	<li>Default Workflow Definitions are hard coded into the Policy Manager back-end to facilitate Workflow <strong>Reset</strong> and are also copied to the \config\workflow_definition_templates folder of the Policy Manager release directory.</li>
	<li>Custom Workflow Definitions can also be stored in this directory.</li>
	<li>The default workflow definitions provide standard Workflow processes for service and contract management and serve as a tutorial for understanding the construction of a <strong>Workflow Definition</strong> and the elements of the Workflow Library.</li>
</ul>



<h3 id="using_workflow">Using Workflow Definitions</h3>
<p>This section provides a brief overview of the elements of a workflow definition. Refer to the OSWorkflow documentation for more information on OSWorkflow concepts.</p>

<p>A workflow definition is broken into several sections as follows:</p>

<h4>Initial Actions</h4>
<p>The <strong>Initial Actions</strong> section of a workflow definition XML file includes &lt;initial-actions&gt; &lt;/initial-actions&gt; constructs. These constructs include &lt;<strong>action id</strong>&gt; entries that include action <strong>names</strong> that trigger the initialization of the Workflow. Workflow definitions for services and contracts have a unique set of initial action names.</p>
<h4>Service Initial Actions</h4>
<p>
Initials actions in a service-specific Workflow Definition include @create, @discover, and @reset.</p>
<p>If you attempt to upload a Workflow Definition in the <strong>Services Workflow Administration</strong> section that does not include this set of initial actions you will see the following error message:</p>
<pre>Not a valid &quot;service&quot; workflow definition. Cannot find initial actions @create, @discover, and @reset.</pre>
<p>Additional information about these initial actions:</p>
<ul>
	<li>@create is initialized when a new service is created in Policy Manager using the <strong>Create Physical Service Wizard</strong>.</li>
	<li>@discover is initialized when a service is discovered on an application server. In this scenario your Policy Manager deployment is configured with an application-specific Container.</li>
	<li>@reset deletes existing active Workflow Instances and new Workflow Instances are created based on the Workflow Definition being uploaded.</li>
</ul>
<p><strong>Note</strong>: Each time you perform a reset, you must reload the Workflow Definition.</p>


<h4>Contract Initial Actions</h4>
<p>Initials actions in a contract-specific Workflow Definition include @CreateOffer, @CreateRequest, and @reset. If you attempt to upload a Workflow Definition in the <strong>Contract Workflow Administration</strong> section that does not include this set of initial actions you will receive the following error message: &nbsp;<strong>Not a valid <strong>contract</strong> workflow definition. Cannot find initial actions</strong> <strong>@CreateOffer,</strong> <strong>@CreateRequest, and</strong> <strong>@reset.</strong></p>
<ul>
	<li>@CreateOffer is initialized when a Provider Organization creates a contract.</li>
	<li>@CreateRequest is initialized when a Consumer Organization creates a contract.</li>
	<li>@reset deletes existing active Workflow Instances and new Workflow Instances are created based on the Workflow Definition being uploaded.</li>
</ul>
<p><strong>Note</strong>: Each time you perform a reset, you must reload the Workflow Definition.</p>
<p><img src="images/contract_init_action.jpg" alt="Initial actions section of default_contract_workflow.xml" /></p>



<h4>Policy Initial Actions</h4>
<p>Initials actions in a policy-specific workflow definition include @create and @reset. If you attempt to upload a Workflow Definition in the <strong>Policy Workflow Administration</strong> section that does not include this set of initial actions you will see the following error message:</p>
<pre>Not a valid &quot;policy&quot; workflow definition. Cannot find initial actions @create, @ImportPolicy, @ActivatePolicy, and @reset.</pre>
<ul>
	<li>@create is initialized when you create a policy.</li>
	<li>@ImportPolicy is initialized when a you import a policy.</li>
	<li>@ActivatePolicy is initialized when you activate the policy workflow. Note that out-of-box system policies are activated as part of the default Policy Manager installation.</li>
	<li>@reset deletes existing active workflow instances and new workflow instances are created based on the workflow definition being uploaded.</li>
</ul>


<h4>Steps&#8212;Actions&#8212;Conditions</h4>
<p>After the processes of the initial action are complete, the Workflow then begins to execute the steps, actions, and conditions defined within the &lt;step&gt; &lt;/step&gt; construct. In this section of the Workflow, each <strong>step</strong> represents a Workflow process. Each step is represented as a &lt;<strong>step id</strong>&gt; and is assigned a step number (for example, 100, 200) and name (for example, Draft).</p>
<p>Each step also includes an <strong>owner</strong> that represents the individual who is granted access to perform the action(s) defined in a step. An owner is specified as follows: owner=${caller} where <strong>caller</strong> represents the user account id of the individual who is granted access to perform the actions in the step.</p>
<p>Within each step there are <strong>Actions</strong> that include <strong>conditions</strong>, <strong>restrictions</strong>, and <strong>results</strong>. All the workflow action states mirror different tasks and how they function in Policy Manager.</p>
<p><a href="#top">back to top</a></p>



<h3 id="default_service">Default Service Workflow</h3>
<p>Click <a href="default_service_workflow.xml">here</a> to view the Default Service Workflow.</p>



<h3 id="default_contract">Default Contract Workflow</h3>
<p>Click <a href="default_contract_workflow.xml">here</a> to view the Default Contract Workflow.</p>



<h3 id="default_policy">Default Policy Workflow</h3>
<p>Click <a href="default_policy_workflow.xml">here</a> to view the Default Policy Workflow.</p>
<p><a href="#top">back to top</a></p>