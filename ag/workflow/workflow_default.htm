---
layout: page
title: Default Workflow 
description: Description of Policy Manager service, contract, and policy default workflows. 
product: ag
category: learn
sub-nav-class: Workflow
weight:	4
type: page
nav-title: Default Workflows

---

<a name="top"></a>

<h2 name="top">Default Workflows </h2>

<p>Description of Policy Manager service, contract, and policy default workflows.</p>


<a href="workflow_management.htm" class="button secondary">Workflow Management</a>

<a href="workflow_library.htm" class="button secondary">Workflow Library</a>

<a href="http://docs.soa.com/ag/assets/PM_workflow_developers_reference_61_7x.pdf" class="button secondary"> Workflow Developers Guide</a>
<p></p>




<div class = "divider1"></div>
<h3 style="color: gray;">Table of Contents</h3>


<ol class="table_of_contents">



<li><a href="#introduction">Introduction</a></li>


<li><a href="#using_workflow">Using Workflow Definitions</a></li>


<li><a href="#default_service">Default Services Workflow</a></li>

<li><a href="#default_contract">Default Contract Workflow</a></li>

<li><a href="#default_policy">Default Policy Workflow</a></li>




</ol>
  <div class = "divider1"></div>
  
    <a name="introduction">
<h2>Introduction</h2>
</a>
    <p>The Policy Manager default installation installs three default workflow definitions for services, contracts, and policies. </p>
    <ul class="usingOrderedList">
      <li>Default Workflow Definitions are hard coded into the Policy Manager back-end to facilitate Workflow &quot;Reset&quot; and are also copied to the \config\workflow_definition_templates folder of the Policy Manager release directory. </li>
      <li>Custom Workflow Definitions can also be stored in this directory.</li>
      <li>The default workflow definitions&quot; provide standard Workflow processes for service and contract management and serve as a tutorial for understanding the construction of a &quot;Workflow Definition&quot; and the elements of the Workflow Library.</li>
    </ul>
<a name="using_workflow">
<h2>Using Workflow Definitions</h2></a>
<p>This section provides a brief overview of the elements of a workflow definition. Refer to the OSWorkflow documentation for more information on OSWorkflow concepts.</p>

<p>A workflow definiton  is broken into several sections as follows:</p>
<h4>Initial Actions</h4>
<p>The &quot;Initial Actions&quot; section of a workflow definition XML file includes &lt;initial-actions&gt; &lt;/initial-actions&gt; contructs. These constructs include &lt;action id&gt; entries that include action &quot;names&quot; that trigger the initialization of the Workflow. Workflow definitions for services and contracts have a unique set of initial action names.</p>
<h4>Service Initial Actions</h4>
<p>
Initials actions in a service-specific Workflow Definition include @create, @discover, and @reset. If you attempt to upload a Workflow Definition in the <em>Services Workflow Administration</em> section that does not include this set of initial actions you will receive the following error message: &nbsp;<em>Not a valid &quot;service&quot; workflow definition. Cannot find initial actions</em> <em>@create,</em> <em>@discover, and</em> <em>@reset.</em> </p>
<ul class="usingOrderedList">
  <li>@create is initialized when a new service is created in Policy Manager using the &quot;Create Physical Service Wizard.</li>
  <li>@discover is initialized when a service is discovered on a application server. In this scenario your Policy Manager deployment is configured with an application-specific Container.</li>
  <li>@reset deletes existing active Workflow Instances and new Workflow Instances are created based on the Workflow Definition being uploaded. </li>
</ul>

<em>Note: Each time you perform a reset, you must reload the Workflow Definition.</em></p>
</em>

<h4>Contract Initial Actions</h4>

<p>
Initials actions in a contract-specific Workflow Definition include @CreateOffer, @CreateRequest, and @reset. If you attempt to upload a Workflow Definition in the <em>Contract Workflow Administration</em> section that does not include this set of initial actions you will receive the following error message: &nbsp;<em>Not a valid &quot;contract&quot; workflow definition. Cannot find initial actions</em> <em>@CreateOffer,</em> <em>@CreateRequest, and</em> <em>@reset.</em></p>
<ul class="usingOrderedList">
  <li>@CreateOffer is initialized when a Provider Organization creates a contract.</li>
  <li>@CreateRequest is initialized when a Consumer Organization creates a contract.</li>
  <li>@reset deletes existing active Workflow Instances and new Workflow Instances are created based on the Workflow Definition being uploaded. </li>
</ul>
<p>
    <em>Note: Each time you perform a reset, you must reload the Workflow Definition.</em><br />
  &nbsp; <br />
  <img src="images/contract_init_action.jpg" width="557" height="224" /></p>
<p>Figure. Initial actions section of default_contract_workflow.xml</p>

<h4>Policy Initial Actions</h4>
<p>Initials actions in a policy-specific workflow definition include @create and @reset. If you attempt to upload a Workflow Definition in the <em>Policy Workflow Administration</em> section that does not include this set of initial actions you will receive the following error message: &nbsp;<em>Not a valid &quot;policy&quot; workflow definition. Cannot find initial actions</em> <em>@create, @ImportPolicy, @ActivatePolicy, </em><em>and</em> <em>@reset.</em></p>
<ul class="usingOrderedList">
  <li>@create is initialized when you create a policy.  </li>
  <li>@ImportPolicy is initialized when a you import a policy. </li>
  <li>@ActivatePolicy is initialized when you activate the policy workflow. Note that out-of-box system policies are activated as part of the default Policy Manager installation. </li>
  <li>@reset deletes existing active workflow instances and new workflow instances are created based on the workflow definition being uploaded. </li>
</ul>

  <h4>Steps - Actions - Conditions</h4>

<p>After the processes of the initial action are complete, the Workflow then begins to execute the steps, actions, and conditions defined within the &lt;step&gt; &lt;/step&gt; construct. In this section of the Workflow, each &quot;step&quot; represents a Workflow process. Each step is represented as a &lt;step id&gt; and is assigned a step number (e.g., 100, 200) and name (e.g., Draft).</p><p>
  Each step also includes an &quot;owner&quot; that represents the individual who is granted access to perform the action(s) defined in a step. An owner is specified as follows: owner=${caller} where &quot;caller&quot; represents the user account id of the individual who is granted access to perform the actions in the step.</p><p>
  Within each step there are &quot;Actions&quot; that include <em>conditions</em>, <em>restrictions</em>, and <em>results</em>. All of the action states mirror different tasks and how they function in Policy Manager.
</p>

<p><a href="#top">back to top</a>
</p>

<a name="default_service">
<h2>Default Service Workflow</h2></a>
<p>Click <a href="http://docs.soa.com/ag/workflow/default_service_workflow.xml">here</a> to view the Default Service Workflow.</p>
</a>

<a name="default_contract">
<h2>Default Contract Workflow</h2></a>
<p>Click <a href="http://docs.soa.com/ag/workflow/default_contract_workflow.xml">here</a> to view the Default Contract Workflow.</p>
</a>

<a name="default_policy">
<h2>Default Policy Workflow</h2></a>
<p>Click <a href="http://docs.soa.com/ag/workflow/default_policy_workflow.xml">here</a> to view the Default Policy Workflow.</p>
</a>


<p><a href="#top">back to top</a>
</p>



<div class = "divider1"></div>
