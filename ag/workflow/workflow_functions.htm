---
layout: page
title: Workflow Functions
description: Description of built-in Workflow Functions that can be used to perform specific actions relative to a service, contract, or policy.
product: ag
category: learn
sub-nav-class: Workflow
weight:	7
type: page
nav-title: Workflow Functions

---

<a name="top"></a>

<h2 name="top">Workflow Functions</h2>

<p>Description of built-in Workflow Functions that can be  used to perform specific actions relative to a service, contract, or policy.</p>


<a href="workflow_management.htm" class="button secondary">Workflow Management</a>

<a href="workflow_library.htm" class="button secondary">Workflow Library</a>


<a href="http://docs.soa.com/ag/assets/PM_workflow_developers_reference_61_7x.pdf" class="button secondary"> Workflow Developers Guide</a>
<p></p>




<div class = "divider1"></div>
<h3 style="color: gray;">Table of Contents</h3>


<ol class="table_of_contents">



<li><a href="#introduction">Introduction</a></li>


<li><a href="#general_functions">General Functions</a></li>

<li><a href="#service_functions">Service Specific Functions</a></li>


<li><a href="#contract_functions">Contract Specific Functions</a></li>


</ol>
  <div class = "divider1"></div>
  
    <a name="introduction">
<h2>Introduction</h2>
</a>
    <p>The Policy Manager <em>Workflow Library</em> includes a series of built-in functions that are used to perform specific actions relative to a service, contract, or policy. Some functions require &quot;arguments&quot; to control the execution of a function. In addition to the built-in functions, you can also invoke functions bundled with OSWorkflow or custom defined functions. </p>
    <p><em>Note: Policy Workflow does not include functions.</em></p>
<a name="general_functions">
<h2>General Functions</h2></a>
<p>These workflow functions can be used in any type of Policy Manager workflow.</p>


<table width="700
" cellspacing="0px" class="doctable">
  <thead>
  <th width="188">Variable</th>
    <th width="471">Content</th>
    <td width="33"></thead>
    <tr class="t2row">
      <td height="26">Print</td>
      <td><p>Prints out the name/value pairs contained in the &lt;arg&gt; elements to stdout along with a timestamp.</p>
</td>
    </tr>
  <tr class="t1row">
    <td height="26">Log</td
    >
    <td></li>      Sends a message to the Policy Manager log.<br />
          <br />
          <strong>Arguments</strong><br />
          <em>message</em> -  The message to be logged along with the object the workflow is managing.<br />
          <br />
    <em>severity  (optional) </em>- The logging severity for the message: fatal, error, warning, info (default), debug, or trace.</td>
  </tr>
  <tr class="t2row">
    <td height="30">runScript</td>
    <td>Run a script to perform a special function. Please refer to a later section that gives details of running scripts from workflow.</td>

  <tr class="t1row">
    <td height="31">getOrganizationemailContact
    <td>



<p>Produces a comma delimited list of organization contact email addresses.<br />
  <br />
  <strong>Arguments</strong><br />
  <em>organization (optional) </em>- The UDDI key of the organization whose email contacts are to be retrieved. Defaults to the parent organization of the service or contract.<br />
  <br />
  <em>contactType</em> -  A comma-delimited list of organization contact &ldquo;use types&rdquo; that are to be selected.<br />
  <br />
  <em>emailType (optional)</em> - A comma-delimited list of organization contact email &ldquo;use types&rdquo; that are to be selected.</p>
<em>variable  (optional)</em> - The name of the workflow variable that is to hold the resulting list of email addresses. This name must not contain a period. The default is to use the first value in the contactType argument.</td>
  </tr>
  <tr class="t2row">
    <td height="30">email</td>
    <td><p>Generates and sends an email message.<br />
        <br />
        <strong>Arguments</strong><br />
        <em>smtpHost (optional) </em>- The host name of the SMTP server. Defaults to the global mail server configured in Policy Manager. <br />
        <br />
        <em>to</em> -  A comma-delimited list of recipients.<br />
        <br />
        <em>from</em> -  The value to be used as the email sender.<br />
        <em><br />
cc  (optional)</em> - A comma-delimited list of copy recipients.<br />
<br />
<em>subject</em> - The subject line of the message.<br />
<br />
<em>message</em> -  The body of the message.<br />
<br />
<em>priority (optional)</em> - The priority of the message: high, medium, low. Default is medium.</p>
    <em>parseVariables</em> - Should ${…} variables be resolved in the following arguments: to, cc, subject, message.    </td>
  
  </tr>

</table>

<p><a href="#top">back to top</a></p>
<a name="service_functions">
<h2>Service Specific Functions</h2></a>



<p>The following workflow functions are used in Service Workflow definitions.</p>
<p>&nbsp;</p>
<table width="706" cellspacing="0px" class="doctable">
  <thead>
  </thead>
  <tr>
    <th width="188">Variable</th>
    <th width="471">Content</th>
    <td width="33"></thead></td>
  </tr>
  <tr class="t2row">
    <td height="26">addCategory</td>
    <td><p>Adds a new &ldquo;keyed reference&rdquo; entry in the service&rsquo;s UDDI category bag.<br />
        <br />
        <strong>Arguments</strong><br />
        <em>tmodel</em> - The UDDI tModel key of the new keyed reference.<br />
        <br />
        <em>keyName  (optional) </em>- The name of the new keyed reference.<br />
        <br />
    <em>keyValue</em> -  The value to be placed in the new keyed reference.</p></td>
  </tr>
  <tr class="t1row">
    <td height="26">deleteCategory</td
    >
    <td class="t1Row"><p>Removes a particular keyed reference from the service&rsquo;s UDDI category bag.<br />
      <br />
      <strong>Arguments</strong><br />
      <em>tmodel</em> - The UDDI tModel key of the keyed reference to be removed.</p>
      <em>keyValue</em> -  The key value of the keyed reference to be removed.</td>
  </tr>
  <tr class="t2row">
    <td height="30">setUniqueCategory</td>
    <td><p>Adds a new &ldquo;keyed reference&rdquo; entry in the service&rsquo;s UDDI category bag after deleting any entries with the same tModel key.<br />
      <br />
      <strong>Arguments</strong><br />
      <em>tmodel</em> - The UDDI tModel key of the new keyed reference.<br />
      <em><br />
        keyName (optional)</em> - The name of the new keyed reference.</p>
    <em>keyValue</em> - The value to be placed in the new keyed reference.</td>
  </tr>
  <tr class="t1row">
    <td height="31">setLifecycleStage</td>
    <td><p>Sets or updates the lifecycle stage value in the service&rsquo;s category bag. This value appears in the <em>Service Overview</em> section of the <em>Service Details</em> page.<br />
        <br />
        <strong>Arguments</strong><em><br />
stage</em> -  The value of the new service lifecycle stage.
</p>
    </p></td>
  </tr>
  <tr class="t2row">
    <td height="30">publish</td>
    <td><p>Sets the &ldquo;publish&rdquo; flag for the service.</p>
    <em><strong>Note:</strong> SOA does not recommend ever using this function because the only thing it does is disable the workflow-based service access control. Also, once this flag is set, there is no way to turn it back off to restore workflow access control.</em></td>
  </tr>
  <tr class="t1row">
    <td height="30">getCategoryValue</td>
    <td><p>Placed the key value of a keyed reference selected from the service&rsquo;s category bag into a workflow variable.<br />
        <br />
        <strong>Arguments</strong><br />
        <strong>tmodel</strong> - The UDDI tModel key of the keyed reference.<br />
        <br />
        <strong>keyName  (optional)</strong> -The name of the keyed reference.</p>
    <strong>var</strong> -  The name of the workflow variable to receive the key value of the selected keyed reference. Do not include any periods in this name.</td>
  </tr>
  <tr class="t2row">
    <td height="30">getCategoryValueFromProxiedService</td>
    <td><p>Placed the key value of a keyed reference selected from the proxy parent service&rsquo;s category bag into a workflow variable.<br />
        <br />
        <strong>Arguments</strong><br />
tmodel - The UDDI tModel key of the keyed reference.<br />
<br />
<em>keyName  (optional) </em>- The name of the keyed reference.<br />
<br />
<em>var</em> -  The name of the workflow variable to receive the key value of the selected keyed reference. Do not include any periods in this name. <br />
<br />
<em>handle.errors  [lax | strict] </em>- Generate warnings or errors when used on a non-proxy service.</p></td>
  </tr>
  <tr class="t1row">
    <td height="30">copyCategoriesToProxyServices<br />
copyCategoriesFromProxiedService</td>
    <td><p>Copy selected keyed reference from the service&rsquo;s category bag to the category bag of its proxy virtual service.<br />
        <br />
        <strong>Arguments</strong><br />
        <em>include</em> - A list of tModel keys of the categories to be included. The default is to include all non-reserved categories.<br />
include.groups A list of tModel keys of the category groups to be included<br />
<br />
<em>exclude</em> -  A list of tModel keys of the categories to be excluded.<br />
<br />
<em>exclude.groups</em> -  A list of tModel keys of the category groups to be excluded<br />
replace A list of tModel keys of the categories to be completely replaced in the proxy service<br />
<br />
<em>replace.groups</em> - A list of tModel keys of the category groups to be replaced in the proxy service.<br />
<em><br />
recursive  (copyToProxyServices only) </em>- Should the selected categories be copied to the entire chain of services (true) or to just the direct proxies (false=default)
These arguments are whitespace-delimited lists of UDDI keys. The entries can contain a wildcard (*) at either the beginning , the end, or both.</p></td>
  </tr>
  <tr class="t2row">
    <td height="30">exportService</td>
    <td><p>Exports the service as a ZIP archive in a designated location on the Policy Manager server.<br />
        <br />
        <strong>Argument</strong><br />
One of the following:<br />
<br />
<em>export.file</em> -The fully qualified name of the export ZIP.<br />
<br />
<em>export.folder </em>-  The directory where the export ZIP will be placed. The default is [SOA-HOME]/sm70/export. <br />
The file will be named:<br />
<br />
service-[service-uddi-key]-export.zip<br />
<br />
<em>include.artifacts </em>- Specifies what is to be included. <br />
<br />
<em>include.operational.policies</em> - In the service export (the default). <br />
<br />
<em>include.qos.policies</em> - Is to include everything <br />
<br />
<em>include.compliance.policies</em>    <br />
  <br />
<em>include.pki.keys  </em>         </p>
If the export file already exists, it will be kept but renamed to include a date/time stamp.</td>
  </tr>
  <tr class="t1row">
    <td height="30">exportProxyServiceChain</td>
    <td><p>Exports a Proxy Virtual Service along with its entire chain of proxied parent services.</p>
This function has the same set of arguments as the exportService function. The default name of the export ZIP archive will be:<br />
<br />
servicechain-[service-uddi-key]-export.zip</td>
  </tr>
  <tr class="t2row">
    <td height="30">exportProxyServiceChain</td>
    <td><p>Exports a Proxy Virtual Service along with its entire chain of proxied parent services.</p>
This function has the same set of arguments as the<em> exportService</em> function. The default name of the export ZIP archive will be:<br />
<br />
servicechain<em>-[service-uddi-key]</em>-export.zip</td>
  </tr>
  <tr class="t1row">
    <td height="30">performActionOnProxyServices<br />
performActionOnProxiedService</td>
    <td><p>Perform a workflow action on the service with the same key but in a remote Policy Manager instance.<br />
        <br />
        <strong>Arguments </strong><br />
        <br />
One of the following:<br />
<br />
<em> action.id - </em>The <strong>id</strong> of the workflow <strong>&lt;action&gt;</strong> to be performed.<br />
<br />
<em>action.name - </em> The <strong>name</strong> of the workflow <strong>&lt;action&gt;</strong> to be performed.<br />
<br />
<em>action.message</em> -  An optional comment that will be logged with the workflow history of the action event.<br />
<br />
<em>handle.errors - </em>[<u>lax</u> | strict] Generate warnings or errors when the specified action is not part of the target service&rsquo;s current workflow &lt;step&gt;.<br />
<br />
One of the following:<br />
<br />
<em>workflow.service.key - </em>Specify the instance of the <em>  <br />
<br />
workflow.service.qname - </em>Workflow Service for the remote<br />
<br />
<em>workflow.service.binding.identifier - </em> Policy Manager<br />
<br />
<em>workflow.service.username - </em>The user on the remote Policy Manager to use to perform the action. This is either a qualified user name (<em>domain\user</em>) or a user in the <em>Local Domain</em>.<br />
<br />
<em>workflow.service.password - </em>The password for that user.<br />
<br />
<em>remote.transport.method - </em>The strategy to be used to transmit the perform-action request to the remote.<br />
<br />
Policy Manager:<br />
<br />
<em>sync</em> - <em>(default)</em> Function does not complete until the action has been completed on the remote Policy Manager.<br />
<br />
<em>async - </em> Function completes immediately and the perform-action request is placed on a persistent queue to be processed by a background thread. Additional arguments can be passed and will be available as workflow variables for use in the target action. The names of these additional arguments should <u>not</u> contain any periods (.)</p></td>
  </tr>
 
</table>

<p><a href="#top">back to top</a></p>

<a name="contract_functions">
<h2>Contract Specific Functions</h2></a>



<p>The following workflow functions are used in Contract Workflow definitions.</p>
<p>&nbsp;</p>
<table width="700
" cellspacing="0px" class="doctable">
  <thead>
  </thead>
  <tr>
    <th width="188">Variable</th>
    <th width="471">Content</th>
    <td width="33"></thead></td>
  </tr>
  <tr class="t2row">
    <td height="26">version</td>
    <td><p>Moves the contract from &ldquo;Draft&rdquo; to &ldquo;Active and Activated&rdquo; state.</p></td>
  </tr>
  <tr class="t1row">
    <td height="26">deactivate</td
    >
    <td>Moves the &ldquo;Active and Activated&rdquo; contract to the &ldquo;Active but Deactivated&rdquo; state.</td>
  </tr>
  <tr class="t2row">
    <td height="30">activate</td>
    <td>Moves the &ldquo;Active but Deactivated&rdquo; contract to the &ldquo;Active and Activated&rdquo; state</td>
  </tr>
  <tr class="t1row">
    <td height="31">exportContract</td>
    <td><p>Exports the contract as a ZIP archive in a designated location on the Policy Manager server.<br />
        <br />
        <strong>Argument</strong><br />
One of the following:<br />
<br />
<em>export.file</em> -  The fully qualified name of the export ZIP.<br />
<br />
<em>export.folder</em> -  The directory where the export ZIP will be placed. The default is [SOA-HOME]/sm60/export. The file will be named:
      contract-[contract-key]-export.zip<br />
      <br />
      <em>include.artifacts</em> -  Export attached metadata (default=true).<br />
      <br />
      <em>include.qos.policies</em> - Export any attached QoS policies (default=true).</p>
If the export file already exists, it will be kept but renamed to include a date/time stamp.</td>
  </tr>
  <tr class="t2row">
    <td height="30">performAction</td>
    <td><p>Perform a workflow action on the contract with the same key but in a remote Policy Manager instance.<br />
        <br />
        <strong>Arguments</strong><br />
One of the following:<br />
<br />
<em>action.id </em>-  The id of the workflow &lt;action&gt; to be performed.<br />
<br />
<em>action.name</em> - The name of the workflow &lt;action&gt; to be performed.<br />
<br />
<em>action.message</em> - An optional comment that will be logged with the workflow history of the action event.<br />
<br />
<em>handle.errors</em> -  [lax | strict] Generate warnings or errors when the specified action is not part of the target contract&rsquo;s current workflow &lt;step&gt;.<br />
<br />
One of the following:<br />
<em>workflow.service.key</em> - Specify the instance of the <br />
<em>workflow.service.qname</em> -  Workflow Service for the remote<br />
<em>workflow.service.binding.identifier</em> -  Policy Manager</p>
      <p><em>workflow.service.username</em> -  The user on the remote Policy Manager to use to perform the action. This is either a qualified user name (domain\user) or a user in the Local Domain.<br />
        <br />
        <em>workflow.service.password</em> -  The password for that user.<br />
        <br />
        <em>remote.transport.method</em> -  The strategy to be used to transmit the perform-action request to the remote Policy Manager:<br />
        <br />
        <strong>sync</strong> -  (default) Function does not complete until the action has been completed on the remote Policy Manager.<br />
        <br />
        <strong>async</strong> - Function completes immediately and the perform action request is placed on a persistent queue to be processed by a background thread.</p>
Additional arguments can be passed and will be available as workflow variables for use in the target action. The names of these additional arguments should not contain any periods (.)</td>
  </tr>
</table>
<p><a href="#top">back to top</a></p>
<p>&nbsp;</p>



<div class = "divider1"></div>
