---
layout: page
title: Workflow Reserved Actions
description: Description of reserved states and actions that can be defined in a workflow definition.
product: ag
category: ref
sub-nav-class: Workflow
weight: 07
type: page
nav-title: Workflow Reserved Actions
---
<h1 id="top">Workflow Reserved Actions</h1>
<p>Description of reserved states and actions that can be defined in a workflow definition.</p>
<hr class="divide_hr" />



<h2 style="color: gray;">Table of Contents</h2>
<ol class="table_of_contents">
	<li><a href="#introduction">Introduction</a></li>
	<li><a href="#generic_actions">Generic Reserved Actions</a></li>
	<li><a href="#service_actions">Service-Specific Reserved Actions</a></li>
	<li><a href="#contract_actions">Contract-Specific Reserved Actions</a></li>
</ol>
<hr class="divide_hr" />



<h2 id="introduction">Introduction</h2>
<p>The Policy Manager Workflow Library includes a Reserved Actions that are arbitrary states and actions that can be defined in a Workflow Definition. The following reserved actions have special meaning to be interpreted by Policy Manager's Workflow Engine. All Reserved Actions have @ as prefix. A reference to a <strong>Workbench Object</strong> means the <strong>service</strong> or <strong>contract</strong> under the control of a Workflow Instance.</p>
<p><strong>Note</strong>: Policy Workflow does not include policy-specific actions.</p>



<h2 id="generic_actions">Generic Reserved Actions</h2>
<table class="doctable">
	<thead>
	<tr>
		<th>Action Name</th>
		<th>Description</th>
	</tr>
		</thead>
	<tbody>
	<tr>
		<td><p>@read</p></td>
		<td>This reserved action is used to specify additional set of users who can read the workbench objects.
			<ul>
				<li>By default, any Administrator who can perform any non-reserved Workflow action automatically has permission to read the underlying object.</li>
				<li>In some cases, an Administrator may want to allow other users who cannot directly invoke Workflow actions to have the read-only access to the underlying objects. This can be achieved using the @read action.</li>
				<li>The <strong>@read</strong> action will never be invoked by Workflow Engine; only the restriction rules defined in it will be evaluated to decide whether the caller has the read permission to the object.</li>
			</ul>
			<p>The following rules are used to decide if a specific user can read a Workflow object at any moment:</p>
			<ul>
				<li>If a user has permission to invoke any non-reserved actions under current Workflow state, the user can read the content of the Workflow object.</li>
				<li>Otherwise, if the current state of the Workflow instance has a <strong>read</strong> action and the user has permission to invoke it, the user can read the content of the Workflow object.</li>
			</ul>
			<p>In summary, the reserved <strong>@read</strong> action provides a mechanism for Administrators to grant a set of users the ability to track/monitor the progress of the Workflow object without allowing those users the ability to influence the Workflow process.</p></td>
	</tr>
	<tr>
		<td><p>@modify</p></td>
		<td><p>This reserved action is used to specify who can modify the Workflow document. Similar to @read, @modify will never be directly invoked by the Workflow Engine&#8212;only the restriction rules defined in it will be evaluated.</p>
			<p>The following rules are used to decide if a specific user can modify a Workflow object:</p>
			<ul>
				<li>If a user does not have permission to invoke any non-reserved action of the current Workflow state, he cannot modify the content of the Workflow object.</li>
				<li>Otherwise, if the current Workflow state has an <strong>@modify</strong> action and the user can invoke it, he can modify the content of the Workflow object.</li>
			</ul>
			<p>Customers can use the <strong>@modify</strong> action to restrict the rights of modifying the Workbench objects to only a subset of Workflow participants. For example:</p>
			<ul>
				<li>If a Workflow state does not have an <strong>@modify</strong> action, then this object is read-only in this state.</li>
				<li>If a Workflow state has an <strong>@modify</strong> action with no restriction rules, then whoever has the permission to invoke any non-reserved Workflow action can modify the content of the Workflow object.</li>
				<li>If a Workflow state has an <strong>@modify</strong> action with an authorizeByRole restriction against <strong>developer</strong>, then only developer can modify the content of workbench objects.</li>
			</ul></td>
	</tr>
	<tr>
		<td>@reset</td>
		<td><p>This reserved initial action is invoked when a new version of a Workflow definition is uploaded and user has selected to reset all the active Workflow instances associated with that Workflow definition. Users can use this action to reset the object to the proper initialized state.</p>
<p>Note that only users with System Administrator role can modify a Workflow definition, thus the caller of the @reset action may not be normal business users. In general, a Workflow definition should not put restriction on the caller of the @reset action and should not set the caller of the @reset action as the owner of the Workflow.</p></td>
	</tr>
</tbody>
</table>
<p><a href="#top">back to top</a></p>



<h2 id="service_actions">Service-Specific Reserved Actions</h2>
<table class="doctable">
	<thead>
	<tr>
		<th>Action Name</th>
		<th>Description</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td><p>@create</p></td>
		<td>This reserved initial action is invoked when a new service is created. Multiple @create actions can be defined.</td>
	</tr>
	<tr>
		<td><p>@discover</p></td>
		<td><p>This reserved initial action is invoked when a new service is discovered. Since service is always discovered automatically by Policy Manager, the user who invokes the @discover action is always Policy Manager instead of normal business users.</p>
			<p>In general, a Workflow definition should not put a restriction on the caller of the @discover action and should not set the caller of @discover action as the owner of the Workflow.</p></td>
	</tr>
	<tr>
		<td>@updateInterface</td>
		<td>The @updateInterface action identifies the ability to change the schemas, portTypes, or bindings of a service.</td>
	</tr>
 	<tr>
		<td>@updateBinding</td>
		<td>The @updateBinding action identifies the ability to change the bindings of a service.</td>
	</tr>
</tbody>
</table>
<p><a href="#top">back to top</a></p>



<h2 id="contract_actions">Contract-Specific Reserved Actions</h2>
<table class="doctable">
	<thead>
	<tr>
		<th>Action Name</th>
		<th>Description</th>
		</tr>
</thead>
	<tbody>
	<tr>
		<td>@CreateOffer</td>
		<td>This reserved initial action is invoked when a new offer is created. Multiple @CreateOffer actions can be defined.</td>
	</tr>
	<tr>
		<td>@CreateRequest</td>
		<td>This reserved initial action is invoked when a new request is created. Multiple @CreateRequest actions can be defined.</td>
	</tr>
	</tbody>
</table>
<p><a href="#top">back to top</a></p>