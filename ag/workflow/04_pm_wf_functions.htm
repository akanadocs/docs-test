---
layout: page
title: Workflow Functions
description: Description of built-in Workflow Functions that can be used to perform specific actions relative to a service, contract, or policy.
product: ag
category: ref
sub-nav-class: Workflow
weight: 05
type: page
nav-title: Workflow Functions
---
<h2 id="top">Workflow Functions</h2>
<p>Description of built-in Workflow Functions that can be used to perform specific actions relative to a service, contract, or policy.</p>

<p><a href="01_pm_wf_management.htm" class="button secondary">Workflow Management</a>  
<a href="00_pm_wf_library.htm" class="button secondary">Workflow Library</a>
</p>


<div class = "divider1"></div>
<h3 style="color: gray;">Table of Contents</h3>


<ol class="table_of_contents">
	<li><a href="#introduction">Introduction</a></li>
	<li><a href="#general_functions">General Functions</a></li>
	<li><a href="#service_functions">Service-Specific Functions</a></li>
	<li><a href="#contract_functions">Contract-Specific Functions</a></li>
</ol>
<div class = "divider1"></div>



<h3 id="introduction">Introduction</h3>
<p>The Policy Manager <strong>Workflow Library</strong> includes a series of built-in functions that are used to perform specific actions relative to a service, contract, or policy. Some functions require arguments to control the execution of a function. In addition to the built-in functions, you can also invoke functions bundled with OSWorkflow or custom defined functions.</p>
<p><strong>Note</strong>: Policy Workflow does not include functions.</p>



<h3 id="general_functions">General Functions</h3>
<p>These workflow functions can be used in any type of Policy Manager workflow.</p>
<table class="doctable">
	<thead>
	<tr>
	<th>Function</th>
		<th>Content</th>
		</tr>
		</thead>
		<tbody>
		<tr>
			<td>Print</td>
			<td><p>Prints out the name/value pairs contained in the &lt;arg&gt; elements to stdout along with a timestamp.</p>
</td>
		</tr>
	<tr>
		<td>Log</td>
		<td><p>Sends a message to the Policy Manager log.</p>
<p><strong>Arguments</strong></p>
<p><strong>message</strong>&#8212;The message to be logged along with the object the workflow is managing.</p>
<p><strong>severity (optional)</strong>&#8212;The logging severity for the message: fatal, error, warning, info (default), debug, or trace.</p></td>
	</tr>
	<tr>
		<td id="pm_wf_f_runscript">runScript</td>
		<td><p>Runs a script to check for a special condition. For an example, refer to <a href="07_pm_wf_scripts.htm">Using Scripts in Workflows</a>.</p>
			<p><strong>Note</strong>: from version 2018.0.0 onwards, the workflow <strong>runScript</strong> function has been enhanced to have the following additional features available in process/policy scripting:</p>
			<ul>
				<li>Support of invoking services via the <strong>messengerService</strong>.</li>
				<li>Abillity to define the following variables with function equivalent to process/policy scripting: <strong>systemLog</strong>, <strong>alerter</strong>, <strong>msgFactory</strong>, msgrService.</li>
				<li>Ability to import script objects.</li>
			</ul>
			<p>These changes apply to all types of workflow in both Policy Manager and Community Manager.</p>
			<p><strong>Arguments (2018.0.0 and later)</strong></p>
			<p><strong>script-id</strong>&#8212;An optional, unique identifier assigned to the script. This identifier is used as the key to the compiled script when stored in memory for reuse. This is useful for scripts that occur within workflow &lt;step&gt; definitions as opposed to those that appear in &lt;common-functions&gt;.</p>
			<p>Example:</p>
			<pre>&lt;arg name=&quot;id&quot;&gt;script-id&lt;/arg&gt;</pre>
			<p><strong>import</strong>&#8212;An optional list of script objects that are to be imported into this script definition. These script objects must use the same scripting language as the workflow script.</p>
			<p>Example:</p>
			<pre>&lt;arg name=&quot;import&quot;&gt;
	script-object-key ...
&lt;/arg&gt;</pre>
			<p><strong>useLegacy</strong>&#8212;An optional flag that enables the older style script variables to be set in addition to the new ones. This allows compatibility with existing scripts.</p>
			<p>Example: </p>
			<pre>&lt;arg name=&quot;useLegacy&quot;&gt; true | false &lt;/arg&gt;</pre>
			<p>For additional information on the enhanced <strong>runScript</strong> functionality, see <a href="07_pm_wf_scripts.htm">Using Scripts in Workflows.</a></p></td>
	</tr>
	<tr>
		<td>getOrganizationemailContact</td>
		<td><p>Produces a comma-delimited list of organization contact email addresses.</p>
	<p><strong>Arguments</strong></p>
	<p><strong>organization (optional) </strong>&#8212;The UDDI key of the organization whose email contacts are to be retrieved. Defaults to the parent organization of the service or contract.</p>
	<p><strong>contactType</strong>&#8212;A comma-delimited list of organization contact <strong>use types</strong> that are to be selected.</p>
	<p><strong>emailType (optional)</strong>&#8212;A comma-delimited list of organization contact email use types that are to be selected.</p>
<strong>variable (optional)</strong>&#8212;The name of the workflow variable that is to hold the resulting list of email addresses. This name must not contain a period. The default is to use the first value in the contactType argument.</td>
	</tr>
	<tr>
		<td>email</td>
		<td><p>Generates and sends an email message.</p>
				<p><strong>Arguments</strong></p>
				<p><strong>smtpHost (optional) </strong>&#8212;The host name of the SMTP server. Defaults to the global mail server configured in Policy Manager.</p>
				<p><strong>to</strong>&#8212;A comma-delimited list of recipients.</p>
				<p><strong>from</strong>&#8212;The value to be used as the email sender.</p>
				<p><strong>cc (optional)</strong>&#8212;A comma-delimited list of copy recipients.</p>
				<p><strong>subject</strong>&#8212;The subject line of the message.</p>
				<p><strong>message</strong>&#8212;The body of the message.</p>
				<p><strong>priority (optional)</strong>&#8212;The priority of the message: high, medium, low. Default is medium.</p>
				<p><strong>parseVariables</strong>&#8212;Should ${â€¦} variables be resolved in the following arguments: to, cc, subject, message.</p></td>
	</tr>
	</tbody>
</table>
<p><a href="#top">back to top</a></p>



<h3 id="service_functions">Service-Specific Functions</h3>
<p>The following workflow functions are used in Service Workflow definitions.</p>
<table class="doctable">
	<thead>
	<tr>
		<th>Function</th>
		<th>Content</th>
		</tr>
</thead>
<tbody>
	<tr>
		<td>addCategory</td>
		<td><p>Adds a new <strong>keyed reference</strong> entry in the service's UDDI category bag.</p>
				<p><strong>Arguments</strong></p>
				<p><strong>tmodel</strong>&#8212;The UDDI tModel key of the new keyed reference.</p>
				<p><strong>keyName (optional) </strong>&#8212;The name of the new keyed reference.</p>
				<p><strong>keyValue</strong>&#8212;The value to be placed in the new keyed reference.</p></td>
	</tr>
	<tr>
		<td>deleteCategory</td>
		<td><p>Removes the specified keyed reference from the service's UDDI category bag.</p>
				<p><strong>Arguments</strong></p>
				<p><strong>tmodel</strong>&#8212;The UDDI tModel key of the keyed reference to be removed.</p>
				<p><strong>keyValue</strong>&#8212;The key value of the keyed reference to be removed.</p></td>
	</tr>
	<tr>
		<td>setUniqueCategory</td>
		<td><p>Adds a new <strong>keyed reference</strong> entry in the service's UDDI category bag after deleting any entries with the same tModel key.</p>
				<p><strong>Arguments</strong></p>
				<p><strong>tmodel</strong>&#8212;The UDDI tModel key of the new keyed reference.</p>
				<p><strong>keyName (optional)</strong>&#8212;The name of the new keyed reference.</p>
		<strong>keyValue</strong>&#8212;The value to be placed in the new keyed reference.</td>
	</tr>
	<tr>
		<td>setLifecycleStage</td>
		<td><p>Sets or updates the lifecycle stage value in the service's category bag. This value appears in the <strong>Service Overview</strong> section of the <strong>Service Details</strong> page.</p>
				<p><strong>Arguments</strong></p>
				<p><strong>stage</strong>&#8212;The value of the new service lifecycle stage.</p>
	</td>
	</tr>
	<tr>
		<td>publish</td>
		<td><p>Sets the <strong>publish</strong> flag for the service.</p>
			<strong>Note</strong>: Akana does not recommend using this function because the only thing it does is disable the workflow-based service access control. Also, once this flag is set, there is no way to turn it back off to restore workflow access control.</td>
	</tr>
	<tr>
		<td>getCategoryValue</td>
		<td><p>Placed the key value of a keyed reference selected from the service's category bag into a workflow variable.</p>
				<p><strong>Arguments</strong></p>
				<p><strong>tmodel</strong>&#8212;The UDDI tModel key of the keyed reference.</p>
				<p><strong>keyName (optional)</strong> -The name of the keyed reference.</p>
		<strong>var</strong>&#8212;The name of the workflow variable to receive the key value of the selected keyed reference. Do not include any periods in this name.</td>
	</tr>
	<tr>
		<td>getCategoryValueFromProxiedService</td>
		<td><p>Placed the key value of a keyed reference selected from the proxy parent service's category bag into a workflow variable.</p>
				<p><strong>Arguments</strong></p>
				<p><strong>tmodel</strong>&#8212;The UDDI tModel key of the keyed reference.</p>
				<p><strong>keyName (optional) </strong>&#8212;The name of the keyed reference.</p>
				<p><strong>var</strong>&#8212;The name of the workflow variable to receive the key value of the selected keyed reference.</p>
				<p><strong>Note</strong>: Do <strong>not</strong> include any periods in this name. </p>
				<p><strong>handle.errors [lax | strict] </strong>&#8212;Generate warnings or errors when used on a non-proxy service.</p></td>
	</tr>
	<tr>
		<td><p>copyCategoriesToProxyServices</p>
<p>copyCategoriesFromProxiedService</p></td>
		<td><p>Copy selected keyed reference from the service's category bag to the category bag of its proxy virtual service.</p>
				<p><strong>Arguments</strong></p>
				<p><strong>include</strong>&#8212;A list of tModel keys of the categories to be included. The default is to include all non-reserved categories.</p>
				<p>include.groups A list of tModel keys of the category groups to be included</p>
				<p><strong>exclude</strong>&#8212;A list of tModel keys of the categories to be excluded.</p>
				<p><strong>exclude.groups</strong>&#8212;A list of tModel keys of the category groups to be excluded</p>
				<p>replace A list of tModel keys of the categories to be completely replaced in the proxy service</p>
				<p><strong>replace.groups</strong>&#8212;A list of tModel keys of the category groups to be replaced in the proxy service.</p>
				<p><strong>recursive (copyToProxyServices only) </strong>&#8212;Should the selected categories be copied to the entire chain of services (<strong>true</strong>) or to just the direct proxies (<strong>false</strong>=default)
These arguments are whitespace-delimited lists of UDDI keys. The entries can contain a wildcard (*) at the beginning, the end, or both.</p></td>
	</tr>
	<tr>
		<td>exportService</td>
		<td><p>Exports the service as a ZIP archive in a designated location on the Policy Manager server.</p>
				<p><strong>Argument</strong></p>
<p>One of the following:</p>
				<p><strong>export.file</strong>&#8212;The fully qualified name of the export ZIP.</p>
				<p><strong>export.folder</strong>&#8212;The directory where the export ZIP will be placed. The default is [Akana-HOME]/sm70/export. </p>
<p>The file will be named <strong>service-[service-uddi-key]-export.zip</strong></p>
				<p><strong>include.artifacts </strong>&#8212;Specifies what is to be included. </p>
				<p><strong>include.operational.policies</strong>&#8212;In the service export (the default). </p>
				<p><strong>include.qos.policies</strong>&#8212;Is to include everything </p>
				<p><strong>include.compliance.policies</strong></p>
				<p><strong>include.pki.keys</strong></p>
If the export file already exists, it will be kept but renamed to include a date/time stamp.</td>
	</tr>
	<tr>
		<td>exportProxyServiceChain</td>
		<td><p>Exports a Proxy Virtual Service along with its entire chain of proxied parent services.</p>
				<p>This function has the same set of arguments as the exportService function. The default name of the export ZIP archive will be:</p>
				<p>servicechain-[service-uddi-key]-export.zip</p></td>
	</tr>
	<tr>
		<td>exportProxyServiceChain</td>
		<td><p>Exports a Proxy Virtual Service along with its entire chain of proxied parent services.</p>
				<p>This function has the same set of arguments as the<strong> exportService</strong> function. The default name of the export ZIP archive will be:</p>
				<p>servicechain<strong>-[service-uddi-key]</strong>-export.zip</p></td>
	</tr>
	<tr>
		<td><p>performActionOnProxyServices</p>
	<p>performActionOnProxiedService</p></td>
		<td><p>Perform a workflow action on the related proxy or proxied parent service.</p>
			<p><strong>Arguments</strong></p>
			<p>One of the following:</p>
			<p><strong> action.id&#8212;</strong>The <strong>id</strong> of the workflow <strong>&lt;action&gt;</strong> to be performed.</p>
			<p><strong>action.name&#8212;</strong>The <strong>name</strong> of the workflow <strong>&lt;action&gt;</strong> to be performed.</p>
			<p><strong>action.message</strong>&#8212;An optional comment that will be logged with the workflow history of the action event.</p>
			<p><strong>handle.errors&#8212;</strong>[<u>lax</u> | strict] Generate warnings or errors when the specified action is not part of the target service's current workflow &lt;step&gt;.</p>
			<p><strong>recursive</strong>&#8212;(performActionOnProxyServices only) Should the action be performed on the entire chain of services (<strong>true</strong>) or to just the direct proxies (<strong>false</strong>=default).</p>
			<p>Additional arguments can be passed and will be available as workflow variables for use in the target action. The names of these additional arguments <strong>must not</strong> contain any periods (.)</p></td>
	</tr>
	<tr>
		<td><p>performAction</p></td>
		<td><p>Perform a workflow action on the service with the same key but in a remote Policy Manager instance.</p>
			<p><strong>Arguments</strong></p>
			<p>One of the following:</p>
			<p><strong> action.id&#8212;</strong>The <strong>id</strong> of the workflow <strong>&lt;action&gt;</strong> to be performed.</p>
			<p><strong>action.name&#8212;</strong>The <strong>name</strong> of the workflow <strong>&lt;action&gt;</strong> to be performed.</p>
			<p><strong>action.message</strong>&#8212;An optional comment that will be logged with the workflow history of the action event.</p>
			<p><strong>handle.errors&#8212;</strong>[<u>lax</u> | strict] Generate warnings or errors when the specified action is not part of the target service's current workflow &lt;step&gt;.</p>
			<p>One of the following:</p>
			<p><strong>workflow.service.key&#8212;</strong>Specify the instance of the</p>
			<p><strong>workflow.service.qname&#8212;</strong>Workflow Service for the remote</p>
			<p><strong>workflow.service.binding.identifier&#8212;</strong>Policy Manager</p>
			<p><strong>workflow.service.username&#8212;</strong>The user on the remote Policy Manager to use to perform the action. This is either a qualified user name (<strong>domain\user</strong>) or a user in the <strong>Local Domain</strong>.</p>
			<p><strong>workflow.service.password&#8212;</strong>The password for that user.</p>
			<p><strong>remote.transport.method&#8212;</strong>The strategy to be used to transmit the perform-action request to the remote Policy Manager:</p>
			<ul>
				<li><strong>sync</strong>&#8212;<strong>(default)</strong> Function does not complete until the action has been completed on the remote Policy Manager.</li>
				<li><strong>async&#8212;</strong>Function completes immediately and the perform-action request is placed on a persistent queue to be processed by a background thread.</li>
				</ul>
			<p>Additional arguments can be passed and will be available as workflow variables for use in the target action. The names of these additional arguments <strong>must not</strong> contain any periods (.)</p></td>
	</tr>
</tbody>
</table>

<p><a href="#top">back to top</a></p>



<h3 id="contract_functions">Contract-Specific Functions</h3>
<p>The following workflow functions are used in Contract Workflow definitions.</p>
<table class="doctable">
	<thead>
	<tr>
		<th>Function</th>
		<th>Content</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>version</td>
		<td><p>Moves the contract from the <strong>Draft</strong> state to the <strong>Active and Activated</strong> state.</p></td>
	</tr>
	<tr>
		<td>deactivate</td>
		<td>Moves the <strong>Active and Activated</strong> contract to the <strong>Active but Deactivated</strong> state.</td>
	</tr>
	<tr>
		<td>activate</td>
		<td>Moves the <strong>Active but Deactivated</strong> contract to the <strong>Active and Activated</strong> state</td>
	</tr>
	<tr>
		<td>exportContract</td>
		<td><p>Exports the contract as a ZIP archive in a designated location on the Policy Manager server.</p>
				<p><strong>Argument</strong></p>
				<p>One of the following:</p>
				<p><strong>export.file</strong>&#8212;The fully qualified name of the export ZIP.</p>
				<p><strong>export.folder</strong>&#8212;The directory where the export ZIP will be placed. The default is [Akana-HOME]/sm60/export.</p>
				<p>The file will be named: <strong>contract&#8212;[contract-key]-export.zip</strong></p>
		<p><strong>include.artifacts</strong>&#8212;Export attached metadata (default=true).</p>
		<p><strong>include.qos.policies</strong>&#8212;Export any attached QoS policies (default=true).</p>
		<p>If the export file already exists, it will be kept but renamed to include a date/time stamp.</p></td>
	</tr>
	<tr>
		<td>performAction</td>
		<td><p>Perform a workflow action on the contract with the same key but in a remote Policy Manager instance.</p>
				<p><strong>Arguments</strong></p>
<p>One of the following:</p>
				<p><strong>action.id </strong>&#8212;The id of the workflow &lt;action&gt; to be performed.</p>
				<p><strong>action.name</strong>&#8212;The name of the workflow &lt;action&gt; to be performed.</p>
				<p><strong>action.message</strong>&#8212;An optional comment that will be logged with the workflow history of the action event.</p>
				<p><strong>handle.errors</strong>&#8212;[lax | strict] Generate warnings or errors when the specified action is not part of the target contract's current workflow &lt;step&gt;.</p>
				<p>One of the following:</p>
				<p><strong>workflow.service.key</strong>&#8212;Specify the instance of the </p>
				<p><strong>workflow.service.qname</strong>&#8212;Workflow Service for the remote</p>
				<p><strong>workflow.service.binding.identifier</strong>&#8212;Policy Manager</p>
			<p><strong>workflow.service.username</strong>&#8212;The user on the remote Policy Manager to use to perform the action. This is either a qualified user name (domain\user) or a user in the Local Domain.</p>
				<p><strong>workflow.service.password</strong>&#8212;The password for that user.</p>
				<p><strong>remote.transport.method</strong>&#8212;The strategy to be used to transmit the perform-action request to the remote Policy Manager:</p>
				<ul>
					<li><strong>sync</strong>&#8212;(default) Function does not complete until the action has been completed on the remote Policy Manager.</li>
					<li><strong>async</strong>&#8212;Function completes immediately and the perform action request is placed on a persistent queue to be processed by a background thread.</li>
				</ul> Additional arguments can be passed and will be available as workflow variables for use in the target action. The names of these additional arguments <strong>must not</strong> contain any periods (.)</td>
	</tr>
</tbody>
</table>
<p><a href="#top">back to top</a></p>