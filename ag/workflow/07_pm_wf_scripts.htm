---
layout: page
title: Using Scripts in Workflows
description: Information about using scripting with Policy Manager workflows.
product: ag
category: ref
sub-nav-class: Workflow
weight: 08
type: page
nav-title: Using Scripts in Workflows
---
<h1 id="top">Using Scripts in Workflows</h1>
<p>Information about using scripting with Policy Manager workflows.</p>
<hr class="divide_hr" />



<h2 style="color: gray;">Table of Contents</h2>
<ol class="table_of_contents">
	<li><a href="#introduction">Introduction</a></li>
	<li><a href="#variables">Built-In Script Variables</a></li>
	<li><a href="#variables_legacy">Built-In Script Variables: Legacy</a></li>
	<li><a href="#workflow_context">Workflow Context Methods</a></li>
	<li><a href="#workflow_script_mgmt">Workflow Script Management</a></li>
	<li><a href="#workflow_script_execution">Workflow Script Execution</a></li>
</ol>
<hr class="divide_hr" />



<h2 id="introduction">Introduction</h2>
<p>Scripting can be used to provide customer-specific processing for workflow &lt;condition&gt; and &lt;function&gt; elements of service and contract workflow. Scripts can be embedded in the workflow XML definition or they can be referenced from the workflow to a file system location. Workflow scripting can currently be in BeanShell, Jython, and JavaScript.</p>
<p>The following Workflow function can be used to invoke a script to perform any special processing that is required. This same structure is used to invoke a script in a &lt;condition&gt; workflow element. In this case, the script must return a Boolean value.</p>
<p><strong>Note</strong>: the example below shows functionality prior to the 2018.0.0 release. Additional arguments supported in 2018.0.0 and later are shown in the next section.</p>
<p><img src="images/scripts.jpg" alt="invoking a script" /></p>



<h4>Supported Arguments</h4>
<dl>
<dt>&lt;arg name=&quot;lang&quot;&gt; beanshell | javascript | jython &lt;/arg&gt;</dt>
<dd>Specify one of these values to select the language of the script. The following languages are supported:
<ul>
	<li>BeanShell (<a href="http://www.beanshell.org/" title="http://www.beanshell.org/" target="_blank">http://www.beanshell.org/</a>)</li>
	<li>JavaScript (<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino" title="https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino" target="_blank">https://developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino</a>)</li>
	<li>Jython (<a href="https://www.jython.org/" title="https://www.jython.org/" target="_blank">https://www.jython.org/</a>)</li>
</ul></dd>
	
	
	<dt>&lt;arg name=&quot;file&quot;&gt;script-file-path&lt;/arg&gt;</dt>
	<dt>&lt;arg name=&quot;script&quot;&gt; body of the script &lt;/arg&gt;</dt>
	
	
	<dd>The script to be executed can be either read from a file or included directly within the workflow definition XML file. Use one of these two arguments to specify the script body or its file system location accessible to the Policy Manager containers.</dd>
	<dt>&lt;arg name=&quot;var-name&quot;&gt;var-value&lt;/arg&gt;</dt>
	<dd>You can specify any number of additional arguments that will be passed into the script as native script variables.</dd>
</dl>


<h4>Supported Arguments: 2018.0.0 and later</h4>
<p>Additional arguments are supported in version 2018.0.0. With the additional arguments, below is how the runScript workflow function would work:</p>
<p><img src="images/scripts_runscript_201800.jpg" alt="invoking a script with runScript, 2018.0.0 or later" /></p>
<p>The additional arguments shown below are supported in version 2018.0.0.</p>
<dl>
	<dt>&lt;arg name=&quot;id&quot;&gt;script-id&lt;/arg&gt;</dt>
	<dd>An optional, unique identifier assigned to the script. This identifier is used as the key to the compiled script when stored in memory for reuse. Useful for scripts that occur within workflow <span class="apidoc_code">&lt;step&gt;</span> definitions as opposed to those that appear in <span class="apidoc_code">&lt;common-functions&gt;</span>.</dd>


	<dt>&lt;arg name=&quot;import&quot;&gt;
	</dt>
	<dt>&#160;&#160;&#160;script-object-key ...</dt>
	<dt>&lt;/arg&gt;</dt>
	<dd>An optional list of script objects that are to be imported into this script definition. These script objects must use the same scripting language as the workflow script.</dd>


	<dt>&lt;arg name=&quot;useLegacy&quot;&gt; true | false &lt;/arg&gt;</dt>
	<dd>An optional flag that enables the older style script variables to be set in addition to the new ones discussed below. This is included for compatibility with existing scripts.</dd>
</dl>



<h2 id="variables">Built-In Script Variables</h2>
<h4 class="stamp">Valid in version: 2018.0.0 and later</h4>
<p>The native script variables below are assigned before the script begins execution. If the <span class="apidoc_code">useLegacy</span> workflow function argument is set to <strong>true</strong>, the <a href="#variables_legacy">legacy script variables</a> will also be set. If you're writing new scripts, it's best to use these variables rather than the legacy variables, which will be deprecated at some point in the future.</p>
<dl>
<dt>workflowContext</dt>
<dd>The <span class="apidoc_code">WorkflowContext</span> object that contains important information about the current workflow execution that is calling the script.</dd>


<dt>systemLog</dt>
<dd>A logger that logs to the container's log file. This functions exactly the same as for process and policy scripts</dd>


<dt>alerter</dt>

<dd>The <span class="apidoc_code">AlertReporter</span> that allows workflow scripts to generate Policy Manager alerts. This functions exactly the same as for process and policy scripts</dd>

<dt>msgFactory</dt>
<dd>Provides the ability to create Message objects that can be used to communicate from workflow to external services and APIs. This functions exactly the same as for process and policy scripts</dd>


<dt>msgrService</dt>
<dd>A <span class="apidoc_code">MessengerService</span> that provides a messaging bus for exchanging messages with services and APIs. This functions exactly the same as for process and policy scripts</dd>
</dl>
<p><a href="#top">Back to top</a></p>



<h2 id="variables_legacy">Built-In Script Variables: Legacy</h2>
<p>The script variables below will set if the <strong>useLegacy</strong> workflow function argument is set to <strong>true</strong>.</p>
<p>The following native script variables related to the workflow context are assigned before the script begins execution.</p>

<dl>
<dt>callerSubject</dt>
<dd>The <strong>Subject</strong> for the current caller of the workflow action. This contains the actual Java Subject object while the <strong>${caller}</strong> workflow variable will only contain the user name of the current caller.</dd>


<dt>transientVars</dt>
<dd>A set of name/value pairs that can be referenced as workflow variables. This is a <strong>Map&lt;String,Object&gt;</strong> Java object. The information contained in this variable only exists for the current action execution (and any triggered automatic actions.)</dd>


<dt>propertySet</dt>
<dd>A collection of named data elements that can be accessed as workflow variables. The information contained in this variable is persisted throughout the lifetime of the workflow instance. This is an Open Symphony <strong>PropertySet</strong> Java object.</dd>


<dt>serviceKey</dt>
<dd>The unique key of the service. (Defined for service workflows only.)</dd>


<dt>contractKey</dt>
<dd>The unique key of the contract. (Defined for contract workflows only.)</dd>


<dt>others</dt>
<dd>Any additional <strong>&lt;arg&gt;</strong> elements present in the scripted function or condition definition will be assigned to script variables. For instance, if the script definition contains the element below, a script variable named <strong>myPhone</strong> will be defined and assigned the script value of <strong>555-1212</strong>:</dd>
<dd><strong>&lt;arg name=&quot;myPhone&quot;&gt;555-1212&lt;/arg&gt;</strong></dd>
</dl>
<p><a href="#top">Back to top</a></p>



<h2 id="workflow_context">Workflow Context Methods</h2>
<h4 class="stamp">Valid in version: 2018.0.0 and later</h4>
<p>The new <strong>WorkflowContext</strong> is designed to expose the workflow execution context in much the same manner as the <span class="apidoc_code">processContext</span> and <span class="apidoc_code">messageContext</span> to the process and policy scripts. The information available to workflow scripts through the <strong>legacy</strong> variables is made available in a more structured form through the new <span class="apidoc_code">WorkflowContext</span>. This interface includes the methods listed below.</p>
<p>For more information, refer to the generated <a href="../generated_docs/apidoc_scripting_api_all.htm" title="Link to scripting API documentation" target="_blank">Scripting API Documentation</a>. </p>
<dl>
<dt>getObjectKey</dt>
<dd>Returns the key of the object being processed by the workflow. For Policy Manager objects, this will be either the key of the Service, Contract, or Policy. For Community Manager, this will be the FDN value of the object processing the workflow (for example, API Version).</dd>


<dt>getObjectType</dt>
<dd>Returns a lower-case string with the type of the object being processed by the workflow for example, <strong>service</strong>, <strong>contract</strong>).</dd>


<dt>getScriptArg</dt>
<dd>Retrieve the contents of one of the <span class="apidoc_code">&lt;arg&gt;</span> elements in the <span class="apidoc_code">runScript</span> function call.</dd>


<dt>getFunctionArg</dt>
<dd>The <span class="apidoc_code">runScript</span> function is often included within a <span class="apidoc_code">&lt;common-function&gt;</span> workflow element. This method retrieves the value of <span class="apidoc_code">&lt;arg&gt;</span> elements in the workflow function that called the common function.</dd>


<dt>getVariable</dt>
<dd>Retrieves the value of a workflow variable. The variable name is coded as <strong>${name}</strong> or as just the variable name. The standard workflow variable resolution process is used to retrieve the variable's value.</dd>


<dt>setVariable</dt>
<dd>Sets the value of a workflow variable that can be accessed by other places in the current action(s) being performed. The variable name is coded as <strong>${name}</strong> or as just the variable name. Only string values can be assigned to workflow variables.</dd>


<dt>getCallerSubject</dt>
<dd>Retrieves the script Subject of the user performing the current workflow action.</dd>


<dt>getWorkflowDefinitionKey</dt>
<dd>Returns the key of the Workflow Definition being executed. For Policy Manager, this is the internally configured key assigned to the Workflow XML definition loaded from the Policy Manager Console. For Community Manager, this is the key value assigned by the administrator when the Workflow XML document was loaded from the CM Portal. This value is needed when making calls to the Policy Manager Workflow Service.</dd>
</dl>
<p><a href="#top">Back to top</a></p>



<h2 id="workflow_script_mgmt">Workflow Script Management</h2>
<p>This section includes:</p>
<ul>
	<li><a href="#script_mgmt_01_ov">Script Management Overview</a></li>
	<li><a href="#script_mgmt_01_loadnew">Loading New Scripts</a></li>
	<li><a href="#script_mgmt_03_purge">Purging Scripts</a></li>
</ul>


<h3 id="script_mgmt_01_ov">Script Management Overview</h3>
<p>Workflow scripts are maintained in a private static Map. Since most systems will not have more than a handful of workflow scripts, there is no need to use any complex caching mechanism. The entries in this Map will contain the following:</p>
<ul>
	<li>Information about the source of the script (a file or inline content)</li>
	<li>The <span class="apidoc_code">com.soa.container.script.repository.DynamicScript</span> object</li>
</ul>
<p>The key to this Map will be the key of the script itself concatenated with the key of the workflow definition. This way, scripts will be managed on a per-definition basis rather than a per-instance level. The key of the script is one of the following:</p>
<ul>
	<li>The value if the <strong>id</strong> <span class="apidoc_code">&lt;arg&gt;</span> element</li>
	<li>The value of the <strong>file</strong> <span class="apidoc_code">&lt;arg&gt;</span> element if the script is coming from a file</li>
	<li>The hash code of the script source string for in-line scripts</li>
</ul>
<p>A list of the scripts associated with each workflow definition is also maintained so these can be purged if the workflow definition is updated or deleted.</p>


<h3 id="script_mgmt_01_loadnew">Loading New Scripts</h3>
<p>The following logic will be used to create a new instance of the object to save in the script Map. This code is taken from the Operation Policy Script. The resulting script variable is saved in the script Map.</p>
<pre>import com.soa.container.configuration.scripting.model.Script;
import com.soa.container.configuration.scripting.model.ScriptType;
import com.soa.container.script.repository.DynamicScript;
import com.soa.container.script.repository.ScriptLoader;
. . .
private ScriptLoader scriptLoader;  // loaded by Spring wiring
. . .
Script scriptDef = new Script(new ScriptType());
scriptDef.getValue().setSource(scriptSource);  // script source string
scriptDef.getValue().setLanguage(lang);  // script language
if (importArgs != null) {
    for (String import : importArgs) {  // imported script object keys
        scriptDef.getValue().getImport().add(import);
    }
}
DynamicScript script = this.scriptLoader.loadDynamically(scriptDef);</pre>


<h3 id="script_mgmt_03_purge">Purging Scripts</h3>
<p>When a workflow definition is changed or deleted, scripts associated with the workflow definition must be removed from the system. The <span class="apidoc_code">WorkflowScripting</span> class (home of the <span class="apidoc_code">runScript</span> workflow function) must implement the <span class="apidoc_code">WorkflowEventListener</span> interface for this purpose. Associated Spring wiring is needed to publish the new <span class="apidoc_code">WorkflowEventListener</span> instance as an OSGi service.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="workflow_script_execution">Workflow Script Execution</h2>
<p>All scripts must be executed with the Thread Context Class Loader (TCCL) set to the class loader of the Script Engine Manager. The following code snippet shows this:</p>
<pre>import com.soa.script.frameworks.ScriptEngineManager;
. . .
private ScriptEngineManager scriptEngineManager;  // loaded by Spring wiring
. . .
ClassLoader contextClassLoader = null;
. . .
try {
    contextClassLoader = Thread.currentThread().getContextClassLoader();
    ClassLoader appClassLoader = scriptEngineManager.getClass().getClassLoader();
    Thread.currentThread().setContextClassLoader(appClassLoader);

    . . .

} finally {
    if (contextClassLoader != null) {
        try {
            Thread.currentThread().setContextClassLoader(contextClassLoader);
        } catch (Throwable t) {}
    }
}</pre>
<p>Script execution is begun by retrieving the <span class="apidoc_code">DynamicScript</span> object from the scripts Map. This is the result of loading the workflow script as discussed in the previous section.</p>
<p>The <span class="apidoc_code">DynamicScript</span> object can contain an instance of the <span class="apidoc_code">DynamicCompiledScript</span> class if a pre-compiled version of the script is available. If this exists, the script can be directly executed. Otherwise, the script will need to be compiled and executed by the <span class="apidoc_code">ScriptEngine</span>.</p>
<p>The code outline to do all of this is shown below.</p>
<pre>import javax.script.ScriptEngine;
import com.soa.container.script.repository.DynamicCompiledScript;
import com.soa.script.frameworks.ScriptEngineManager;
. . .
private ScriptEngineManager scriptEngineManager;  // loaded by Spring wiring
. . .
DynamicScript script;  // retrieved from scripts Map
DynamicCompiledScript compiled = script.getCompiled();
Object scriptResult;
. . .
if (compiled != null) {
    // Set script variables into compiled.getEngine()
    compiled.eval();
    scriptResult = compiled.getEngine().get("success");
    compiled.close();
} else {
    ScriptEngine engine = scriptEngineManager.getEngineByLanguage(script.getLanguage());
    if (null == engine) {
        throw new GException(. . .);
    }
    // Set script variables into engine
    engine.eval(script.getSource());
    scriptResult = engine.get("success");
}</pre>


<h3 id="script_results">Processing Script Results</h3>
<p>Scripts called from workflow <span class="apidoc_code">&lt;function&gt;</span> elements do not have any return values but scripts called from workflow <span class="apidoc_code">&lt;condition&gt;</span> elements must return a boolean value. As is shown in the above code sample, the script must assign this value to a global variable named <span class="apidoc_code">success</span>.</p>


<h3 id="script_variables_setup">Setting Up Script Variables</h3>
<p>In addition to setting the existing legacy script variables, the following code sample shows how to set up the workflow script variables.</p>
<pre>import com.soa.alert.reporter.AlertReporter;
import com.soa.alert.reporter.script.ScriptAlertReporter;
import com.soa.message.script.InternalMessageFactory;
import com.soa.message.script.ScriptedLoggerImpl;
import com.soa.message.script.ScriptedMessageFactoryImpl;
import com.soa.messenger.wsf.WSFMessengerService;
import com.soa.messenger.wsf.script.MessengerServiceImpl;
import com.soa.workflow.engine.adaptor.WorkflowExtension;
. . .
// these are loaded by Spring wiring
private AlertReporter alertReporter;
private InternalMessageFactory messageFactory;
private WorkflowExtension workflowEngine; // must extend AbstractWorkflow
. . .
// from execution code
ScriptEngine engine;
// from workflow function method
Subject caller; 
WorkflowDocument document 
Map args
. . .
WorkflowContextImpl context = new WorkflowContextImpl(caller, document, args);
context.setWorkflowEngine(workflowEngine);
engine.put("workflowContext", context);

engine.put("systemLog", new ScriptedLoggerImpl(log));

ScriptAlertReporter reporter = new ScriptAlertReporter();
reporter.setReporter(alertReporter);
engine.put("alerter", reporter);

engine.put("msgFactory", new ScriptedMessageFactoryImpl(messageFactory));

WSFMessengerService wsfMessenger = WSFMessengerService.getInstance();
MessengerServiceImpl msgrService = new MessengerServiceImpl(wsfMessenger, null);
msgrService.setMessageFactory(messageFactory);</pre>
<p><a href="#top">Back to top</a></p>
