---
layout: page
title: REST to SOAP mediation
description: Learn how to perform mediation by adding a SOAP facade to a REST back-end service, with a specific use case.
product: ag
category: learn
sub-nav-class: Mediation
weight: 05
type: page
nav-title: SOAP Facade to REST Service
---
<h1 id="top">Mediation Use Case: SOAP Fa&ccedil;ade to REST Back-End Service</h1>
<p>Learn how to perform mediation by adding a SOAP fa&ccedil;ade to a REST back-end service, with a specific use case.</p>
<p>In this example, you'll send a SOAP message to a REST back-end service and receive a SOAP response, using mediation in the Akana API Platform, using the FAA Airport Status API.</p>
<hr class="divide_hr" />



<h2 style="color: gray;">Table of Contents</h2>
<ol class="table_of_contents">
	<li><a href="#introduction">Introduction</a></li>
	<li><a href="#uc_rest_to_soapt">REST to SOAP mediation use case</a>:
		<ol>
	<li><a href="#uc_rest_to_soap_01">Prerequisites</a></li>
	<li><a href="#uc_rest_to_soap_02">Register the REST service</a></li>
	<li><a href="#uc_rest_to_soap_03">Create the SOAP fa&ccedil;ade</a></li>
	<li><a href="#uc_rest_to_soap_04">Add the process on the SOAP fa&ccedil;ade to mediate to the REST service</a></li>
	<li><a href="#uc_rest_to_soap_05">Run the test case</a></li>
</ol>
</li>
	<li><a href="#video">View a training video</a></li>
</ol>
<hr class="divide_hr" />




<h2 id="introduction">Introduction</h2>
<p>In the Community Manager developer portal, you can set up a SOAP fa&ccedil;ade to a REST back-end service by using the Process Editor to add scripting to a specific operation. When a SOAP message is sent to the back-end service, the process converts it to REST before sending it. The reverse is applied with the response from the REST service. The response is converted back to SOAP format.</p>
<p>There is more than one way to do this. The example in this document uses a script to convert the SOAP message to JSON, retrieve the input parameter, and send a REST message to the back-end service. The response is rendered in XML.</p>
<p>This example uses a simple API, the FAA Airport Status API, which has one operation to retrieve the status of a specific airport, and takes one parameter, a three-letter US airport code. For more information about this service, see <a href="https://catalog.data.gov/dataset/airport-status-web-service" title="Link to the FAA Airport Status API" target="_blank">https://catalog.data.gov/dataset/airport-status-web-service</a> (external link).</p>
<p>The example walks you through the steps for setting up both APIs, designing the mediation, and running the test case.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="uc_rest_to_soapt">REST to SOAP mediation use case</h2>
<p>This section provides detailed instructions for setting up and running a REST to SOAP mediation use case using the FAA Airport Status API. This example includes all the assets and steps needed to access a REST back-end service using SOAP messaging, using the Community Manager developer portal.</p>
<p>It includes:</p>
<ol>
	<li><a href="#uc_rest_to_soap_01">Prerequisites</a></li>
	<li><a href="#uc_rest_to_soap_02">Register the REST service</a></li>
	<li><a href="#uc_rest_to_soap_03">Create the SOAP fa&ccedil;ade</a></li>
	<li><a href="#uc_rest_to_soap_04">Add the process on the SOAP fa&ccedil;ade to mediate to the REST service</a></li>
	<li><a href="#uc_rest_to_soap_05">Run the test case</a></li>
</ol>


<h3 id="uc_rest_to_soap_01">Prerequisites</h3>
<p>You'll need the following assets, which are included with this document for the FAA Airport Status API, the test case API:</p>
<ul>
	<li>The Swagger JSON file for the REST API.
		<p>For this example, you can use <a href="assets/faa_airport.json">the Swagger for the FAA Airport Status API</a>.</p></li>
	<li>A WSDL file for the SOAP fa&ccedil;ade. This is out of band. You can create the WSDL using a tool of your choice or converting from Swagger or another API description format; the Akana API Platform doesn't do that.
		<p>For this example, <a href="assets/faa_airport.wsdl">a WSDL file for the FAA Airport Status API is included here</a>.</p></li>
	<li>The script, included inline below. See <a href="#uc_js_script">Mediation script</a>.</li>
	<li>The SOAP request. You could construct it based on your SOAP WSDL file, but it's included in this document so that you can copy and paste. See <a href="#uc_rest_to_soap_req_soap">SOAP request</a>.</li>
</ul>


<h3 id="uc_rest_to_soap_02">Register the REST service</h3>
<p>The first step is to set up the API in the Community Manager developer portal. Follow the steps below.</p>
<h4>To set up the REST service as an API in the Community Manager developer portal</h4>
<ol>
	<li>Log in to the API Management Portal.</li>
	<li>Click the <strong>Plus</strong> icon to add a new API.</li>
	<li>Click <strong>I have a Swagger/RAML/WSDL/WADL document</strong>, and then click <strong>File</strong>. Click <strong>Browse</strong>, and navigate to upload the Swagger JSON file for the REST API. See link in <a href="#uc_rest_to_soap_01">Prerequisites</a> above.</li>
	<li>Test the API in Test Client with a valid airport code (for example, LAX, ATL) to make sure it's up and running.</li>
</ol>


<h3 id="uc_rest_to_soap_03">Create the SOAP fa&ccedil;ade</h3>
<p>Next, set up the SOAP version of the same API. For this, you'd need a WSDL file for the service. For this example, it's provided for you; see link in <a href="#uc_rest_to_soap_01">Prerequisites</a> above.</p>
<h4>To set up the SOAP fa&ccedil;ade as an API in the Community Manager developer portal</h4>
<ol>
	<li>Log in to the API Management Portal.</li>
	<li>Click the <strong>Plus</strong> icon to add a new API.</li>
	<li>Click <strong>I have a Swagger/RAML/WSDL/WADL document</strong>, then click <strong>File</strong>. Click <strong>Browse</strong>, and navigate to upload the WSDL file. See link in <a href="#uc_rest_to_soap_01">Prerequisites</a> above.</li>
	<li>Test the API in Test Client with a valid airport code (for example, LAX, ATL). Use the SOAP request message below. It won't work until you add the mediation, because the SOAP message is not understood by the REST back-end service.</li>
</ol>


<h4 id="uc_rest_to_soap_req_soap">SOAP request</h4>
<pre>&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="https://soa.smext.faa.gov/asws/schemas"&gt;
  &lt;soapenv:Header /&gt;
  &lt;soapenv:Body&gt;
    &lt;sch:GET_getAirportStatus_InputMessage&gt;
      &lt;sch:airportCode&gt;LAX&lt;/sch:airportCode&gt;
    &lt;/sch:GET_getAirportStatus_InputMessage&gt;
  &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;
</pre>


<h3 id="uc_rest_to_soap_04">Add the process on the SOAP fa&ccedil;ade to mediate to the REST service</h3>
<p>The next step is to use the Process Editor to design the REST to SOAP mediation. Essentially you'll:</p>
<ul>
	<li>Add the process onto the API operation that you're running.</li>
	<li>Add a script that takes the incoming SOAP request and:
		<ol>
			<li>Converts the XML to JSON.</li>
			<li>Extracts the input parameter and sets it to a variable.</li>
			<li>Creates a new message and sends it to the REST API.</li>
			<li>Renders the response as a SOAP XML response.</li>
		</ol>
	</li>
	<li>Define two variables that the process will use.</li>
	<li>Define the output.</li>
</ul>
<h4>To set up the REST to SOAP mediation</h4>
<ol>
	<li>In the Community Manager developer portal, for the SOAP API, go to <strong>Implementations</strong> &gt; <strong>Live</strong>.</li>
	<li>On the Implementations page, scroll down to the <strong>Resources</strong> section at the bottom. To the right of the get_getAirportStatus operation, click the down arrow and choose <strong>Edit Process</strong>. The Process Editor opens.</li>
	<li>Add a Script Activity to the process by dragging and dropping.
		<p><img src="images/uc_rest_to_soap_scriptactivity.jpg" alt="Adding a Script activity" /></p>
		</li>
	<li>Double-click in the Script Activity to define the script	and:
		<ol>
			<li>In the <strong>Language</strong> drop-down, choose JavaScript </li>
			<li>In the <strong>Script</strong> area, paste the script. See link in <a href="#uc_rest_to_soap_01">Prerequisites</a> above.</li>
			<li>Click <strong>Finish</strong>.</li>
			</ol>
		</li>
	<li>Add the script into the process flow. For detailed instructions, see <a href="../processes/process_management.htm#process_editor_using">Using the Process Editor</a>.</li>
	<li>Define the two variables that are used in the script, as follows:
		<ol>
			<li>Click the <strong>Activity Variables</strong> icon:
				<p><img src="images/uc_rest_to_soap_activityvariables_01.jpg" alt="Adding Activity variables" /></p></li>
			<li>In the Variables and Faults editor, define the <a href="#uc_js_variables">variables referenced by the script</a>, as shown below.
<p><img src="images/uc_rest_to_soap_activityvariables_02.jpg" alt="Defining the variables" /></p></li>
			<li>Click <strong>Finish</strong>.</li>
			</ol>
		</li>
	
	<li>Modify the Invoke Activity as follows:
		<ol>
			<li>Double-click to open it. You'll see that it defaults to invoking the current service, which is the SOAP service.</li>
			<li>In the <strong>Service QName</strong> field, type a part of the REST API name, such as <strong>FAA</strong>, and click <strong>Search</strong>.</li>
			<li>In the Service field, choose the Target API for the REST service, as shown below.
			<p><img src="images/uc_rest_to_soap_activityinvocation_01.jpg" alt="Defining the variables" /></p></li>
			<li>Specify Interface and Operation. In this example, there is only one option for each field.</li>
			<li>Click <strong>Next</strong>.</li>
		</ol>
		</li>
	
	<li>Still in the Invoke Activity wizard&#8212;on the Manage Input/Output Parameters page:
<ol>
			<li>In the Input section, choose <strong>Multiple Input Variables</strong>.</li>
			<li>In the Parameters section, the airportCode parameter is displayed. For the variable, choose the <strong>airportCode</strong> variable that you defined earlier.</li>
			<li>In the Output section, for the variable, choose the <strong>backendMessage</strong> variable that you defined earlier. The page should look like the below.
			<p><img src="images/uc_rest_to_soap_activityinvocation_02.jpg" alt="Specifying the variables" /></p>
			</li>
			<li>Click <strong>Finish</strong>.</li>
		</ol>
	</li>
	<li>Modify the Reply activity as follows:
		<ol>
			<li>Double-click to open it.</li>
			<li>In the Variable field, choose the <strong>backendMessage</strong> variable, as shown below.
			<p><img src="images/uc_rest_to_soap_reply_activity.jpg" alt="Specifying the variables" /></p></li>
			<li>Click <strong>Finish</strong>.</li>
		</ol>
	</li>
	<li>Save the process changes (fifth icon from the bottom) and then click <strong>Finish</strong>.</li>
</ol>
<p>That completes the setup. Now it's showtime! See <a href="#uc_rest_to_soap_05">Run the test case</a> below.</p>



<h4 id="uc_js_script">Mediation script</h4>
<pre>// Get message and normalize
msg = processContext.getVariable(&quot;message&quot;);
normalmsg = msg.normalize();

auditLog.debug(&quot;Normalized message is: &quot; + normalmsg.getContentAsString());

// Create XML2JSON converter
converter= com.soa.json.xml.script.XML2JSON.converter();
converter.setForceTopLevelObject( true );

// optional - use if needed
// converter.setRemoveNamespacePrefixes( true );
// converter.setIgnoreNamespaces( true );

// Convert XML to JSON
var jsonStr = converter.convert(normalmsg.getContentAsString());
auditLog.debug(&quot;JSON string is: &quot; + jsonStr);

// Parse JSON string into JSON object
jsonObj = JSON.parse(jsonStr);

// Get airport code 
// An Activity Variable named airportCode needs to be defined
airportCode = jsonObj.GET_getAirportStatus_InputMessage.airportCode;

// Option 1
// In this approach to map to parameters from the backend service
// in the invoke activity
// Set Activity Variable via the processContext to use in the Invoke
processContext.setVariable(&quot;airportCode&quot;,airportCode);
auditLog.debug(&quot;airportCode: &quot; + processContext.getVariable(&quot;airportCode&quot;));

// Option 2
// Invoke the backend service without having to map parameters by
// passing the newly created message in to the Invoke
// Create a new normalized message
backendMessage = msgFactory.createNormalized();
backendMessage.createTransportHeaders();
backendMessage.setContentType(&quot;application/json&quot;);

// Add the airport code as a message part
backendMessage.addPart(&quot;airportCode&quot;,airportCode);

// Set the Activity Variable with the newly-created message
processContext.setVariable(&quot;backendMessage&quot;,backendMessage);</pre>

<h4 id="uc_js_variables"><strong>Variables</strong> referenced by the script</h4>
<p>In the Variables and Faults Editor you'll define these two variables:</p>
<ul>
	<li><strong>airportCode</strong> of type string</li>
	<li><strong>backendMessage</strong> of type message</li>
</ul>


<h3 id="uc_rest_to_soap_05">Run the test case</h3>
<p>Now, you can test by running your SOAP API in Test Client. Previously, when you added the API (see <a href="#uc_rest_to_soap_03">Create the SOAP fa&ccedil;ade</a> above), you tested the API in Test Client, with a valid airport code, and it didn't work. The back-end REST service couldn't process the SOAP request.</p>
<p>Now, in Test Client, the back-end REST service can process the mediated request. An example is shown below. The request is SOAP; the mediation converts the message to a format the REST back-end service can understand, invokes the REST service, gets the response, and renders it as a SOAP response, in XML.</p>
<p><img src="images/uc_rest_to_soap_result.jpg" alt="Successful result" /></p>
<p><a href="#top">Back to top</a></p>



<h2 id="video">View a training video</h2>
<p>The training video below walks you through all the steps in this use case, using the files referenced here.</p>
<ul>
	<li><a href="assets/mediation_rest_to_soap.mp4" target="_blank">Mediation Use Case: SOAP Façade to REST Back-End Service&#8212;video</a> (on this website)</li>
</ul>
<p><a href="#top">Back to top</a></p>



<hr class="divide_hr" />



<h2 id="related_topics">Related Topics</h2>
<div class="relatedlinks">
<ul>
	<li><a href="../processes/getting_started_with_processes.htm">Getting Started with Processes</a></li>
	<li><a href="../processes/process_management.htm">Managing Processes</a></li>
	<li><a href="../processes/process_reference.htm">Process Reference</a></li>
</ul>
<ul>
	<li><a href="../../cm/learnmore/basics_glossary.htm">Glossary of Terms for the Community Manager developer portal</a></li>
</ul>
</div>

