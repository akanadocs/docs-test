---
layout: page
title: REST to SOAP mediation
description: Learn how to perform mediation by adding a SOAP facade to a REST back-end API, with a specific use case.
product: ag
category: learn
sub-nav-class: Mediation
weight: 05
type: page
nav-title: REST to SOAP Mediation Use Case
---
<h2 id="top">REST to SOAP Mediation Use Case</h2>
<p>Learn how to perform mediation by adding a SOAP fa&ccedil;ade to a REST back-end API, with a specific use case.</p>
<p>In this example, you'll send a SOAP message to a REST API and receive a SOAP response, using mediation in the Akana API Platform, with a simple example using the FAA Airport Status API.</p>

<p>
<a href="../processes/getting_started_with_processes.htm" class="button secondary"> Getting Started with Processes</a> 
<a href="../processes/process_reference.htm" class="button secondary">Process Reference</a>
</p>



<div class = "divider1"></div>



<h3 style="color: gray;">Table of Contents</h3>
<ol class="table_of_contents">
	<li><a href="#introduction">Introduction</a></li>
	<li><a href="#uc_rest_to_soapt">REST to SOAP mediation use case</a>:
		<ol>
	<li><a href="#uc_rest_to_soap_01">Prerequisites</a></li>
	<li><a href="#uc_rest_to_soap_02">Create the REST API</a></li>
	<li><a href="#uc_rest_to_soap_03">Create the SOAP API</a></li>
	<li><a href="#uc_rest_to_soap_04">Add the process on the SOAP API to mediate to the REST API</a></li>
	<li><a href="#uc_rest_to_soap_05">Run the test case</a></li>
</ol>
</li>
</ol>
<div class = "divider1"></div>




<h3 id="introduction">Introduction</h3>
<p>In the developer portal, you can set up REST to SOAP mediation by using the Process Editor to add scripting to a specific operation. When messages come in or are sent out, the process converts the messages.</p>
<p>There is more than one way to do this. The example in this document uses a script to convert the SOAP message to JSON, retrieve the input parameter, and send a REST message to the back-end service. The response is rendered in XML.</p>
<p>This example uses a simple API, the FAA Airport Status API, which has one operation to retrieve the status of a specific airport, and takes one parameter, a three-letter US airport code.</p>
<p>The example walks you through the steps for setting up the API, designing the mediation, and running the test case.</p>
<p><a href="#top">Back to top</a></p>



<h3 id="uc_rest_to_soapt">REST to SOAP mediation use case</h3>
<p>This section provides detailed instructions for setting up and running a REST to SOAP mediation use case using the FAA Airport Status API. This example includes all the assets and steps needed to access a REST back-end service using SOAP messaging, using the Akana developer portal.</p>
<p>It includes:</p>
<ol>
	<li><a href="#uc_rest_to_soap_01">Prerequisites</a></li>
	<li><a href="#uc_rest_to_soap_02">Create the REST API</a></li>
	<li><a href="#uc_rest_to_soap_03">Create the SOAP API</a></li>
	<li><a href="#uc_rest_to_soap_04">Add the process on the SOAP API to mediate to the REST API</a></li>
	<li><a href="#uc_rest_to_soap_05">Run the test case</a></li>
</ol>


<h4 id="uc_rest_to_soap_01">Prerequisites</h4>
<p>You'll need the following assets, which are included with this document for the FAA Airport Status API, the test case API:</p>
<ul>
	<li>The Swagger JSON file for the API.
	<p>For this example, you can use the Swagger for the FAA Airport Status API.</p></li>
	<li>A WSDL file for the service. You can use an online service to convert a Swagger JSON API description document to a SOAP WSDL file.
	<p>For this example, a WSDL file for the FAA Airport Status API is included here.</p></li>
	<li>The script, included inline below.</li>
	<li>The SOAP request. You could construct it based on your SOAP WSDL file, but it's included in this document, inline, so you can copy and paste.</li>
</ul>


<h4 id="uc_rest_to_soap_02">Create the REST API</h4>
<p>The first step is to set up the API in the developer portal. Follow the steps below.</p>
<h5>To set up the REST API in the developer portal</h5>
<ol>
	<li>Log in to the API Management Portal.</li>
	<li>Click the <strong>Plus</strong> icon to add a new API.</li>
	<li>Click <strong>I have a Swagger/RAML/WSDL/WADL document</strong>, then click <strong>File</strong>. Click <strong>Browse</strong>, and navigate to upload the Swagger JSON file for the REST API. See link in <a href="#uc_rest_to_soap_01">Prerequisites</a> above.</li>
	<li>Test the API in Test Client with a valid airport code (for example, LAX, ATL) to make sure it's up and running.</li>
</ol>


<h4 id="uc_rest_to_soap_03">Create the SOAP API</h4>
<p>Next, set up the SOAP version of the same API. For this, you'd need to use an external application or service to convert Swagger to WSDL; you can't do that in the API Platform.&nbsp;For this example, use the SOAP version of the FAA Airport Status API; see link in <a href="#uc_rest_to_soap_01">Prerequisites</a> above.</p>
<h5>To set up the SOAP API in the developer portal</h5>
<ol>
	<li>Log in to the API Management Portal.</li>
	<li>Click the <strong>Plus</strong> icon to add a new API.</li>
	<li>Click <strong>I have a Swagger/RAML/WSDL/WADL document</strong>, then click <strong>File</strong>. Click <strong>Browse</strong>, and navigate to upload the WSDL file. See link in <a href="#uc_rest_to_soap_01">Prerequisites</a> above.</li>
	<li>Test the API in Test Client with a valid airport code (for example, LAX, ATL). It will not work until you add the mediation, because the SOAP message is not understood by the REST back-end service. Use the SOAP request message below.</li>
</ol>
<p><strong>The SOAP request:</strong></p>
<pre>&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:sch="https://soa.smext.faa.gov/asws/schemas"&gt;
  &lt;soapenv:Header /&gt;
  &lt;soapenv:Body&gt;
    &lt;sch:GET_getAirportStatus_InputMessage&gt;
      &lt;sch:airportCode&gt;LAX&lt;/sch:airportCode&gt;
    &lt;/sch:GET_getAirportStatus_InputMessage&gt;
  &lt;/soapenv:Body&gt;
&lt;/soapenv:Envelope&gt;
</pre>


<h4 id="uc_rest_to_soap_04">Add the process on the SOAP API to mediate to the REST API</h4>
<p>The next step is to use the process editor to design the REST to SOAP mediation. Essentially you'll:</p>
<ul>
	<li>Add the process onto the API operation that you're running.</li>
	<li>Add a script that takes the incoming SOAP request and:
		<ol>
			<li>Converts the XML to JSON.</li>
			<li>Extracts the input parameter and sets it to a variable.</li>
			<li>Creates a new message and sends it to the API.</li>
			<li>Renders the response as a SOAP XML response.</li>
		</ol>
	</li>
	<li>Define two variables that the process will use.</li>
	<li>Define the output.</li>
</ul>
<h5>To set up the REST to SOAP mediation</h5>
<ol>
	<li>In the developer portal, for the SOAP API, go to Implementations &gt; Live.</li>
	<li>On the implementations page, scroll down to the Resources section at the bottom. To the right of the get_getAirportStatus operation, click the down arrow&nbsp;and choose <strong>Edit Process</strong>. The Process Editor opens.</li>
	<li>Add a Script Activity to the process by dragging and dropping.
		<p><img src="images/uc_rest_to_soap_scriptactivity.jpg" alt="Adding a Script activity" /></p>
		</li>
	<li>Double-click in the Script Activity to define the script	and:
		<ol>
			<li>In the <strong>Language</strong> drop-down, choose JavaScript </li>
			<li>In the <strong>Script</strong> area, paste the script. See<a href="#uc_js_script"></a> below.</li>
			<li>Click <strong>Finish</strong>.</li>
			</ol>
		</li>
	<li>Add the&nbsp;script into the process flow. For detailed instructions, see <a href="../processes/process_management.htm#process_editor_using">Using the Process Editor</a>.</li>
	<li>Define two Activity variables, as follows:
		<ol>
			<li>Click the <strong>Activity Variables</strong> icon:
				<p><img src="images/uc_rest_to_soap_activityvariables_01.jpg" alt="Adding Activity variables" /></p></li>
			<li>In the Variables and Faults editor, define the two variables shown below:
				<p><img src="images/uc_rest_to_soap_activityvariables_02.jpg" alt="Defining the variables" /></p></li>
			<li>Click <strong>Finish</strong>.</li>
			</ol>
		</li>
	
	<li>Modify the Invoke Activity as follows:
		<ol>
			<li>Double-click to open it. You'll see that it defaults to invoking the current API, the SOAP service.</li>
			<li>In the <strong>Service QName</strong> field, type a part of the REST API name, such as <strong>FAA</strong>, and click <strong>Search</strong>.</li>
			<li>In the Service field, choose the Target API for the REST service, as shown below.
			<p><img src="images/uc_rest_to_soap_activityinvocation_01.jpg" alt="Defining the variables" /></p></li>
			<li>Specify Interface and Operation. In this example, there is only one option for each field.</li>
			<li>Click <strong>Next</strong>.</li>
		</ol>
		</li>
	
	<li>Still in the Invoke Activity wizard -- on the Manage Input/Output Parameters page:
		<ol>
			<li>In the Input section, choose <strong>Multiple Input Variables</strong>.</li>
			<li>In the Parameters section, the airportCode parameter is displayed. For the variable, choose the <strong>airportCode</strong> variable that you defined earlier.</li>
			<li>In the Output section, for the variable, choose the <strong>backendMessage</strong> variable that you defined earlier. The page should look like the below.
			<p><img src="images/uc_rest_to_soap_activityinvocation_02.jpg" alt="Specifying the variables" /></p>
			</li>
			<li>Click <strong>Finish</strong>.</li>
		</ol>
	</li>
	<li>Modify the Reply activity as follows:
		<ol>
			<li>Double-click to open it.</li>
			<li>In the Variable field, choose the <strong>backendMessage</strong> variable, as shown below.
			<p><img src="images/uc_rest_to_soap_reply_activity.jpg" alt="Specifying the variables" /></p></li>
			<li>Click <strong>Finish</strong>.</li>
		</ol>
	</li>
	<li>Save the process changes (fifth icon from the bottom) and then click <strong>Finish</strong>.</li>
</ol>
<p>That completes the setup. Now it's showtime! See <a href="#uc_rest_to_soap_05">Run the test case</a> below.</p>
<p id="uc_js_script"><strong>The script:</strong></p>
<pre>// Get message and normalize<br />msg = processContext.getVariable(&quot;message&quot;);<br />normalmsg = msg.normalize();<br /> <br />auditLog.debug(&quot;Normalized message is: &quot; + normalmsg.getContentAsString());<br /> <br />// Create XML2JSON converter<br />converter= com.soa.json.xml.script.XML2JSON.converter();<br />converter.setForceTopLevelObject( true );<br /> <br />// optional - use if needed<br />// converter.setRemoveNamespacePrefixes( true );<br />// converter.setIgnoreNamespaces( true );<br /> <br />// Convert XML to JSON<br />var jsonStr = converter.convert(normalmsg.getContentAsString());<br />auditLog.debug(&quot;JSON string is: &quot; + jsonStr);<br /> <br />// Parse JSON string into JSON object<br />jsonObj = JSON.parse(jsonStr);<br /> <br />// Get airport code <br />// An Activity Variable named airportCode needs to be defined<br />airportCode = jsonObj.GET_getAirportStatus_InputMessage.airportCode;<br /> <br />// Option 1<br />// In this approach to map to parameters from the backend service<br />// in the invoke activity<br />// Set Activity Variable via the processContext to use in the Invoke<br />processContext.setVariable(&quot;airportCode&quot;,airportCode);<br />auditLog.debug(&quot;airportCode: &quot; + processContext.getVariable(&quot;airportCode&quot;));<br /> <br />// Option 2<br />// Invoke the backend service without having to map parameters by<br />// passing the newly created message in to the Invoke<br />// Create a new normalized message<br />backendRequest = msgFactory.createNormalized();<br />backendRequest.createTransportHeaders();<br />backendRequest.setContentType(&quot;application/json&quot;);<br /> <br />// Add the airport code as a message part<br />backendRequest.addPart(&quot;airportCode&quot;,airportCode);<br /> <br />// Set the Activity Variable with the newly-created message<br />processContext.setVariable(&quot;backendRequest&quot;,backendRequest);
</pre>
<p id="uc_js_variables"><strong>The variables:</strong></p>
<p>In the Variables and Faults Editor you'll define these two variables:</p>
<ul>
	<li><strong>airportCode</strong> of type string</li>
	<li><strong>backendMessage</strong> of type message</li>
</ul>


<h4 id="uc_rest_to_soap_05">Run the test case</h4>
<p>Now, you can test by running your SOAP API in Test Client. Previously, when you created the API (see <a href="#uc_rest_to_soap_03">Create the SOAP API</a> above), you tested the API in Test Client, with a valid airport code, and it didn't work. The back-end REST API couldn't process the SOAP request.</p>
<p>Now, in Test Client, the back-end REST API can process the mediated request. An example is shown below. The request is SOAP, the back-end REST API successfully processed the request, and the response is rendered as a SOAP response, in XML.</p>
<p><img src="images/uc_rest_to_soap_result.jpg" alt="Successful result" /></p>
<p><a href="#top">Back to top</a></p>



<div class = "divider1"></div>



<h3 id="related_topics">Related Topics</h3>
<div class="relatedlinks">
<ul>
	<li><a href="../processes/getting_started_with_processes.htm">Getting Started with Processes</a></li>
	<li><a href="../processes/process_management.htm">Managing Processes</a></li>
	<li><a href="../processes/process_reference.htm">Process Reference for Policy Manager</a></li>
</ul>
<ul>
	<li><a href="http://docs.akana.com/cm/learnmore/basics_glossary.htm">Glossary of Terms for the Developer Portal</a></li>
</ul>
</div>