---
layout: page
title: Getting Started with Scripts using Policy Manager 7.x
description: Learn about the script creation process, using a Script Activity in a process, documentation, and management tools.
product: ag
category: gs
weight:	2
subcategory: Scripts
type: page
nav-title: Getting Started with Scripts

---
  <h2 name="top">Getting Started with Scripts</h2>
  <p>Learn about the script creation process, using a Script Activity in a process, documentation,  and management tools.</p>



<a href="script_management.htm" class="button secondary">Managing Scripts</a>

<a href="http://docs.soa.com/ag/assets/scriptDocs/index.html" class="button secondary">Policy Manager Scripting API (7.0 / 7.1)</a><p></p>


<a href="http://docs.soa.com/ag/assets/scriptDocs_pm72/index.html" class="button secondary">Policy Manager Scripting API (7.2)</a>



<p></p>



  <div class = "divider1"></div>
   <h3 style="color: gray;">Table of Contents</h3>

   <ol class="table_of_contents">

<li><a href="#script_contexts"> Script Contexts</a></li>
<li><a href="#add_script">Add Script</a></li>

<li><a href="#reference_script">Reference Script</a></li>


<li><a href="#script_activity">Script Activity</a></li>






 <li><a href="#policy_manager_scripting_api">Policy Manager Scripting API</a></li>

  <li><a href="#process_reference">Process Reference</a></li>


  <li><a href="#script_management">Script Management Tools</a></li>


   <li><a href="#whats_next">What's Next?</a></li>




  </ol>



<div class = "divider1"></div><p></p>

<p>SOA Software Policy Manager provides a <em>Scripts</em> interface that is available in the <em>Scripts</em> folder of each Organization. It allows  you to define a series of utility scripts for performing commonly used tasks. You can then import and reference scripts in a Process definition using the  Script Activity or in a QoS or Operational Script Policy. </p>
<p>Let's take a quick walkthrough of the script creation options  and   tools available to get you started. </p>
<a name="script_contexts">
<h3>Script Contexts</h3>
</a>


<p>There are several approaches that can be used to configure your script definitions. </p>
<ul class="usingOrderedList">
  <li>You can define a script object in the <em>Scripts</em> section using the <strong>Add Script</strong> function. This is useful for building a library of scripts you can reuse in your Process  or QoS Script Policy definitions. </li>
  <li> You can create a process, add a Script Activity and import an existing script. </li>
  <li>You can create a QoS or Operational Script Policy, define a new script, or import an existing script.</li>
  <li> If there is a portion of a pre-defined script object you would like to utilize in your local script, you can import the script object and reference functions in the imported script. </li>
</ul>

<p><a href="#top">Back to top</a></p>
<a name="add_script">
<h3>Add Script</h3></a>
<p>You add a script using the <strong>Add Script</strong> function on the Scripts Summary page. </p>
<p><img src="images/script_summary.jpg" width="678" height="220"></p>
<p>You select the language you will be writing your script in (JavaScript, Jython, or Beanshell Engine), add your script content and save. In the following example, this is the first script we are creating so no scripts display in the Available Scripts section. This section represents scripts that are available to be imported. <br>
  <br>
  <img src="images/script_content.jpg" width="472" height="297"></p>
<p>After we save the script and create a new script, you will see the &quot;Sample Script&quot; in the Available Scripts section. This means it can now be reused by importing it into a new script definition. </p>
<p><img src="images/script_import.jpg" width="513" height="388"></p>


<p>Now that you've added a script, let's investigate how to reference a script in the next section. </p>

<p><a href="#top">Back to top</a></p>

<a name="reference_script">
<h3>Reference Script</h3></a>

<p>After you add your set of utility scripts, in your   virtual service operation process definition,  you add a <em>Script Activity</em>, import a pre-defined script, and add a script reference for the function you want to perform. </p>
<p> For example, you may have a  requirement to validate some data as part of your process and you created a reusable script (e.g.,  TestScript) that includes a function for validating data (validateData). In your process definition,   import &quot;TestScript&quot; and reference the function in the script source as illustrated below. </p>
<p><img src="images/script_example.jpg" alt="" width="436" height="285"></p>
<p>Figure. Example of Referencing a Script Function</p>

<p><a href="#top">Back to top</a></p>
<h3><a name="script_activity">Script Activity</a></h3>
<p>The Script Activity provides the ability to execute a script at the point in the process the activity is connected. The script can be written in either JavaScript, Jython, or BeanShell. </p>
<p>The Script Details Editor is organized into two separate areas, Imports and Source. The Source has a pull-down where you can select the script language. It also has a large source code editor text area. </p>

  <img src="images/script_activity_source_area.jpg" width="591" height="140"></p>
<p>Figure. Script Activity Source Area</p>
<p>Common functions that you may need to perform in your scripts can be saved in Script objects using the <strong>Add Script</strong> function in the <em>Scripts</em> section of each Organization in the Policy Manager Workbench. To make use of those common functions from the Script Activity the Script objects defining those functions must be imported. The Imports area is where those scripts are identified for import. The available scripts are listed in the Available Scripts tree. Any number of Scripts in that tree can be moved to the Imported Scripts list box. Only scripts that match the language type will be available for selection in the tree. The script does not return a value. </p>
</p>
  <img src="images/script_activity_imports_area.jpg" width="572" height="174"></p>
<p>Figure. Script Activity Imports Area</p>
<p>In the figure above the json2 Script from the Registry Scripts folder is imported. Any functions defined in json2 can be used within the Script Activity source code. </p>
<p>If you are using scripts in a process, the following pre-defined variables are provided.  For more information refer to the Scripts API located in the \sm70\docs\scriptDocs folder of the Policy Manager 7.0, 7.1, or 7.2 release folder. Click index.htm to launch the documentation: </p>
<ul class="usingOrderedList">
  <li> <strong>processContext: </strong> Provides functions for retrieving and changing information about the currently running process, such as the variables defined in the process and the authenticated subject(s) of the process. </li>
  <li> <strong>systemLog</strong>:  Provides logging functions to the container&rsquo;s log. The statements logged with this interface are mixed with the other system log statements. </li>
  <li> <strong>auditLog: </strong> Provides logging functions to the process audit log. If auditing is enabled for the virtual service operation that is invoking the process statements logged using this variable log information will be inserted into the audited message log for the operation&rsquo;s execution. This can be found on the service&rsquo;s Monitoring tab in the Logs sub-tab. </li>
  <li> <strong>alerter: </strong> Provides an interface for generating alerts that are displayed in on the Policy Manager alert pages. </li>
  <li> <strong>recorder</strong>:  Provides an interface for recording content in the Policy Manager usage log pages. </li>
  <li> <strong>msgFactory: </strong> Providers functions for create message variables. A message variable cannot  simply be assigned content like a simple string or int variable. It must be initialized using one of the functions in the msgFactory. </li>
</ul>
<p><a href="#top">Back to top</a></p>
<a name="policy_manager_scripting_api">
<h3>Policy Manager Scripting API</h3>
</a>

 <p>The <em>Policy Manager Scripting API</em> located in the <strong>\sm70\docs\scriptDocs</strong> folder of the Policy Manager 7.0, 7.1, and 7.2  Release Folder provides a series of interfaces and classes you can use to build process related scripts. The API includes lots of use cases and sample code you can experiment with and use as a baseline when building your own scripts. 
 </p>
 <p>You can access the scripting API for your Policy Manager version here: <a href="http://docs.soa.com/ag/assets/scriptDocs/index.html" >Policy Manager 7.0 and 7.1</a> and <a href="http://docs.soa.com/ag/assets/scriptDocs_pm72/index.html">Policy Manager 7.2<br />
  <br />
 </a> <img src="images/script_api_home_page.jpg" width="564" height="327" /></p>
<p><a href="#top">Back to top</a></p>


<a name="process_reference">
  <h3>Process Reference</h3></a>

<p>Another essential resource you will need when working with Processes and Scripts is the <a href="../processes/process_reference.htm" ">Process Reference</a>. Here you will learn all the fundamentals about creating a process, using the process editors, and configuring activities.</p>

<p><a href="#top">Back to top</a></p>
<a name="script_management">
  <h3>Script Management Tools</h3></a>


  <p>The <a href="script_management.htm" >Managing Scripts</a> topic includes an overview of all the available tools  for managing Script definitions. </p>
  <p><img src="images/script_tools.jpg" width="637" height="169"></p>

   <p><a href="#top">Back to top</a></p>
  <a name="whats_next">
  <h3>What's Next?</h3></a>

  <p>Now that you've familiarized yourself with the high-level approach of building scripts, and know what  reference materials and tools are available, you can now start building your script library and begin to automate your process definitions and QoS Script Policies. </p>
<p><a href="#top">back to top</a>
</p>


<div class = "divider1"></div>