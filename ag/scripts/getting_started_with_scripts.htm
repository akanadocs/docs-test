---
layout: page
title: Getting Started with Scripts (Policy Manager 7x)
description: Learn about the script creation process, using a Script Activity in a process, documentation, and management tools.
product: ag
category: gs
sub-nav-class: Scripts
weight: 15
type: page
nav-title: Getting Started with Scripts (PM 7x)
---
<h2 id="top">Getting Started with Scripts (PM7x)</h2>
<p>Learn about the script creation process, using a script activity in a process, documentation, and management tools.</p>


<a href="script_management.htm" class="button secondary">Managing Scripts</a>
<a href="../../ag/assets/scriptDocs_pm70/index.html" class="button secondary">Policy Manager Scripting API (7.0 / 7.1)</a>  
<a href="../../ag/assets/scriptDocs_pm72/index.html" class="button secondary">Policy Manager Scripting API (7.2)</a><p></p>

<h5 class="stamp">Supported Platforms: 7.x</h5>




<div class = "divider1"></div>
<h3 style="color: gray;">Table of Contents</h3>
<ol class="table_of_contents">
  <li><a href="#script_contexts"> Script Contexts</a></li>
  <li><a href="#add_script">Add Script</a></li>
  <li><a href="#reference_script">Reference Script</a></li>
  <li><a href="#script_activity">Script Activity</a></li>
  <li><a href="#policy_manager_scripting_api">Policy Manager Scripting API</a></li>
  <li><a href="#process_reference">Process Reference</a></li>
  <li><a href="#script_management">Script Management Tools</a></li>
  <li><a href="#whats_next">What's Next?</a></li>
</ol>



<div class = "divider1"></div><p></p>



<p>Akana Policy Manager provides a scripts interface that is available in the <strong>Scripts</strong> folder of each Organization. It allows you to define a series of utility scripts for performing common tasks. You can then import and reference scripts:</p>
<ul>
  <li>In a Process definition using the Script Activity</li>
  <li>In a QoS or Operational Script Policy</li>
</ul>
<p>Let's take a quick walkthrough of the script creation options and tools available to get you started.</p>



<a name="script_contexts"></a><h3>Script Contexts</h3>


<p>There are several ways that you can configure your script definitions:</p>
<ul class="usingOrderedList">
  <li>You can define a script object in the <strong>Scripts</strong> section, using the <strong>Add Script</strong> function. This is useful for building a library of scripts you can reuse in your Process or QoS Script Policy definitions. </li>
  <li> You can create a process, add a Script Activity, and then import an existing script. </li>
  <li>You can create a QoS or Operational Script Policy and then, from within that context, define a new script or import an existing script.</li>
  <li> If there is a portion of a pre-defined script object that you want to use in your local script, you can import the script object and then reference functions in the imported script. </li>
</ul>
<p><a href="#top">Back to top</a></p>



<a name="add_script"></a><h3>Add Script</h3>
<p>You add a script using the <strong>Add Script</strong> function on the <strong>Scripts Summary</strong> page.</p>
<p><img src="images/script_summary.jpg" width="678" height="220" alt="Scripts Summary page" /></p>
<p>The steps are:</p>
<ol>
  <li>Select the language you will be writing your script in (JavaScript, Jython, or BeanShell engine).</li>
  <li>Add your script content.</li>
  <li>Save.</li>
</ol>
<p>The example below shows adding the first script, so there are no existing scripts in the <strong>Available Scripts</strong> section. This section represents scripts that are available to be imported. In this example, we are adding a script named <strong>Sample Script</strong>.</p>
<p><img src="images/script_content.jpg" width="472" height="297" alt="scripts available to be imported" /></p>
<p>After you save the script and are creating an additional script, all existing scripts are displayed in the <strong>Available Scripts</strong> section. In the example below, <strong>Sample Script</strong> is now available. This means that it can be reused by importing it into a new script definition.</p>
<p><img src="images/script_import.jpg" width="513" height="388" alt="sample script is now available" /></p>
<p>Now that you've added a script, let's investigate how to reference a script in the next section.</p>
<p><a href="#top">Back to top</a></p>



<a name="reference_script"></a><h3>Reference Script</h3>
<p>After you add your set of utility scripts, in your virtual service operation process definition, you can:</p>
<ul>
  <li>Add a <strong>Script Activity</strong></li>
  <li>Import a pre-defined script</li>
  <li>Add a script reference for the function you want to perform</li>
</ul>
<p> For example, let's say you have a requirement to validate some data as part of your process. To do this, you created a reusable script, <strong>TestScript</strong>, that includes a function for validating data (<strong>validateData</strong>). In your process definition, import <strong>TestScript</strong> and reference the function in the script source as shown below.</p>
<p><img src="images/script_example.jpg" width="436" height="285" alt="referencing a script function" /></p>
<p><a href="#top">Back to top</a></p>



<a name="script_activity"></a><h3>Script Activity</h3>
<p>The Script Activity provides the ability to execute a script as part of a process. The script is executed at the point in the process at which the activity is connected. The script can be written in JavaScript, Jython, or BeanShell.</p>
<p>The Script Details Editor is organized into two separate areas, <strong>Imports</strong> and <strong>Source</strong>. In the Source tab, you can:</p>
<ul>
  <li>Choose from a list of supported script languages.</li>
  <li>Write or paste the script, in the large source code editor text area.</li>
</ul>
<p><img src="images/script_activity_source_area.jpg" width="591" height="140" alt="Script Activity Source Area" /></p>
<p>You can save common functions, that you might want to re-use in your scripts, as Script objects. In the Policy Manager Workbench, for each organization, there is a Scripts section. To add a re-usable script for the organization, go to the Scripts section and click <strong>Add Script</strong>.</p>
<p>Within the Script activity, to use a common function, you must import the Script object that defines the function. Scripts are defined for import in the <strong>Imports</strong> area. Available scripts are listed in the <strong>Available Scripts</strong> tree, as shown below.</p>
<p>You can move any number of scripts from Available Scripts to the Imported Scripts list box. Only scripts in the specified scripting language type are displayed.</p>
<p> The script does not return a value.</p>
<p><img src="images/script_activity_imports_area.jpg" width="572" height="174" alt="Script Activity Imports Area" /></p>
<p>In the illustration above, the json2 script from the Registry/Scripts folder is imported. Once you import a script, you can use any functions that are defined in that script, within the Script Activity source code.</p>
<p>The platform includes the following pre-defined variables that are always available if you are using scripts in a process:</p>
<ul class="usingOrderedList">
  <li> <strong>processContext: </strong> Provides functions for retrieving and changing information about the currently running process, such as the variables defined in the process and one or more authenticated subjects of the process. </li>
  <li> <strong>systemLog</strong>: Provides logging functions to the container&rsquo;s log. The statements logged with this interface are mixed with the other system log statements. </li>
  <li> <strong>auditLog: </strong> Provides logging functions to the process audit log. If auditing is enabled for the virtual service operation that is invoking the process statements logged using this variable, log information will be inserted into the audited message log for the operation&rsquo;s execution. In Policy Manager, you can find this information on the <strong>Monitoring</strong> tab for the service, in the <strong>Logs</strong> sub-tab. </li>
  <li> <strong>alerter: </strong> Provides an interface for generating alerts that are displayed on the Policy Manager alert pages. </li>
  <li> <strong>recorder</strong>: Provides an interface for recording content in the Policy Manager usage log pages. </li>
  <li> <strong>msgFactory: </strong> Provides functions for creating message variables. A message variable cannot simply be assigned content such as a simple string or int variable. It must be initialized using one of the functions in the msgFactory. </li>
</ul>
<p>For more information, refer to the Scripts API located in the \sm70\docs\scriptDocs folder of the Policy Manager 7.0, 7.1, or 7.2 release folder. Click index.htm to launch the documentation.</p>
<p><a href="#top">Back to top</a></p>



<a name="policy_manager_scripting_api"></a><h3>Policy Manager Scripting API</h3>
<p>The <em>Policy Manager Scripting API</em> provides a series of interfaces and classes you can use to build process related scripts. The API includes lots of use cases and sample code you can experiment with and use as a baseline when building your own scripts. You can access the scripting API for your Policy Manager in the following locations:</p>
<p>The Policy Manager Scripting API provides a series of interfaces and classes that you can use to build process-related scripts. The API includes lots of use cases and sample code you can experiment with and use as a baseline when building your own scripts. You can access the scripting API documentation in the following locations:</p>
<ul class="usingOrderedList">
  <li>In the <strong>docs\scriptDocs</strong> folder of the Akana Platform folder.</li>
  <li>On the Akana docs site:
    <ul>
      <li>Version 8.0x: <a href="../../ag/assets/scriptDocs_pm80/index.html" >Policy Manager 8.0</a> or <a href="../../ag/assets/scriptDocs_pm82/index.html" >Policy Manager 8.2</a></li>
      <li>Version 7.0x: <a href="../../ag/assets/scriptDocs_pm70/index.html" >Policy Manager 7.0 and 7.1</a> or <a href="../../ag/assets/scriptDocs_pm72/index.html">Policy Manager 7.2</a></li>
    </ul>
  </li>
</ul>
<p><a href="#top">Back to top</a></p>



<a name="process_reference"></a><h3>Process Reference</h3>
<p>Another essential resource you will need when working with Processes and Scripts is the <a href="../processes/process_reference.htm">Process Reference (Policy Manager 7.x</a>. Here you will learn all the fundamentals about creating a process, using the process editors, and configuring activities.</p>
<p><a href="#top">Back to top</a></p>



<a name="script_management"></a><h3>Script Management Tools</h3>
<p>For an overview of all the available tools for managing Script definitions, see <a href="script_management.htm" >Managing Scripts</a>.</p>
<p><img src="images/script_tools.jpg" width="637" height="169" alt="script management tools" /></p>
<p><a href="#top">Back to top</a></p>



<a name="whats_next"></a><h3>What's Next?</h3>
<p>Now that you've familiarized yourself with high-level information about building scripts, and know what reference materials and tools are available, you can start building your script library and begin to automate your process definitions and QoS Script Policies.</p>
<p><a href="#top">Back to top</a></p>