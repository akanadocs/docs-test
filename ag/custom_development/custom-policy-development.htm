---
layout: page
title: Custom Policy Development
description: A guide to developing a custom policy component.
product: ag
category: learn
sub-nav-class: Custom Development
weight: 05
type: page
nav-title: Custom Policy Development
---
<h1 id="top">Custom Policy Development</h1>
<p>A guide to developing a custom policy component.</p>
<hr class="divide_hr" />



<h2 style="color: gray;">Table of Contents</h2>
<ol class="table_of_contents">
	<li><a href="#introduction">Overview</a></li>
	<li><a href="#handler_design">Policy Handler Design</a></li>
	<li><a href="#develop">Developing the Policy Handler</a></li>
	<li><a href="#console">Developing the Policy Handler Console Plug-in</a></li>
	<li><a href="#deploy">Building and Deploying the Policy Handler Plug-ins</a></li>
	<li><a href="#testing">Testing the Policy Handler</a></li>
</ol>
<hr class="divide_hr" />



<h2 id="introduction">Overview</h2>
<p>This document contains the information required to:</p>
<ol>
	<li>Develop</li>
	<li>Deploy</li>
	<li>Test</li>
	<li>Run a custom Policy Handler with an Akana API Gateway</li>
</ol>
<p>It will begin with the design of the Custom Policy Handler Framework, then work through the required steps to guide a customer in creating a working custom Policy.</p>


<h3 id="data">Prerequisites</h3>
<ul>
	<li>This configuration guide assumes that you’ve already installed the platform. If you need help installing the platform, please refer to the applicable version of the Installation Guide. See <a href="../../sp/platform_install/installing_akana_api_platform_all.htm">Installing the Akana API Platform (all versions)</a>.</li>
	<li>If you're writing policy components for the API Gateway, you'll have to create and configure a Policy Manager (PM) and Network Directory (ND) container. This is described in the document <a href="../api_management/simple-api.htm">Getting Started: Managing a Simple API</a>.</li>
	<li>Install and configure the Eclipse IDE as described in the document <a href="../../sp/howto/eclipse-setup.htm">Eclipse Workspace Setup</a></li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="handler_design">Policy Handler Design</h2>
<p>All Policy Handlers utilize the Policy Handler Framework provided by Akana. The Policy Handler Framework is a specialization of the Message Handler Framework that is also provided by Akana.
The difference being that a policy handler is activated when a policy for that handler is attached to a service, whereas a message handler is activated for all services in and ND as soon as deployed.
Given that the Policy Handler Framework is a specialization of the Message Handler Framework, there are many classes reused between the two:</p>
<p><img src="images/handler_uml.png" alt="Handler UML" title="Handler UML" />
How a Handler determines which Policy it will act on is determined by the associated Policy classes as shown below:</p>
<p><img src="images/policy_uml.png" alt="Policy UML" title="Policy UML" /></p>
<p>The assertion Marshaller retrieves the policies from Policy Manager then calls the Policy Handler Factory to determine if it should create a Policy handler.</p>
<p>The Policy Handler Factory is tied to the Assertion Marshaller by the framework via the Spring wiring in the xx-policy-osgi.xml file on your build.</p>
<p><strong>Note:</strong> To review the JavaDoc for these classes, see <a href="../generated_docs/apidoc_policymanager_java_all.htm">Policy Manager API Javadoc (all versions)</a>.</p>
<p>The Policy Handler framework works on the notion of Handler chains. These chains are associated with two criteria:</p>
<ol>
	<li>The direction of the message</li>
	<li>The Actor that the Network Director is playing</li>
</ol>
<p>The following diagram shows how handler chains are processed for the IN message (such as an HTTP request):</p>
<p><img src="images/in_processing.png" alt="IN Message Processing" title="IN Message Processing" /></p>
<p>The following diagram shows how handler chains are processed for the OUT message (such as an HTTP response):</p>
<p><img src="images/out_processing.png" alt="OUT Message Processing" title="OUT Message Processing" /></p>
<p>Keep this design and chain sequence in mind when creating the design for a Policy Handler.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="develop">Developing the Policy Handler</h2>
<p>The Policy Handler is developed as an OSGi Plug-in. Please refer to the <a href="osgi-plugin-development.htm">OSGi Plug-in Development</a> document which describes how to set up an Eclipse workspace and create a basic plugin project.</p>
<p><strong>Note:</strong> Sample policy handlers can be found in the /samples directory that is distributed with the product.</p>
<p>A typical policy handler plug-in will also have these additional folders:</p>
<ul>
	<li>build: contains the build.xml Ant script and related files</li>
	<li>META-INF/spring: contains all Spring XML files for the bundle</li>
	<li>
META-INF/resources: contains any resource files for the bundle such as:
<ul>
	<li>XSD files</li>
	<li>I18N message bundle</li>
</ul>
</li>
</ul>


<h3>Create the Assertion Model</h3>
<p>All policies are defined using an XML schema which forms the basis for the model object generation using JAXB v2.</p>
<ol>
	<li>Create the XML Schema definition file:
<pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xs:schema targetNamespace="http://soa.com/products/policymanager/examples/policy/complex" elementFormDefault="qualified" attributeFormDefault="unqualified" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:cp="http://soa.com/products/policymanager/examples/policy/complex"&gt;
  &lt;xs:element name="Complex"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:sequence&gt;
        &lt;xs:element name="HeaderName" type="xs:string"&gt;&lt;/xs:element&gt;
        &lt;xs:element name="Optional" type="xs:boolean"&gt;&lt;/xs:element&gt;
      &lt;/xs:sequence&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
&lt;/xs:schema&gt;</pre></li>
	<li>Use JAXB v2 to generate Java classes for the schema that will end up in a Java package such as xxx.xxx.akana.policy.xxxx.assertion.model. Example build scripts, model objects and schema can be found in the /samples/com.soa.examples.policy.handler.complex policy plug-in that is distributed with the product.</li>
</ol>




<h3>Spring Wiring</h3>
<p>Several Spring beans need to be published by the policy handler by editing the /META-INF/sping/*.xml files:</p>
<ul>
	<li>Handler Factories</li>
	<li>Template</li>
	<li>Assertion Marshaller</li>
</ul>

<h4>To set up the Spring beans</h4>
<ol>
	<li>Define the Spring bean for the Policy Handler Factory and publish the OSGi services for the Policy Handler Factory. There should be one service definition per binding per role:
<pre>&lt;!-- The WS-Policy handler factory --&gt;
&lt;bean id="complex.wsphandler.factory" class="com.soa.examples.policy.complex.handler.ComplexPolicyHandlerFactory"/&gt;

&lt;osgi:service  ref="complex.wsphandler.factory" interface="com.soa.policy.wspolicy.handler.WSPHandlerFactory"&gt;
  &lt;osgi:service-properties&gt;
    &lt;entry key="name" value="com.soa.examples.complex.in.http.wsphandler.factory"/&gt;
    &lt;entry key="scope" value="concrete"/&gt;
    &lt;entry key="binding" value="http"/&gt;
    &lt;entry key="role" value="provider"/&gt;
  &lt;/osgi:service-properties&gt;
&lt;/osgi:service&gt;
</pre></li>
	<li>Define the Spring bean for the Policy Template that is used to describe aspects of the policy and publish the OSGi service:
<pre>&lt;!-- Complex policy template --&gt;
&lt;bean id="complex.policy.template" class="com.soa.examples.policy.complex.template.ComplexPolicyTemplate"/&gt;

&lt;!-- publish the complex policy template. An id property needs to be included that matches the template id --&gt;
&lt;osgi:service ref="complex.policy.template" interface="com.soa.policy.template.OperationalPolicyTemplate"&gt;
  &lt;osgi:service-properties&gt;
    &lt;entry key="name" value="com.soa.examples.policy.complex.template"/&gt;
    &lt;entry key="id" value="policy.complexexample"/&gt;
  &lt;/osgi:service-properties&gt;
&lt;/osgi:service&gt;
</pre></li>
	<li>Define the Spring Bean for the new Policy Assertion Marshaller. This will be in the xxx.policy.xml file:
service definition per binding per role:
<pre>&lt;!-- internal complex policy jaxb assertion marshaller, not published since no sub-policies --&gt;
&lt;bean id="complex.jaxb.marshaller" class="com.soa.policy.wspolicy.JaxbAssertionMarshaller"  init-method="init"&gt;
  &lt;property name="assertionQNames"&gt;
    &lt;list&gt;
      &lt;ref bean="complex.assertion.name"/&gt;
    &lt;/list&gt;
  &lt;/property&gt;
  &lt;property name="jaxbPaths"&gt;
    &lt;list&gt;
      &lt;value&gt;com.soa.examples.policy.complex.assertion.model&lt;/value&gt;
    &lt;/list&gt;
  &lt;/property&gt;
&lt;/bean&gt;
	
&lt;!-- complex primary/parent policy marshaller --&gt;
&lt;bean id="complex.assertion.marshaller" class="com.soa.examples.policy.complex.assertion.marshaler.ComplexAssertionMarshaller"&gt;
  &lt;property name="jaxbMarshaller" ref="complex.jaxb.marshaller"/&gt;
&lt;/bean&gt;
  
&lt;!-- publish the complex marshaller --&gt;
&lt;osgi:service ref="complex.assertion.marshaller" interface="com.soa.policy.wspolicy.AssertionMarshaller"&gt;
  &lt;osgi:service-properties&gt;
    &lt;entry key="name" value="com.soa.examples.policy.complex.assertion.marshaller"/&gt;
  &lt;/osgi:service-properties&gt;
&lt;/osgi:service&gt;
</pre></li>
	<li>Specify any cross-bundle references that are used by the new Handler Factory. For example, the need for specific XPATH or XML parsers. This will be in the xxx.policy-OSGi.policy file also.
<pre>&lt;osgi:reference id=“xpath.engine" interface="com.digev.fw.xpath.XPath" /&gt;</pre></li>
</ol>


<h3>Package Descriptions</h3>
<p>There are several packages that typically make up the solution for the Policy Handler:</p>
<ol>
	<li><a href="#package_01">xxx.xxx.akana.policy.xxxx.handler</a></li>
	<li><a href="#package_02">xxx.xxx.akana.policy.xxxx.assertion</a></li>
	<li><a href="#package_03">xxx.xxx.akana.policy.xxxx.assertion.marshaller</a></li>
	<li><a href="#package_04">xxx.xxx.akana.policy.xxxx.assertion.model</a></li>
</ol>

<h4 id="package_01">xxx.xxx.akana.policy.xxxx.handler</h4>
<p>This package contains the implementation of the Policy Handler.</p>
<ul>
	<li>
<p><strong>xxxxConstants</strong>&#8212;Container class for static variables used in the Policy Handler.</p>
</li>
	<li>
<p><strong>xxxHandlerFactory</strong>&#8212;Implements the <code>com.soa.policy.wspolicy.handler.WSPHandlerFactory</code> interface.
The framework instantiates a handler factory based on code and configuration found in the deployed handler bundle. When the framework requires a handler instance (essentially when an Assertion Marshaller detects a policy attached to the service and un-marshal’s that into and Assertion), it calls the handler factory’s create method. It is during the create call that the handler factory can determine whether the framework is asking for a consumer handler or a provider handler (via the HandlerRole).</p>
<p>The hander factory can make use of the HandlerContext to learn more about the context of the creation event. The HandlerContext would typically be a WSDLHandlerContext. Casting the object to this interface will provide valuable WSDL based information about the service / operation including the entire WSDL document and the WSDL operation name.</p>
</li>
	<li>
<p><strong>xxxxPolicyHandler</strong>&#8212;This implements the <code>com.soa.message.handler.MessageHandler</code> interface.
This is where all the functionality of the policy is supposed is implemented, and is based on the context that is passed into it by the Factory.</p>
<p>A new handler is created per in, out, and fault message for a given operation. Because policy can differ based on in, out, and fault messages, the handler may behave differently based on which message type it is handling. At creation time the handler factory will be told by the container which type of message it is handling. At r</p>
</li>
</ul>

<h4 id="package_02">xxx.xxx.akana.policy.xxxx.assertion</h4>
<ul>
	<li>
<strong>xxxxAssertion</strong>&#8212;This is an implementation of the <code>com.soa.policy.wspolicy.JavaAssertion</code> interface. 
An Assertion is the un-marshalled XML policy that was attached to the Service in the PM console. It has getters and setters for the values of the elements that make up the policy directives. 
</li>
</ul>

<h4 id="package_03">xxx.xxx.akana.policy.xxxx.assertion.marshaller</h4>
<ul>
	<li><strong>xxxxAssertionMarshaller</strong>&#8212;This is the implementation of the <code>com.soa.policy.wspolicy.AssertionMarshaller</code> interface.
An assertion marshaller is deployed separately from a handler. During the reading of a service’s policy by the framework, the marshaller is called upon to construct assertion Java objects from the assertions encoded in XML and WS-Policy. The constructed assertion objects are then passed down to handler factories to determine if handlers are to be created.</li>
</ul>

<h4 id="package_04">xxx.xxx.akana.policy.xxxx.assertion.model</h4>
<p>This package contains Java model generated by the JAXB framework; typically using the JAXB xjc utility and Ant to generate these classes.</p>
<p>In the com.soa.examples.policy.handler.complex policy plug-in, the build/build.xml file contains an <strong>assertions</strong> target that is responsible for the generation of the model objects.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="console">Developing the Policy Handler Console Plug-in</h2>
<p>Policies are configured in the Policy Manager console via one of two different mechanisms:</p>
<ol>
	<li><strong>XML Policy</strong>&#8212;the XML Policy is used when no Console Plug-in can be found for a policy. Users can simply type the XML assertion into a dialog box with the appropriate XML structure (namespace, localname, and so on) and it will be passed into the Policy Handler as an assertion. This is the approached leveraged by the <strong>com.soa.examples.policy.handler.simple</strong> example.</li>
	<li><strong>Custom Console Plugin</strong>&#8212;a nicer way to interface with users is via a specific UI designed to render the policy. This is the approach used by the <strong>com.soa.examples.policy.handler.complex</strong> example.</li>
</ol>
<p>The Policy Handler Console Plug-in is developed as an OSGi Plug-in. Please refer to the <a href="osgi-plugin-development.htm">OSGi Plug-in Development</a> document which describes how to set up an Eclipse workspace and create plug-in projects. Ensure that you have followed the directions for 'Compiling the complex policy handler example'.</p>
<p>A typical policy handler console plug-in will also have these additional folders:</p>
<ul>
	<li>build: contains the build.xml Ant script and related files</li>
	<li>META-INF/spring: contains all Spring XML files for the bundle</li>
	<li>META-INF/resources/faces: contains default Faces config that seldom needs altering</li>
	<li>META-INF/images: contains the images required by the plug-in</li>
	<li>OSGI-INF/l10n: Localization message bundle</li>
	<li>WebContent/xxxpolicy; contains the JSP files</li>
	<li>WebContent/WEB-INF: contains the tag libraries and web.xml file</li>
</ul>


<h3>Spring Wiring</h3>
<p>Two Spring beans need to be published by the policy handler by editing the /META-INF/sping/*.xml files:</p>
<ul>
	<li>Policy Renderer</li>
	<li>Faces Config</li>
	</ul>

<h4>To set up the Spring beans</h4>
<ol>
	<li>Define the Spring bean for the Policy Renderer and publish the OSGi service:
<pre>&lt;bean id="complex.policy.renderer" class="com.soa.examples.console.policy.complex.ComplexPolicyRenderer" /&gt;

&lt;osgi:service ref="complex.policy.renderer" interface="com.soa.console.policy.renderer.OperationalPolicyRenderer"/&gt;</pre></li>
	<li>Define the Spring bean for the Faces configuration and publish the OSGi service. This rarely needs any customization but is required for the policy to work correctly:
<pre>&lt;osgi:service interface="com.soa.console.faces.config.FacesConfig"&gt;
  &lt;osgi:service-properties&gt;
    &lt;entry key="name" value="com.soa.examples.complex.policy.faces.config"/&gt;
  &lt;/osgi:service-properties&gt;	
  &lt;bean class="com.soa.console.faces.myfaces.MyFacesConfigFactory"&gt;
    &lt;property name="location" value="classpath:faces/faces-config.xml"/&gt;
  &lt;/bean&gt;
&lt;/osgi:service&gt;</pre></li>
</ol>


<h3>Package Descriptions</h3>
<p>There are several packages that typically make up the solution for the Policy Handler:</p>
<ol>
	<li><a href="#console_policy_01">xxx.xxx.akana.console.policy.xxxx</a></li>
	<li><a href="#console_policy_02">xxx.xxx.akana.console.policy.xxxx.bean</a></li>
</ol>

<h4 id="console_policy_01">xxx.xxx.akana.console.policy.xxxx</h4>
<p>This package contains the renderer for the Policy Handler.</p>
<ul>
	<li><strong>xxxxPolicyRenderer</strong>&#8212;Extends the <code>com.soa.console.policy.renderer.impl.OperationalPolicyRendererBase</code> abstract class.</li>
</ul>

<h4 id="console_policy_02">xxx.xxx.akana.console.policy.xxxx.bean</h4>
<p>This package contains the form bean for Policy which include the getters and setters for the form fields and the logic for converting between the form and the policy assertion.</p>
<ul>
	<li><strong>xxxxPolicyBean</strong>&#8212;Extends the <code>com.digev.ms.console.struts.forms.MSActionForm</code> abstract class.</li>
</ul>


<h3>Localization</h3>
<p>All localization is supported by message bundles in the OSGI-INF/l10n directory. Al labels in the entire product need to be specified with a unique name so its wise to prefix all labels with the java package name.</p>
<p>The policy.xxxx.name is a special property and should always match the id from the PolicyRenderer, with a '.name' suffix:</p>
<pre>policy.complexexample.name=Complex Example Policy
com.soa.examples.console.policy.complex.options.label=Options
com.soa.examples.console.policy.complex.headername.label=Header Name
com.soa.examples.console.policy.complex.optional.label=Optional</pre>
<p>To localize text in the JSP pages, simply use the <span class="apidoc_code">&lt;workbench:message&gt;</span> tag:</p>
<pre>&lt;workbench:message key=&quot;com.soa.examples.console.policy.complex.headername.label&quot;/&gt;</pre>


<h3>Web Content</h3>
<p>The WebContent/xxxpolicy directory contains the files required to render the user interface. The entry point is defined in the <code>PolicyRender.getContentLocation(String policyKey)</code> method, as shown in the example below.</p>
<pre>public class ComplexPolicyRenderer extends OperationalPolicyRendererBase {

  public String getId() {
    return "policy.complexexample";
  }

  public String getContentLocation(String policyKey) throws GException{
    return "/complexpolicy/complex_policy_details.jsp?policyKey="+policyKey;
  }

  public String getContentLocation(HttpServletRequest request)
      throws GException {
    return getContentLocation(getPolicyKey(request));
  }
}
</pre>
<p>In this case, the complex_policy_details.jsp JSP page is passed the PolicyBean and renders the policy details. It also contains a link to the page used to modify the policy. In this example:</p>
<pre>&lt;td&gt;&lt;strong&gt;&lt;workbench:message key="com.soa.examples.console.policy.complex.options.label"/&gt;&lt;/strong&gt;
  |&#160;&#160;&lt;a href="javascript:(new createWindow('&lt;%=request.getContextPath()%&gt;/complexpolicy/modify_complex_policy_details.faces?policyKey=&lt;%=policyKey%&gt;', 'ActionWizardWindow', 10, 10, 550, 200, 'no', 'yes', 'no', 'no', 'no').openWindow());"&gt;&lt;workbench:message key="com.soa.examples.console.policy.complex.modify.label"/&gt;&lt;/a&gt;
&lt;/td&gt;
</pre>
<p>When the 'Save' button is clicked, the PolicyBean is called to process the form and save the assertion:</p>
<pre>&lt;h:commandButton  id="finish" style="display:none;" action="#{ComplexPolicyBean.modifyAction}"/&gt;
&lt;f:verbatim&gt;&lt;feat:Button label="save" onclick="submitFinish()"/&gt;&lt;/f:verbatim&gt;
</pre>
<p><a href="#top">Back to top</a></p>



<h2 id="deploy">Building and Deploying the Policy Handler Plug-ins</h2>
<p>The steps are:</p>
<ul>
	<li><a href="#deploy_01">Build the Policy Handler</a></li>
	<li><a href="#deploy_02">Set up Felix console</a></li>
	<li><a href="#deploy_03">Deploy the Policy Handler Bundles</a></li>
</ul>


<h3 id="deploy_01">Build the Policy Handler</h3>
<ol>
	<li>Ensure the Java packages containing the HandlerFactory implementation (and any other classes referenced in the Spring wiring) are included in the Export-Package list in MANIFEST.MF</li>
	<li>Ensure all Java packages imported from outside the new Handler bundle are included in the Import-Package list in MANIFEST.MF
		<ul>
			<li>Imported com.akana and com.digev packages should specify version=&quot;x.0.0&quot; where x is the major version number of the API Gateway you have installed.</li>
		</ul></li>
	<li>Build the plug-ins as described in the <a href="osgi-plugin-development.htm">OSGi Plug-in Development</a> document.</li>
</ol>


<h3 id="deploy_02">Set up Felix console</h3>
<p>This is not necessary for anytime but the first time you deploy the Policy Handler. Its function is to simply to make sure that you know what is happening. Once you are comfortable with loading the Policy Handler you can disable this console.
To start the TUI (Textual User Interface) console simply copy the lib/ext/org.apache.felix.shell.tui-x.x.x.jar file into the instances/[container name]/deploy directory. Immediately the “-&gt;” prompt should appear in your SSH session.</p>


<h3 id="deploy_03">Deploy the Policy Handler Bundles</h3>
<p>The simplest way to deploy the policy handler is to copy the jar files into the 'instances/[CONTAINER NAME]/deploy' directory.</p>
<p>The Policy Manager requires both the 'policy handler' and 'policy handler console' bundles, whereas the Network Director only requires the 'policy handler' bundle.</p>
<p>To check that the new bundles are active, simply type “ps” (without the quotes) into the TUI (see previous section) and look for the new bundles at the end of the list. You can also see the installed bundles from the <strong>Installed Features</strong> tab in the Admin console. Select 'Bundle' from the <strong>Filter</strong> drop-down list.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="testing">Testing the Policy Handler</h2>
<p>The best way to test the Policy Handler is to use the remote debug features of Eclipse and the Felix Container. Steps:</p>
<ol>
	<li>Restart the container specifying the –debug option. For example, from [install_dir]/pm2018/bin):
		<pre>./startup.sh &lt;ND name&gt; –debug 7777</pre>
		<p><strong>Note</strong>: You don't have to use 7777. It can be any port value not already in use.</p></li>
	<li>Set up a remote debug session in Eclipse and connect to the process.</li>
</ol>


<h3>Define and attach the Policy in Policy Manager</h3>
<p>Once deployment is completed the policy handler will be loaded and invoked once a service with the correct policy attached is detected by the Network Director.
For this to happen, you must attach the policy to a service in Policy Manager. However, before this can happen, you must define the Policy in Policy Manager and attach it to a Service.</p>
<ol>
	<li>Log on to the Policy Manager console with administrator account</li>
	<li>In the Organization Tree, click on your organization &gt; <strong>Policies</strong> &gt; <strong>Operational Policies</strong>.</li>
	<li>Click the <strong>Add Policy</strong> button on the bottom right of the screen.</li>
	<li>The add policy dialog will be displayed. Select your policy from the list. Click <strong>Next</strong>.</li>
	<li>Add the name in the <strong>Policy Name</strong> field and click the Finished button.</li>
	<li>The policy will now appear in the list of Operational Policies and is ready to be attached to a service when needed.</li>
</ol>
<p><a href="#top">Back to top</a></p>