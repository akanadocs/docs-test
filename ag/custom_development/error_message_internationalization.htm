---
layout: page
title: Internationalizing Error Messages
description: Learn how to set up custom/internationalized runtime error messages in the Akana API Gateway.
product: ag
category: learn
sub-nav-class: Custom Development
weight: 06
type: page
nav-title: Internationalizing Error Messages
---
<h1 id="top">Internationalizing Error Messages</h1>
<p>Learn how to set up custom/internationalized runtime error messages in the Akana API Gateway.</p>
<p><strong>Note</strong>: The approach in this document is effective only for runtime error and informational messages. It is not applicable to alert messages defined in the database.</p>
<h4 class="stamp">API Platform Version: 2019.0.12 and later</h4>
<hr class="divide_hr" />



<h2 style="color: gray;">Table of Contents</h2>
<ol class="table_of_contents">
	<li><a href="#overview">Overview</a></li>
	<li><a href="#s01_00">Step 1: Create the Java properties file</a></li>
	<li><a href="#s02_00">Step 2: Deploy the files</a></li>
	<li><a href="#s03_00">View configuration changes</a></li>
	<li><a href="#s04_00">Test</a></li>
</ol>
<hr class="divide_hr" />



<h2 id="overview">Overview</h2>
<p>The default language for error messages in the Akana Gateway is US English. However, you can override the default for one or more existing messages by setting up a new Java properties file and updating the platform settings to reference the new file.</p>
<p>In the properties file, you can define error message keys and the applicable localization strings, set up as name/value pairs.</p>
<p>The steps are:</p>
<ol>
	<li><a href="#s01_00">Step 1: Create the Java properties file</a> that specifies the new locale and the new error message content.</li>
	<li><a href="#s02_00">Step 2: Upload the Java properties file</a> to the /deploy folder of your installation.</li>
</ol>



<h2 id="s01_00">Step 1: Create the Java properties file</h2>
<p>There are two custom properties that you can use in customizing error messages:</p>
<ul>
	<li><strong>_locale</strong>: Identifies the locale for the messages.</li>
	<li><strong>_basename</strong>: Optional. Allows you to set the resource bundle base name, which helps identify the resources in use. Helps reduce the likelihood of collisions, and speeds up lookups.</li>
</ul>



<p>When you create the new properties file and add it to the /deploy folder of a container, and update the platform settings, messages are returned based on the message key.</p>
<p>The service is at the /messages context.</p>
<p>For example let's say you create a file named <strong>com.akana.messages-default.cfg</strong> with these contents:</p>
<pre>_locale=en_us
301300=message content</pre>
<p>You can then test the file by calling the message in the browser, as follows:</p>
<pre>{protocol}//{hostname}:{port}/messages?key=301300&locale=en&param=pt&param=yy </pre>
<p>In this example, the URL uses the key from the file.</p>
<p>You'll see the default message text for this message ID: </p>
<pre>Error while updating WSDL. WSDL port type [pt] is used outside of service updated [yy].</pre>
<p>To override an existing message, a file can be dropped into the deploy folder using a file name that corresponds to the pattern <strong>com.akana.messages-{qualifier}.cfg</strong>, where {qualifier} is a unique string that identifies the file. The file is a normal properties file that contains the localization strings corresponding to the appropriate keys.</p>
<p>To create the properties file name and contents, follow the instructions below.</p>
<h4>To create the properties file</h4>
<ol>
	<li>Create a configuration file, using the file name com.akana.messages-{qualifier}.cfg, where {qualifier} is a unique string used to identify the file. For example, for Spanish, you might use: <strong>com.akana.messages-es.cfg</strong>.</li>
	<li>Model your file contents on the example below, to include the <strong>_locale</strong> setting, to set the locale, and the message code/content, expressed as a name/value pair:
<pre>_locale=en_us
301300=message content</pre>
	</li>
	<li>Save the file.</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="s02_00">Step 2: Deploy the files</h2>

<h4>To deploy the files</h4>
<ol>
	<li>Go to the /deploy/ directory of the container.<br />
		Add the following files:
		<ul>
			<li>The file or files you created in Step 1.</li>
			<li>The <strong>com.akana.test.jaxrs_2019.0.0.jar</strong> Jar file. To get this file, <a href="../../cm/learnmore/basics_support.htm#support_contact">contact Akana support</a>.</li>
		</ul>
	<p>An example is shown below.</p>
	<p><img src="images/error_message_int_01.png"alt="Adding files to the /deploy/ folder"/></p>
	</li>
	<li>Restart the container.</li>
</ol>
<p>Now, you can test the messages in the browser. See <a href="#s04_00">Test</a>.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="s03_00">View configuration changes</h2>
<p>You can view the configuration changes that you've made, in the Akana Administration Console for the container.</p>
<h4>To view configuration settings for messages</h4>
<ol>
	<li>Log in to the Akana Administration Console.</li>
	<li>Click the <strong>Configuration</strong> tab.</li>
	<li>On the left, under Configuration Categories, scroll down to find the <strong>com.akana.messages</strong> configuration category. You'll see the new files and settings. An example is shown below.
		<p><img src="images/error_message_int_02.png"alt="Viewing the configuration settings"/></p>
	</li>
</ol>
<p><a href="#top">Back to top</a></p>



<h2 id="s04_00">Test</h2>
<p>Log in to the Akana platform and then, from the browser, construct a request for one of the messages you've set up in the custom config properties file, using this format for the URL:</p>
<pre>{protocol}//{hostname}:{port}/messages?key={messagekey}&amp;locale={_locale}</pre>
<p>You'll see the error message returned.</p>
<p><a href="#top">Back to top</a></p>