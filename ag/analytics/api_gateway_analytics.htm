---
layout: page
title: API Gateway Analytics
description: Learn how to use the Akana MongoDB Support plugin to enable MongoDB support, allowing the Gateway to generate analytics from governed messages and capture the analytics data into a NoSQL data warehouse. The Envision product also uses this plugin.
product: ag
category: ref
sub-nav-class: API Gateway Analytics
weight: 05
type: page
nav-title: API Gateway Analytics
---
<h1 id="top">API Gateway Analytics</h1>
<p>Learn how to use the Akana MongoDB Support plugin to enable MongoDB support, allowing the Gateway to generate analytics from governed messages and capture the analytics data into a NoSQL data warehouse. The Envision product also uses this plugin.</p>
<hr class="divide_hr" />



<h2 style="color: gray;">Table of Contents</h2>
<ol class="table_of_contents">
	<li><a href="#s01_00">Overview</a></li>
	<li><a href="#s02_00">Plugin Architecture</a></li>
	<li><a href="#s03_00">Deployment Architecture</a>
		<ul>
			<li><a href="#s03_01">Separate Containers</a></li>
			<li><a href="#s03_02">Shared Consoles</a></li>
			<li><a href="#s03_03">All-in-One</a></li>
			<li><a href="#s03_04">Remote Metrics Collection</a></li>
			<li><a href="#s03_05">Direct Metrics Collection</a></li>
		</ul>
		</li>
	<li><a href="#s04_00">Installation</a>
		<ul>
			<li><a href="#s04_01">Akana MongoDB Support Plugin</a></li>
			<li><a href="#s04_01b">Akana Administration Console Configuration Settings for MongoDB</a></li>
			<li><a href="#s04_01c">Managing the Map/Reduce maxBatchSize Settings</a></li>
		</ul>
		</li>
	<li><a href="#s05_00">Usage/Enhancements</a>
		<ul>
			<li><a href="#s05_01">API Gateway Enhancements</a></li>
			<li><a href="#s05_02">Business Metrics Policy</a></li>
			<li><a href="#s05_03">Business Service Level Policy</a></li>
			<li><a href="#s05_04">Operational Metrics Policy</a></li>
		</ul>
		</li>
	<li><a href="#s06_00">Use Case&#8212;Point of Sale Metrics for Shoe Retailer</a>
		<ul>
			<li><a href="#s06_01">The API</a></li>
			<li><a href="#s06_02">The Dataset</a></li>
			<li><a href="#s06_03">The Policy</a></li>
			<li><a href="#s06_04">The Charts</a></li>
			<li><a href="#s06_05">The Dashboard</a></li>
		</ul>
		</li>
</ol>
<hr class="divide_hr" />




<h2 id="s01_00">Overview</h2>
<p>The API Gateway can collect a wide range of data that can be analyzed with the help of the Envision analytics platform. This collaboration is enabled through a set of plugins for each products that provide cross-over functionality that enhance each product's experience. The list of capabilities provided by the plugins are as follows.</p>
<ul>
	<li>Configuration of an operational metrics dataset, charts, and dashboards in Envision.</li>
	<li>Population of the operational dataset in Envision from messages processed by the API Gateway.</li>
	<li>API Gateway controlled security (authorization) for operational data in Envision.</li>
	<li>Population of user created datasets in Envision from messages processed by the API Gateway.</li>
	<li>SLA enforcement for user created dataset metrics.</li>
</ul>
<p>There are three plugins that together provide these capabilities: one for the Network Director, one for the Policy Manager Console, and one for Envision. This document describes the plugins including their architecture, installation, and configuration.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="s02_00">Plugin Architecture</h2>
<p>The Envision analytics platform analyzes data received from data feeds generated by analytics connectors. An analytics connector will extract data from a business system and feed the data to Envision using an Envision API. The following is a picture of how Envision interacts with users and other systems. Note the use of a Connector to collect information from a business system and feed it to the Envision platform.</p>
<p><img src="assets/ag_analytics_02_01.jpg" alt=""/></p>
<p>The API Gateway product provides an analytics connector that will feed metrics collected from APIs and services that it manages. In the picture above the API Gateway is a Business System feeding Envision.</p>
<p>The API Gateway provides metrics collection and aggregation capabilities out-of-the-box. It only does so for a limited set of metrics with predefined dimensions. There are two ways these metrics are collected and persisted in the API Gateway:</p>
<ol>
	<li>Via a metrics collection service included in the Akana Management Services feature. This provides a remote API that the Network Director can deliver metrics through.</li>
	<li>Via a metrics reporting Java API which all Policy Manager provided services and APIs used to report their metrics. The Network Director can use this API as an alternative to using the remote API.</li>
</ol>
<p><img src="assets/ag_analytics_02_02.jpg" alt=""/></p>
<p>When the Envision plugin is installed with the Policy Manager features the Java API used for reporting metrics is overridden with one that writes those metrics to the MongoDB NoSQL database Envision uses. This Java API override also replaces the remote API's implementation so any metrics delivered remotely from the Network Director are also written to the NoSQL database. When the analytics plugin is installed with the Network Director the Network Director can then also write directly to the NoSQL database as an option.</p>
<p><img src="assets/ag_analytics_02_03.jpg" alt=""/></p>
<p>Envision supports analyzing data from any source, any domain, only relying on user defined metadata describing a set of data (dataset) and how the data should be processed. The Envision plugin introduces a new policy, the Business Metrics policy, that will instruct the Network Director how to extract data from managed API/service messages that can then be fed into Envision to fill datasets created by users.</p>
<p>The Business Metrics policy handler supports a variety of data extraction mechanisms, including XPath, JsonPath, RegEx, and script-based expressions. Based on the policy configuration a multitude of these mechanisms may have to be used to extract data from each message processed by the Network Director. To avoid adding latency to the delivery of each message the policy handler will extract data from a message in a separate thread.</p>
<p><img src="assets/ag_analytics_02_04.jpg" alt=""/></p>
<p>Based on the needs specified in the Business Metrics policy the Business Metrics policy handler will copy portions of the request/response/fault message (headers, body) to the Raw Message Queue along with instructions on how data should be extracted. The Data Extractor executes in the Data Extraction Thread pulling the records from the Raw Message Queue, extracting the data, and placing the extracted data in the Dataset Queue. The Metrics Reporter executes in the Metrics Delivery Thread calling the API for persisting the extracted data.</p>
<p>The API Gateway supports using MongoDB as a metrics store using the MongoDB plugin. The Envision plugins automatically install the MongoDB plugin so that all metrics, including metrics collected by the Business Metrics policy, are stored in the MongoDB NoSQL database. That means all administration (viewing, exporting, archiving) of metrics will be performed against the MongoDB database. This also mean that all SLA calculations will be performed using the MongoDB database. This is achieved by replacing the Evaluator module of the SLA Engine. The SLA Engine modules are illustrated in the diagram below.</p>
<p><img src="assets/ag_analytics_02_05.jpg" alt=""/></p>
<p>When using the MongoDB database the Evaluator module, which evaluates whether SLAs are violated, is swapped out with a module that not only can query for information from MongoDB but will actually use the power of MongoDB to perform calculations using the MongoDB processor itself. This frees up computing resources for the Policy Manager process. In addition, an evaluator for SLAs based on business metrics is introduced. This evaluator will also use MongoDB. The following diagram illustrates the addition of the two MongoDB based evaluators.</p>
<p><img src="assets/ag_analytics_02_06.jpg" alt=""/></p>
<p>Not all the plugins used in the integration of the API Gateway with Envision change the behavior of the API Gateway. An API Gateway plugin is also installed on the Envision analytics platform which provides integrated security (authorization) around the access to records in datasets. By default Envision secures data in datasets based on the owner's shared settings on the dataset. Optionally datasets created by different business systems such as the API Gateway can be protected through the use of a security plugin.</p>
<p>Each dataset in Envision can optionally reference a security provider. That provider is consulted when the data queries are performed in Envision.</p>
<p><img src="assets/ag_analytics_02_07.jpg" alt=""/></p>
<p>The Dataset Access Layer in Envision first consults the Dataset configuration to identify a Security Provider (if any). It then consults the Security Provider providing the provider contextual information about the data access request. The security provider then providers additional filter criteria that when added to the query of MongoDB will filter out records that should not be accessible. By translating security permissions into a NoSQL query security can be enforced in a highly efficient way by the NoSQL server instead of filtering out records in memory.</p>
<p>The API Gateway plugin for Envision will create a Security Provider for the operational metrics dataset it installs in Envision. The filter created is based on the user's access to the API/services the operational metrics are collected for. A user who does not have access to an API in the Policy Manager console for example will not have access to data in the operational metrics dataset for that API regardless of how a chart is configured.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="s03_00">Deployment Architecture</h2>
<p>The API Gateway and Envision are two different products, but they both are deployed using the Akana Platform. Therefore they can be deployed separately or together. The following section will describe a few options for deploying the two products together. In all deployment options the MongoDB NoSQL database is depicted as a single object however it can be clustered, sharded, and scaled in multiple ways which is out of the scope of this document.</p>
<p>In this section:</p>
<ul>
	<li><a href="#s03_01">Separate Containers</a></li>
	<li><a href="#s03_02">Shared Consoles</a></li>
	<li><a href="#s03_03">All-in-One</a></li>
	<li><a href="#s03_04">Remote Metrics Collection</a></li>
	<li><a href="#s03_05">Direct Metrics Collection</a></li>
</ul>


<h3 id="s03_01">Separate Containers</h3>
<p>In this deployment Policy Manager and Envision are installed on two completely separate containers. They each will have their own HTTP host and/or port when accessing the two consoles from a browser. Each container will access the same MongoDB NoSQL database. Each product can be scaled independently.</p>
<p><img src="assets/ag_analytics_03_01.jpg" alt=""/></p>


<h3 id="s03_02">Shared Consoles</h3>
<p>In this deployment the Policy Manager services and jobs will be installed on separate containers from the Policy Manager Console and Envision. Since both the Policy Manager Console and Envision features are driven primarily by end-user interaction they may share more common scaling demands then those of the Policy Manager jobs and services which are driven by a scheduler and Network Director interaction. Scaling can then be accommodated differently for web traffic than back-end traffic. In this deployment both the Policy Manager Console and Envision can share the same host and port. Both containers would still access the same MongoDB NoSQL database.</p>
<p><img src="assets/ag_analytics_03_02.jpg" alt=""/></p>


<h3 id="s03_03">All-in-One</h3>
<p>In this deployment the Policy Manager Console, Services, Jobs, and Envision are all installed on the same container. This deployment offers the least flexibility in scaling options but is the simplest deployment for small scale environments.</p>
<p><img src="assets/ag_analytics_03_03.jpg" alt=""/></p>


<h3 id="s03_04">Remote Metrics Collection</h3>
<p>In this deployment the Network Director will report the metrics it collects to the Policy Manager through a remote API. The Policy Manager will access the MongoDB NoSQL database. The Network Director will not require a route to the MongoDB database.</p>
<p><img src="assets/ag_analytics_03_04.jpg" alt=""/></p>


<h3 id="s03_05">Direct Metrics Collection</h3>
<p>In this deployment the Network Director reports the metrics it collects directly to the same MongoDB NoSQL database that the Policy Manager (and Envision) accesses.</p>
<p><img src="assets/ag_analytics_03_05.jpg" alt=""/></p>
<p><a href="#top">Back to top</a></p>



<h2 id="s04_00">Installation</h2>
<p>A set of plugins are provided that provide the analytics connector and security plugin capabilities. These plugins act as a bridge between the API Gateway (Policy Manager) and Envision products. In order for them to function properly, the Policy Manager, Envision, and PM Analytics Plugin repositories need to be installed in the same root Akana directory. To do this you must download and unzip the Envision, Policy Manager, and PM Analytics Plugin zip files in the same location. The resulting directory structure should resemble the following:</p>
<p><img src="assets/ag_analytics_04_01.jpg" alt=""/></p>
<p>Note the <strong>pm</strong>, <strong>analytics</strong>, and <strong>pm-analytics</strong> directories in the <strong>lib</strong> directory. When viewing the repositories in the admin console of an Akana container (process) you should see both repositories, as seen below.</p>
<p><img src="assets/ag_analytics_04_02.jpg" alt=""/></p>
<p>The plugins needed for product integration are as follows:</p>
<ul>
	<li><strong>Akana MongoDB Support</strong>&#8212;This plugin is installed automatically when installing the Akana Envision Policy Manager Console Extensions or the Akana Envision Policy Manager Service Extensions plugins. It is not installed automatically by the Akana Envision Metrics Collector plugin which uses the remote metrics reporting API by default. It can however be installed on a container with the Network Director feature to enable direct storage to a MongoDB NoSQL database instead of using the remote API.</li>
	<li>If you are using Akana Envision&#8212;the Envision plugins. For more details, refer to the Envision documentation: <a href="../../ev/envision_install/using_envision_console_extensions.htm#ev_install_02_00">Envision Plug-Ins</a>. Summary info below:
		<ul>
			<li><strong>Akana Envision Metrics Collector</strong>&#8212;See <a href="../../ev/envision_install/using_envision_console_extensions.htm#ev_install_02_01">Akana Envision Metrics Collector</a>.</li>
			<li><strong>Akana Envision Policy Manager Console Extensions</strong>&#8212;See <a href="../../ev/envision_install/using_envision_console_extensions.htm#ev_install_02_02">Akana Envision Policy Manager Console Extensions</a>.</li>
			<li><strong>Akana Envision Policy Manager Service Extensions</strong>&#8212;See <a href="../../ev/envision_install/using_envision_console_extensions.htm#ev_install_02_03">Akana Envision Policy Manager Service Extensions</a>.</li>
			<li><strong>Akana Policy Manager Security Provider for Envision</strong>&#8212;See <a href="../../ev/envision_install/using_envision_console_extensions.htm#ev_install_02_03">Akana Envision Policy Manager Service Extensions</a>.</li>
	</ul>
<p><strong>Note</strong>: There is an additional, optional plugin for Envision, the <strong>Akana Sample Datasets for Demo Charts</strong>, that installs sample datasets for use in the Envision Console. See <a href="../../ev/envision_install/using_sample_data_sets_for_demo_charts.htm">Using the Akana Sample Datasets for Demo Charts Feature</a>.</p>
	</li>
</ul>

<p>The plugins should all be available in the Available Plug-Ins page.</p>
<p><img src="assets/ag_analytics_04_03.jpg" alt=""/></p>
<p>Determining which container to install a plugin on depends on which deployment architecture you are following (see <a href="#s03_00">Deployment Architecture</a>). The key is that each plugin supports certain features as noted above and that the plugins need to be installed on the same container as the supported feature. The configuration of the Akana MongoDB Support plugin is described below. For information on the Akana Envision plugins, refer to the Envision documentation: <a href="../../ev/envision_install/using_envision_console_extensions.htm#ev_install_02_00">Envision Plug-Ins</a>.</p>


<h3 id="s04_01">Akana MongoDB Support Plugin</h3>
<p>This plugin has only one configuration setting, the URI of the MongoDB database. This URI includes the host and port of the database server as well as the database name in the path. By default the name of the database installed for all Akana products is <strong>SOA</strong>.</p>
<p><img src="assets/ag_analytics_04_04.jpg" alt=""/></p>
<p>If the plugin is installed with the Network Director feature writing directly to the MongoDB database will require the <strong>usage.local.writer.enabled</strong> configuration option in the <strong>com.soa.monitor.usage configuration</strong> category to be set to <strong>true</strong>, as shown below.</p>
<p><img src="assets/ag_analytics_04_05.jpg" alt=""/></p>
<p><a href="#top">Back to top</a></p>


<h3 id="s04_01b">Akana Administration Console Configuration Settings for MongoDB</h3>
<p>This section includes information on the settings you might need to review or adjust for MongoDB management.</p>

<h4>Configuration category: com.soa.persistence.mongodb</h4>
<dl>
<dt>persistence.mongodb.async.thread</dt>
<dd>The number of threads allocated for processing asynchronous requests.</dd>


<dt>persistence.mongodb.autoinstall</dt>
<dd>Allows you to enable or disable automatic installation of seeders.</dd>
<dd>Default: false.</dd>


<dt>persistence.mongodb.enabled</dt>
<dd>Allows you to enable or disable use of MongoDB as NoSQL persistence database.</dd>
<dd>As long as you are using MongoDB, do not change this setting. The platform default, when MongoDB is not in use, is the RDBMS.</dd>


<dt>persistence.mongodb.mapReduceMaxExecTime</dt>
<dd>The maximum execution time for a <a href="../../cm/learnmore/basics_glossary.htm#gl_mapreduce">MapReduce</a> job to run (in minutes). If maximum execution time is exceeded, the job aborts, and must be recovered by the recovery job.</dd>
<dd><strong>Note</strong>: We recommend a long timeout value, such as the default 10 minutes. It's best to have a scenario where the maximum execution time is never exceeded. If you are experiencing timeouts, you can adjust the setting to either reduce the maximum batch size or increase the execution time. For a long-term traffic increase, the best solution is to add additional MongoDB shards to share the load.</dd>
<dd>Default: 10 minutes.</dd>


<dt>persistence.mongodb.mongoClientURI</dt>
<dd>Provide the seed list of host and IP addresses for query routers for fault-tolerance. For more information, refer to the driver documentation.</dd>
<dd>Example: <strong>mongodb://mongos1:27017,mongos2:27017,mongos3:27017/Akana?connectTimeoutMS=15000&amp;socketTimeoutMS=1500000&amp;minPoolSize=0&amp;maxPoolSize=100&amp;waitQueueMultiple=5&amp;waitQueueTimeoutMS=10000</strong>.</dd>
<dd>This is the URI format for defining connections between applications and Envision MongoDB instances. Optional parameters:
	<ul>
		<li>authSource&#8212;An authMechanism must be configured if the user wants to enable MongoDB's access control.</li>
		<li>connectTimeoutMS&#8212;The time in milliseconds to attempt a connection before timing out.</li>
		<li>socketTimeoutMS&#8212;The time in milliseconds to attempt a send or receive on a socket before the attempt times out.</li>
		<li>minPoolSize&#8212;The minimum number of connections in the connection pool.</li>
		<li>maxPoolSize&#8212;The maximum number of connections in the connection pool.</li>
		<li>waitQueueMultiple&#8212;A number that driver multiples the maxPoolSize value to provide the maximum number of threads allowed to wait for a connection to be available from pool.</li>
		<li>waitQueueTimeoutMS&#8212;The maximum time in milliseconds that a thread can wait for a connection to become available.</li>
	</ul>
</dd>
<dd>Provide the access control details in case the MongoDB instances are running with auth flag enabled.</dd>
<dd>The following example shows the access control mechanism for SCRAM-SHA1: <strong>mongodb://{username}:{password}@localhost:27017/Akana?authSource=admin&amp;authMechanism=SCRAM-SHA-1&amp;connectTimeoutMS=15000&amp;socketTimeoutMS=1500000&amp;minPoolSize=0&amp;maxPoolSize=100&amp;waitQueueMultiple=5&amp;waitQueueTimeoutMS=10000</strong>.</dd>


<dt>persistence.mongodb.password</dt>
<dd>The password for connecting to the MongoDB database.</dd>


<dt>persistence.mongodb.rollup.maxBatchSize</dt>
<dd>The maximum number of raw records that can be rolled up in one batch.</dd>


<dt>persistence.mongodb.rollup.maxRecoveryBatchSize</dt>
<dd>The maximum number of raw records in a batch, for a recovery job.</dd>


<dt>persistence.mongodb.rollup.skipRecoveryIteration</dt>
<dd>The number of iterations to skip before running the recovery jobs.</dd>


<dt>persistence.mongodb.username</dt>
<dd>The username for connecting to the MongoDB database.</dd>
</dl>


<h3 id="s04_01c">Managing the Map/Reduce maxBatchSize Settings</h3>
<h4 class="stamp">Valid in Version: 2020.2.0 and later</h4>
<p>In 2020.2.0, you can configure the size of the data chunk that MongoDB processes.</p>
<p>Of course, execution time varies according to the size and number of records to be processed. In general, it's a good idea to keep execution time below one minute.</p>
<p>As an administrator, it's helpful to be able to control the number of records that a Mongo <a href="../../cm/learnmore/basics_glossary.htm#gl_mapreduce">MapReduce</a> operation will attempt at any one time. If there is too much data for the MongoDB cluster to handle in one go, this could cause a crash or at least delay the processing of the information. In version 2020.2.0 and later, you can adjust the size of the batch size using the <strong>maxBatchSize</strong> configuration property.</p>
<p>If the batch size is too small for the throughput requirements of the deployment, the best solution is to add additional MongoDB shards to share the load.</p>
<p><a href="#top">Back to top</a></p>



<h2 id="s05_00">Usage/Enhancements</h2>
<p>As described earlier there are plugins that are enhance both the API Gateway as wells as Envision. The following sections describe the enhanced user experience from the perspective of each product.</p>
<p>In this section:</p>
<ul>
	<li><a href="#s05_01">API Gateway Enhancements</a></li>
	<li><a href="#s05_02">Business Metrics Policy</a></li>
	<li><a href="#s05_03">Business Service Level Policy</a></li>
	<li><a href="#s05_04">Operational Metrics Policy</a></li>
</ul>


<h3 id="s05_01">API Gateway Enhancements</h3>
<p>With the installation of the Envision plugins in the API Gateway business metrics collection and SLA enforcement can now be controlled through the use of two policies, the Business Metrics Operational Policy and the Business Service Level QoS Policy. This section will describe how these policies are used with detailed examples.</p>


<h3 id="s05_02">Business Metrics Policy</h3>
<p>The Business Metrics policy provides instructions for extracting data from processed messages and mapping that data to fields in an Envision dataset. To create a Business Metrics policy, select the Business Metrics policy type in the first page of the Create Operational Policy wizard.</p>
<p><img src="assets/ag_analytics_05_01.jpg" alt=""/></p>
<p>The Business Metrics policy editor is a multi-page wizard. On the first page you select the dataset you want to fill with the policy.</p>
<p><img src="assets/ag_analytics_05_02.jpg" alt=""/></p>
<p>A pull-down at the top will display the public datasets created in Envision as well as the logged in user's private datasets in Envision (if any). The dimensions and metrics for the selected dataset are displayed in read-only tables to ensure the correct dataset is selected.</p>
<p>The next four pages provide instructions for the creation of structures, variables, dimensions, and metrics. Dimensions and metrics have been discussed already. A variable is a value that doesn't correspond one-to-one with a dimension or metric in the target dataset, but it can be used in an expression that will result in the creation of a dimension or metric. It can be used in multiple expressions in fact so it provides an opportunity for reuse and optimization by instructing the engine to perform a function once instead of repeatedly.</p>
<p>A structure models a sub-component of request or response message that may appear multiple times. For example if there are several items with their own properties that appear in a purchase transaction each item would be a structure. It is necessary to identify structures if dimensions or metrics are found in these sub-components and they need to be grouped together for aggregation. For example if each item in a purchase has a type and a price, in order for the aggregation engine to sum prices by type price cannot be collected without associating it to, or grouping it with, the type.</p>
<p>All four pages are organized in a similar way and provide similar capabilities. A table at the top of the page identifies the items being populated, structures, variables, dimensions, or metrics. For dimensions and metrics those tables are static as the rows are populated from the dataset definition in Envision. Structures and variables on the other hand can be added and removed.</p>
<p><img src="assets/ag_analytics_05_03.jpg" alt=""/></p>
<p>To create a variable, select <strong>Add</strong> from the <strong>Variables</strong> table.</p>
<p><img src="assets/ag_analytics_05_04.jpg" alt=""/></p>
<p>A new row will be added in the table. Each cell of the row is editable. The Type cell is a pull-down of the variable types supported which correspond to the types supported for metrics and dimensions by Envision.</p>
<p>Structures do not have a type. Instead they are mapped to Groups defined in a Dataset.</p>
<p><img src="assets/ag_analytics_05_05.jpg" alt=""/></p>
<p>The Group column in the Payload Structures table holds a pull-down populated with all the Groups identified in a Dataset. The user selects a Group in the pull-down to associate the structure with the Group.</p>
<p>When any row of the target tables (structures, variables, dimensions, metrics) are selected the page is expanded to include options for how to extract or derive the value for the item identified by the selected row. Those options will described in more detail below. When finished configuring those options select Apply on the bottom right of the page. A checkmark will be displayed to the left of the item's row indicating its value has been defined.</p>
<p><img src="assets/ag_analytics_05_06.jpg" alt=""/></p>
<p>To start over again with those options select Clear. To delete a variable select the row identifying the variable to delete and select Remove.</p>
<p>For any selected item in a target table (variable, dimension, metric) its value can be generated by either extraction or derivation as identified by the Extract and Derive radio buttons.</p>

<h4 id="value_extraction">Value Extraction</h4>
<p>Value Extraction is the act of filling the value of a targeted item (structure, variable, dimension, variable) with data found in the exchange of messages between a client and an API/service. To extract data from the message exchange we must first identify the source of the extraction. This is identified using the Source pull-down. The options are:</p>
<ul>
	<li><strong>Request Payload</strong>&#8212;Body of the message sent by the client.</li>
	<li><strong>Request Header</strong>&#8212;Header of the message sent by the client</li>
	<li><strong>Response Payload</strong>&#8212;Body of the message returned by the service.</li>
	<li><strong>Response Header</strong>&#8212;Header of the message returned by the service.</li>
	<li><strong>Fault Payload</strong>&#8212;Body of the fault message returned by the service.</li>
	<li><strong>Fault Header</strong>&#8212;Header of the fault message returned by the service.</li>
	<li><strong>Form Parameter</strong>&#8212;Form parameter in the request message if form encoded.</li>
	<li><strong>Path Parameter</strong>&#8212;Path parameter in the requested URL as defined in the service's metadata.</li>
	<li><strong>Query Parameter</strong>&#8212;Query parameter in the requested URL.</li>
	<li><strong>&lt;Structure&gt;</strong>&#8212;Each structure defined on the Structures page will appear as an option in the Source pull-down. When selecting the structure as the source any expressions used to dictate how to extract the variable, dimension, or variable will be performed within the context of the structure. If multiple structures are found while executing the policy the expressions for extracting variables, dimensions, or variables will be executed for each structure found producing multiple results.</li>
</ul>
<p>Only <strong>Request Payload</strong>, <strong>Response Paylo</strong>ad, and <strong>Fault Payload</strong> are available when defining a structure. When extracting data from a payload, request, response, or fault, you specify a path to, or location of, the value you want to extract from the payload content. This path is described using either XPath for XML payloads, JSONPath for JSON payloads, or RegEx for any payload as selected from the <strong>Path</strong> pull-down.</p>
<p>You then enter the path using the selected path language in the text box to the right. As a convenience a text area where you can paste a sample message payload is provided below and a Test button so that you can verify the path you enter will return the correct information.</p>
<p><img src="assets/ag_analytics_05_07.jpg" alt=""/></p>
<p>In the illustration above we have chosen to fill the Store dimension with the text from the <strong>store</strong> element in the Request Payload using XPath.</p>
<p>In some situations there are multiple values that the path expression will match. By default the values are concatenated in a comma delimited string. If you would like to do something with the individual values select the Multi-Valued checkbox. Once selected a pull-down of additional options will be displayed to its right. The options displayed are specific to the type of item you are trying to provide a value to.</p>
<p>For a Number or Currency the options are:</p>
<ul>
	<li><strong>Add All</strong>&#8212;Sums the values.</li>
	<li><strong>Get Maximum</strong>&#8212;Selects the largest value.</li>
	<li><strong>Get Minimum</strong>&#8212;Selects the smallest value.</li>
	<li><strong>Get First</strong>&#8212;Selects the first value.</li>
	<li><strong>Get Last</strong>&#8212;Selects the last value.</li>
	<li><strong>Number of Values</strong>&#8212;Returns a count of the matching values.</li>
	</ul>
<p>For Text the options are:</p>
<ul>
	<li><strong>Get First</strong>&#8212;Selects the first value.</li>
	<li><strong>Get Last</strong>&#8212;Selects the last value.</li>
	<li><strong>Number of Values</strong>&#8212;Returns a count of the matching values.</li>
</ul>
<p>The Test button can be used to test each of these functions. In the illustration below we are assigning the sum of the quantity field for each line item of a purchase to the quantity variable.</p>
<p><img src="assets/ag_analytics_05_08.jpg" alt=""/></p>

<h4 id="value_derivation">Value Derivation</h4>
<p>Value Derivation is the act of filling the value of a targeted item (variable, dimension, variable) from constants or expressions. The expressions can reference variables whose values are filled through data extraction so derivation can indirectly utilize extraction.</p>
<p>When the <strong>Derive</strong> radio button is selected, a pull-down of the following derivation options is displayed.</p>
<h4>Constant</h4>
<p>The value of the target item is assigned the literal value entered in the text box to the right. The literal value should match the type of the item. For example entering <strong>foo</strong> in the text box for a NUMBER variable would be an error.</p>
<p>The following illustration demonstrates the creation of a variable that can be used to identify something that is not applicable with the value of <strong>N/A</strong>.</p>
<p><img src="assets/ag_analytics_05_09.jpg" alt=""/></p>
<h4>Simple Expression</h4>
<p>The value of the target item is filled by the result of an expression written using the Unified Expression Language (UEL) as described as part of JSR-245. Other variables can be referenced in the expression simply by using their names. For example</p>
<h4>Spring Expression</h4>
<p>The value of the target item is filled by the result of an expression written using the Spring Expression Language (SpEL).</p>
<h4>Operational Metric</h4>
<p>The value of the target item is filled with a value of one of the standard operational dimensions or metrics. When this option is selected a pull-down with the acceptable values will be displayed to the right.</p>
<h4>Addresses</h4>
<p>An Address dimension type is actually stored as a structure with a zip code, city, state, latitude, and longitude. The job of the Business Metrics policy is to extract or derive a single field of this structure. The Akana Envision Policy Manager Service Extensions plugin will fill the rest of the fields in the structure. The policy does not require the identification of which field is being populated initially. The system will determine which field is being populated by querying the geolocation data in the database. First it checks to see if the value collected by the policy is a zip code, then a city, then state, and finally country. Once this has been determined the system will populate the latitude and longitude fields as well. These become useful when using maps in Envision.</p>


<h3 id="s05_03">Business Service Level Policy</h3>
<p>The Business Service Level policy provides the ability to define a Service Level Agreement (SLA) based on dataset defined in Envision instead of the standard operational metrics provided by Policy Manager. For example, an SLA can be created based on the number of items sold, or the number of calls made from a particular user-agent. To create a Business Service Level Policy select the Business Service Level Policy type in the first page of the Create QoS Policy wizard.</p>
<p><img src="assets/ag_analytics_05_10.jpg" alt=""/></p>
<p>The Business Service Level Policy editor is a multi-page wizard. On the first page you select the dataset you want to use as the basis of the policy.</p>
<p><img src="assets/ag_analytics_05_11.jpg" alt=""/></p>
<p>Next you select what records in the dataset you want the metrics to measure the service level with. Essentially you are defining a query, or filter.</p>
<p><img src="assets/ag_analytics_05_12.jpg" alt=""/></p>
<p>If you want the metrics to be aggregated for all records in the dataset nothing need be selected on the screen. However if you want to filter the records by one or more dimensions, select those dimensions. In the text fields to the right of the selected dimensions enter the values of the dimensions you want to filter by. In the illustration above we are filtering the dataset to only the transactions made at the LA and SD stores.</p>
<p>Next define the rules for the policy. This page is identical to the standard Policy Manager Service Level Policy. You select an alert code to generate when an expression is met in a specified interval.</p>
<p><img src="assets/ag_analytics_05_13.jpg" alt=""/></p>
<p>What makes this different than the standard service level policy is the metrics to choose from are those collected in the selected dataset. As seen above an alert will be generated with over 10000 shoes of a certain style are sold in a day.</p>
<p>The final page is for defining the times that the policy should govern. This is also the same as the standard Policy Manager Service Level Policy.</p>
<p><img src="assets/ag_analytics_05_14.jpg" alt=""/></p>
<p>The policy acts in a similar way to the standard service level policy. Alerts are generated when the expressions are met. As long as the expressions continue to be met on subsequent intervals nothing more is done. Once the expression is no longer met a <strong>clear</strong> alert is generated.</p>


<h3 id="s05_04">Operational Metrics Policy</h3>
<p>The Operational Metrics Policy is a more flexible option to the standard Policy Manager Metrics Policy. It allows you to specify what operational metrics to collect for an API in a more specific way. To create an Operational Metrics Policy select the Operational Metrics Policy type in the first page of the Create Operational Policy wizard.</p>
<p><img src="assets/ag_analytics_05_15.jpg" alt=""/></p>
<p>The Operational Metrics Policy editor is a single page. On this page you select the metrics you want to collect and the dimensions you want to group the data by so that the data can be filtered in Envision when creating charts.</p>
<p><img src="assets/ag_analytics_05_16.jpg" alt=""/></p>
<p>The metrics that can be collected are the same metrics collected by Policy Manager. The difference here is not all of them MUST be collected if they are not useful.</p>
<p>Many of the dimensions that can be used to group the aggregated metrics are also the same as those used by Policy Manager, Contract, License Terms, Failure Type (did the call result in an error or not). In addition the following dimensions can be used.</p>
<ul>
	<li><strong>Client Region</strong>&#8212;The location of the client making the call. It is the latitude and longitude of the client IP address.</li>
	<li><strong>Downstream URL</strong>—URL of the downstream service invoked (if any).</li>
	<li><strong>Device Type</strong>&#8212;Type of device making the call. This is derived from the User-Agent header.</li>
	<li><strong>Status</strong>&#8212;Status code returned to the client making the call.</li>
	<li><strong>Platform Type</strong>&#8212;Type of platform, or operating system, making the call. This is derived from the User-Agent header.</li>
	<li><strong>Client IP</strong>&#8212;IP Address of the client making the call.</li>
	<li><strong>User Agen</strong>t&#8212;Value of the User-Agent header (if any).</li>
	<li><strong>Authenticated Subject</strong>&#8212;The authenticated caller (if any).</li>
</ul>
<p><a href="#top">Back to top</a></p>



<h2 id="s06_00">Use Case&#8212;Point of Sale Metrics for Shoe Retailer</h2>
<p>To help provide a better understanding of the API Gateway enhancements described earlier a use case will be explored in depth. The use case will center on a fictional shoe retailer ACME whose point of sale terminals communicate with a central purchasing SOAP based web service. Each transaction will be processed by the API Gateway. The retailer will use a Business Metrics policy to collect information about the transactions and feed them to Envision for aggregation and charting.</p>
<p>ACME has three brick and mortar stores in Los Angeles, San Francisco, and San Diego. The company sells three styles of shoes, high tops, mid tops, and low tops. ACME would like to track the sales of their shoes in a few different ways:</p>
<ul>
	<li>Total company sales (minus sales tax)</li>
	<li>Total sales (minus sales tax) of each store</li>
	<li>Quantity sold by each store</li>
	<li>Quantity sold of each style</li>
	<li>Quantity sold of each style by each store</li>
	<li>Total sales (minus sales tax) by customer zip code</li>
	<li>Quantity sold of each style of shoe by customer zip code</li>
</ul>
<p>In this section:</p>
<ul>
	<li><a href="#s06_01">The API</a></li>
	<li><a href="#s06_02">The Dataset</a></li>
	<li><a href="#s06_03">The Policy</a></li>
	<li><a href="#s06_04">The Charts</a></li>
	<li><a href="#s06_05">The Dashboard</a></li>
</ul>


<h3 id="s06_01">The API</h3>
<p>As mentioned already ACME uses a SOAP web service to connect its point of sale terminals to its backend purchasing system. A sample of the SOAP payload for a transaction is as follows:</p>
<pre>01) &lt;soapenv:Envelope xmlns:soapenv="…"&gt;
02)   &lt;soapenv:Header /&gt;
03)   &lt;soapenv:Body&gt;
04)     &lt;sho:purchase xmlns:sho="http://acme.com/api/shoepos"&gt;
05)       &lt;sho:store&gt;LA&lt;/sho:store&gt;
06)       &lt;sho:terminal&gt;1&lt;/sho:terminal&gt;
07)       &lt;sho:clerk&gt;1001&lt;/sho:clerk&gt;
08)       &lt;sho:items&gt;
09)         &lt;sho:item&gt;
10)           &lt;sho:style&gt;mid&lt;/sho:style&gt;
11)           &lt;sho:quantity&gt;1&lt;/sho:quantity&gt;
12)           &lt;sho:unitPrice&gt;40.00&lt;/sho:unitPrice&gt;
13)         &lt;/sho:item&gt;
14)         &lt;sho:item&gt;
15)           &lt;sho:style&gt;low&lt;/sho:style&gt;
16)           &lt;sho:quantity&gt;2&lt;/sho:quantity&gt;
17)           &lt;sho:unitPrice&gt;35.00&lt;/sho:unitPrice&gt;
18)         &lt;/sho:item&gt;
19)       &lt;/sho:items&gt;
20)       &lt;sho:subtotal&gt;110.00&lt;/sho:subtotal&gt;
21)       &lt;sho:tax&gt;8.80&lt;/sho:tax&gt;
22)       &lt;sho:total&gt;118.80&lt;/sho:total&gt;
23)       &lt;sho:customerZip&gt;90001&lt;/sho:customerZip&gt;
24)       &lt;sho:transactionTime&gt;2002-05-30T09:30:00Z&lt;/sho:transactionTime&gt;
25)     &lt;/sho:purchase&gt;
26)   &lt;/soapenv:Body&gt;
27) &lt;/soapenv:Envelope&gt;</pre>
<p>In the above:</p>
<ul>
	<li>The purchase starts on line 04.</li>
	<li>The store where the purchase was made is on line 05. The possible values are LA, SF, and SD.</li>
	<li>The terminal used to make the purchase is on line 06.</li>
	<li>The sales clerk who performed the transaction is on line 07.</li>
	<li>A customer can purchase multiple shoes in a single transaction. They are listed within the <strong>items</strong> element on line 08.</li>
	<li>There is a single <strong>item</strong> representing 0 or more shoes of a single style being purchased in the transaction. In this example a single mid top shoe is sold on lines 09&#8211;13.</li>
	<li>The style is identified on line 10.</li>
	<li>The quantity is on line 11.</li>
	<li>The price for a mid top shoe at the time of the purchase was $40 as stated on line 12.</li>
	<li>Lines 14&#8211;18 state that the customer also purchased two low top shoes at a price of $35 each.</li>
	<li>The subtotal (without tax) of the total purchase is on line 20.</li>
	<li>The sales tax for the purchase is on line 21.</li>
	<li>The total transaction amount (including tax) is on line 22.</li>
	<li>When a purchase is made the customers ZIP code is collected and recorded on line 23.</li>
	<li>The time of the transaction is on line 24. Due to system latency it may not be the same time as the gateway will process or record the data about the transaction.</li>
</ul>
<h3 id="s06_02">The Dataset</h3>
<p>The first step in achieving the goals described in this use case is to define a Dataset for the purchases in Envision.</p>
<p>The Dataset is named <strong>Shoe POS Sales</strong>.</p>
<p><img src="assets/ag_analytics_05_17.jpg" alt=""/></p>
<p>By selecting the PM Security Filter any data displayed in charts and dashboards will be secured by the Policy Manager security system. Only users with access to the APIs reporting the metrics will be able to view the information.</p>
<p><img src="assets/ag_analytics_05_18.jpg" alt=""/></p>
<p>There are dimensions for each of the queries ACME wants to perform, Store, Customer Zip, and Style. The Customer Zip dimension is an ADDRESS instead of TEXT so that maps can be used to geographically view data. Note that because there may be multiple line items in a purchase there may be multiple shoe styles in a since purchase. Therefore the <strong>Style</strong> dimension is associated with a Group named <strong>Item</strong>. As we'll see in the metrics, the <strong>Item</strong> Group will include all information about a purchase line item. Finally a Transaction Date dimension is added for querying based on time (what will become our X-Axis) as this information is provided in the POS API and can be different than the time the data is collected in the gateway (Create Time).</p>
<p><img src="assets/ag_analytics_05_19.jpg" alt=""/></p>
<p>There are Metrics for each of the measurements ACME wants to take, Transaction Subtotal, Style Subtotal, and Style Quantity. ACME's measurements only require sums, so only the SUM aggregation need be performed on each metric. Since there may be multiple styles sold in a single transaction the style specific metrics are placed in the <strong>Item</strong> group along with the <strong>Style</strong> dimension.</p>
<p><img src="assets/ag_analytics_05_20.jpg" alt=""/></p>
<p>Because aggregation will be performed using the transaction date at the point of sale terminal the aggregate operator is set to the <strong>Transaction Date</strong> dimension. ACME is headquartered in Los Angeles so when determining the boundaries of daily metrics the America/Los_Angeles time zone is used.</p>


<h3 id="s06_03">The Policy</h3>
<p>A Business Metrics policy is created in Policy Manager named <strong>Shoe POS Metrics Policy</strong>.</p>
<p><img src="assets/ag_analytics_05_21.jpg" alt=""/></p>
<p>The policy fills the Shoe POS Sales dataset. There is one structure defined named <strong>Item</strong> that corresponds to the <strong>Item</strong> group in the Dataset.</p>
<p><img src="assets/ag_analytics_05_22.jpg" alt=""/></p>
<p>The <strong>Item</strong> structure is identified in the message using an XPath expression. When tested against the sample message described previously the XPath expression returns the <strong>shoe:item</strong> elements in the message. All subsequent XPath expressions for metrics and dimensions in the <strong>Item</strong> group will be performed relative to each of the <strong>shoe:item</strong> elements in the message.</p>
<p>There are no variables defined in the policy. Each of the dimensions are extracted from the message using XPath expressions.</p>
<p><img src="assets/ag_analytics_05_23.jpg" alt=""/></p>
<p><img src="assets/ag_analytics_05_24.jpg" alt=""/></p>
<p>The <strong>Style</strong> dimension is in the Item group so its XPath expression is evaluated relative to each of the <strong>shoe:item</strong> elements in the message. When tested against our sample two styles are returned.</p>
<p>The metrics are defined in a similar way to the dimensions.</p>
<p><img src="assets/ag_analytics_05_25.jpg" alt=""/></p>
<p>The <strong>Style Subtotal</strong> metric poses a challenge because there is not a single element in the message that provides this number. It is calculated by multiplying the sho:quantity by the sho:unitPrice. When testing the expression both subtotals are shown. During actual execution of the policy these subtotals, along with the <strong>Style Quantity</strong> metric expression results, will be grouped together in order to not lose their correlation. So instead of three separate arrays for style, quantity, and price there will be a single array of structures where each structure will have a style, quantity, and price.</p>
<p>With a Dataset and policy now defined, once the policy is attached to the POS API in Policy Manager the Network Director can now begin capturing and storing metrics. The data will be aggregated according to the Dataset settings.</p>


<h3 id="s06_04">The Charts</h3>
<p>ACME has created charts to visualize each of the measurements stated in the use case introduction. In a real-world scenario, their charts might be tracking data by the month, but in these examples the charts will track by hours so that users trying to use the examples as learning tools can see faster results. A filter is applied to all charts that will only display the data for the last day.</p>
<p>The first chart is a combination chart that displays company wide sales and the sales for each store.</p>
<p><img src="assets/ag_analytics_05_26.jpg" alt=""/></p>
<p>The first chart in the combination is a standard column chart with a column per store representing the total sales for a given hour. The second chart is a standard line chart with a single line reflecting the sum of all transactions made using the POS API. There is no Drilldown capability defined so both charts will be displayed at the same time. The column chart is defined first so that the line of the line chart will be layered on top.</p>
<p>Both charts in the combination use the Shoe POS Sales dataset as their source with the Hours Duration. The store chart uses the Store Dimension for Data Grouping. The company chart has no grouping as the measurements should be summed without breaking them down in any way.</p>
<p><img src="assets/ag_analytics_05_27.jpg" alt=""/></p>
<p>The measurements will be displayed over time. The X-Axis <strong>Value Ref</strong> will therefore use a date field. The Transaction Date is used as opposed to the Create Time to be more reflective of the time at the terminals.</p>
<p><img src="assets/ag_analytics_05_28.jpg" alt=""/></p>
<p>The data series for store sales uses the Transaction Subtotal metric for the Y-Axis <strong>Metric</strong>. The <strong>Aggregation Operator</strong> is Sum. The <strong>Label Ref</strong> is the Store dimension so there will be a separate column for each store's subtotal.</p>
<p><img src="assets/ag_analytics_05_29.jpg" alt=""/></p>
<p>The data series for corporate sales also uses the Transaction Subtotal metric for the Y-Axis <strong>Metric</strong>. The <strong>Aggregation Operator</strong> is Sum as well. Since there is no <strong>Data Grouping</strong> there is no selection for <strong>Label Ref</strong> and there is only one line drawn for the subtotal.</p>
<p><img src="assets/ag_analytics_05_30.jpg" alt=""/></p>
<p>The second chart is a combination chart that displays the quantity sold by store, by style, and by style for a given store. The first chart in the combination is a standard column chart with a column per store representing the total sales for a given hour.</p>
<p><img src="assets/ag_analytics_05_31.jpg" alt=""/></p>
<p>The second chart is a standard line chart with a single line reflecting the sum of all transactions made using the POS API. There is no Drilldown capability defined so both charts will be displayed at the same time. The column chart is defined first so that the line of the line chart will be layered on top.</p>
<p>Both charts in the combination use the Shoe POS Sales dataset as their source with the Hours Duration. The store chart uses the Store Dimension for Data Grouping. The company chart has no grouping as the measurements should be summed without breaking them down in any way.</p>
<p><img src="assets/ag_analytics_05_32.jpg" alt=""/></p>
<p>The third chart is a combination chart that displays the quantity sold company wide and overlays the number of errors that have been reported by the API. It provides a quantitative impact of errors on the business. The first chart in the combination is a standard column chart with a column for the number of errors the API encountered. It uses the API Operational Metric Dataset to graph errors.</p>
<p><img src="assets/ag_analytics_05_33.jpg" alt=""/></p>
<p>The second chart in the combination is a standard line chart with a line for the total quantity sold over time. It uses the Shoe POS Sales dataset for the quantity. The X-Axis of the charts use different dimensions, Time Stamp vs Transaction Date, but as long as they have values that align the graphs overlay perfectly.</p>
<p><img src="assets/ag_analytics_05_34.jpg" alt=""/></p>


<h3 id="s06_05">The Dashboard</h3>
<p>ACME has created a single Dashboard that will display all the POS charts on a single page.</p>

<p><a href="#top">Back to top</a></p>
