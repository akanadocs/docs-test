<?xml version="1.0" encoding="UTF-8"?>
<wsdl:definitions targetNamespace="http://soa.com/uri/products/serviceadmin/wsdl/1.0" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:tns="http://soa.com/uri/products/serviceadmin/wsdl/1.0" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:nms3="http://www.w3.org/2005/Atom" xmlns:nms2="http://soa.com/uri/products/ServiceEndpointProperties/1.0" xmlns:nms1="http://soa.com/uri/products/restapi/xsd/1.0" xmlns:shttp="http://soa.com/wsdl/http">
  <wsdl:types>
    <xs:schema targetNamespace="http://www.w3.org/XML/1998/namespace" version="1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema">
<xs:attribute name="base" type="xs:anyURI"/>
<xs:attribute name="lang" type="xs:string"/>
</xs:schema>
    <xs:schema elementFormDefault="qualified" targetNamespace="http://soa.com/uri/products/ServiceEndpointProperties/1.0" version="1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema">
<xs:element name="ServiceEndpoint"><xs:complexType><xs:sequence><xs:element name="ServiceKey" type="xs:string"/><xs:element name="Name" type="xs:string"/><xs:element minOccurs="0" name="Description" type="xs:string"/><xs:element name="Url" type="xs:string"/><xs:element minOccurs="0" name="BindingQName" type="xs:string"/><xs:element minOccurs="0" name="PortName" type="xs:string"/><xs:element minOccurs="0" name="useType" type="xs:string"/><xs:element minOccurs="0" name="ConnectionProperties"><xs:complexType><xs:sequence><xs:element maxOccurs="unbounded" name="NameValue" type="ns1:NameValue" xmlns:ns1="http://soa.com/uri/products/ServiceEndpointProperties/1.0"/></xs:sequence></xs:complexType></xs:element><xs:element minOccurs="0" name="HeaderProperties"><xs:complexType><xs:sequence><xs:element maxOccurs="unbounded" name="NameValue" type="ns2:NameValue" xmlns:ns2="http://soa.com/uri/products/ServiceEndpointProperties/1.0"/></xs:sequence></xs:complexType></xs:element><xs:element minOccurs="0" name="MessageProperties"><xs:complexType><xs:sequence><xs:element maxOccurs="unbounded" name="NameValue" type="ns3:NameValue" xmlns:ns3="http://soa.com/uri/products/ServiceEndpointProperties/1.0"/></xs:sequence></xs:complexType></xs:element><xs:element minOccurs="0" name="Weight" type="xs:nonNegativeInteger"/><xs:element name="Protocol" type="xs:string"/><xs:element minOccurs="0" name="ProtocolVariant" type="xs:string"/><xs:element minOccurs="0" name="ContainerKey" type="xs:string"/><xs:element minOccurs="0" name="ListenerName" type="xs:string"/><xs:element minOccurs="0" name="ContextPath" type="xs:string"/></xs:sequence></xs:complexType></xs:element>
<xs:complexType name="NameValue"><xs:sequence><xs:element name="Name" type="xs:string"/><xs:element name="Value" type="xs:string"/></xs:sequence></xs:complexType>
</xs:schema>
    <xs:schema elementFormDefault="qualified" targetNamespace="http://www.w3.org/2005/Atom" version="1.0" xmlns:tns="http://www.w3.org/2005/Atom" xmlns:xs="http://www.w3.org/2001/XMLSchema">
<xs:import namespace="http://www.w3.org/XML/1998/namespace"/>
<xs:complexType name="atomLink"><xs:complexContent><xs:extension base="tns:atomCommonAttributes"><xs:sequence/><xs:attribute name="length" type="xs:string"/><xs:attribute name="title" type="xs:string"/><xs:attribute name="hreflang" type="xs:string"/><xs:attribute name="rel" type="xs:string"/><xs:attribute name="type" type="xs:string"/><xs:attribute name="href" type="xs:anyURI" use="required"/><xs:anyAttribute namespace="##other" processContents="skip"/></xs:extension></xs:complexContent></xs:complexType>
<xs:complexType name="atomCommonAttributes"><xs:sequence/><xs:attribute ref="xml:base"/><xs:attribute ref="xml:lang"/><xs:anyAttribute namespace="##other" processContents="skip"/></xs:complexType>
</xs:schema>
    <xs:schema elementFormDefault="qualified" targetNamespace="http://soa.com/uri/products/restapi/xsd/1.0" version="1.0" xmlns:ns1="http://www.w3.org/2005/Atom" xmlns:ns2="http://soa.com/uri/products/ServiceEndpointProperties/1.0" xmlns:tns="http://soa.com/uri/products/restapi/xsd/1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema">
<xs:import namespace="http://www.w3.org/2005/Atom"/>
<xs:import namespace="http://soa.com/uri/products/ServiceEndpointProperties/1.0"/>
<xs:element name="AssignAlias" type="tns:assignKeyAliasSpec"/>
<xs:element name="AvailablePKIManagementOptions" type="tns:availablePKIManagementOptions"/>
<xs:element name="CertificateInfo" type="tns:certificateInfo"/>
<xs:element name="DefinitionSpec" type="tns:definitionSpec"/>
<xs:element name="Endpoint"><xs:complexType><xs:sequence><xs:element minOccurs="0" name="Name" type="xs:string"/><xs:element minOccurs="0" name="Description" type="xs:string"/><xs:element minOccurs="0" name="BindingName" type="xs:string"/><xs:element minOccurs="0" name="BindingType" type="xs:string"/><xs:element minOccurs="0" name="ContainerKey" type="xs:string"/><xs:element minOccurs="0" name="ListenerName" type="xs:string"/><xs:element minOccurs="0" name="Path" type="xs:string"/><xs:element minOccurs="0" name="Url" type="xs:string"/><xs:element minOccurs="0" name="ProtocolVariant" type="xs:string"/><xs:element minOccurs="0" name="Properties"><xs:complexType><xs:sequence><xs:element maxOccurs="unbounded" minOccurs="0" name="Property" type="tns:nameValuePair"/></xs:sequence></xs:complexType></xs:element></xs:sequence></xs:complexType></xs:element>
<xs:element name="EndpointSpecs" type="tns:endpointSpecs"/>
<xs:element name="HostedService" type="tns:hostedService"/>
<xs:element name="NameValuePair" type="tns:nameValuePair"/>
<xs:element name="PKIAndCertificateInfo" type="tns:pkiAndCertificateInfo"/>
<xs:element name="PolicyAttachments" type="tns:policyAttachments"/>
<xs:element name="ProcessingOptions"><xs:complexType><xs:sequence><xs:element name="LogLevel" type="xs:int"/></xs:sequence></xs:complexType></xs:element>
<xs:element name="ServiceEndpointList" type="tns:serviceEndpointList"/>
<xs:element name="ServiceImportSpec"><xs:complexType><xs:sequence><xs:element minOccurs="0" ref="tns:ServiceSpec"/><xs:element minOccurs="0" ref="tns:DefinitionSpec"/></xs:sequence></xs:complexType></xs:element>
<xs:element name="ServiceSpec" type="tns:serviceSpec"/>
<xs:complexType name="hostedService"><xs:sequence><xs:element minOccurs="0" name="name" type="xs:string"/><xs:element minOccurs="0" name="description" type="xs:string"/><xs:element minOccurs="0" name="key" type="xs:string"/><xs:element minOccurs="0" name="qname" type="xs:string"/><xs:element minOccurs="0" name="organization" type="xs:string"/><xs:element minOccurs="0" name="Properties"><xs:complexType><xs:sequence><xs:element maxOccurs="unbounded" minOccurs="0" name="Property" type="tns:nameValuePair"/></xs:sequence></xs:complexType></xs:element><xs:element minOccurs="0" name="Links"><xs:complexType><xs:sequence><xs:element maxOccurs="unbounded" minOccurs="0" name="Link" type="ns1:atomLink"/></xs:sequence></xs:complexType></xs:element></xs:sequence></xs:complexType>
<xs:complexType name="nameValuePair"><xs:sequence><xs:element name="name" type="xs:string"/><xs:element minOccurs="0" name="value" type="xs:string"/></xs:sequence></xs:complexType>
<xs:complexType name="definitionSpec"><xs:sequence><xs:element minOccurs="0" name="Location" type="xs:string"/><xs:element minOccurs="0" name="UserName" type="xs:string"/><xs:element minOccurs="0" name="Password" type="xs:string"/><xs:element minOccurs="0" name="Format" type="xs:string"/></xs:sequence></xs:complexType>
<xs:complexType name="certificateInfo"><xs:sequence><xs:element minOccurs="0" name="subjectDN" type="xs:string"/><xs:element minOccurs="0" name="issuerDN" type="xs:string"/><xs:element minOccurs="0" name="serialNo" type="xs:string"/><xs:element name="effectiveDate" type="xs:long"/><xs:element name="expirationDate" type="xs:long"/></xs:sequence></xs:complexType>
<xs:complexType name="availablePKIManagementOptions"><xs:sequence><xs:element name="import" type="xs:boolean"/><xs:element name="export" type="xs:boolean"/><xs:element name="delete" type="xs:boolean"/><xs:element name="assign" type="xs:boolean"/></xs:sequence></xs:complexType>
<xs:complexType name="serviceEndpointList"><xs:sequence><xs:element maxOccurs="unbounded" minOccurs="0" name="endpoints" nillable="true"><xs:complexType><xs:sequence><xs:element ref="ns2:ServiceKey"/><xs:element ref="ns2:Name"/><xs:element minOccurs="0" ref="ns2:Description"/><xs:element ref="ns2:Url"/><xs:element minOccurs="0" ref="ns2:BindingQName"/><xs:element minOccurs="0" ref="ns2:PortName"/><xs:element minOccurs="0" ref="ns2:useType"/><xs:element minOccurs="0" ref="ns2:ConnectionProperties"/><xs:element minOccurs="0" ref="ns2:HeaderProperties"/><xs:element minOccurs="0" ref="ns2:MessageProperties"/><xs:element minOccurs="0" ref="ns2:Weight"/><xs:element ref="ns2:Protocol"/><xs:element minOccurs="0" ref="ns2:ProtocolVariant"/><xs:element minOccurs="0" ref="ns2:ContainerKey"/><xs:element minOccurs="0" ref="ns2:ListenerName"/><xs:element minOccurs="0" ref="ns2:ContextPath"/></xs:sequence></xs:complexType></xs:element><xs:element maxOccurs="unbounded" minOccurs="0" name="links" nillable="true" type="ns1:atomLink"/></xs:sequence></xs:complexType>
<xs:complexType name="endpointSpecs"><xs:sequence><xs:element maxOccurs="unbounded" minOccurs="0" name="EndpointSpecs"><xs:complexType><xs:sequence><xs:element minOccurs="0" name="Name" type="xs:string"/><xs:element minOccurs="0" name="Description" type="xs:string"/><xs:element minOccurs="0" name="BindingName" type="xs:string"/><xs:element minOccurs="0" name="BindingType" type="xs:string"/><xs:element minOccurs="0" name="ContainerKey" type="xs:string"/><xs:element minOccurs="0" name="ListenerName" type="xs:string"/><xs:element minOccurs="0" name="Path" type="xs:string"/><xs:element minOccurs="0" name="Url" type="xs:string"/><xs:element minOccurs="0" name="ProtocolVariant" type="xs:string"/><xs:element minOccurs="0" name="Properties"><xs:complexType><xs:sequence><xs:element maxOccurs="unbounded" minOccurs="0" name="Property" type="tns:nameValuePair"/></xs:sequence></xs:complexType></xs:element></xs:sequence></xs:complexType></xs:element></xs:sequence></xs:complexType>
<xs:complexType name="pkiAndCertificateInfo"><xs:sequence><xs:element name="privateKeyExists" type="xs:boolean"/><xs:element minOccurs="0" name="publicKey" type="xs:string"/><xs:element minOccurs="0" name="certificateInfo" type="tns:certificateInfo"/><xs:element minOccurs="0" name="managementOptions" type="tns:availablePKIManagementOptions"/><xs:element minOccurs="0" name="Links"><xs:complexType><xs:sequence><xs:element maxOccurs="unbounded" minOccurs="0" name="Link" type="ns1:atomLink"/></xs:sequence></xs:complexType></xs:element></xs:sequence></xs:complexType>
<xs:complexType name="serviceSpec"><xs:sequence><xs:element minOccurs="0" name="Name" type="xs:string"/><xs:element minOccurs="0" name="Description" type="xs:string"/><xs:element minOccurs="0" name="Key" type="xs:string"/><xs:element minOccurs="0" name="QName" type="xs:string"/><xs:element minOccurs="0" name="Organization" type="xs:string"/><xs:element name="Virtual" type="xs:boolean"/><xs:element name="Proxy" type="xs:boolean"/><xs:element minOccurs="0" name="VirtualizedService" type="xs:string"/><xs:element minOccurs="0" name="Endpoints" type="tns:endpointSpecs"/></xs:sequence></xs:complexType>
<xs:complexType name="assignKeyAliasSpec"><xs:sequence><xs:element name="alias" type="xs:string"/><xs:element minOccurs="0" name="password" type="xs:string"/></xs:sequence></xs:complexType>
<xs:complexType name="policyAttachments"><xs:sequence><xs:element maxOccurs="unbounded" minOccurs="0" name="Policies" type="xs:string"/></xs:sequence></xs:complexType>
</xs:schema>
  </wsdl:types>
  <wsdl:message name="deleteEndpointRequestMessage">
    <wsdl:part name="key" type="xs:string">
    </wsdl:part>
    <wsdl:part name="name" type="xs:string">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteRequestMessage">
    <wsdl:part name="key" type="xs:string">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="uploadPKIRequestMessage">
    <wsdl:part name="parameter0" type="tns:MultipartMessage">
    </wsdl:part>
    <wsdl:part name="key" type="xs:string">
    </wsdl:part>
    <wsdl:part name="keystorePass" type="xs:string">
    </wsdl:part>
    <wsdl:part name="alias" type="xs:string">
    </wsdl:part>
    <wsdl:part name="aliasPass" type="xs:string">
    </wsdl:part>
    <wsdl:part name="forceTrust" type="xs:boolean">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeByImportingDefinitionRequestMessage">
    <wsdl:part name="key" type="xs:string">
    </wsdl:part>
    <wsdl:part name="parameter0" element="nms1:DefinitionSpec">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getServiceResponseMessage">
    <wsdl:part name="getServiceResponse" element="nms1:HostedService">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getDefinitionReferenceResponseMessage">
    <wsdl:part element="xs:any">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getDebugOptionsRequestMessage">
    <wsdl:part name="key" type="xs:string">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeRequestMessage">
    <wsdl:part name="key" type="xs:string">
    </wsdl:part>
    <wsdl:part name="parameter0" element="nms1:ServiceSpec">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="exportCertificateResponseMessage">
  </wsdl:message>
  <wsdl:message name="getDefinitionReferenceRequestMessage">
    <wsdl:part name="key" type="xs:string">
    </wsdl:part>
    <wsdl:part name="format" type="xs:string">
    </wsdl:part>
    <wsdl:part name="reference" type="xs:string">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeByUploadingDefinitionResponseMessage">
  </wsdl:message>
  <wsdl:message name="getDefinitionRequestMessage">
    <wsdl:part name="key" type="xs:string">
    </wsdl:part>
    <wsdl:part name="format" type="xs:string">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeDebugOptionsResponseMessage">
  </wsdl:message>
  <wsdl:message name="getDebugOptionsResponseMessage">
    <wsdl:part name="getDebugOptionsResponse" element="nms1:ProcessingOptions">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeDebugOptionsRequestMessage">
    <wsdl:part name="key" type="xs:string">
    </wsdl:part>
    <wsdl:part name="parameter0" element="nms1:ProcessingOptions">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getServiceEndpointResponseMessage">
    <wsdl:part name="getServiceEndpointResponse" element="nms2:ServiceEndpoint">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteEndpointResponseMessage">
  </wsdl:message>
  <wsdl:message name="getDefinitionResponseMessage">
    <wsdl:part element="xs:any">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="addEndpointResponseMessage">
    <wsdl:part name="addEndpointResponse" element="nms2:ServiceEndpoint">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="importDefinitionRequestMessage">
    <wsdl:part name="parameter0" element="nms1:ServiceImportSpec">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeByImportingDefinitionResponseMessage">
  </wsdl:message>
  <wsdl:message name="changeEndpointResponseMessage">
    <wsdl:part name="changeEndpointResponse" element="nms2:ServiceEndpoint">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeEndpointRequestMessage">
    <wsdl:part name="key" type="xs:string">
    </wsdl:part>
    <wsdl:part name="name" type="xs:string">
    </wsdl:part>
    <wsdl:part name="parameter0" element="nms1:Endpoint">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getServiceEndpointsRequestMessage">
    <wsdl:part name="key" type="xs:string">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="assignPKIRequestMessage">
    <wsdl:part name="key" type="xs:string">
    </wsdl:part>
    <wsdl:part name="parameter0" element="nms1:AssignAlias">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="addEndpointRequestMessage">
    <wsdl:part name="key" type="xs:string">
    </wsdl:part>
    <wsdl:part name="parameter0" element="nms1:Endpoint">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="importDefinitionDeprecatedResponseMessage">
  </wsdl:message>
  <wsdl:message name="importDefinitionDeprecatedRequestMessage">
    <wsdl:part name="parameter0" element="nms1:ServiceImportSpec">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteResponseMessage">
  </wsdl:message>
  <wsdl:message name="uploadDefinitionResponseMessage">
    <wsdl:part name="uploadDefinitionResponse" element="nms1:HostedService">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPKIManagementOptionsRequestMessage">
    <wsdl:part name="key" type="xs:string">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="detachPoliciesResponseMessage">
  </wsdl:message>
  <wsdl:message name="getPKIandCertificateInfoRequestMessage">
    <wsdl:part name="key" type="xs:string">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="uploadDefinitionRequestMessage">
    <wsdl:part name="parameter0" type="tns:MultipartMessage">
    </wsdl:part>
    <wsdl:part name="name" type="xs:string">
    </wsdl:part>
    <wsdl:part name="key" type="xs:string">
    </wsdl:part>
    <wsdl:part name="qname" type="xs:string">
    </wsdl:part>
    <wsdl:part name="description" type="xs:string">
    </wsdl:part>
    <wsdl:part name="org" type="xs:string">
    </wsdl:part>
    <wsdl:part name="virtual" type="xs:boolean">
    </wsdl:part>
    <wsdl:part name="virtualized" type="xs:string">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="uploadPKIResponseMessage">
    <wsdl:part name="uploadPKIResponse" element="nms1:PKIAndCertificateInfo">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="importDefinitionResponseMessage">
    <wsdl:part name="importDefinitionResponse" element="nms1:HostedService">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="attachPoliciesRequestMessage">
    <wsdl:part name="key" type="xs:string">
    </wsdl:part>
    <wsdl:part name="parameter0" element="nms1:PolicyAttachments">
    </wsdl:part>
    <wsdl:part name="type" type="xs:string">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getServiceEndpointRequestMessage">
    <wsdl:part name="key" type="xs:string">
    </wsdl:part>
    <wsdl:part name="name" type="xs:string">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="detachPoliciesRequestMessage">
    <wsdl:part name="key" type="xs:string">
    </wsdl:part>
    <wsdl:part name="type" type="xs:string">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="exportCertificateRequestMessage">
    <wsdl:part name="key" type="xs:string">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeResponseMessage">
  </wsdl:message>
  <wsdl:message name="assignPKIResponseMessage">
    <wsdl:part name="assignPKIResponse" element="nms1:PKIAndCertificateInfo">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getServiceRequestMessage">
    <wsdl:part name="key" type="xs:string">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="deletePKIResponseMessage">
  </wsdl:message>
  <wsdl:message name="removeDefinitionRequestMessage">
    <wsdl:part name="key" type="xs:string">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="removeDefinitionResponseMessage">
  </wsdl:message>
  <wsdl:message name="getDefinitionsRequestMessage">
    <wsdl:part name="key" type="xs:string">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getServiceEndpointsResponseMessage">
    <wsdl:part name="getServiceEndpointsResponse" element="nms1:ServiceEndpointList">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getDefinitionsResponseMessage">
    <wsdl:part name="getDefinitionsResponse" type="nms3:atomLink">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="changeByUploadingDefinitionRequestMessage">
    <wsdl:part name="key" type="xs:string">
    </wsdl:part>
    <wsdl:part name="parameter0" type="tns:MultipartMessage">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPKIandCertificateInfoResponseMessage">
    <wsdl:part name="getPKIandCertificateInfoResponse" element="nms1:PKIAndCertificateInfo">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="deletePKIRequestMessage">
    <wsdl:part name="key" type="xs:string">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getPKIManagementOptionsResponseMessage">
    <wsdl:part name="getPKIManagementOptionsResponse" element="nms1:AvailablePKIManagementOptions">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="attachPoliciesResponseMessage">
  </wsdl:message>
  <wsdl:portType name="ServiceAdminPortType">
    <wsdl:operation name="changeByUploadingDefinition">
      <wsdl:input message="tns:changeByUploadingDefinitionRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:changeByUploadingDefinitionResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeByImportingDefinition">
      <wsdl:input message="tns:changeByImportingDefinitionRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:changeByImportingDefinitionResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getServiceEndpoints">
      <wsdl:input message="tns:getServiceEndpointsRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:getServiceEndpointsResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addEndpoint">
      <wsdl:input message="tns:addEndpointRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:addEndpointResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getServiceEndpoint">
      <wsdl:input message="tns:getServiceEndpointRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:getServiceEndpointResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeEndpoint">
      <wsdl:input message="tns:changeEndpointRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:changeEndpointResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="deleteEndpoint">
      <wsdl:input message="tns:deleteEndpointRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:deleteEndpointResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="attachPolicies">
      <wsdl:input message="tns:attachPoliciesRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:attachPoliciesResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getDefinitionReference">
      <wsdl:input message="tns:getDefinitionReferenceRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:getDefinitionReferenceResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="removeDefinition">
      <wsdl:input message="tns:removeDefinitionRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:removeDefinitionResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="importDefinition">
      <wsdl:input message="tns:importDefinitionRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:importDefinitionResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="uploadDefinition">
      <wsdl:input message="tns:uploadDefinitionRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:uploadDefinitionResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="importDefinitionDeprecated">
      <wsdl:input message="tns:importDefinitionDeprecatedRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:importDefinitionDeprecatedResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getDefinitions">
      <wsdl:input message="tns:getDefinitionsRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:getDefinitionsResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="detachPolicies">
      <wsdl:input message="tns:detachPoliciesRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:detachPoliciesResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="uploadPKI">
      <wsdl:input message="tns:uploadPKIRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:uploadPKIResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="assignPKI">
      <wsdl:input message="tns:assignPKIRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:assignPKIResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="deletePKI">
      <wsdl:input message="tns:deletePKIRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:deletePKIResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getPKIManagementOptions">
      <wsdl:input message="tns:getPKIManagementOptionsRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:getPKIManagementOptionsResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getPKIandCertificateInfo">
      <wsdl:input message="tns:getPKIandCertificateInfoRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:getPKIandCertificateInfoResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getDebugOptions">
      <wsdl:input message="tns:getDebugOptionsRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:getDebugOptionsResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeDebugOptions">
      <wsdl:input message="tns:changeDebugOptionsRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:changeDebugOptionsResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="exportCertificate">
      <wsdl:input message="tns:exportCertificateRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:exportCertificateResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="change">
      <wsdl:input message="tns:changeRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:changeResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getService">
      <wsdl:input message="tns:getServiceRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:getServiceResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="delete">
      <wsdl:input message="tns:deleteRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:deleteResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getDefinition">
      <wsdl:input message="tns:getDefinitionRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:getDefinitionResponseMessage">
    </wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="ServiceAdminBinding" type="tns:ServiceAdminPortType">
    <shttp:binding/>
    <wsdl:operation name="changeByUploadingDefinition">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">PUT /services/{key}/definition/upload</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Update Service by uploading a new service definition]]></sdoc:summary><sdoc:response code="201" message="Created" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[The service was changed successfully]]></sdoc:description></sdoc:response><sdoc:response code="404" message="Not Found" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[A service with the given key could not be found]]></sdoc:description></sdoc:response><sdoc:response code="500" message="Server Error" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[The service could not be changed]]></sdoc:description></sdoc:response><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p>Updates a given service with given specification and definition document.</p>
<h4>Request</h4>
<pre><code>PUT /rest/services/uddi:978841b1-7088-11e4-8574-cb4613969888/definition/upload HTTP/1.1
Content-Length: 2940
Content-Type: multipart/form-data; boundary=YlPkO_6HkMh0gXO6-t9U8e7otDRuJJ2WfjxKkMXu
Host: vnukula-e6420:8800
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.0.1 (java 1.5)
Content-Disposition: form-data; name="multipart"; filename="Numberbeforeupdate.wsdl"
Content-Type: application/octet-stream
Content-Transfer-Encoding: binary

&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;definitions targetNamespace="http://www.dataaccess.com/webservicesserver/" xmlns:tns="http://www.dataaccess.com/webservicesserver/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns="http://schemas.xmlsoap.org/wsdl/"&gt;
    &lt;types&gt;
      &lt;xs:schema elementFormDefault="qualified" targetNamespace="http://www.dataaccess.com/webservicesserver/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://www.dataaccess.com/webservicesserver/" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
        &lt;xs:element name="NumberToWords"&gt;
          &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
              &lt;xs:element name="ubiNum" type="xs:unsignedLong"/&gt;
            &lt;/xs:sequence&gt;
          &lt;/xs:complexType&gt;
        &lt;/xs:element&gt;
        &lt;xs:element name="NumberToWordsResponse"&gt;
          &lt;xs:complexType&gt;
            &lt;xs:sequence&gt;
              &lt;xs:element name="NumberToWordsResult" type="xs:string"/&gt;
            &lt;/xs:sequence&gt;
          &lt;/xs:complexType&gt;
        &lt;/xs:element&gt;
      &lt;/xs:schema&gt;
    &lt;/types&gt;
    &lt;message name="NumberToWordsSoapResponse"&gt;
      &lt;part name="parameters" element="tns:NumberToWordsResponse"&gt;
      &lt;/part&gt;
    &lt;/message&gt;
    &lt;message name="NumberToWordsSoapRequest"&gt;
      &lt;part name="parameters" element="tns:NumberToWords"&gt;
      &lt;/part&gt;
    &lt;/message&gt;
    &lt;portType name="NumberConversionSoapType"&gt;
      &lt;operation name="NumberToWords"&gt;
    &lt;documentation&gt;Returns the word corresponding to the positive number passed as parameter. Limited to quadrillions.&lt;/documentation&gt;
        &lt;input message="tns:NumberToWordsSoapRequest"&gt;
      &lt;/input&gt;
        &lt;output message="tns:NumberToWordsSoapResponse"&gt;
      &lt;/output&gt;
      &lt;/operation&gt;
    &lt;/portType&gt;
    &lt;binding name="NumberConversionSoapBinding" type="tns:NumberConversionSoapType"&gt;
      &lt;soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/&gt;
      &lt;operation name="NumberToWords"&gt;
        &lt;soap:operation soapAction="http://number" style="document"/&gt;
        &lt;input&gt;
          &lt;soap:body use="literal"/&gt;
        &lt;/input&gt;
        &lt;output&gt;
          &lt;soap:body use="literal"/&gt;
        &lt;/output&gt;
      &lt;/operation&gt;
        &lt;/binding&gt;
    &lt;service name="NumberConversion"&gt;
    &lt;wsdl:documentation xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"&gt;The Number Conversion Web Service, implemented with Visual DataFlex, provides functions that convert numbers into words or dollar amounts.&lt;/wsdl:documentation&gt;
      &lt;port name="NumberConversionSoap" binding="tns:NumberConversionSoapBinding"&gt;
        &lt;soap:address location="http://www.dataaccess.com/webservicesserver/numberconversion.wso"/&gt;
      &lt;/port&gt;
    &lt;/service&gt;
&lt;/definitions&gt;
--YlPkO_6HkMh0gXO6-t9U8e7otDRuJJ2WfjxKkMXu--
</code></pre>]]></sdoc:description></wsdl:documentation>
    <shttp:operation inputSerialization="multipart/form-data" location="/services/{key}/definition/upload" method="PUT"/>
      <wsdl:input>
    <shttp:input name="key" part="key" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service key.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
    <shttp:input name="parameter0" part="parameter0" type="entity"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The uploaded file.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
    </wsdl:operation>
    <wsdl:operation name="changeByImportingDefinition">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">PUT /services/{key}/definition</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Update a service by importing a new definition]]></sdoc:summary><sdoc:response code="201" message="Created" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[The service was changed successfully]]></sdoc:description></sdoc:response><sdoc:response code="404" message="Not Found" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[A service with the given key could not be found]]></sdoc:description></sdoc:response><sdoc:response code="500" message="Server Error" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[The service could not be changed]]></sdoc:description></sdoc:response><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p>Updates the service definition associated with given key.</p>
<h4>Request</h4>
<pre><code>PUT /rest/services/{key}/definition HTTP/1.1
Content-Type: application/json

{
    "Location":"http://www.holidaywebservice.com/Holidays/US/Dates/USHolidayDates.asmx?WSDL",
    "UserName":"u",
    "Password": "p"
}
</code></pre>]]></sdoc:description></wsdl:documentation>
    <shttp:operation inputSerialization="application/json,application/xml,text/xml" location="/services/{key}/definition" method="PUT"/>
      <wsdl:input>
    <shttp:input name="key" part="key" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service key.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
    <shttp:input name="parameter0" part="parameter0" type="entity"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service import information.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
    </wsdl:operation>
    <wsdl:operation name="getServiceEndpoints">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">GET /services/{key}/endpoints</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Get endpoints for a service]]></sdoc:summary><sdoc:response code="200" message="Success" xmlns:sdoc="http://soa.com/wsdl/doc"/><sdoc:response code="404" message="Not Found" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[A service with the given key could not be found]]></sdoc:description></sdoc:response></wsdl:documentation>
    <shttp:operation location="/services/{key}/endpoints" method="GET" outputSerialization="application/json,application/xml,text/xml"/>
      <wsdl:input>
    <shttp:input name="key" part="key" type="path"/>
      </wsdl:input>
      <wsdl:output>
    <shttp:output name="getServiceEndpointsResponse" part="getServiceEndpointsResponse" type="entity"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addEndpoint">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">POST /services/{key}/endpoints</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Add an endpoint to a service.]]></sdoc:summary><sdoc:response code="200" message="OK" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[The endpoint was successfully added]]></sdoc:description></sdoc:response><sdoc:response code="404" message="Not Found" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[A service with the given key could not be found]]></sdoc:description></sdoc:response><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p>Adds an endpoint to a service.
If virtual the endpoint spec must identify a container listener and a path, not a URL. If physical only a URL is needed. Addressing
information is specified in the endpoint spec's properties.</p>
<h4>Request</h4>
<pre><code>POST /rest/services/{key}/endpoints  HTTP/1.1
&lt;Endpoint xmlns="http://soa.com/uri/products/restapi/xsd/1.0"&gt;
    &lt;Description&gt;my port&lt;/Description&gt;
    &lt;BindingName&gt;{http://tempuri.org/}EchoServiceSoap&lt;/BindingName&gt;
    &lt;ListenerName&gt;default-http0&lt;/ListenerName&gt;
    &lt;BindingType&gt;binding.soap11&lt;/BindingType&gt;
    &lt;ContainerKey&gt;nd3800&lt;/ContainerKey&gt;
    &lt;Path&gt;/MyPath11/&lt;/Path&gt;
    &lt;Name&gt;port77&lt;/Name&gt;
    &lt;ProtocolVariant&gt;weblogic&lt;/ProtocolVariant&gt;
    &lt;Properties&gt;
        &lt;Property&gt;
            &lt;name&gt;&lt;/name&gt;
            &lt;value&gt;&lt;/value&gt;
        &lt;/Property&gt;
    &lt;/Properties&gt;
&lt;/Endpoint&gt;
</code></pre>]]></sdoc:description></wsdl:documentation>
    <shttp:operation inputSerialization="application/json,application/xml,text/xml" location="/services/{key}/endpoints" method="POST" outputSerialization="application/json,application/xml,text/xml"/>
      <wsdl:input>
    <shttp:input name="key" part="key" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service key.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
    <shttp:input name="parameter0" part="parameter0" type="entity"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The endpoint specification.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
      <wsdl:output>
    <shttp:output name="addEndpointResponse" part="addEndpointResponse" type="entity"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getServiceEndpoint">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">GET /services/{key}/endpoints/{name}</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Get detailed service endpoint information]]></sdoc:summary><sdoc:response code="200" message="Success" xmlns:sdoc="http://soa.com/wsdl/doc"/><sdoc:response code="404" message="Not Found" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[A service with the given key, or endpoint with the specified name, could not be found]]></sdoc:description></sdoc:response></wsdl:documentation>
    <shttp:operation location="/services/{key}/endpoints/{name}" method="GET" outputSerialization="application/json,application/xml,text/xml"/>
      <wsdl:input>
    <shttp:input name="key" part="key" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service key.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
    <shttp:input name="name" part="name" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The endpoint name.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
      <wsdl:output>
    <shttp:output name="getServiceEndpointResponse" part="getServiceEndpointResponse" type="entity"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeEndpoint">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">PUT /services/{key}/endpoints/{name}</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Changes a given endpoint of a service]]></sdoc:summary><sdoc:response code="200" message="OK" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[The endpoint was successfully changed]]></sdoc:description></sdoc:response><sdoc:response code="404" message="Not Found" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[A service with the given key, or endpoint with the specified name, could not be found]]></sdoc:description></sdoc:response><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p>Changes an endpoint to a service.
If virtual the endpoint spec must identify a container listener. Addressing information is specified in the endpoint spec's properties.</p>
<h4>Request</h4>
<pre><code>PUT /rest/services/{key}/endpoints/{name}  HTTP/1.1" +
{
  "Endpoint": {
    "-xmlns":"http://soa.com/uri/products/restapi/xsd/1.0",
    "Description":"my port9",
    "BindingName":"{http://tempuri.org/}EchoServiceSoap",
    "ListenerName":"default-http0",
    "BindingType":"binding.soap11",
    "ContainerKey":"nd3800",
    "ContextPath":"/MyPath11/",
    "Name":"port99",
    "ProtocolVariant":"weblogic",
    "Properties": {
      "Property": {
      }
    }
  }
}
</code></pre>]]></sdoc:description></wsdl:documentation>
    <shttp:operation inputSerialization="application/json,application/xml,text/xml" location="/services/{key}/endpoints/{name}" method="PUT"/>
      <wsdl:input>
    <shttp:input name="key" part="key" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service key.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
    <shttp:input name="name" part="name" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The endpoint name.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
    <shttp:input name="parameter0" part="parameter0" type="entity"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The endpoint specification.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
      <wsdl:output>
    <shttp:output name="changeEndpointResponse" part="changeEndpointResponse" type="entity"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="deleteEndpoint">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">DELETE /services/{key}/endpoints/{name}</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Remove an endpoint]]></sdoc:summary><sdoc:response code="200" message="OK" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[The endpoint was successfully removed]]></sdoc:description></sdoc:response><sdoc:response code="404" message="Not Found" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[A service with the given key, or endpoint with the specified name, could not be found]]></sdoc:description></sdoc:response><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p>Deletes the  given end point associated with the given service.</p>
<h4>Request</h4>
<pre><code>DELETE /rest/services/{key}/endpoints/{name} HTTP/1.1
</code></pre>]]></sdoc:description></wsdl:documentation>
    <shttp:operation location="/services/{key}/endpoints/{name}" method="DELETE"/>
      <wsdl:input>
    <shttp:input name="key" part="key" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service key.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
    <shttp:input name="name" part="name" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The endpoint name.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
    </wsdl:operation>
    <wsdl:operation name="attachPolicies">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">POST /services/{key}/policies/{type}</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Attaches policies of the given type to a service]]></sdoc:summary><sdoc:response code="200" message="OK" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[The policies were successfully attached]]></sdoc:description></sdoc:response><sdoc:response code="404" message="Not Found" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[A service or policy with the given keys could not be found]]></sdoc:description></sdoc:response><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p>Attaches policies of the given type to the given service.</p>
<h4>Request</h4>
<pre><code>POST /rest/services/{key}/policies/operational HTTP/1.1
Content-Type: application/xml

&lt;PolicyKey xmlns="http://soa.com/uri/products/restapi/xsd/1.0"&gt;myPolicyKey&lt;/PolicyKey&gt;
</code></pre>]]></sdoc:description></wsdl:documentation>
    <shttp:operation inputSerialization="application/json,application/xml,text/xml" location="/services/{key}/policies/{type}" method="POST"/>
      <wsdl:input>
    <shttp:input name="key" part="key" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service key.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
    <shttp:input name="parameter0" part="parameter0" type="entity"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The policies.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
    <shttp:input name="type" part="type" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The type of policies. Supported values are "operational", "qos", and "compliance". If omitted operational policies are assumed.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
    </wsdl:operation>
    <wsdl:operation name="getDefinitionReference">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">GET /services/{key}/definition/{format}/{reference:.+}</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Get a document referenced from a description document.]]></sdoc:summary><sdoc:response code="404" message="Not Found" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[A service with the given key, or the referenced document, was not found.]]></sdoc:description></sdoc:response><sdoc:response code="200" message="Success" xmlns:sdoc="http://soa.com/wsdl/doc"/><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p>Retrieves the contents of document referenced from a given wsdl/wadl/raml document</p>
<h4>Request</h4>
<pre><code>GET /rest/services/uddi:9ba25256-fe81-11e4-9ad6-a3316407e555/definition/wsdl/{reference} HTTP/1.1
</code></pre>]]></sdoc:description></wsdl:documentation>
    <shttp:operation location="/services/{key}/definition/{format}/{reference:.+}" method="GET" outputSerialization="*/*"/>
      <wsdl:input>
    <shttp:input name="key" part="key" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service key.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
    <shttp:input name="format" part="format" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The desired document format, e.g. "wsdl", "wadl", "raml","swagger"]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
    <shttp:input name="reference" part="reference" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The document reference.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
      <wsdl:output>
    <shttp:output name="" part="" type="entity"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="removeDefinition">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">DELETE /services/{key}/definition</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Remove all definition documents for a service.]]></sdoc:summary><sdoc:response code="404" message="Not Found" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[A service with the given key was not found.]]></sdoc:description></sdoc:response><sdoc:response code="200" message="OK" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[The service with the given key was successfully deleted.]]></sdoc:description></sdoc:response><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p>Deletes definition for a service</p>
<h4>Request</h4>
<pre><code>DELETE /rest/services/uddi:9ba25256-fe81-11e4-9ad6-a3316407e555 HTTP/1.1
</code></pre>]]></sdoc:description></wsdl:documentation>
    <shttp:operation location="/services/{key}/definition" method="DELETE"/>
      <wsdl:input>
    <shttp:input name="key" part="key" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service key.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
    </wsdl:operation>
    <wsdl:operation name="importDefinition">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">POST /services</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Creates a service with an optional reference to a service definition.]]></sdoc:summary><sdoc:response code="201" message="Created" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[The service was created successfully.  The Location header provides the new service location.]]></sdoc:description></sdoc:response><sdoc:response code="300" message="Bad Request" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[The service could not be imported using the provided spec.]]></sdoc:description></sdoc:response><sdoc:response code="409" message="Conflict" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[The service could not be created becuase it conflicts with an existing service.]]></sdoc:description></sdoc:response><sdoc:response code="500" message="Server Error" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[The service could not be created because of an error.]]></sdoc:description></sdoc:response><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p>Creates a service with given specification and definition document.</p>
<h4>Request</h4>
<pre><code>POST /rest/services HTTP/1.1

&lt;ServiceImportSpec xmlns="http://soa.com/uri/products/restapi/xsd/1.0"&gt;
    &lt;ServiceSpec&gt;
        &lt;Name&gt;EchoService1&lt;/Name&gt;
        &lt;Description&gt;This is Echo Service&lt;/Description&gt;
        &lt;Key&gt;uddi:834fc30e-5ffb-23e4-b3cf-ded8b9chhdgg&lt;/Key&gt;
        &lt;QName&gt;http://tempuri.org&lt;/QName&gt;
        &lt;LocalPart&gt;EchoService1&lt;/LocalPart&gt;
        &lt;Organization&gt;uddi:6c3564d4-fdaf-11e4-82f2-fdaedf0ec346&lt;/Organization&gt;
    &lt;/ServiceSpec&gt;
    &lt;DefinitionSpec&gt;
        &lt;Location&gt;http://a.b.c.d/EchoSan/Echo.asmx?wsdl&lt;/Location&gt;
        &lt;UserName&gt;u&lt;/UserName&gt;
        &lt;Password&gt;p&lt;/Password&gt;
        &lt;Format&gt;wsdl&lt;/Format&gt;
    &lt;/DefinitionSpec&gt;
&lt;/ServiceImportSpec&gt;
</code></pre>]]></sdoc:description></wsdl:documentation>
    <shttp:operation inputSerialization="application/json,application/xml,text/xml" location="/services" method="POST"/>
      <wsdl:input>
    <shttp:input name="parameter0" part="parameter0" type="entity"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service spec.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
      <wsdl:output>
    <shttp:output name="importDefinitionResponse" part="importDefinitionResponse" type="entity"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="uploadDefinition">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">POST /services/upload</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Upload a  service definition.]]></sdoc:summary><sdoc:response code="201" message="Created" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[The service was created successfully.  The location header will hold the URL of the new service.]]></sdoc:description></sdoc:response><sdoc:response code="500" message="Server Error" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[The service could not be created]]></sdoc:description></sdoc:response><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p>Creates a service with given specification and definition document.</p>
<h4>Request</h4>
<pre><code>POST /rest/services?name=EchoUploaded&amp;virtual=false&amp;qname=%7Bhttp%3A%2F%2Ftemp.com%7DTempNameSpace&amp;description=Echo+Decsription&amp;key=uddi%3A978841b1-7088-11e4-8574-cb4613969888&amp;org=uddi%3A3ff2aefb-03d3-11e5-9e1a-ed2c43b446f9&amp; HTTP/1.1
Authorization: Basic YTpw
Content-Length: 2938
Content-Type: multipart/form-data; boundary=Jlo6Rm_FfX2_s3WQ5QhfUoY6qqLxTbdyHMSkf0W
Host: localhost:8800
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.0.1 (java 1.5)

--Jlo6Rm_FfX2_s3WQ5QhfUoY6qqLxTbdyHMSkf0W
Content-Disposition: form-data; name="multipart"; filename="Numberbeforeupdate.wsdl"
Content-Type: application/octet-stream
Content-Transfer-Encoding: binary
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;definitions targetNamespace="http://www.dataaccess.com/webservicesserver/" xmlns:tns="http://www.dataaccess.com/webservicesserver/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns="http://schemas.xmlsoap.org/wsdl/"&gt;
  &lt;types&gt;
    &lt;xs:schema elementFormDefault="qualified" targetNamespace="http://www.dataaccess.com/webservicesserver/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://www.dataaccess.com/webservicesserver/" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
      &lt;xs:element name="NumberToWords"&gt;
        &lt;xs:complexType&gt;
          &lt;xs:sequence&gt;
            &lt;xs:element name="ubiNum" type="xs:unsignedLong"/&gt;
          &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
      &lt;xs:element name="NumberToWordsResponse"&gt;
        &lt;xs:complexType&gt;
          &lt;xs:sequence&gt;
            &lt;xs:element name="NumberToWordsResult" type="xs:string"/&gt;
          &lt;/xs:sequence&gt;
        &lt;/xs:complexType&gt;
      &lt;/xs:element&gt;
    &lt;/xs:schema&gt;
  &lt;/types&gt;
  &lt;message name="NumberToWordsSoapResponse"&gt;
    &lt;part name="parameters" element="tns:NumberToWordsResponse"&gt;
    &lt;/part&gt;
  &lt;/message&gt;
  &lt;message name="NumberToWordsSoapRequest"&gt;
    &lt;part name="parameters" element="tns:NumberToWords"&gt;
    &lt;/part&gt;
  &lt;/message&gt;
  &lt;portType name="NumberConversionSoapType"&gt;
    &lt;operation name="NumberToWords"&gt;
      &lt;documentation&gt;Returns the word corresponding to the positive number passed as parameter. Limited to quadrillions.&lt;/documentation&gt;
      &lt;input message="tns:NumberToWordsSoapRequest"&gt;
      &lt;/input&gt;
      &lt;output message="tns:NumberToWordsSoapResponse"&gt;
      &lt;/output&gt;
    &lt;/operation&gt;
  &lt;/portType&gt;
  &lt;binding name="NumberConversionSoapBinding" type="tns:NumberConversionSoapType"&gt;
    &lt;soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/&gt;
    &lt;operation name="NumberToWords"&gt;
      &lt;soap:operation soapAction="http://number" style="document"/&gt;
      &lt;input&gt;
        &lt;soap:body use="literal"/&gt;
      &lt;/input&gt;
      &lt;output&gt;
        &lt;soap:body use="literal"/&gt;
      &lt;/output&gt;
    &lt;/operation&gt;
      &lt;/binding&gt;
  &lt;service name="NumberConversion"&gt;
    &lt;wsdl:documentation xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"&gt;The Number Conversion Web Service, implemented with Visual DataFlex, provides functions that convert numbers into words or dollar amounts.&lt;/wsdl:documentation&gt;
    &lt;port name="NumberConversionSoap" binding="tns:NumberConversionSoapBinding"&gt;
      &lt;soap:address location="http://www.dataaccess.com/webservicesserver/numberconversion.wso"/&gt;
    &lt;/port&gt;
  &lt;/service&gt;
&lt;/definitions&gt;
--Jlo6Rm_FfX2_s3WQ5QhfUoY6qqLxTbdyHMSkf0W--
</code></pre>]]></sdoc:description></wsdl:documentation>
    <shttp:operation inputSerialization="multipart/form-data" location="/services/upload" method="POST"/>
      <wsdl:input>
    <shttp:input name="parameter0" part="parameter0" type="entity"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The uploaded file.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
    <shttp:input name="name" part="name" type="query"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service name.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
    <shttp:input name="key" part="key" type="query"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service key.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
    <shttp:input name="qname" part="qname" type="query"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service qname.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
    <shttp:input name="description" part="description" type="query"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service description.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
    <shttp:input name="org" part="org" type="query"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The organization key for the target organization.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
    <shttp:input name="virtual" part="virtual" type="query"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Indicates that the service is virtual. It is not by default.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
    <shttp:input name="virtualized" part="virtualized" type="query"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The key of the service to virtualize (if virtual is true).]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
      <wsdl:output>
    <shttp:output name="uploadDefinitionResponse" part="uploadDefinitionResponse" type="entity"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="importDefinitionDeprecated">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">POST /services/import</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Creates a service with an optional reference to a service definition.  Deprecated.]]></sdoc:summary><sdoc:response code="201" message="Created" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[The service was created successfully.  The location header will hold the URL of the new service.]]></sdoc:description></sdoc:response><sdoc:response code="500" message="Server Error" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[The service could not be created]]></sdoc:description></sdoc:response></wsdl:documentation>
    <shttp:operation inputSerialization="application/json,application/xml,text/xml" location="/services/import" method="POST"/>
      <wsdl:input>
    <shttp:input name="parameter0" part="parameter0" type="entity"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service import information.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
    </wsdl:operation>
    <wsdl:operation name="getDefinitions">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">GET /services/{key}/definition</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Get the available description documents for a specific service.]]></sdoc:summary><sdoc:response code="404" message="Not Found" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[A service with the given key was not found.]]></sdoc:description></sdoc:response><sdoc:response code="200" message="Success" xmlns:sdoc="http://soa.com/wsdl/doc"/><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p>Retrieves the service information based on given key. The information includes URLs for any available
service definitions including, but not limited to, Swagger, WSDL, WADL, RAML.</p>
<h4>Request</h4>
<p>The following is an example request and response for standard service provided with PM called Workflow Service.</p>
<pre><code>GET /rest/services/uddi:soa.com:workflow-servicekey/definition HTTP/1.1
</code></pre>
<h4>Response:</h4>
<pre><code>[
  {
    "rel": "wsdl",
    "href": "http://localhost:9900/rest/services/uddi:soa.com:workflow-servicekey/definition/wsdl"
  },{
    "rel": "wadl",
    "href": "http://localhost:9900/rest/services/uddi:soa.com:workflow-servicekey/definition/wadl"
  },{
    "rel": "raml",
    "href": "http://localhost:9900/rest/services/uddi:soa.com:workflow-servicekey/definition/raml"
  },{
    "rel": "swagger",
    "href": "http://localhost:9900/rest/services/uddi:soa.com:workflow-servicekey/definition/swagger"
  },{
    "rel": "swagger2",
    "href": "http://localhost:9900/rest/services/uddi:soa.com:workflow-servicekey/definition/swagger2"
  },{
    "rel": "swagger-yaml",
    "href": "http://localhost:9900/rest/services/uddi:soa.com:workflow-servicekey/definition/swagger-yaml"
  }
]
</code></pre>]]></sdoc:description></wsdl:documentation>
    <shttp:operation location="/services/{key}/definition" method="GET" outputSerialization="application/json,application/xml"/>
      <wsdl:input>
    <shttp:input name="key" part="key" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service key]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
      <wsdl:output>
    <shttp:output name="getDefinitionsResponse" part="getDefinitionsResponse" type="entity"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="detachPolicies">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">DELETE /services/{key}/policies/{type}</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Detaches all policies of the given type from a service]]></sdoc:summary><sdoc:response code="200" message="OK" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[The policies were successfully detached]]></sdoc:description></sdoc:response><sdoc:response code="404" message="Not Found" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[A service or policy with the given keys could not be found]]></sdoc:description></sdoc:response><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p>Detaches all the policies of a given type attached to the given service.</p>
<h4>Request</h4>
<pre><code>DELETE /rest/services/{key}/policies/operational HTTP/1.1
</code></pre>]]></sdoc:description></wsdl:documentation>
    <shttp:operation location="/services/{key}/policies/{type}" method="DELETE"/>
      <wsdl:input>
    <shttp:input name="key" part="key" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service key.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
    <shttp:input name="type" part="type" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The type of policies. Supported values are "operational", "qos", and "compliance". If omitted operational policies are assumed.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
    </wsdl:operation>
    <wsdl:operation name="uploadPKI">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">POST /services/{key}/pki</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Uploads PKI keys and certificate for a service]]></sdoc:summary><sdoc:response code="201" message="Created" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[The PKI information was successfully created]]></sdoc:description></sdoc:response><sdoc:response code="404" message="Not Found" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[A service with the given keys could not be found]]></sdoc:description></sdoc:response><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p>Uploads a keystore that holds PKI key/cert data for a service. Form can contain alias parameter,
and optionally keystorePass, aliasPass, forceTrust parameters. The parameters can be optional from query
if they are not in the submitted form.</p>
<h4>Request</h4>
<pre><code>POST /rest/services/uddi:978841b1-7088-11e4-8574-cb4613969888/pki HTTP/1.1
Content-Type: multipart/form-data; boundary=Jlo6Rm_FfX2_s3WQ5QhfUoY6qqLxTbdyHMSkf0W
--Jlo6Rm_FfX2_s3WQ5QhfUoY6qqLxTbdyHMSkf0W
Content-Disposition: form-data; name=\"fileUpload\"; filename=\"test.jks\"
Content-Type: application/octet-stream
Content-Transfer-Encoding: binary

&lt;File content omitted&gt;
</code></pre>]]></sdoc:description></wsdl:documentation>
    <shttp:operation inputSerialization="multipart/form-data" location="/services/{key}/pki" method="POST" outputSerialization="application/json,application/xml"/>
      <wsdl:input>
    <shttp:input name="parameter0" part="parameter0" type="entity"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The uploaded file.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
    <shttp:input name="key" part="key" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service key.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
    <shttp:input name="keystorePass" part="keystorePass" type="query"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Keystore password.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
    <shttp:input name="alias" part="alias" type="query"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Alias in the keystore to use.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
    <shttp:input name="aliasPass" part="aliasPass" type="query"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Alias password. Can be omitted if not needed or the same as the keystore password.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
    <shttp:input name="forceTrust" part="forceTrust" type="query"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Add to trust store if not trusted already. If false and not trusted an error will be returned. Can be omitted. Default is false.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
      <wsdl:output>
    <shttp:output name="uploadPKIResponse" part="uploadPKIResponse" type="entity"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="assignPKI">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">POST /services/{key}/pki/assign</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Assigns PKI Keys to a Service]]></sdoc:summary><sdoc:response code="201" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[Success]]></sdoc:description></sdoc:response><sdoc:response code="404" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[Specified service or pki key not found (Invalid key)]]></sdoc:description></sdoc:response><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p>Add PKI information to a service.</p>]]></sdoc:description></wsdl:documentation>
    <shttp:operation inputSerialization="application/xml,application/json" location="/services/{key}/pki/assign" method="POST" outputSerialization="application/json,application/xml"/>
      <wsdl:input>
    <shttp:input name="key" part="key" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service key.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
    <shttp:input name="parameter0" part="parameter0" type="entity"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Alias Info.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
      <wsdl:output>
    <shttp:output name="assignPKIResponse" part="assignPKIResponse" type="entity"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="deletePKI">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">DELETE /services/{key}/pki</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Deletes PKI Keys of a service]]></sdoc:summary><sdoc:response code="200" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[Success]]></sdoc:description></sdoc:response><sdoc:response code="404" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[Specified service not found (Invalid key)]]></sdoc:description></sdoc:response><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p>Deletes PKI artifacts of a service</p>]]></sdoc:description></wsdl:documentation>
    <shttp:operation location="/services/{key}/pki" method="DELETE"/>
      <wsdl:input>
    <shttp:input name="key" part="key" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service key.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
    </wsdl:operation>
    <wsdl:operation name="getPKIManagementOptions">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">GET /services/{key}/pki</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Returns Certificate of a service]]></sdoc:summary><sdoc:response code="200" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[Success]]></sdoc:description></sdoc:response><sdoc:response code="404" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[Specified service not found (Invalid key)]]></sdoc:description></sdoc:response><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p>Get the PKI options for a service.</p>]]></sdoc:description></wsdl:documentation>
    <shttp:operation location="/services/{key}/pki" method="GET" outputSerialization="application/json,application/xml"/>
      <wsdl:input>
    <shttp:input name="key" part="key" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service key.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
      <wsdl:output>
    <shttp:output name="getPKIManagementOptionsResponse" part="getPKIManagementOptionsResponse" type="entity"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getPKIandCertificateInfo">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">GET /services/{key}/pki/info</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Returns Certificate of a service]]></sdoc:summary><sdoc:response code="200" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[Success]]></sdoc:description></sdoc:response><sdoc:response code="404" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[Specified service not found (Invalid key)]]></sdoc:description></sdoc:response><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p>Fetch the PKI information for a service.</p>]]></sdoc:description></wsdl:documentation>
    <shttp:operation location="/services/{key}/pki/info" method="GET" outputSerialization="application/json,application/xml"/>
      <wsdl:input>
    <shttp:input name="key" part="key" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service key.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
      <wsdl:output>
    <shttp:output name="getPKIandCertificateInfoResponse" part="getPKIandCertificateInfoResponse" type="entity"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getDebugOptions">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">GET /services/{key}/processing</sdoc:displayName><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Returns the debug options of a service if its virtual.]]></sdoc:description><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Returns the debug options of a (virtual) service]]></sdoc:summary><sdoc:response code="200" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[Success]]></sdoc:description></sdoc:response><sdoc:response code="404" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[Specified service not found (Invalid key)]]></sdoc:description></sdoc:response></wsdl:documentation>
    <shttp:operation location="/services/{key}/processing" method="GET" outputSerialization="application/json,application/xml"/>
      <wsdl:input>
    <shttp:input name="key" part="key" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service key.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
      <wsdl:output>
    <shttp:output name="getDebugOptionsResponse" part="getDebugOptionsResponse" type="entity"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="changeDebugOptions">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">PUT /services/{key}/processing</sdoc:displayName><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Changes the debug options of a service if its virtual.]]></sdoc:description><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Changes the debug options of a (virtual) service]]></sdoc:summary><sdoc:response code="200" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[Success]]></sdoc:description></sdoc:response><sdoc:response code="404" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[Specified service not found (Invalid key)]]></sdoc:description></sdoc:response></wsdl:documentation>
    <shttp:operation location="/services/{key}/processing" method="PUT"/>
      <wsdl:input>
    <shttp:input name="key" part="key" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service key.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
    <shttp:input name="parameter0" part="parameter0" type="entity"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Processing options.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
    </wsdl:operation>
    <wsdl:operation name="exportCertificate">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">GET /services/{key}/pki/export</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Returns Certificate of a service]]></sdoc:summary><sdoc:response code="200" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[Success]]></sdoc:description></sdoc:response><sdoc:response code="404" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[Specified service not found (Invalid key)]]></sdoc:description></sdoc:response><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p>Returns Certificate of a service</p>]]></sdoc:description></wsdl:documentation>
    <shttp:operation location="/services/{key}/pki/export" method="GET" outputSerialization="application/octet-stream"/>
      <wsdl:input>
    <shttp:input name="key" part="key" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service key.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
    </wsdl:operation>
    <wsdl:operation name="change">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">PUT /services/{key}</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Update a service definition.]]></sdoc:summary><sdoc:response code="201" message="Created" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[The service was changed successfully.]]></sdoc:description></sdoc:response><sdoc:response code="404" message="Not Found" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[A service with the given key could not be found.]]></sdoc:description></sdoc:response><sdoc:response code="500" message="Server Error" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[The service could not be changed.]]></sdoc:description></sdoc:response><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p>Updates a service name/description  with a given key.</p>
<h4>Request</h4>
<pre><code>PUT /rest/services/{key} HTTP/1.1
Content-Type: application/json

{
    "Name":"Changed Name",
    "Description":"Changed Description"
}
</code></pre>]]></sdoc:description></wsdl:documentation>
    <shttp:operation inputSerialization="application/json,application/xml,text/xml" location="/services/{key}" method="PUT"/>
      <wsdl:input>
    <shttp:input name="key" part="key" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service key.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
    <shttp:input name="parameter0" part="parameter0" type="entity"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service information to update.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
    </wsdl:operation>
    <wsdl:operation name="getService">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">GET /services/{key}</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Get details for a specific hosted service.]]></sdoc:summary><sdoc:response code="404" message="Not Found" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[A service with the given key was not found.]]></sdoc:description></sdoc:response><sdoc:response code="200" message="Success" xmlns:sdoc="http://soa.com/wsdl/doc"/><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p>Retrieves the service information based on given key.</p>
<h4>Request</h4>
<p>The following is an example request for a standard service provided with PM called Workflow Service</p>
<pre><code>GET /rest/services/uddi:soa.com:workflow-servicekey HTTP/1.1
</code></pre>
<h4>Response</h4>
<pre><code>{
    "name": "Workflow Service",
    "description": "Workflow Service",
    "key": "uddi:soa.com:workflow-servicekey",
    "qname": "{http://www.soa.com/uri/products/Workflow/wsdl/1.0}WorkflowService",
    "organization": "uddi:soa.com:managementconfigurationbusinesskey",
    "Links":[
       {
         "rel": "wsdl",
         "href": "http://localhost:9900/rest/services/uddi:soa.com:workflow-servicekey/wsdl"
       },{
         "rel": "self",
         "href": "http://localhost:9900/rest/services/uddi:soa.com:workflow-servicekey"
       }
     ]
}
</code></pre>]]></sdoc:description></wsdl:documentation>
    <shttp:operation location="/services/{key}" method="GET" outputSerialization="application/json,application/xml"/>
      <wsdl:input>
    <shttp:input name="key" part="key" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service key]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
      <wsdl:output>
    <shttp:output name="getServiceResponse" part="getServiceResponse" type="entity"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="delete">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">DELETE /services/{key}</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Remove a service]]></sdoc:summary><sdoc:response code="200" message="OK" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[The service was successfully deleted]]></sdoc:description></sdoc:response><sdoc:response code="404" message="Not Found" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[A service with the given key could not be found]]></sdoc:description></sdoc:response><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p>Deletes the service associated with given key.</p>
<h4>Request</h4>
<pre><code>DELETE /rest/services/{key} HTTP/1.1
</code></pre>]]></sdoc:description></wsdl:documentation>
    <shttp:operation location="/services/{key}" method="DELETE"/>
      <wsdl:input>
    <shttp:input name="key" part="key" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service key.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
    </wsdl:operation>
    <wsdl:operation name="getDefinition">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">GET /services/{key}/definition/{format}</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Get a particular description document for a service.]]></sdoc:summary><sdoc:response code="404" message="Not Found" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[A service with the given key was not found or there was no descriptor available in the specified format.]]></sdoc:description></sdoc:response><sdoc:response code="200" message="Success" xmlns:sdoc="http://soa.com/wsdl/doc"/><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p>Retrieves the service definition in given format, e.g. WSDL, WADL and RAML.</p>
<h4>Request</h4>
<pre><code>GET /rest/services/uddi:9ba25256-fe81-11e4-9ad6-a3316407e555/definition/wsdl HTTP/1.1
</code></pre>
<h4>Response</h4>
<p>The following is an example of a response for a simple Echo service. Parts of the response
are omitted for brevity</p>
<pre><code>&lt;wsdl:definitions targetNamespace="http://tempuri.org/" xmlns:s="http://www.w3.org/2001/XMLSchema" 
    xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" 
    xmlns:tns="http://tempuri.org/" 
    xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:tm="http://microsoft.com/wsdl/mime/textMatching/" 
    xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" 
    xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/"&gt;
   &lt;wsdl:types&gt;
   &lt;/wsdl:types&gt;
   &lt;wsdl:message name="EchoSoapOut"&gt;
      &lt;wsdl:part name="parameters" element="tns:EchoResponse"&gt;&lt;/wsdl:part&gt;
   &lt;/wsdl:message&gt;
   &lt;wsdl:message name="EchoSoapIn"&gt;
      &lt;wsdl:part name="parameters" element="tns:Echo"&gt;&lt;/wsdl:part&gt;
   &lt;/wsdl:message&gt;
   &lt;wsdl:portType name="EchoServiceSoap"&gt;
      &lt;wsdl:operation name="Echo"&gt;
         &lt;wsdl:input message="tns:EchoSoapIn"&gt;&lt;/wsdl:input&gt;
         &lt;wsdl:output message="tns:EchoSoapOut"&gt;&lt;/wsdl:output&gt;
      &lt;/wsdl:operation&gt;
   &lt;/wsdl:portType&gt;
   &lt;wsdl:binding name="EchoServiceSoap12" type="tns:EchoServiceSoap"&gt;
   &lt;/wsdl:binding&gt;
   &lt;wsdl:binding name="EchoServiceSoap" type="tns:EchoServiceSoap"&gt;
   &lt;/wsdl:binding&gt;
   &lt;wsdl:service name="EchoService"&gt;
      &lt;wsdl:port name="port77" binding="tns:EchoServiceSoap"&gt;
         &lt;soap:address location="http://VNUKALA-E6420.soa.local:9901/MyPath11/"/&gt;
      &lt;/wsdl:port&gt;
      &lt;wsdl:port name="MyPort4" binding="tns:EchoServiceSoap"&gt;
         &lt;soap:address location="http://VNUKALA-E6420.soa.local:9901/MyPath11/"/&gt;
      &lt;/wsdl:port&gt;
   &lt;/wsdl:service&gt;
&lt;/wsdl:definitions&gt;
</code></pre>]]></sdoc:description></wsdl:documentation>
    <shttp:operation location="/services/{key}/definition/{format}" method="GET" outputSerialization="*/*"/>
      <wsdl:input>
    <shttp:input name="key" part="key" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The service key]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
    <shttp:input name="format" part="format" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The desired document format, e.g. "wsdl", "wadl", "raml","swagger"]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
      <wsdl:output>
    <shttp:output name="" part="" type="entity"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="ServiceAdmin">
<wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The API used to manage PM services.]]></sdoc:description><sdoc:title xmlns:sdoc="http://soa.com/wsdl/doc">Service Management API</sdoc:title><sdoc:version xmlns:sdoc="http://soa.com/wsdl/doc">8.0.0</sdoc:version><sdoc:vendor xmlns:sdoc="http://soa.com/wsdl/doc">SOA Software</sdoc:vendor></wsdl:documentation>
    <wsdl:port name="ServiceAdmin_rest_port_https" binding="tns:ServiceAdminBinding">
    <shttp:address location="https://0.0.0.0/rest"/>
    </wsdl:port>
    <wsdl:port name="ServiceAdmin_rest_port_http" binding="tns:ServiceAdminBinding">
    <shttp:address location="http://0.0.0.0/rest"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>
