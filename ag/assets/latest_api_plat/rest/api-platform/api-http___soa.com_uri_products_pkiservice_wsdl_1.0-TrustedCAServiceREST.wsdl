<?xml version="1.0" encoding="UTF-8"?>
<wsdl:definitions targetNamespace="http://soa.com/uri/products/pkiservice/wsdl/1.0" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:tns="http://soa.com/uri/products/pkiservice/wsdl/1.0" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:nms1="http://soa.com/uri/products/pkiservice/xsd/1.0" xmlns:shttp="http://soa.com/wsdl/http">
  <wsdl:types>
    <xs:schema elementFormDefault="qualified" targetNamespace="http://soa.com/uri/products/pkiservice/xsd/1.0" version="1.0" xmlns:ns1="http://www.w3.org/2005/Atom" xmlns:ns2="http://jaxb.dev.java.net/array" xmlns:tns="http://soa.com/uri/products/pkiservice/xsd/1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema">
<xs:import namespace="http://www.w3.org/2005/Atom"/>
<xs:import namespace="http://jaxb.dev.java.net/array"/>
<xs:element name="Certificate" type="tns:CertificateType"/>
<xs:element name="CertificateChain" type="tns:CertificateChainType"/>
<xs:element name="TrustedCertificates" type="tns:TrustedCertificatesType"/>
<xs:complexType name="CertificateChainType"><xs:sequence><xs:element maxOccurs="unbounded" minOccurs="0" ref="tns:Certificate"/><xs:element minOccurs="0" name="Links"><xs:complexType><xs:sequence><xs:element maxOccurs="unbounded" minOccurs="0" ref="ns1:Link"/></xs:sequence></xs:complexType></xs:element></xs:sequence></xs:complexType>
<xs:complexType name="CertificateType"><xs:sequence><xs:element minOccurs="0" name="alias" type="xs:string"/><xs:element minOccurs="0" name="base64" type="xs:string"/><xs:element minOccurs="0" name="issuer" type="xs:string"/><xs:element minOccurs="0" name="subject" type="xs:string"/><xs:element minOccurs="0" name="notBefore" type="xs:dateTime"/><xs:element minOccurs="0" name="notAfter" type="xs:dateTime"/><xs:element name="version" type="xs:int"/><xs:element minOccurs="0" name="serialNumber" type="xs:integer"/><xs:element name="subjectAltNames"><xs:complexType><xs:sequence><xs:element maxOccurs="unbounded" minOccurs="0" name="entry"><xs:complexType><xs:sequence><xs:element minOccurs="0" name="key" type="xs:string"/><xs:element minOccurs="0" name="value" type="ns2:stringArray"/></xs:sequence></xs:complexType></xs:element></xs:sequence></xs:complexType></xs:element><xs:element minOccurs="0" name="Links"><xs:complexType><xs:sequence><xs:element maxOccurs="unbounded" minOccurs="0" ref="ns1:Link"/></xs:sequence></xs:complexType></xs:element></xs:sequence></xs:complexType>
<xs:complexType name="TrustedCertificatesType"><xs:sequence><xs:element maxOccurs="unbounded" minOccurs="0" ref="tns:Certificate"/><xs:element minOccurs="0" name="Links"><xs:complexType><xs:sequence><xs:element maxOccurs="unbounded" minOccurs="0" ref="ns1:Link"/></xs:sequence></xs:complexType></xs:element></xs:sequence></xs:complexType>
</xs:schema>
    <xs:schema elementFormDefault="qualified" targetNamespace="http://www.w3.org/2005/Atom" version="1.0" xmlns:tns="http://www.w3.org/2005/Atom" xmlns:xs="http://www.w3.org/2001/XMLSchema">
<xs:import namespace="http://www.w3.org/XML/1998/namespace"/>
<xs:element name="Link" type="tns:atomLink"/>
<xs:complexType name="atomLink"><xs:complexContent><xs:extension base="tns:atomCommonAttributes"><xs:sequence/><xs:attribute name="length" type="xs:string"/><xs:attribute name="title" type="xs:string"/><xs:attribute name="hreflang" type="xs:string"/><xs:attribute name="rel" type="xs:string"/><xs:attribute name="type" type="xs:string"/><xs:attribute name="href" type="xs:anyURI" use="required"/><xs:anyAttribute namespace="##other" processContents="skip"/></xs:extension></xs:complexContent></xs:complexType>
<xs:complexType name="atomCommonAttributes"><xs:sequence/><xs:attribute ref="xml:base"/><xs:attribute ref="xml:lang"/><xs:anyAttribute namespace="##other" processContents="skip"/></xs:complexType>
</xs:schema>
    <xs:schema targetNamespace="http://www.w3.org/XML/1998/namespace" version="1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema">
<xs:attribute name="base" type="xs:anyURI"/>
<xs:attribute name="lang" type="xs:string"/>
</xs:schema>
    <xs:schema targetNamespace="http://jaxb.dev.java.net/array" version="1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema">
<xs:complexType final="#all" name="stringArray"><xs:sequence><xs:element maxOccurs="unbounded" minOccurs="0" name="item" nillable="true" type="xs:string"/></xs:sequence></xs:complexType>
</xs:schema>
  </wsdl:types>
  <wsdl:message name="addTrustedCertificateRequestMessage">
    <wsdl:part name="parameter0" element="nms1:Certificate">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="addTrustedCertificateFormRequestMessage">
    <wsdl:part name="location" type="xs:string">
    </wsdl:part>
    <wsdl:part name="Cert" type="xs:string">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getTrustedCertificateRequestMessage">
    <wsdl:part name="alias" type="xs:string">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="addCertificateFromKeystoreResponseMessage">
  </wsdl:message>
  <wsdl:message name="addCertificateFromKeystoreRequestMessage">
    <wsdl:part name="Location" type="xs:string">
    </wsdl:part>
    <wsdl:part name="Store" type="xs:string">
    </wsdl:part>
    <wsdl:part name="Type" type="xs:string">
    </wsdl:part>
    <wsdl:part name="Password" type="xs:string">
    </wsdl:part>
    <wsdl:part name="Alias" type="xs:string">
    </wsdl:part>
    <wsdl:part name="AliasPassword" type="xs:string">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getTrustedCertificateBinaryResponseMessage">
  </wsdl:message>
  <wsdl:message name="deleteTrustedCertificateFormRequestMessage">
    <wsdl:part name="alias" type="xs:string">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="uploadTrustedCertificateResponseMessage">
    <wsdl:part name="uploadTrustedCertificateResponse" element="nms1:CertificateChain">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="uploadTrustedCertificateRequestMessage">
    <wsdl:part name="parameter0" type="tns:MultipartMessage">
    </wsdl:part>
    <wsdl:part name="alias" type="xs:string">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getTrustedCertificatesRequestMessage">
  </wsdl:message>
  <wsdl:message name="deleteTrustedCertificateFormResponseMessage">
  </wsdl:message>
  <wsdl:message name="getTrustedCertificateBinaryRequestMessage">
    <wsdl:part name="alias" type="xs:string">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteTrustedCertificateResponseMessage">
  </wsdl:message>
  <wsdl:message name="getTrustedCertificatesResponseMessage">
    <wsdl:part name="getTrustedCertificatesResponse" element="nms1:TrustedCertificates">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="addTrustedCertificateResponseMessage">
    <wsdl:part name="addTrustedCertificateResponse" element="nms1:CertificateChain">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="getTrustedCertificateResponseMessage">
    <wsdl:part name="getTrustedCertificateResponse" element="nms1:CertificateChain">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="addTrustedCertificateFormResponseMessage">
    <wsdl:part name="addTrustedCertificateFormResponse" type="xs:string">
    </wsdl:part>
  </wsdl:message>
  <wsdl:message name="deleteTrustedCertificateRequestMessage">
    <wsdl:part name="alias" type="xs:string">
    </wsdl:part>
  </wsdl:message>
  <wsdl:portType name="TrustedCAServiceRESTPortType">
    <wsdl:operation name="uploadTrustedCertificate">
      <wsdl:input message="tns:uploadTrustedCertificateRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:uploadTrustedCertificateResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addTrustedCertificate">
      <wsdl:input message="tns:addTrustedCertificateRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:addTrustedCertificateResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addTrustedCertificateForm">
      <wsdl:input message="tns:addTrustedCertificateFormRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:addTrustedCertificateFormResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addCertificateFromKeystore">
      <wsdl:input message="tns:addCertificateFromKeystoreRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:addCertificateFromKeystoreResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getTrustedCertificateBinary">
      <wsdl:input message="tns:getTrustedCertificateBinaryRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:getTrustedCertificateBinaryResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="deleteTrustedCertificate">
      <wsdl:input message="tns:deleteTrustedCertificateRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:deleteTrustedCertificateResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="deleteTrustedCertificateForm">
      <wsdl:input message="tns:deleteTrustedCertificateFormRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:deleteTrustedCertificateFormResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getTrustedCertificates">
      <wsdl:input message="tns:getTrustedCertificatesRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:getTrustedCertificatesResponseMessage">
    </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getTrustedCertificate">
      <wsdl:input message="tns:getTrustedCertificateRequestMessage">
    </wsdl:input>
      <wsdl:output message="tns:getTrustedCertificateResponseMessage">
    </wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="TrustedCAServiceRESTBinding" type="tns:TrustedCAServiceRESTPortType">
    <shttp:binding/>
    <wsdl:operation name="uploadTrustedCertificate">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">POST /certificates</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Upload a trusted certificate]]></sdoc:summary><sdoc:response code="200" message="Success" xmlns:sdoc="http://soa.com/wsdl/doc"/><sdoc:response code="300" message="Bad Request" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[The request did not include a valid multipart stream]]></sdoc:description></sdoc:response><sdoc:response code="409" message="Conflict" xmlns:sdoc="http://soa.com/wsdl/doc"><sdoc:description><![CDATA[The supplied alias is already in use]]></sdoc:description></sdoc:response><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p>Add a trusted certificate to the system.   An alias for the certificate may be provided.  If none
is specified, a random UUID value is used.  System Administrator access privileges are required.</p>
<h4>Request:</h4>
<pre><code>POST /rest/trustedca/certificates HTTP/1.1
Content-Type: multipart/form-data;type="application/octet-stream";boundary="boundary"
Accept: application/json

--boundary
... [binary data]
--boundary--
</code></pre>
<h4>Response:</h4>
<pre><code>HTTP/1.1 200 OK

{
  "alias": "1533534158",
  "base64": "MIIDJjCCAg6gAwIBAgIICxRP...6FbG+zBnSQOGRsDpGSw",
  "issuer": "cn=test1,ou=akana,o=perforce,l=la,st=ca,c=us",
  "subject": "cn=test1,ou=akana,o=perforce,l=la,st=ca,c=us",
  "notBefore": 1576084016000,
  "notAfter": 1733936816000,
  "version": 0,
  "serialNumber": 798350879637234159,
  "links": [
    {
      "rel": "self",
      "type": "application/json",
      "href": "http://localhost:9900/rest/trustedca/certificates/1533534158"
    },
    {
      "rel": "binary",
      "type": "application/octet-stream",
      "href": "http://localhost:9900/rest/trustedca/certificates/1533534158"
    },
    {
      "rel": "delete",
      "href": "http://localhost:9900/rest/trustedca/certificates/1533534158"
    }
  ]
}
</code></pre>]]></sdoc:description></wsdl:documentation>
    <shttp:operation inputSerialization="multipart/form-data" location="/certificates" method="POST" outputSerialization="application/json,application/xml"/>
      <wsdl:input>
    <shttp:input name="parameter0" part="parameter0" type="entity"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[A multipart message containing the certificate as a binary stream.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
    <shttp:input name="alias" part="alias" type="query"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[An optional query parameter for the alias to be used.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
      <wsdl:output>
    <shttp:output name="uploadTrustedCertificateResponse" part="uploadTrustedCertificateResponse" type="entity"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addTrustedCertificate">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">POST /certificates</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Add a trusted certificate]]></sdoc:summary><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p>Add a trusted certificate to the system.   An alias for the certificate may be provided.  If none
is specified, a random UUID value is used.  System Administrator access privileges are required.</p>
<h4>Request:</h4>
<pre><code>POST /rest/trustedca/certificates HTTP/1.1
Content-Type: application/json
Accept: application/json

{
  "alias": "alias1",
  "base64": "MIIDJjCCAg6gAwIBAgIICxRP...6FbG+zBnSQOGRsDpGSw"
}
</code></pre>
<h4>Response:</h4>
<pre><code>HTTP/1.1 200 OK

{
  "certificates": [
    {
      "alias": "alias1",
      "base64": "MIIDJjCCAg6gAwIBAgIICxRP...6FbG+zBnSQOGRsDpGSw",
      "issuer": "cn=test1,ou=akana,o=perforce,l=la,st=ca,c=us",
      "subject": "cn=test1,ou=akana,o=perforce,l=la,st=ca,c=us",
      "notBefore": 1576084016000,
      "notAfter": 1733936816000,
      "version": 0,
      "serialNumber": 798350879637234159
    }
  ],
  "links": [
    {
      "rel": "self",
      "type": "application/json",
      "href": "http://localhost:9900/rest/trustedca/certificates/alias1"
    },
    {
      "rel": "binary",
      "type": "application/octet-stream",
      "href": "http://localhost:9900/rest/trustedca/certificates/alias1"
    },
    {
      "rel": "delete",
      "href": "http://localhost:9900/rest/trustedca/certificates/alias1"
    }
  ]
}
</code></pre>]]></sdoc:description></wsdl:documentation>
    <shttp:operation inputSerialization="application/json" location="/certificates" method="POST" outputSerialization="application/json,application/xml"/>
      <wsdl:input>
    <shttp:input name="parameter0" part="parameter0" type="entity"/>
      </wsdl:input>
      <wsdl:output>
    <shttp:output name="addTrustedCertificateResponse" part="addTrustedCertificateResponse" type="entity"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addTrustedCertificateForm">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">POST /certificates</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Deprecated.  Add a certificate using a form]]></sdoc:summary><sdoc:deprecated xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:deprecated><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p><strong>Deprecated</strong>.  Please use the JSON or multipart operations to add a certificate.</p>]]></sdoc:description></wsdl:documentation>
    <shttp:operation inputSerialization="application/x-www-form-urlencoded" location="/certificates" method="POST" outputSerialization="text/plain"/>
      <wsdl:input>
    <shttp:input name="location" part="location" type="form"/>
    <shttp:input name="Cert" part="Cert" type="form"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Base64 encoded certificate bytes.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
      <wsdl:output>
    <shttp:output name="addTrustedCertificateFormResponse" part="addTrustedCertificateFormResponse" type="entity"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="addCertificateFromKeystore">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">POST /certificates/keystore</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Deprecated.  Add a certificate using a form]]></sdoc:summary><sdoc:deprecated xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:deprecated><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p><strong>Deprecated</strong>.  Please use the JSON or multipart operations to add a certificate.</p>]]></sdoc:description></wsdl:documentation>
    <shttp:operation inputSerialization="application/x-www-form-urlencoded" location="/certificates/keystore" method="POST"/>
      <wsdl:input>
    <shttp:input name="Location" part="Location" type="form"/>
    <shttp:input name="Store" part="Store" type="form"/>
    <shttp:input name="Type" part="Type" type="form"/>
    <shttp:input name="Password" part="Password" type="form"/>
    <shttp:input name="Alias" part="Alias" type="form"/>
    <shttp:input name="AliasPassword" part="AliasPassword" type="form"/>
      </wsdl:input>
    </wsdl:operation>
    <wsdl:operation name="getTrustedCertificateBinary">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">GET /certificates/{alias}</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Get trusted certificate binary]]></sdoc:summary><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p>Get a trusted certificate as raw bytes given a specified alias.</p>
<h4>Request:</h4>
<pre><code>GET /rest/trustedca/certificates/1533534158 HTTP/1.1
Accept: application/octet-stream
</code></pre>
<h4>Response:</h4>
<pre><code>HTTP/1.1 200 OK

[binary data]
</code></pre>]]></sdoc:description></wsdl:documentation>
    <shttp:operation location="/certificates/{alias}" method="GET" outputSerialization="application/json,application/octet-stream"/>
      <wsdl:input>
    <shttp:input name="alias" part="alias" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The alias identifying the required certificate.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
    </wsdl:operation>
    <wsdl:operation name="deleteTrustedCertificate">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">DELETE /certificates/{alias}</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Remove a trusted certificate]]></sdoc:summary><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p>Remove a trusted certificate from the system. The certificate to be deleted is identified by its alias. System
Administrator access privileges are required.</p>]]></sdoc:description></wsdl:documentation>
    <shttp:operation location="/certificates/{alias}" method="DELETE"/>
      <wsdl:input>
    <shttp:input name="alias" part="alias" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The alias identifying the certificate to delete.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
    </wsdl:operation>
    <wsdl:operation name="deleteTrustedCertificateForm">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">DELETE /certificates/{alias}</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Deprecated.  Delete a certificate usign a form]]></sdoc:summary><sdoc:deprecated xmlns:sdoc="http://soa.com/wsdl/doc">true</sdoc:deprecated><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p><strong>Deprecated</strong>.  Please use the non-form operations to add a certificate.</p>]]></sdoc:description></wsdl:documentation>
    <shttp:operation inputSerialization="application/x-www-form-urlencoded" location="/certificates/{alias}" method="DELETE"/>
      <wsdl:input>
    <shttp:input name="alias" part="alias" type="path"/>
      </wsdl:input>
    </wsdl:operation>
    <wsdl:operation name="getTrustedCertificates">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">GET /certificates</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Get trusted certificates]]></sdoc:summary><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p>Get a list of all trusted certificates in the system.  Each entry will not include the certificate
data, but will include a &ldquo;self&rdquo; link that may be used to retrieve detailed information, including the
certificate as a base64 encoded string.  If the client has authority to add a new trusted certificate,
the response will include an &ldquo;add&rdquo; link with the URL of the endpoint to POST any new trusted certificates.</p>
<h4>Request:</h4>
<pre><code>GET /rest/trustedca/certificates HTTP/1.1
Accept: application/json
</code></pre>
<h4>Response:</h4>
<pre><code>HTTP/1.1 200 OK

{
  "certificates": [
    {
      "alias": "smca",
      "issuer": "cn=policymanager,ou=akana,o=perforce,l=la,st=ca,c=us",
      "subject": "cn=policymanager,ou=akana,o=perforce,l=la,st=ca,c=us",
      "notBefore": 1576106819000,
      "notAfter": 1672315200000,
      "version": 0,
      "serialNumber": 294,
      "links": [
        {
          "rel": "self",
          "type": "application/json",
          "href": "http://localhost:9900/rest/trustedca/certificates/smca"
        },
        {
          "rel": "binary",
          "type": "application/octet-stream",
          "href": "http://localhost:9900/rest/trustedca/certificates/smca"
        },
        {
          "rel": "delete",
          "href": "http://localhost:9900/rest/trustedca/certificates/smca"
        }
      ]
    },
    {
      "alias": "1533534158",
      "issuer": "cn=nd1,ou=akana,o=perforce,l=la,st=ca,c=us",
      "subject": "cn=nd1,ou=akana,o=perforce,l=la,st=ca,c=us",
      "notBefore": 1576084016000,
      "notAfter": 1733936816000,
      "version": 0,
      "serialNumber": 798350879637234159,
      "links": [
        {
          "rel": "self",
          "type": "application/json",
          "href": "http://localhost:9900/rest/trustedca/certificates/1533534158"
        },
        {
          "rel": "binary",
          "type": "application/octet-stream",
          "href": "http://localhost:9900/rest/trustedca/certificates/1533534158"
        },
        {
          "rel": "delete",
          "href": "http://localhost:9900/rest/trustedca/certificates/1533534158"
        }
      ]
    },
    {
      "alias": "2181-9f4d-41d4-b8fb-fb3de97b595a",
      "issuer": "cn=pm1,ou=akana,o=perforce,l=la,st=ca,c=us",
      "subject": "cn=pm1,ou=akana,o=perforce,l=la,st=ca,c=us",
      "notBefore": 1576083555000,
      "notAfter": 1733936355000,
      "version": 0,
      "serialNumber": 3385896318653270171,
      "links": [
        {
          "rel": "self",
          "type": "application/json",
          "href": "http://localhost:9900/rest/trustedca/certificates/-1357046979"
        },
        {
          "rel": "binary",
          "type": "application/octet-stream",
          "href": "http://localhost:9900/rest/trustedca/certificates/-1357046979"
        },
        {
          "rel": "delete",
          "href": "http://localhost:9900/rest/trustedca/certificates/-1357046979"
        }
      ]
    }
  ],
  "links": [
    {
      "rel": "self",
      "href": "http://localhost:9900/rest/trustedca/certificates"
    },
    {
      "rel": "add",
      "href": "http://localhost:9900/rest/trustedca/certificates"
    }
  ]
}
</code></pre>]]></sdoc:description></wsdl:documentation>
    <shttp:operation location="/certificates" method="GET" outputSerialization="application/json,application/xml"/>
      <wsdl:output>
    <shttp:output name="getTrustedCertificatesResponse" part="getTrustedCertificatesResponse" type="entity"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="getTrustedCertificate">
<wsdl:documentation><sdoc:displayName xmlns:sdoc="http://soa.com/wsdl/doc">GET /certificates/{alias}</sdoc:displayName><sdoc:summary xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[Get trusted certificate]]></sdoc:summary><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p>Get information for a trusted certificate given a specified alias.</p>
<h4>Request:</h4>
<pre><code>GET /rest/trustedca/certificates/1533534158 HTTP/1.1
Accept: application/json
</code></pre>
<h4>Response:</h4>
<pre><code>HTTP/1.1 200 OK

{
  "certificates": [
    {
      "alias":"1533534158",
      "base64": "MIIDJjCCAg6gAwIBAgIILv0ewz...OQN98Fgexl3gM0949iavID",
      "issuer": "cn=pm1,ou=akana,o=perforce,l=la,st=ca,c=us",
      "subject": "cn=pm1,ou=akana,o=perforce,l=la,st=ca,c=us",
      "notBefore": 1576083555000,
      "notAfter": 1733936355000,
      "version": 0,
      "serialNumber": 3385896318653270171
    }
  ],
  "links": [
    {
      "rel": "self",
      "href": "http://localhost:9900/rest/trstedca/certificates/1533534158"
    }
  ]
}
</code></pre>]]></sdoc:description></wsdl:documentation>
    <shttp:operation location="/certificates/{alias}" method="GET" outputSerialization="application/json,application/xml"/>
      <wsdl:input>
    <shttp:input name="alias" part="alias" type="path"><wsdl:documentation><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[The alias identifying the required certificate.]]></sdoc:description><sdoc:required xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:required><sdoc:multiple xmlns:sdoc="http://soa.com/wsdl/doc">false</sdoc:multiple></wsdl:documentation></shttp:input>
      </wsdl:input>
      <wsdl:output>
    <shttp:output name="getTrustedCertificateResponse" part="getTrustedCertificateResponse" type="entity"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="TrustedCAServiceREST">
<wsdl:documentation><sdoc:title xmlns:sdoc="http://soa.com/wsdl/doc">Trusted CA Management Service</sdoc:title><sdoc:version xmlns:sdoc="http://soa.com/wsdl/doc">2020.0.0</sdoc:version><sdoc:vendor xmlns:sdoc="http://soa.com/wsdl/doc">Akana</sdoc:vendor><sdoc:description xmlns:sdoc="http://soa.com/wsdl/doc"><![CDATA[<p>This API is used to query and manipulate trusted certificates.<br  /></p>]]></sdoc:description></wsdl:documentation>
    <wsdl:port name="TrustedCAServiceREST_rest_port_https" binding="tns:TrustedCAServiceRESTBinding">
    <shttp:address location="https://0.0.0.0/rest/trustedca"/>
    </wsdl:port>
    <wsdl:port name="TrustedCAServiceREST_rest_port_http" binding="tns:TrustedCAServiceRESTBinding">
    <shttp:address location="http://0.0.0.0/rest/trustedca"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>
