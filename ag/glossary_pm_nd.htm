---
layout: page
title: Glossary of Terms | Policy Manager and Network Director
description: Definitions for some of the terms used in Policy Manager and Network Director.
product: cm
category: learn
sub-nav-class: 
weight: 05
type: page
nav-title: Glossary of Terms (Policy Manager)
---
<h2 id="top">Glossary of Terms (Policy Manager/Network Director)</h2>
<p>Key terminology used in the Policy Manager and the API Gateway (Network Director).</p>
<div class = "divider1"></div>



<dl>
<dt>Access Key</dt>
<dd>Policy Manager provides key management that uses an <strong>access key</strong> encryption/decryption service to monitor access to Policy Manager component functionality and managed web services. The access key guarantees message integrity by signing the message with a private key and verifying the message with a public key.</dd>
<dd>CATEGORY: Security</dd>


<dt>Access Point</dt>
<dd>The location of a business service is defined by an Access Point. An access point is defined by the specification pointers (binding templates) defined for each business service. The access point description is contained within the bindingTemplate construct and is indicated by an <span class="apidoc_code">&lt;accessPoint&gt;</span> tag that contains the URLType element that defines the single attribute (listener type) used to access the web service, and the business service URL address.</dd>
<dd>CATEGORY: Registry</dd>


<dt>Administrator</dt>
<dd>An individual responsible for setup and maintenance of the IT infrastructure and system configuration that comprises a SOA Software Policy Manager production site.</dd>
<dd>CATEGORY: Policy Manager</dd>


<dt>Advanced Search</dt>
<dd>Advanced Search is a Policy Manager <strong>Registry</strong> function that searches registry data based on the <strong>Standard Search</strong> functionality plus additional filters that allow you to search by Category Scheme and Identifier Scheme. The <strong>Advanced Search</strong> is performed against your local Registry as defined in your Policy Manager implementation.</dd>
<dd>CATEGORY: Registry</dd>


<dt>Aggregate Performance</dt>
<dd>A display option on the Dashboard's <strong>Performance Metrics Chart</strong> that presents a performance summary of all operations associated with the current web service.</dd>
<dd>CATEGORY: Dashboard</dd>


<dt>Aggregate Policy</dt>
<dd>An Aggregate Policy is a collection of policies that are gathered together to form a policy group. Policies included in an Aggregate policy are defined to achieve a specific purpose relative to governing Policy Manager objects such as Organizations or Services. Aggregate Policies can be defined for <strong>Operational</strong> and <strong>Compliance</strong> policy types.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Alert Audit Trail</dt>
<dd>A Policy Manager <strong>Auditing</strong> function that allows you to audit and record general system activity related to alerts that are raised during the operation of a Policy Manager deployment.</dd>
<dd>CATEGORY: Monitoring</dd>


<dt>Alert Code</dt>
<dd>An <strong>Alert Code</strong> defines a specific category of event. You can subscribe to Alert Codes and receive notifications if a system conditions matches an Alert Code that is designated to monitor the system. Alerts are typically raised due to failures or unexpected results during the operation of your Policy Manager production site. Each Alert Code has an ID that specifies precisely what event causes Policy Manager to generate an alert.</dd>
<dd>CATEGORY: Alerts</dd>


<dt>Alert Export Wizard</dt>
<dd>The <strong>Alert Export Wizard</strong> exports alerts and saves the details to an XML file independent of the Policy Manager database. This provides a method of archiving alerts that are no longer active and also facilitates migrating alert data another application.</dd>
<dd>CATEGORY: Alerts</dd>


<dt>Alert ID</dt>
<dd>A unique identifier that is generated when an alert is raised. It is associated with the Alert Code that represents the category of an alert.</dd>
<dd>CATEGORY: Alerts</dd>


<dt>Alert Manager Subsystem</dt>
<dd>The Alert Manager Subsystem (amengine) observes and responds to system conditions associated with a Policy Manager deployment with user-defined business conditions (Alerts).</dd>
<dd>CATEGORY: Policy Manager</dd>


<dt>Alert Monitoring</dt>
<dd>Alert Monitoring provides a method of <strong>observing</strong> system conditions that are defined within Policy Manager <strong>Alerts</strong>. Status options can be applied to monitored alerts to facilitate the cycles of the decision-support process.</dd>
<dd>CATEGORY: Alerts</dd>


<dt>Alert Summary</dt>
<dd>The <strong>Alert Summary</strong> presents an aggregate view of logged alerts associated with a Policy Manager deployment.</dd>
<dd>CATEGORY: Alerts</dd>


<dt>Alias</dt>
<dd>An alias is an alternative name that is applied to a Policy Manager user account that has been established as a trusted domain. An alias name provides enhanced security when user access is required in another service domain (another Policy Manager production site).</dd>
<dd>CATEGORY: Policies</dd>


<dt>All Operations Usage Chart</dt>
<dd>The <strong>All Operations Usage Chart</strong> is a Policy Manager <strong>Monitoring</strong> function that provides an encapsulated view of usage statistics for web operations that are configured with the <strong>Usage</strong> Policy Component.</dd>
<dd>CATEGORY: Monitoring</dd>


<dt>Application Privilege</dt>
<dd>An application privilege is a static privilege type. A set of application privileges are part of the Policy Manager default installation. This privilege set includes standard administrator privileges (including super-user), and a full range of privileges covering Policy Manager functionality. Application privileges can be assigned and managed within a user account definition, but are read-only and cannot be deleted from the system.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Application Server</dt>
<dd>An application server is a server program in a computer in a distributed network that provides the business logic for an application program. The application server is frequently viewed as part of a three-tier application, consisting of a graphical user interface (GUI) server, an application (business logic) server, and a database and transaction server.</dd>
<dd>CATEGORY: Container</dd>


<dt>Audit Data</dt>
<dd>Audit data is generated by Policy Manager when security-focused actions (add, modify, delete) occur during the operation of a Policy Manager deployment. Audit data is logged to a database file and is generated through two sources: 1) Through Policy Manager update operations, and 2) By custom configured auditing functions in policies.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Audit Policy Manager</dt>
<dd>The SOA Software Policy Manager <strong>Monitoring</strong> interface (accessible via the Policy Manager Workbench <strong>Monitoring</strong> tab) provides tools that administrators and key personnel responsible for web service management can use to audit alert and security audit trails the performance of a Policy Manager Production site.</dd>
<dd>CATEGORY: Auditing</dd>


<dt>Audit Trail Wizard</dt>
<dd>The <strong>Audit Trail Wizard</strong> is a Policy Manager <strong>Auditing</strong> function that allows you to export audit trail data to an XML file. Data to be exported is based on the current filter criteria and resulting audit trail search results. Exported audit trail data can be used in different ways; for example, used in third-party statistical tools or archived as a historical record.</dd>
<dd>CATEGORY: Monitoring</dd>


<dt>Auditing</dt>
<dd>Policy Manager provides auditing functionality that records security-focused actions (add, modify, delete) that occur during the operation of a Policy Manager deployment.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Authenticate using SAML</dt>
<dd><strong>Authenticate using SAML</strong> is an authentication option in the Security <strong>Pipeline</strong> Component. This option utilizes the <strong>Secure Access Method Language</strong> (SAML) implementation which is a standard XML-based framework for the exchange and authentication and authorization information.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Authenticate using UserID/Password</dt>
<dd><strong>Authenticate user User ID/Password</strong> is an authentication option in the Security <strong>Pipeline</strong> Component. This option performs authentication by gathering User ID/Password credentials from the SOAP Message Body. You can define up to three User ID/Password combinations by referencing the XPath location of the credential within the SOAP Message Body.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Authenticate using X.509 Certificate of HTTPS</dt>
<dd><strong>Authenticate using X.509 of HTTPS Context</strong> is an authentication option in the Security <strong>Pipeline</strong> Component. This option requires your client application use a secure transport protocol (HTTPS socket) to make a secure connection with the application server.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Authenticate using X.509 of XPath</dt>
<dd><strong>Authenticate using X.509 Certificate</strong> is an authentication option in the Security <strong>Pipeline</strong> Component. This option performs authentication using the X.509 certificate referenced in the specified XPath.</dd>
<dd>CATEGORY: Security, Policies</dd>


<dt>Authentication</dt>
<dd>Authentication is a security service that validates the identity of a communicating entity (user or application).</dd>
<dd>CATEGORY: Policies, Registry</dd>


<dt>Authentication Policy</dt>
<dd>An authentication policy provides instructions to an SOA Container for what identity domain, realm, to use when authenticating a caller.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Authorization Policy</dt>
<dd>An authorization policy provides instructions to an SOA Container for how to perform an authorization call, such as which domain, or realm, to use.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Binding</dt>
<dd>A binding is reference to an external framework (interface) that defines how the WSDL user will reach the implementation of services. This reference specifies the protocol and data format to be used in the transmitting message defined by the associated interface.Each binding technique is specified in the WSDL and points to the server that has access to the actual implementation of your Web service. Policy Manger provides an extensible WSDL Binding framework that supports out-of-the-box Binding implementations and custom Binding implementations. The Binding Framework includes API's and extensions points in both the SOA Containers and the Policy Manager <strong>Management Console</strong> user interface. The <strong>SOA Container</strong> and <strong>Management Console</strong> portions of the framework are independent of each other however. In some situations, only the user interface of the <strong>Management Console</strong> is extended for a type of binding. This is the case when an <strong>SOA Container</strong> is not used to virtualize services using the binding. Bindings drive the service management process and must be present and available when defining and managing service configurations. Because of this, Bindings must be added to the Policy Manager <strong>Management Console</strong> as a prerequisite to using the various service management wizards and access point functionality. SOAP 1.1, SOAP 1.2, HTTP, and POX (Plain Old XML) binding types are supported. If the specified interface does not contain one of the three binding types, a custom binding can be specified by supplying the appropriate XML.</dd>
<dd>CATEGORY: Policy Manager, Service Management</dd>


<dt>Binding Template</dt>
<dd>A Binding Template designates that the accessPoint contains a bindingKey that points to a different bindingTemplate entry. The Binding Template is generally used when a business or entity wants to expose a service description and the service is described in a separate bindingTemplate record.</dd>


<dt>Browse Categories</dt>
<dd>Browse Categories is a Policy Manager <strong>Registry</strong> search option that provides a method of viewing business services or providers that are associated with a particular category scheme. This search option is useful if you are trying to determine an appropriate category scheme to associate with a business provider or service you are defining.</dd>
<dd>CATEGORY: Registry</dd>


<dt>Business Requirements</dt>
<dd>Business requirements define the work activities and work practices associated with a Policy Manager deployment including 1) Setup and configuration of the computer/network infrastructure, 2) Web service configuration, and 3) Policy Manager configuration.</dd>
<dd>CATEGORY: Policy Manager</dd>


<dt>Cache Component</dt>
<dd>The <strong>Cache Component</strong> is a <strong>Pipeline</strong> Policy Component that increases performance by keeping common information localized.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Caching</dt>
<dd>Caching is a high-speed storage mechanism in the reserved section of main memory or independent high-speed storage device. It provides a method of increasing web service performance when creating an XML Web Service or consuming an XML Web service.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Category</dt>
<dd>A Category is a classification code that represents different aspects of a web service (for example, products, services, or technical specifications). Within UDDI, a categorization tModel is used for structuring category content.</dd>
<dd>CATEGORY: Registry</dd>


<dt>Category Hierarchy</dt>
<dd>A <strong>Category Hierarchy</strong> is a series of Category Schemes that are organized in an ordered group. In Policy Manager, a Category Hierarchy typically consists of industry standard category schemes, and Policy Manager product specific category schemes. You can navigate the tiers of the Category Hierarchy using the Service Manager <strong>Registry Configuration</strong> functionality.</dd>
<dd>CATEGORY: Registry</dd>


<dt>Category Scheme</dt>
<dd>A <strong>Category Scheme</strong> is a set of classification codes (Categories) that represent different aspects of a web service (for example, products, services, or technical specifications).</dd>
<dd>CATEGORY: Registry</dd>


<dt>Certificate of Authority</dt>
<dd>A Certificate of Authority (CA) is an authority in a network that issues and manages security credentials and public keys for message encryption.</dd>
<dd>CATEGORY: Registry</dd>


<dt>Clone (Container)</dt>
<dd><strong>Container Cloning</strong> is a Policy Manager <strong>Services</strong> function that provides the ability to take the policy configuration associated with a Container and replicate it to other existing Containers. This process optimizes the Container configuration process by enabling the reusability of configuration parameters.</dd>
<dd>CATEGORY: Services</dd>


<dt>Cluster</dt>
<dd>A cluster is a group of servers and other resources that act like a single system and enable high availability and, in some cases, load balancing and parallel processing.</dd>


<dt>Cluster Support</dt>
<dd>A Policy Manager feature that adds the ability for a Container to be managed as part of a Cluster in Policy Manager. It also provides the means to configure state replication between Cluster Nodes. Any Cluster Node may be configured to act as a master, from which any number of slaves can fetch bundle and configuration information in order to synchronize the state of all Cluster Members.</dd>


<dt>Clustering</dt>
<dd>Clustering is the grouping together of hardware and software into nodes that work together as a single system to ensure that an application remains online for users during excessive loads, or if one of the nodes fails.</dd>


<dt>Comment</dt>
<dd>Alert records provide a <strong>Comment</strong> area that allows you to annotate the alert record with status or reference information related to the alert resolution progress.</dd>
<dd>CATEGORY: Alerts</dd>


<dt>Compliance Policy</dt>
<dd>Compliance Policies allow organizations to create standards that control the quality of the data in the repository. These policies can be used to analyze the service metamodel, WSDL documents, Schema, and transactional data to determine whether they meet corporate standards. A compliance policy is a collection of compliance rules.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Compliance Rule</dt>
<dd>A Compliance Rule is a policy that defines a data quality standard. A combination of rules included in a Compliance Policy can be used to analyze the service metamodel, WSDL documents, Schema, and transactional data to determine whether they meet corporate standards.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Compliance Script Policy</dt>
<dd>A Script Policy allows you to define a rule that uses a combination of XQuery and Java to first select the content for analysis and then to perform the analysis.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Compliance WSI BP 1.1 Policy</dt>
<dd>The WSI BP 1.1 Policy is a Policy Manager compliance policy that integrates with the WS-I (Web Service Interoperability) Basic Profile 1.0 for the purpose of providing interoperability support. The WS-I Basic Profile (official abbreviation is BP), is a specification from the Web Services Interoperability industry consortium (WS-I), and provides interoperability guidance for core Web Services specifications such as SOAP, WSDL, and UDDI. The profile uses Web Services Description Language (WSDL) to enable the description of services as sets of endpoints operating on messages.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Compliance XQuery Policy</dt>
<dd>An XQuery Policy allows you to define a rule that executes an XQuery on the service or message model to determine compliance.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Compression Component</dt>
<dd>The <strong>Compression Component</strong> is a <strong>Pipeline</strong> Policy Component that compacts the message being sent so the message is sent faster and with less bandwidth. This component is not configurable.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Configure Container Instance Wizard</dt>
<dd>The <strong>Configure Container Instance Wizard</strong> is launched after a Policy Manager installation. The container configuration process creates a basic container configuration with a minimum set of OSGI bundles, sets the Policy Manager Default properties, and sets the SOA Software Default Policy Manager Repository.</dd>
<dd>CATEGORY: Container</dd>


<dt>Connection Factory</dt>
<dd>A connection factory is the object a client uses to create a connection with a provider. A connection factory encapsulates a set of connection configuration parameters that has been defined by an administrator.</dd>
<dd>CATEGORY: Services</dd>


<dt>Connection Property</dt>
<dd>Connection properties are user-defined additional properties that allow you to specify the messaging engine that an application will connect to.</dd>
<dd>CATEGORY: Listener, Access Point</dd>


<dt>Consumed Service</dt>
<dd>A service is consumed when its business functionality is used by clients in different applications or business processes (Organizations). In Workbench, one organization can consume the services of another organization. A service is identified as consumed when it is associated with an approved <strong>Contract</strong> that defines access terms, or it is <strong>Discovered</strong> by Containers that are part of the current organization.</dd>
<dd>CATEGORY: Contracts</dd>


<dt>Consumed Services Contract</dt>
<dd>A Consumed Services Contract enables the consumption of a service. A service is consumed when its business functionality is used by clients in different applications or business processes (Organizations). In Workbench, one organization can consume the services of another organization. A service is identified as consumed when it is associated with an approved <strong>Contract</strong> that defines rules and access terms, or it is <strong>Discovered</strong> by Containers that are part of the current organization. The <strong>Request Contract</strong> action is initiated by the <strong>Consumer Organization</strong> and submits a contract usage request to the <strong>Provider Organization</strong> of a service.</dd>
<dd>CATEGORY: Contracts</dd>


<dt>Contact</dt>
<dd>The Policy Manager <strong>Registry</strong> provides an interface for managing business provider contact information. Including contact information for each individual and/or role associated with a businessEntity enables direct communication and facilitates the support process.</dd>
<dd>CATEGORY: Organization Contacts</dd>


<dt>Container</dt>
<dd>General term that represents an Application Server.</dd>
<dd>CATEGORY: Service Relationships</dd>


<dt>Container Instance</dt>
<dd>A Container Instance performs a specific web service management function in a Policy Manager deployment. Subsystem Instances are generated with the Configure Container Instance Wizard and are configured with a unique Instance Name, Description, and Listener configuration relative to the deployment requirements.</dd>
<dd>CATEGORY: Policy Manager, Container</dd>


<dt>Contract Object</dt>
<dd>A <strong>Contract</strong> is a document that provisions the expected utilization of services. Each contract is configured with an access control method that represents the method a service uses to enforce a contract. There are two types of access control that can be assigned to a contract. A service can enforce a contract by authorizing an application or Consumer Organization Identities to use a service, OR a service can use a default contract and allow consumer (application and organization) users that do not have a contract explicitly assigned. You define contracts at the root level using the <strong>Add Contract Wizard.</strong> In order to create a contract you must have at least one Organization defined that is assigned to the contract as either a Provider or Consumer Organization. The contract definition is added the Provided or Consumed Contracts folder of the Organizations selected during the configuration process. Here you can modify the contract, define contract scope, consumer identities, assign QoS policies, and configure contract metadata.</dd>
<dd>CATEGORY: Workbench Object</dd>


<dt>Create Physical Service Wizard</dt>
<dd>The <strong>Create Physical Service Wizard</strong> is a service management tool used to configure Container hosting and service management parameters for an existing physical service. This wizard steps you through a series of configuration tasks where you select a wizard mode, select service management hosting options for your deployment scenario, and configure access policies.</dd>
<dd>CATEGORY: Services</dd>


<dt>Credentials</dt>
<dd>An authentication credential represents authentication data used to validate the identity of a communicating entity. Authentication credentials can be inserted into a SOAP Message (Message Body or Message Header), or can be accessed from the transport (context) over which a message is received.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Dashboard</dt>
<dd>The Policy Manager <strong>Dashboard</strong> is a configurable information system that is used to measure the performance and operational health of web services that comprise a Policy Manager deployment.</dd>
<dd>CATEGORY: Dashboard</dd>


<dt>Data Refresh Periods</dt>
<dd>A Data Refresh Period is a Performance Metrics Chart graph control that allows you to select the time interval by which to summarize chart data. Selectable intervals include 5-Minute, 15-Minute, and 1-Hour.</dd>
<dd>CATEGORY: Dashboard, Performance Metrics Chart</dd>


<dt>Data Transformation Component</dt>
<dd>The Data Transformation Component is a <strong>Pipeline</strong> Policy Component that performs an XSLT transformation on the message that is passing through the policy. This can aid compatibility between web services and web service clients, even if there are incompatible versions.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Decompression Component</dt>
<dd>The Decompression Component is a <strong>Pipeline</strong> Policy Component that unpacks the message to its original form after being compressed so the message can be read. This component is not configurable.</dd>
<dd>CATEGORY: Policies, Pipeline Policy, Operational Policy</dd>


<dt>Decryption Component</dt>
<dd>The Decryption Component is a <strong>Pipeline</strong> Policy Component that deciphers information so that it is understandable. It uses a key to unlock the information.</dd>
<dd>CATEGORY: Policies, Pipeline Policy, Operational Policy</dd>


<dt>Delegate</dt>
<dd>A Policy Manager feature that includes the policy implementation point for third-party web service frameworks, and provides support for WS-Policy and dynamic endpoint resolution. It can only be deployed with a web service framework like Apache Axis. A Delegate Access Point is also included for remote delegates.</dd>
<dd>CATEGORY: Policy Manager</dd>


<dt>Delegate Access Point</dt>
<dd>A Policy Manager feature that provides a remote interface to delegates for policy implementation and message delivery. Any delegate that does not provide its own policy implementation and message delivery mechanism can route messages through the Access Point.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Delegated Administration</dt>
<dd>Delegated administration refers to a decentralized model of role or group management. In this model, the application or process owner creates, manages and delegates the management of roles.</dd>
<dd>CATEGORY: Policy Manager</dd>


<dt>Deploy</dt>
<dd>Deploy in its IT context encompasses all the processes involved in getting new software or hardware up and running properly in its environment, including installation, configuration, running, testing, and making necessary changes.</dd>
<dd>CATEGORY: Policy Manager, Administration</dd>


<dt>Deployment</dt>
<dd>A <strong>Deployment</strong> is a Policy Manager Production site comprised of a computer/network infrastructure, web service implementation, and Policy Manager implementation that utilizes Containers and a custom security configuration to secure the web service transaction cycle.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Digest Function</dt>
<dd>A cryptographic function that creates a digital summary of information so that, if the information is altered, the summary (known as a hash) will also change; also knows as a hash function.</dd>
<dd>CATEGORY: Security</dd>


<dt>Discovered Service</dt>
<dd>Service Discovery functionality is implemented using a <strong>Discovery Agent</strong> that is a web service interface to Policy Manager that is used to request services, manage services, and unmanage services. The purpose of a Discovery Agent is to discover physical services in the application server container, and deploy a handler around the service. This handler associates the Container with the physical service, initializes the automatic <strong>roll-up</strong> usage data collection functionality in Policy Manager, and enables the ability of the service to be managed by a policy configuration.</dd>
<dd>CATEGORY: Services, Containers</dd>


<dt>Discovery Agent</dt>
<dd>A <strong>Discovery Agent</strong> is part of the Policy Manager 5.2 Embedded Management Point implementation and enables the discovery of services on an application server. Service discovery is accomplished by deploying an application server specific handler that interacts with the Policy Manager subsystems to perform various service management functions.</dd>
<dd>CATEGORY: Dashboard, Discovered Services Portlet</dd>


<dt>Discovery URL</dt>
<dd>A Discovery URL provides a method of locating and interrogating a web service description. The Discovery URL points to web addressable discovery documents and provides access to specification information. Discovery information is typically presented in XML format, and aligns with the UDDI businessEntity guidelines and conventions.</dd>
<dd>CATEGORY: Registry</dd>


<dt>Effective Policy</dt>
<dd>After a policy is created, it is associated with a particular policy subject by attaching it to the subject. Policies are attached to deployed resources (for example, services or ports) and are only considered the effective policy of the deployed resource itself. When a policy is attached to a subject, an assertion is added to the WSDL document of the web service <strong>resource.</strong></dd>
<dd>CATEGORY: Policies</dd>


<dt>Email Groups</dt>
<dd>An Email Group is a collection of one or more email addresses to be notified in the event of a specific alert. If you define an Email Group within Policy Manager, you can assign that Email Group to one or more Alert Codes. Whenever an alert is generated for that Alert Code, Policy Manager automatically sends an email message to each of the email addresses in the Email Group.</dd>
<dd>CATEGORY: Alerts</dd>


<dt>Embedded Management Point</dt>
<dd>A 5.2 Embedded Management Point is a web service proxy that integrates with a J2EE container (for example, Apache Tomcat) and its deployed web services. It provides standard Management Point functionality plus additional features including a <strong>Discovery Agent</strong> and <strong>Handler</strong> that discovers physical services on your application server makes them accessible in the Policy Manager application.</dd>
<dd>CATEGORY: Container</dd>


<dt>Encryption</dt>
<dd>Encryption is the primary approach for ensuring that message privacy is maintained. It secures the privacy of a message by uniquely transforming data on the sender side to ensure that it cannot be retransformed by a potential interceptor on the receiver side.</dd>
<dd>CATEGORY: Security</dd>


<dt>Encryption Component</dt>
<dd>The Encryption Component is a <strong>Pipeline</strong> Policy Component that ciphers information so that it is not understandable without a key to unlock the information.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Endpoint</dt>
<dd>An endpoint designates that the accessPoint points to the actual service endpoint (the network address at which the Web service can be invoked).</dd>
<dd>CATEGORY: Services</dd>


<dt>Export (Usage Data)</dt>
<dd>Export is a Policy Manager <strong>Monitoring</strong> function that is executed using a wizard utility. Data is converted to XML format and is based on the defined filter criteria for <strong>Usage Data</strong> in Policy Manager <strong>Workbench</strong> &gt; <strong>Monitoring</strong> &gt; <strong>Logs</strong>.</dd>
<dd>CATEGORY: Monitoring</dd>


<dt>External Load Balancer</dt>
<dd>A hardware load balancer is positioned in the network infrastructure between the Firewall and Web Servers. Web site traffic passes through a Firewall to a Hardware Load Balancer and the Load balancer distributes this traffic to the Web Servers.</dd>


<dt>Failover</dt>
<dd>Failover is a backup operational mode in which the functions of a system component (for example, processor, server, network, or database) are assumed by secondary system components when the primary component becomes unavailable through either failure or scheduled down time.</dd>
<dd>CATEGORY: Administration</dd>


<dt>Fault</dt>
<dd>A fault is an error that occurs when a client application sends a request to a service and does not receive a response. Faults can be monitored in the <strong>Alerts</strong> section of Policy Manager, and using Performance Metrics Charts <strong>Custom Monitoring Options</strong>.</dd>
<dd>CATEGORY: Alerts, Dashboard</dd>


<dt>Filtered Usage Data</dt>
<dd>Filtered Usage Data is generated on the <strong>Modify Pipeline Policy</strong> screen by configuring one of three Usage Monitoring filtering options in a Policy Manager policy. Configurable filters include <strong>Transactions resulting in errors</strong>, <strong>Percentage of Requests</strong>, or <strong>XPath Value</strong>. Filtered usage data can be viewed, filtered, and exported in the <strong>Workbench</strong> &gt; <strong>Monitoring</strong> &gt; <strong>Logs</strong> section of Policy Manager.</dd>
<dd>CATEGORY: Policies, Monitoring</dd>


<dt>Governance</dt>
<dd>Within the context of the SOA Operational Lifecycle Model, Governance is the process of driving and coordinating policy between all the different SOA lifecycles.</dd>
<dd>CATEGORY: Policy Manager, SOA</dd>


<dt>Governance Application</dt>
<dd>The Governance Application acts as the authoritative store of governance policies. The Governance Application and SOA Containers will exchange governance policies so that they can be enforced.</dd>

<dd>CATEGORY: Policy Manager, SOA</dd>


<dt>Governance Policy</dt>
<dd>A governance policy describes security and monitoring requirements of an endpoint. The governing of a web service endpoint is driven through the definition of governance policies. Governance policies can be associated with different components of a service's definition (for example, service endpoint, binding, specific operation of a binding, or specific input/output/fault message of an operation). Governance policies are defined using a Governance Application and are enforced by a manageability container.</dd>
<dd>Also called <strong>Web Service Governance Policies</strong>.</dd>
<dd>CATEGORY: Policy Manager, Policies</dd>


<dt>Governance Policy Domains</dt>
<dd>WS-Security, WS-Addressing, and WS-ReliableMessaging.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Hash Function</dt>
<dd>A cryptographic function that creates a digital summary of information so that, if the information is altered, the summary (known as a hash) will also change; also known as a digest function.</dd>
<dd>CATEGORY: Security</dd>


<dt>Host Name</dt>
<dd>A <strong>Host Name</strong> is the unique name by which a computer is known on a network. Specifying a Host Name is required in various Policy Manager configuration activities.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Hot Standby</dt>
<dd>Hot standbys involve an automatic switch-over from the failed primary to a secondary idle server. In this case, the secondary server automatically boots and takes over from the primary one.</dd>


<dt>HTTP</dt>
<dd>Hypertext Transfer Protocol. An IETF (Internet Engineering Task Force) standard application protocol for distributed, collaborative, hypermedia systems.</dd>
<dd>CATEGORY: Policies</dd>


<dt>HTTP Basic Authentication</dt>
<dd>The Policy Manager implementation of HTTP Basic Authentication follows the Hypertext Transfer Protocol (HTTP) Specification. It is utilized in the <strong>Pipeline</strong> Security Component authentication option <strong>Authenticate using User ID/Password from HTTP Basic Authentication</strong>.</dd>
<dd>CATEGORY: Policies</dd>


<dt>HTTP Security Policy</dt>
<dd>The <strong>HTTP Security Policy</strong> specifies the transport security requirements for web services (SOAP or REST) using HTTP or HTTPS as the underlying transport protocol. Configurable options include HTTP Authentication, SSL Authentication, and Cookie Authentication.</dd>
<dd>CATEGORY: Policies</dd>


<dt>HTTPS</dt>
<dd>Hypertext Transfer Protocol Secure. HTTP running over SSL/TLS. A secure, encrypted, authenticated version of HTTP. The <strong>Pipeline</strong> Security Component supports authentication using HTTPS.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Identifier</dt>
<dd>Identifiers are used to logically group Providers by a common form of identification. Identifiers are optional descriptions and are intended to enhance the discovery of business providers and services in search operations. Identifiers are generally trade-focused and indicate the identity of the businessEntity or publishing party (for example, D-U-N-S numbers, Global Location Number (GLN), or tax identifiers) associated with the business providers and services.</dd>
<dd>CATEGORY: Registry</dd>


<dt>Identifier Scheme</dt>
<dd>A collection of Identifiers. See <strong>Identifiers.</strong></dd>
<dd>CATEGORY: Registry</dd>


<dt>Identity Management</dt>
<dd>Identity Management is an administrative activity that deals with identifying individuals in a system (such as a country, a network, or an enterprise) and controlling their access to resources within that system by associating user rights and restrictions with the established identity.</dd>
<dd>CATEGORY: Security</dd>


<dt>Identity System</dt>
<dd>An identity management application is referred to as an Identity System. Each identity system provides a method for storing data and making this data available to network users and administrators. Data is typically stored in what is called a <strong>Directory</strong>.</dd>
<dd>CATEGORY: Configure</dd>


<dt>Insert Credentials Component</dt>
<dd>The Insert Credentials Component is a <strong>Pipeline</strong> Policy Component that allows Authentication Credentials to be inserted anywhere in the SOAP message using XPath.</dd>
<dd>CATEGORY: Policies</dd>


<dt>IP</dt>
<dd>IP standard for Internet Protocol. An IP address is a 32-bit number that identifies each sender or receiver of information that is sent in packets across the Internet. An IP address is required for various Policy Manager configuration activities.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Issuer DN</dt>
<dd>An Issuer Distinguished Name (DN). Includes key identifier information including, geographical identifiers (country, state, province), as well as organization and organizational unit. This option is used when importing keys during the user account creation process.</dd>
<dd>CATEGORY: Security</dd>


<dt>JMS</dt>
<dd>Java Message Service.</dd>
<dd>CATEGORY: Policies</dd>


<dt>JMS Factory</dt>
<dd>The connection factory for Java Message Service (JMS).</dd>
<dd>CATEGORY: Registry</dd>


<dt>JMS Message Properties</dt>
<dd>Message properties are user-defined additional properties that you can include with the message. Message properties have types, and these types define application-specific information that message consumers can use later, to select the messages that interest them. Message property types are Java native types int, float, or String (class).</dd>
<dd>CATEGORY: Containers , Listeners</dd>


<dt>JMS Provider</dt>
<dd>The JMS Provider the connection factory is associated with.</dd>
<dd>CATEGORY: Policies</dd>


<dt>JMS Queue Name</dt>
<dd>In JMS-based messaging systems, messages are sent not to clients but to queues—which is to say, storage repositories set up to handle messages. Interposing queues between senders and receivers assures that even when a client is unavailable, messages addressed to the client are still able to be cached for later retrieval. Queues are typically created administratively and exposed to message clients as static resources.</dd>


<dt>JNDI</dt>
<dd>The Java Naming and Directory Interface (JNDI) is part of the Java platform, and provide applications based on Java technology with a unified interface to multiple naming and directory services.</dd>
<dd>CATEGORY: Policies</dd>


<dt>JNDI Factory</dt>
<dd>The connection factory for Java Naming and Directory Interface (JNDI).</dd>
<dd>CATEGORY: Registry</dd>


<dt>JNDI Initial Context</dt>
<dd>The starting point for resolution of names for naming and directory operations.</dd>


<dt>JNDI Name</dt>
<dd>Namespace location of JMS created connection factory, including any naming sub-contexts. The name is used to link the platform binding information. The binding associates the resources defined the deployment descriptor of the module to the actual (physical) resources bound into JNDI by the platform.</dd>
<dd>CATEGORY: Policies</dd>


<dt>JNDI URL</dt>
<dd>The URL where the Java Naming and Directory Interface (JNDI) server can be accessed.</dd>
<dd>CATEGORY: Registry</dd>


<dt>Kerberos</dt>
<dd>Policy Manager provides an authentication solution that allows Windows clients to use Policy Manager to access resources on Microsoft Internet Information Servers (IIS) without having to re-authenticate. This feature is implemented in Policy Managers <strong>Standalone Management Point</strong> and supports HTTP Authentication in Windows using the Kerberos SPNEGO (Simple and Protected GSS-API Negotiation Mechanism). Web services implemented on Microsoft IIS and that are utilizing Policy Managers' service management/monitoring functionality can use a <strong>Standalone Management Point</strong> to accept requests from Kerberos clients and interact with physical service using the same authentication.</dd>
<dd>CATEGORY: Containers</dd>


<dt>Key</dt>
<dd>Also referred to as <strong>access key</strong>. A <strong>Key</strong> guarantees message integrity by signing the message with a private key and verifying the message with a public key.</dd>
<dd>CATEGORY: Security</dd>


<dt>Key Management</dt>
<dd>Key Management is any process used to manage Public Keys as a part of a Public Key Infrastructure.</dd>
<dd>CATEGORY: Security</dd>


<dt>Key Name</dt>
<dd>A Key Name is part of the category scheme information taxonomy and represents the physical description of a category item.</dd>
<dd>CATEGORY: Registry</dd>


<dt>Key Value</dt>
<dd>A Key Value is part of the category scheme information taxonomy is an internal reference number for a category item.</dd>
<dd>CATEGORY: Registry</dd>


<dt>Listener</dt>
<dd>A Listener is the server process that listens for and accepts incoming connection requests from client applications.</dd>
<dd>CATEGORY: Services</dd>


<dt>Load</dt>
<dd>Load refers to a number assigned to a service request based on the amount of time required to execute that service.</dd>
<dd>CATEGORY: Services</dd>


<dt>Load Balance</dt>
<dd>Distributing processing and communications activity evenly across a computer network so that no single device is overwhelmed. Load balancing is especially important for networks where it's difficult to predict the number of requests that will be issued to a server. In SOA Software Policy Manager, load balancing is the act of distributing the load of a web service or Container.</dd>
<dd>CATEGORY: Configure</dd>


<dt>Load Factor</dt>
<dd>A load factor is a number indicating the amount of time needed to execute a service or a request. One way to determine appropriate load factors is to run an application for a long period of time and note the average time it takes to perform each service.</dd>
<dd>CATEGORY: Services</dd>


<dt>Log</dt>
<dd>A policy configuration can be configured to capture Usage Data (with the Usage Component), or SOAP Messages (with the Record Component). The captured data is stored in a <strong>log</strong> file that can be viewed using the Policy Manager <strong>Monitoring</strong> interface.</dd>
<dd>CATEGORY: Monitoring</dd>


<dt>Manage (Web Service)</dt>
<dd>The general process of bringing a web service under management involves using the <strong>Manage Service Wizard</strong> to add the web service description and associated metadata to the Policy Manager <strong>Registry.</strong> This includes defining the service description, selecting Container, and Configuring Access Points.</dd>
<dd>CATEGORY: Services</dd>


<dt>Managed Service</dt>
<dd>In Policy Manager, a physical or virtual service is referred to as <strong>managed</strong> when it is configured with a Container. A managed service utilizes the Policy Manager automatic <strong>roll-up</strong> usage data collection functionality and the ability to implement a policy configuration is enabled.</dd>
<dd>CATEGORY: Services</dd>


<dt>Management Console</dt>
<dd>The Policy Manager <strong>Management Console</strong> user interface provides tools that administrators and key personnel responsible for web service management can use to configure and maintain a SOA Software Policy Manager production site. The Management Console is organized into the following functional groups: Dashboard, Workbench, Policies, Alerts, Auditing, and Configure.</dd>
<dd>CATEGORY: Policy Manager</dd>


<dt>Management Point</dt>
<dd>A Management Point is an intermediary layer that utilizes web service configuration data from Policy Manager subsystems, and performs web service management and monitoring.</dd>
<dd>CATEGORY: Services</dd>


<dt>Management Script</dt>
<dd>A Management Script is an executable file that is launched by the Alert Manager Subsystem when an alert it is assigned to is raised. Management Scripts are generally used to execute workflows as a response to specific alert conditions.</dd>
<dd>CATEGORY: Alerts</dd>


<dt>Management Server Subsystem</dt>
<dd>The Management Server provides tools for registering and configuring your web services with the relevant policies.</dd>
<dd>CATEGORY: Policy Manager</dd>


<dt>Message Confidentiality</dt>
<dd>Message Confidentiality is the ability to prevent unauthorized viewing of messages that flow between clients and servers that comprise your Policy Manager deployment.</dd>
<dd>CATEGORY: Security</dd>


<dt>Message Integrity</dt>
<dd>Message Integrity is the ability to prevent unauthorized modification of messages that flow between clients and servers that comprise your Policy Manager deployment.</dd>
<dd>CATEGORY: Security</dd>


<dt>Message Property</dt>
<dd>Message properties are user-defined additional properties that you can include with the message. You can add message properties to a JMS message when sending the request to a service endpoint. When a Container sends the request to a service endpoint, it will add the message properties defined for the current JMS access point. When the web service container requires any message properties to be available on the JMS messages received to properly route the message to the correct web service, message properties can be set here. Only <strong>String</strong> type message properties are supported.</dd>
<dd>CATEGORY: Access Points</dd>


<dt>Metadata</dt>
<dd>Pertains to adding a business provider to the Policy Manager <strong>Registry.</strong> XML metadata is associated with the current business provider definition. The XML metadata file contains all the businessEntity constructs and associated data that defined in the system. The metadata represents the businessEntity entry for the entire business provider definition.</dd>
<dd>CATEGORY: Registry</dd>


<dt>Network Director</dt>
<dd>A Policy Manager feature that enables a Container to host Virtual Services. The Virtual Services are defined in the SOA Software Management Console. When the Network Director feature is enabled, the Container's metadata is updated to reflect this support. The metadata must be updated in the SOA Software Management Console so that it is aware that Virtual Services can be hosted on the Container. The feature also enables support for default Bindings and Policies. The default Bindings are SOAP and HTTP (REST and POX). The default Policies are WS-Addressing, WS-Auditing, WS-Security, HTTP Security, Authentication, and Authorization.</dd>
<dd>CATEGORY: Policy Manager, Container</dd>


<dt>Normalize</dt>
<dd>Normalize is chart display option available in the Graph Summary section of a Performance Metrics Chart. Normalization of performance data is typically used if you have an overly high service response time during a particular time period and you want to adjust your chart display to perform data comparisons.</dd>
<dd>CATEGORY: Dashboard, Performance Metrics Chart</dd>


<dt>Notification</dt>
<dd>The Policy Manager <strong>Registry</strong> provides a notification option that allows you to configure notification parameters for receiving notifications when modifications occur to business provider or service definitions.</dd>
<dd>CATEGORY: Registry</dd>


<dt>Observed</dt>
<dd>An alert <strong>State Filter</strong> that is enabled to indicate that a raised alert has entered the decision-support process. An alert typically remains in this state while the problem is being investigated.</dd>
<dd>CATEGORY: Alerts</dd>


<dt>Operation</dt>
<dd>A web service operation.</dd>
<dd>CATEGORY: Services</dd>


<dt>Operation Response Chart</dt>
<dd>The <strong>Operation Response Chart</strong> is a Policy Manager <strong>Monitoring</strong> function that displays the average response time of web service operations.</dd>
<dd>CATEGORY: Monitoring</dd>


<dt>Operation Usage Chart</dt>
<dd>The <strong>Operation Usage Chart</strong> is a Policy Manager <strong>Monitoring</strong> function that displays the number of times a given web service operation was accessed.</dd>
<dd>CATEGORY: Monitoring</dd>


<dt>Operational Policy</dt>
<dd>Operational Policies are used to define a metrics of requirements for addressing the operational implications of services that are shared across enterprise departments. These policies address the operational model for services, capacity monitoring and planning, the handling of policy exceptions and violations, and service execution including the definition and enforcement of runtime policies such as security, access, logging procedures, and service reliability.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Organization Object</dt>
<dd>The <strong>Organization Object</strong> includes description information about the Organization (business entity) and includes a Services, Contracts, Containers, and Policies folder. You populate the <strong>Organization Tree</strong> at the root level using the <strong>Add Organization Wizard</strong>. Organizations are structured using a Parent/Child Hierarchy.</dd>
<dd>CATEGORY: Workbench Object</dd>


<dt>Organizational Hierarchy</dt>
<dd>The <strong>Organizational Hierarchy</strong> is a tree structure that contains a series of nodes that represent different <strong>states</strong> or areas of functionality associated with the current web service.</dd>


<dt>Overview Document URL</dt>
<dd>The Overview Document URL defines the physical address of the technical specifications associated with the current tModel Instance description. The URL address must be complete and executable. The <strong>Overview Document URL</strong> field is optional. The tag name used for Overview Document URL is <span class="apidoc_code">&lt;overviewURL&gt;</span> and is stored in the tModel construct under the <span class="apidoc_code">&lt;overviewDoc&gt;</span> tag.</dd>
<dd>CATEGORY: Registry</dd>


<dt>Overview Document URL Description</dt>
<dd>Defines the description of the physical address of the technical specifications associated with the current tModel Instance description.</dd>
<dd>The <strong>Overview Document URL</strong> field is optional. The tag name used for Overview Document URL is <span class="apidoc_code">&lt;description&gt;</span> and is stored in the tModelInstanceDetails construct nested under <span class="apidoc_code">&lt;tModelInstanceInfo&gt;</span> under the <span class="apidoc_code">&lt;overviewDoc&gt;</span> tag.</dd>
<dd>CATEGORY: Registry</dd>


<dt>Performance Metrics Chart</dt>
<dd>Performance Metrics Charts exist as part of the <strong>Dashboard</strong> and <strong>Services</strong> section of Service Manager. They provide real-time monitoring functionality for tracking service response time, adherence to defined SLA rules, and monitoring of transaction faults.</dd>
<dd>CATEGORY: Dashboard, Performance Metrics Chart</dd>


<dt>Perspective</dt>
<dd>A <strong>Perspective</strong> is a Dashboard Page that includes a series of portlets to address a specific task . A perspective is also referred to as a <strong>portal page</strong>. You can define an unlimited number of perspectives (Dashboard Pages).</dd>
<dd>CATEGORY: User Interface</dd>


<dt>Physical Service</dt>
<dd>A <strong>physical</strong> web service contains a WSDL (Web Service Description Language), and endpoint (port address). The service type can reside on any platform (for example, application service, mainframe), and is accessible using the port address. If the service is not affiliated with Policy Manager, it is referred to as an <strong>unmanaged service.</strong> Physical services that reside inside an application service can be managed using Policy Manager by deploying an embedded Management Point. The embedded Management Point employs a <strong>Discovery agent</strong> that is application-specific. The agent provides service discovery functionality and deploys an application-specific handler that interacts with the Policy Manager subsystems to perform various service management functions.</dd>
<dd>CATEGORY: Services, Management Points</dd>


<dt>Pipeline Policy</dt>
<dd>Pipeline Policies represent the legacy Service Manager 5.2 policies. If you have upgraded to Policy Manager 6.0 from Service Manager 5.2, the upgrade process migrates your Service Manager 5.2 policies to Policy Manager 6.0 and there you can update your policy configurations then attach them to a Policy Manager objects using the Policy Attachments Portlet.</dd>
<dd>CATEGORY: Policies</dd>


<dt>PKI</dt>
<dd>Public Key Infrastructure. A system supporting public key encryption. Policy Manager provides automatic PKI key generation for the following activities: 1) User Accounts, Services, Containers, and the Policy Manager Trusted Domain.</dd>
<dd>CATEGORY: Security</dd>


<dt>Policies Object</dt>
<dd>The <strong>Policies Object</strong> provides a platform for managing the creation and maintenance of WS-Security and compatibility policies (Pipeline Policies) that comprise your Policy Manager deployment. The policy framework supports delegated administration which means that policies can be assigned at the Organization and Service Operation levels. Based on your security requirements, you can configure policies as single entities or you can define a policy group (Aggregate Policy) that includes two or more policies. The <strong>Add Policy Wizard</strong> is used to create a policy. Policy types that support inclusion in an <strong>Aggregate Policy</strong> A subset of policy types can be included in an <strong>Aggregate Policy.</strong> Policies can be attached to different governable entities in the Policy Manager <strong>Workbench</strong> including Organizations, Services, Operations, Access Points, Bindings, and Messages.</dd>
<dd>CATEGORY: Workbench Object</dd>


<dt>Policy</dt>
<dd>A Policy secures a web service and executes security-focused Request / Response processes, and Faults.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Policy Attachment</dt>
<dd>A policy attachment is a mechanism for associating a policy with one or more policy scopes.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Policy Attachments</dt>
<dd>Policies defined in the policies object (Policies Folder) can be assigned to an organization, and to six different elements of a service. Each Policy assignment is based on the business requirements defined for policies supported in each policy category (Compliance, Operational, QoS) in addition to custom defined policies. Policies are assigned in the <strong>Policy Attachments Portlet.</strong> When a policy is assigned at the <strong>Service Details</strong> level, the policy is <strong>referenced</strong> in all other elements of the service (operations, bindings, or access points). When a policy is referenced in a <strong>Policy Attachments Portlet</strong> it is preceded with <strong>(from &lt;object name&gt;).</strong> Referenced policies can only be removed at the source attachment point (in the Policy Attachments Portlet of the <strong>service</strong>). Additional policies can be added to each service element using the <strong>Policy Attachments Portlet</strong> in each Management Console section.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Policy Component</dt>
<dd>A Policy Component is used for executing security-focused Request and Response processes, and Faults. Each policy component addresses a unique security function. A policy component is composed of a standard component, configuration file, and framework object model. Policy components are accessible through the Service Manager <strong>Management Console</strong> by selecting the <strong>Policies</strong> tab.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Policy Domain</dt>
<dd>A policy domain defines its own policy assertions using a specific XML schema. Policies of different domains can be combined together using core WS-Policy constructions. Examples of supported policy domains include WS-Security, WS-Addressing, and WS-ReliableMessaging.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Policy Manager</dt>
<dd>SOA Software's Service Manager™ and Policy Manager™ deliver governance, security, and management for XML and Web services. Web services and Service Oriented Architectures offer a promise of enabling a truly agile enterprise through service reuse and flexible application deployment. The transition to a distributed, loosely coupled application and integration architecture requires a governance, management and security infrastructure. Without this infrastructure, many of the advantages of Web services and Service Oriented Architectures are lost.</dd>
<dd>Service Manager and Policy Manager include a Management Console for configuring and maintaining your SOA Governance solution, and provide a variety of wizard utilities for performing Service Manager and Policy Manager configuration and maintenance activities.</dd>
<dd>The Service Manager and Policy Manager online help system provides information on the functionality included in the Management Console.</dd>
<dd>CATEGORY: Policy Manager</dd>


<dt>Policy Manager Console</dt>
<dd>A Policy Manager feature that includes a web-based user interface for the central Policy Manager governance application. The user interface provides a dashboard and the primary interface for configuration, management and administration of Policy Manager and Service Manager. The console must interact with a Container (may be the same container) configured with the SOA Software Policy Manager Services to fulfill the core central governance application requirements.</dd>
<dd>CATEGORY: Policy Manager</dd>


<dt>Policy Manager Services</dt>
<dd>A Policy Manager feature that includes services provided by the central Policy Manager governance application. These services include, but are not limited to, UDDIv2 and UDDIv3, WS-MetadataExchange, SOA Container Configuration, an XACML Policy Decision Point, a WS-Trust Security Token Service, Alert reporting, and RESTful interfaces to the governance model. In addition, this feature includes engines for performing Quality of Service calculations and health and status monitoring.</dd>
<dd>CATEGORY: Policy Manager</dd>


<dt>Policy References</dt>
<dd>When a policy is attached to a Policy Manager object (policy subject), it is <strong>directly</strong> attached to that policy object and <strong>referenced</strong> by Policy Manager objects that are associated with that object. For example, if an Operational Policy is attached to a Service object, this policy will be referenced in the Operational Policy Attachments Portlet for Operations, Bindings, and Access Points associated with the Service.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Policy Scope</dt>
<dd>A policy scope is a collection of policy subjects to which a policy may apply.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Policy Subject</dt>
<dd>A policy subject is element of a service definition (service endpoint, binding, operation of binding, and message of operation). There may be attachments at different points in a WSDL description that apply to a subject. Policies can be associated with a particular policy subject using multiple policy attachments. A policy subject is an entity (for example, an endpoint, message, resource, or operation) with which a policy can be associated.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Port</dt>
<dd>A Port is a specific place for being physically connected to some other device, usually with a socket and plug of some kind (serial or parallel port). A port is referenced using a Port Number.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Port Number</dt>
<dd>A Port Number is a way to identify a specific process to which an Internet or other network message is to be forwarded when it arrives at a server.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Portlet</dt>
<dd>A <strong>Portlet</strong> is information that is placed within a region on a page. The <strong>Dashboard</strong> includes a series of <strong>portlets</strong> that provide instances of key Service Manager functionality. You define a <strong>Dashboard Page</strong> then add <strong>portlet instance types</strong> that reflect your performance measurement requirements.</dd>
<dd>CATEGORY: User Interface</dd>


<dt>Private Policy</dt>
<dd>A private policy is a policy that an SOA Container will enforce but is not required for exchanging messages over the wire and is not visible to consumers. Authorization and monitoring policies are examples of private policies. This different visibility would imply that the WSDL documents a Governance Application and an SOA Container exchange will potentially have a different set of policies than the WSDL documents service consumers will be provided.</dd>
<dd>CATEGORY: Policy</dd>


<dt>Privileges</dt>
<dd>Privileges are <strong>tokens</strong> defined in Policy Manager and stored in the Service Manager Policy Database (also called a <strong>vault</strong>). Privileges are defined in the system that map to different tasks (Service Manager functions) in the system.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Provider</dt>
<dd>A party-any business, or physical or conceptual group-that offers one or more XML Web services. For example, a business, business unit, organization, organizational department, person, computer, or an application can be a provider. A provider represents the <strong>parent</strong> entity under which all contact, service, and interface information is stored and organized.</dd>
<dd>CATEGORY: Policies, Registry</dd>


<dt>Provider Organization</dt>
<dd>A Provider Organization represents an organization Partner.</dd>
<dd>CATEGORY: Workbench > Organization</dd>


<dt>Proxy</dt>
<dd>Application acting on behalf of another application or system in responding to protocol requests.</dd>


<dt>Proxy Server</dt>
<dd>A server that sits between a client application, such as a Web browser, and a real server. It intercepts all requests to the real server to see if it can fulfill the requests itself. If not, it forwards the request to the real server.</dd>


<dt>Public Key</dt>
<dd>In cryptography, a public key is a value provided by some designated authority as an encryption key that, combined with a private key derived from the public key, can be used to encrypt messages and digital signatures.</dd>
<dd>CATEGORY: Security, Policies</dd>


<dt>Public Key Source</dt>
<dd>A <strong><strong>Public Key Source</strong></strong> represents the key generation source application that is used by Policy Manager to generate public keys during the user account creation process. Options include: A) Policy Manager: For keys generated using Policy Manager Subsystem, and B) External: For X.509 Certificates imported from external sources.</dd>
<dd>CATEGORY: Security, Policies</dd>


<dt>QoS Policy</dt>
<dd>QoS (Quality of Service) Policies are used to define a metrics of requirements for ensuring service availability, performance, integrity and reliability. Different consumers of the same service might require different Service-Level Agreements (SLAs), including performance, transactional support, and security requirements.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Queue Name</dt>
<dd>A JMS Queue Name is the name of the JMS Queue where a Queue object reference can be found in the JNDI server. This option is part of the JMS Listener configuration process using the Service Manager Configuration Wizard.</dd>
<dd>CATEGORY: Management Point</dd>


<dt>Record Component</dt>
<dd>The <strong>Record Component</strong> is a Policy Component that takes a snapshot of a SOAP message as it passes through the policy. By placing Record Components before and after another component, you can see the effect of the other component on the SOAP Message. By adding a Record Component, you can log the Request Messages for non-repudiation and debugging purposes.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Register Service</dt>
<dd>A service is <strong>Registered</strong> when it is added to the Service Manager <strong>Registry.</strong> This task can be accomplished by adding the web service definition directly to the Service Manager <strong>Registry,</strong> or by bringing the web service under management using the <strong>Manage a Service Wizard</strong>.</dd>
<dd>CATEGORY: Services</dd>


<dt>Registry Manager</dt>
<dd>The Registry Manager provides a UDDI-compliant web service registry where you can publish and maintain your web service definitions. It includes a variety of extensions for searching the registry (standard, advanced, federated), and browsing the category hierarchy. It also includes a metadata engine for saving web service related attributes.</dd>
<dd>CATEGORY: Service Manager</dd>


<dt>Request Configuration</dt>
<dd>A <strong>Request Configuration</strong> is portion of a policy configuration that executes the defined policy components against the request endpoint that receives a message.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Resolved</dt>
<dd>A Service Manager <strong>Alerts</strong> state option that indicates that the execution of steps pertaining to the resolution of a raised alert is complete and no further action is required.</dd>
<dd>CATEGORY: Alerts</dd>


<dt>Response Configuration</dt>
<dd>A <strong>Response Configuration</strong> is portion of a policy configuration that executes the defined policy components against the request endpoint that sends a correlated message.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Roles</dt>
<dd>A role is a function performed by a team. Role definitions are customer-defined and align with the business requirements for the operation and administration of a SOA Software Service Manager production site. Policy Manager includes a default set of roles for managing access control of Service Manager components. Each role contains a default set of privileges that represent the typical functions performed by the defined role.</dd>
<dd>CATEGORY: Security</dd>


<dt>Rollup Data</dt>
<dd>Rollup Data is part of the standard Service Manager monitoring functionality. Web service processing of web request and response messages are consistently monitored and the statistical data in calculated and summarized in five second intervals (the default calculation interval). This statistical data is sent to the MS-Engine and copied to a <strong>rollup table</strong> that is part of the Management Point of the web service being managed. The <strong>Dashboard</strong> performance metrics reports and the <strong>Monitoring</strong> service response and usage charts use this rollup data.</dd>
<dd>CATEGORY: Dashboard, Management Point</dd>


<dt>Root Object</dt>
<dd>The <strong>Root Object</strong> represents the top of the <strong>Organization Tree</strong> and is defined during your initial Policy Manager configuration. The <strong>Root Object</strong> name represents the name of the Policy Manager <strong>Registry.</strong> This name can be customized using the <strong>Modify Organization</strong> action. Actions that can be performed at the root level include Add Organization, Add Container, Create Physical Service, Create Virtual Service, Rename Organization, Import Package, and Add Policy. The <strong>System Summary</strong> provides an overview of <strong>state</strong> information for entities defined within your Organizational Hierarchy.</dd>
<dd>CATEGORY: Workbench Object</dd>


<dt>Root Organization</dt>
<dd>The Root Organization represents an <strong>Organization Tree</strong> node that is not a child of any other Organization. All Organizations are children or other descendants of the Root Organization.</dd>
<dd>CATEGORY: Workbench</dd>


<dt>SAML</dt>
<dd>SAML (Security Assertion Markup Language) is an Extensible Markup Language (XML) standard that allows a user to log on once for affiliated but separate Web sites. SAML is designed for business-to-business B2B and business-to-consumer B2C transactions.</dd>
<dd>CATEGORY: Security</dd>


<dt>Schema Validation Component</dt>
<dd>The Schema Validation Component is a Policy Component that enforces the schema rules that a Request or Response Message must adhere to. This ensures data integrity (for example, string length validations), and guards against potential tampering. Schema validation is performed using both Default and User Provided Schemas.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Search</dt>
<dd>The Service Manager <strong>Registry</strong> Search capability allows you to search for key elements that comprise a business provider or business service definition using a variety of search filters including Items, Category, Identifier, and Category Hierarchy search options.</dd>
<dd>CATEGORY: Registry</dd>


<dt>Secure (Web Service)</dt>
<dd>The act of bringing a web service under management and securing one or more of its operations with a Management Point and Policy.</dd>
<dd>CATEGORY: Services, Policies</dd>


<dt>Security Audit Trail</dt>
<dd>Provides the ability to filter, view and export data that is logged when a security policy related action occurs during the operation of your Service Manager deployment.
The availability of security audit trail data is based on a combination of standard system actions that are automatically logged and whether you configured specific security operations to audit activity in a Security Component that is part of your policy configuration.</dd>
<dd>CATEGORY: Monitoring</dd>


<dt>Security Component</dt>
<dd>The Security Component is a Policy Component that provides Authentication, Authorization, Signatures, and Signature Verification services to secure web services.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Service (Web)</dt>
<dd>A web service describes a standardized way of integrating Web-based applications using the XML, SOAP, WSDL, and UDDI open standards over an Internet protocol backbone. XML is used to tag the data, SOAP is used to transfer the data, WSDL is used for describing the services available and UDDI is used for listing what services are available.</dd>
<dd>CATEGORY: Services</dd>


<dt>Service Aggregate</dt>
<dd>See <strong>Aggregate Performance</strong>.</dd>


<dt>Service Description</dt>
<dd>A configuration item on <strong>Service Properties</strong> screen of the <strong>Create Physical Service Wizard,</strong> and <strong>Manage Service Wizard</strong> and represents a brief text description of the web service being brought under management.</dd>
<dd>CATEGORY: Services</dd>


<dt>Service Level Agreement</dt>
<dd>A <strong>Service Level Agreement</strong> (referred to in Service Manager as <strong>SLA Bindings</strong>) is a collection of rules defining acceptable service availability. These rules delineate performance thresholds that must be met, and specify actions to be taken when these thresholds are exceeded. Service Level Agreements are combined with users or roles to create Contracts.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Service Level Policies</dt>
<dd>Service Level Policies are SLA-related objects that provide a robust system to define, manage, and monitor Service Level Agreements.</dd>
<dd><strong>Policies</strong> &gt; <strong>Service Level Policies</strong> section of the Service Manager.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Service Management</dt>
<dd>The <strong>Service Management</strong> screen is part of the <strong>Create Physical Service Wizard</strong> and <strong>Manage Service Wizard.</strong> Service Management allows you to configure whether to manage the service. If a service is configured to be managed, you then select the Management Point and Policy Template that will secure the web service.</dd>
<dd>CATEGORY: Services</dd>


<dt>Service Manager</dt>
<dd>SOA Software Service Manager delivers the capability to secure, monitor, and manage XML and Web services applications and components across distributed enterprise and extranet environments. It includes a Management Console for configuring and maintaining your web service management solution, and provides a variety of wizard utilizes for performing Service Manager and Management Point configuration and maintenance activities.</dd>
<dd>CATEGORY: Service Manager</dd>


<dt>Service Manager Reporting</dt>
<dd>Represents Usage Data reporting options available in the <strong>Monitoring</strong> section of the Service Manager. To utilize these reporting options a policy configuration must include <strong>Usage</strong> and/or <strong>Record</strong> Policy Components.</dd>
<dd>CATEGORY: Monitoring</dd>


<dt>Service Name</dt>
<dd>In the <strong>Service Properties</strong> section of the <strong>Create Physical Service Wizard </strong> and <strong>Manage Service Wizard</strong>, the Service Name represents the short name of the web service being brought under management.</dd>
<dd>CATEGORY: Services</dd>


<dt>Service Object</dt>
<dd>The <strong>Services Object</strong> stores services that have been added to the Organization using the <strong>Create Physical Service,</strong> <strong>Create Virtual Service,</strong> and <strong>Virtualize Service</strong> wizards. Within the Services Object you can perform service management activities including policy management, access point creation, category management, rule management, and usage data monitoring. You can also transition a service to a new provider by changing the provider organization using the <strong>Select Provider Organization</strong> function.</dd>
<dd>CATEGORY: Workbench Object</dd>


<dt>Service Operations</dt>
<dd>The <strong>Service Operations</strong> screen is part of the <strong>Create Physical Service Wizard,</strong> and <strong>Manage Service Wizard.</strong> <strong>Service Operations</strong> represent specific operations contained in the web service definition that can be selected to be brought under management.</dd>
<dd>CATEGORY: Services</dd>


<dt>Service Oriented Architecture (SOA)</dt>
<dd>Service Oriented Architecture (SOA) is an application architecture in which all functions, or services, are defined using a description language and have invokable interfaces that are called to perform business processes. Each interaction is independent of each and every other interaction and the interconnect protocols of the communicating devices (the infrastructure components that determine the communication system do not affect the interfaces). Because interfaces are platform-independent, a client from any device using any operating system in any language can use the service.</dd>
<dd>CATEGORY: Service Manager</dd>


<dt>Service Properties</dt>
<dd>The <strong>Service Properties</strong> screen is part of the <strong>Create Physical Service</strong> and <strong>Manage Service Wizard</strong> and is where you configure the required Web service setup information. Service Properties include <strong>Service</strong> configuration options (Service Name, Service Description, Service URL, and WSDL URL), and <strong>Provider</strong> configuration options (Existing provider or New Provider Name).</dd>
<dd>CATEGORY: Services</dd>


<dt>Service Response Chart</dt>
<dd>A <strong>Service Response Chart</strong> is a Service Manager <strong>Monitoring</strong> reporting function that displays the average response time of a web service including <strong>Time</strong> when the web service was accessed, and <strong>Response Time (in Milliseconds)</strong>.</dd>
<dd>CATEGORY: Monitoring</dd>


<dt>Service URL</dt>
<dd>The Uniform Resource Locator address of a web service.</dd>
<dd>CATEGORY: Services</dd>


<dt>Service Usage Chart</dt>
<dd>A <strong>Service Usage Chart</strong> is a Service Manager <strong>Monitoring</strong> reporting function displays the number of times a web service is accessed. Each time an Operation is accessed counts as an individual usage.</dd>
<dd>CATEGORY: Monitoring</dd>


<dt>Severity Filter</dt>
<dd>Severity filters is a Service Manager <strong>Alerts</strong> function that allows you to filter your alerts display and perform alerts management based on the severity level of the alert. There are five severity levels: Critical, Major, Minor, Normal, and Clear.</dd>
<dd>CATEGORY: Alerts</dd>


<dt>Signature (Digital)</dt>
<dd>A Digital Signature is an electronic signature that can be used to authenticate the identity of the sender of a message or the signer of a document, and to validate that the original content of the message or document that has been sent is unchanged.</dd>
<dd>CATEGORY: Policies, Security</dd>


<dt>Signature Verification</dt>
<dd>The Signature Verification process checks the digital signature by reference to the original message and a given public key, thereby determining whether the digital signature was created for that same message using the private key that corresponds to the referenced public key.</dd>
<dd>CATEGORY: Policies, Security</dd>


<dt>SLA Policy Templates</dt>
<dd>An SLA Policy Template is a template or a default definition for a service level agreement. It includes the rule specifications included in an SLA Binding. SLA Policies are not used in Contracts. They are used to create the SLA Bindings that are then incorporated into Contracts. SLA Policy Template functionality is available in the <strong>Policies > SLA Policies</strong> section of the Service Manager.</dd>
<dd>CATEGORY: Policies</dd>


<dt>SM</dt>
<dd>Service Manager.</dd>
<dd>CATEGORY: Service Manager</dd>


<dt>SNMP Hosts</dt>
<dd>An SNMP Host is a Service Manager <strong>Alerts</strong> function that is a remote server that you define within Service Manager. Once defined, you can assign an SNMP host to an Alert Code. When an event matching that alert code occurs, the Alert Manager Subsystem automatically transmits an SNMP alert to all SNMP hosts defined in Alert Manager Subsystem. This is useful if you are using external devices to also track Web service events.</dd>
<dd>CATEGORY: Alerts</dd>


<dt>SOA (Service Oriented Architecture)</dt>
<dd>Service Oriented Architecture (SOA) is a business-driven IT architectural approach that supports integrating your business as linked, repeatable business tasks, or services. SOA helps today's businesses innovate by ensuring that IT systems can adapt quickly, easily and economically to support rapidly changing business needs. SOA helps customers increase the flexibility of their business processes, strengthen their underlying IT infrastructure and reuse their existing IT investments by creating connections among disparate applications and information sources.</dd>
<dd>CATEGORY: SOA</dd>


<dt>SOA Container</dt>
<dd>The SOA Container architecture provides the runtime execution of the Policy Manager capabilities including mediation of web service message exchanges between service consumers and service providers, enforcement of policies, monitoring and reports performance metrics and events, service integration through virtualization, and auditing capabilities. The SOA Container component can be deployed on both the consumer and provider side of a message exchange, can be embedded within a consumer or provider process, or deployed as a proxy in a separate process. It can be deployed standalone or integrated with a web service container. The primary components and interfaces are the same in both deployment types.</dd>
<dd>CATEGORY: Container</dd>


<dt>SOA Software Administration Console</dt>
<dd>The <strong>SOA Software Administration Console</strong> is used to install, configure, and administer Policy Manager <strong>Features.</strong> Base features include SOA Software Policy Manager Console and SOA Software Policy Manager Web Services. These two features represent the Policy Manager application and can be installed in a single container or separate containers. The feature list available on a per-version basis is based on specific customer requirements.</dd>
<dd>CATEGORY: Policy Manager, Administration</dd>


<dt>SOA Software Policy Manager</dt>
<dd>The SOA Software Policy Manager provides tools for managing, securing, monitoring, and maintaining web services that comprise your Policy Manager production site. Key activities are performed using the Policy Manager <strong>Management Console</strong> and a series of configuration wizards that support key configuration and maintenance activities.</dd>
<dd>CATEGORY: Policy Manager</dd>


<dt>SOAP</dt>
<dd>SOAP (Simple Object Access Protocol) is a lightweight protocol for exchange of information in a decentralized, distributed environment. It is an XML based protocol that consists of three parts: an envelope that defines a framework for describing what is in a message and how to process it, a set of encoding rules for expressing instances of application-defined data types, and a convention for representing remote procedure calls and responses.</dd>
<dd>CATEGORY: Policies, Monitoring</dd>


<dt>SOAP Message</dt>
<dd>An XML message that conforms to the SOAP protocol. SOAP messages are one-way transmissions from a sender to a receiver, and are often combined to implement patterns such as Request/Response.</dd>
<dd>CATEGORY: Monitoring</dd>


<dt>Standalone Management Point</dt>
<dd>A container for virtual services. A deployment includes a web service client that communicates with a Management Point. The Management Point is configured to manage a web service that resides on a network. If the Management Point cannot be configured for a policy for a given service, it blocks access to that service.</dd>
<dd>CATEGORY: Management Point</dd>


<dt>State Filter</dt>
<dd>A <strong>State Filter</strong> is a Service Manager <strong>Alerts</strong> function that allows you to filter the alerts display and perform alerts management based on the review <strong>state</strong> of the alert. There are three state filters: All Unobserved, Observed By, and Resolved By.</dd>
<dd>CATEGORY: Alerts</dd>


<dt>Static Service Load Balance Component</dt>
<dd>The Static Service Load Balance Component is a Policy Component that enables the balancing of requests across web services. When a web service is configured with this policy component, it can be load balanced utilizing the Load Balance function in the <strong>Services > Managed Services</strong> section of the Service Manager.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Strip Element Component</dt>
<dd>The Strip Element Component is a Policy Component that removes an element at the given XPath from the SOAP message.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Subject DN</dt>
<dd>A Subject Distinguished Name (DN). Includes key identifier information including but not limited to certificate name, organization and organization unit, and geographical identifiers (for example, country, state, province). Related to the Service Manager key import process in <strong>Security</strong> &gt; <strong>Manage Keys</strong>.</dd>
<dd>CATEGORY: Security</dd>


<dt>Subscription</dt>
<dd>A Subscription allows clients with third-party registries (subscribers) to monitor a subset of data within the Service Manager <strong>Registry.</strong> Subscriptions can be used to obtain updates regarding any type of business entity or business service change that would be of interest to your organization.</dd>
<dd>CATEGORY: Configure, Registry</dd>


<dt>Subsystem</dt>
<dd>A subsystem is part of a larger system. The Service Manager includes four subsystems that provide the core functionality to facilitate web service management. These subsystems include Management Server, Registry Manager, Policy Manger, and Alert Manager subsystems.</dd>
<dd>CATEGORY: Service Manager</dd>


<dt>Supporting Token</dt>
<dd>Supporting tokens are additional tokens that can be specified to augment claims provided by the token associated with the <strong>message signature</strong> provided by the Security Binding.</dd>


<dt>tModel</dt>
<dd>tModels are typically used to provide technical information about an interface, such as a Web Service Description Language (WSDL) file, that describes the conventions that are supported by an interface. tModels are also used to represent an organized unit of descriptive data, such as an identification or categorization scheme.</dd>
<dd>CATEGORY: Registry</dd>


<dt>tModel Category</dt>
<dd>A Category Scheme that is assigned to a tModel.</dd>
<dd>CATEGORY: Registry</dd>


<dt>tModel Instance</dt>
<dd>The tModel definition is stored in a businessEntity construct in a bindingTemplate and contains a key (tModelKey) that provides a unique technical fingerprint. When a tModel is registered, other web services that are compliant with the tModel's technical specification can add the tModel identifier (tModelKey) in the bindingTemplate data of their technical specifications. This is done by configuring a tModel Instance.</dd>
<dd>CATEGORY: Registry</dd>


<dt>Trend Indicators</dt>
<dd>Trend indicators are used in a Performance Metrics Chart to gauge the overall performance of a service and are based on how long a chart has been running. Indicator types include Warning, Normal, and Offline.</dd>
<dd>CATEGORY: Dashboard, Performance Metrics Chart</dd>


<dt>Trusted CA Certificate</dt>
<dd>A trusted CA certificate is a third-party identity that is qualified with a specified level of trust. Trusted certificates are used when an identity is being validated as the entity it claims to be.</dd>
<dd>CATEGORY: Configure</dd>


<dt>Trusted Domain</dt>
<dd>A Trusted Domain is a method of securing a business relationship between two domains by authenticating a user and the domain the user is associated with in order to establish a <strong>trust.</strong> The trust state is established between two Policy Manager Subsystem Instances, each representing a different domain. The type of authorization required is based on access requirements (for example, a user accessing a web service).</dd>
<dd>CATEGORY: Security</dd>


<dt>Un-Manage (Service)</dt>
<dd>A Policy Manager <strong>Services</strong> function that removes the established association of a web service between the Policy Manager and <strong>Registry.</strong> The web service data in the <strong>Registry</strong> remains intact and can be manually removed, remain as an archive, or can be re-registered in the Policy Manager. This process may be necessary for various reasons, such as if your web service has become obsolete or has been replaced with an upgraded version, or if the associated web URLs are being changed or are in maintenance.</dd>
<dd>CATEGORY: Services</dd>


<dt>Unassign</dt>
<dd>A Policy Manager <strong>Registry</strong> function that that allows you to remove the identifier association from the current business service definition. Removing an identifier could become necessary if an established association with a selected identifier scheme is no longer valid; for example, if a business service definition has changed, requiring a new identifier association.</dd>
<dd>CATEGORY: Registry</dd>


<dt>Unobserved</dt>
<dd><strong>Unobserved</strong> is the initial alert <strong>State Filter</strong> that is assigned to an alert when it is initially raised.</dd>
<dd>CATEGORY: Alerts</dd>


<dt>Unprocessed Data</dt>
<dd>Unprocessed data is <strong>raw</strong> usage data that is collected by a Container and includes information related to web service transaction processing. This data is saved to the Policy Manager data repository and is available for processing (formatting and analysis) by the Management Server Engine (MS-Engine). Processed data can then be utilized via the Management Console for a variety of service management reporting functions.</dd>
<dd>CATEGORY: Policies, Monitoring</dd>


<dt>URI</dt>
<dd>Short for Uniform Resource Identifier, the generic term for all types of names and addresses that refers to objects on the World Wide Web. A URL is one kind of URI.</dd>
<dd>CATEGORY: Policy Manager</dd>


<dt>Usage Component</dt>
<dd>The Usage Component is a selectable policy option on the Add or Modify Policy screen that is configured in the Response Configuration. It exists exclusively in the Response Configuration because usage information is captured after a response is sent to the user.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Usage Data</dt>
<dd>Usage data is key information that is collected by a Container when it receives requests from a client application. The Container saves the data to the Policy Manager data repository and the MS-Engine subsystem utilizes the data for presentation in the Management Console. Collected data is based on the Usage Monitoring filter configuration in a Policy Manager policy configuration. Usage data includes request identification numbers, user access information (user, host name), time-based data (time stamps, response time), message details (size, processing status, error details), request forwarding URL, and fault indicators.</dd>
<dd>CATEGORY: Policies</dd>


<dt>Usage Data Export Wizard</dt>
<dd>The <strong>Usage Data Export Wizard</strong> is a Policy Manager <strong>Monitoring</strong> function that allows you to export <strong>Usage Data</strong> to an XML file. Data to be exported is based on the current filter criteria used to generate a report. Based on your archiving requirements (for example, time intervals) you can customize the Usage Data search criteria to generate a report that reflects a logical interval that aligns with your business needs.</dd>
<dd>CATEGORY: Monitoring</dd>


<dt>Usage Monitoring</dt>
<dd>Usage monitoring is the ability to capture usage data associated with the processing of web service request and response messages. Policy Manager provides options for configuring <strong>Usage Monitoring</strong> by fault, percentage of requests or XPath value. You can also capture <strong>all</strong> usage data which can be exported for use in third-party statistical analysis tools. The data collected by the Usage Monitoring functionality is utilized in the Policy Manager <strong>Monitoring</strong> and <strong>Dashboard</strong> sections.</dd>
<dd>CATEGORY: Policies, Monitoring, Dashboard</dd>


<dt>Use Case</dt>
<dd>A use case is a methodology used in system analysis to identify, clarify, and organize system requirements. The use case is made up of a set of possible sequences of interactions between systems and users in a particular environment and related to a particular goal.</dd>
<dd>CATEGORY: Policy Manager</dd>


<dt>Use Type</dt>
<dd>A <strong>Use Type</strong> is a Policy Manager <strong>Registry</strong> option that can be applied to a Discovery URL definition to add additional categorization. The Discovery URL description is defined in the businessEntity construct and maps to the <span class="apidoc_code">&lt;DiscoveryURL&gt;</span> tag. An optional <strong>Use Type</strong> categorization can be applied to a Discovery URL definition. The relevant tag mapping in the businessEntity construct for a Discovery URL with <strong>Use Type</strong> categorization is <span class="apidoc_code">&lt;DiscoveryURL Use Type&gt;</span>.</dd>
<dd>CATEGORY: Registry</dd>


<dt>User</dt>
<dd>An individual that is logged into the Policy Manager <strong>Management Console.</strong> Users are assigned privileges and are typically associated with one or more Roles.</dd>
<dd>CATEGORY: Security</dd>


<dt>User Group</dt>
<dd>User groups provide a method of managing access rights to Policy Manager functionality. A user group must contain one or more users. You can classify user groups by assigning a unique user group name.</dd>
<dd>CATEGORY: Security</dd>


<dt>User ID / Password</dt>
<dd>An authentication approach that is implemented using a User ID/Password combination and Private Keys.</dd>
<dd>CATEGORY: Security</dd>


<dt>User Profile</dt>
<dd>A user account summary that displays data associated with the user currently logged into the Policy Manager. The User Profile can be viewed in the Management Console by clicking the <strong>My Profile</strong> tab. It includes the following summary data: Username, Full Name, Password, Default Page, Default Perspective.</dd>
<dd>CATEGORY: Policy Manager, Security</dd>


<dt>User Wizard</dt>
<dd>The <strong>User Wizard</strong> is a Policy Manager security function that provides an automated approach for defining a user account. After you define a user account it is added to the ACL repository and can be managed using the available options provided under the <strong>Security > Users</strong> tab.</dd>
<dd>CATEGORY: Security</dd>


<dt>Virtual Service</dt>
<dd>Service virtualization allows for the creation of multiple service entities per Container.
This makes it easier to monitor and manage services, due to the direct relationship between a Virtual Service and a Managed Service. A virtual service can be described as an aggregate of one or more physical or virtual service operations, bundled together as a single virtual service offering. Containers can be described as containers for one or more virtual services.</dd>


<dt>Virtualize</dt>
<dd>Service virtualization allows for the creation of multiple service entities per Container. This makes it easier to monitor and manage services, due to the direct relationship between a Virtual Service and a Managed Service. A virtual service can be described as an aggregate of one or more physical or virtual service operations, bundled together as a single virtual service offering.</dd>
<dd>Containers can be described as containers for one or more virtual services.</dd>
<dd>CATEGORY: Containers, Policy</dd>


<dt>Virtualized Operation</dt>
<dd>A virtualized operation is an operation that is contained in a virtual service. This state can be achieved by selecting the <strong>virtualize</strong> action (via Services > Search Services), or by using the <strong>Add Operation Wizard</strong> (via <strong>Virtual Operations Summary</strong>).</dd>
<dd>CATEGORY: Services</dd>


<dt>Web Service</dt>
<dd>A web service describes a standardized way of integrating Web-based applications using the XML, SOAP, WSDL, and UDDI open standards over an Internet protocol backbone. XML is used to tag the data, SOAP is used to transfer the data, WSDL is used for describing the services available and UDDI is used for listing what services are available.</dd>
<dd>CATEGORY: Services, Policies, Registry</dd>


<dt>Web Service Operation</dt>
<dd>Web service operations are <strong>operations</strong> exposed by a web service that are defined in the Web Service Description Language (WSDL) document. Web Service <strong>Operations</strong> are defined in the WSDL document using the <span class="apidoc_code">&lt;operation name&gt;</span> tag.</dd>
<dd>CATEGORY: Services</dd>


<dt>Wizard</dt>
<dd>An automated utility for performing Policy Manager related configuration activities including configuring Policy Manager, Containers, and related update and maintenance activities.</dd>
<dd>CATEGORY: Policy Manager</dd>


<dt>Workbench Object</dt>
<dd>A Workbench Object is an element in an Organization Tree that contains a specific type of a <strong>metrics</strong> information pertaining to the web service. Metrics information for each object includes configuration, security (access control and policy), attribute, and state information. Objects that display in the <strong>Organization Tree</strong> are first-class objects meaning that they can be used in Workbench without restriction and have intrinsic identity. The first-class object is a complete entity unto itself, includes all the privileges and properties, and can be passed to functions and returned from them. Core functionality of the first-class object is presented in the Workbench as <strong>Portlets.</strong> External attribute information related to a particular function is via tabs.</dd>
<dd>CATEGORY: Workbench Object</dd>


<dt>Workflow Definition</dt>
<dd>A <strong>Workflow Definition</strong> is an XML file that file that defines the business processes (state machine) for all services or contracts.</dd>
<dd>CATEGORY: Workbench</dd>


<dt>Workflow Instance</dt>
<dd>A <strong>Workflow Instance</strong> is composed of the Workflow states created based on a Workflow Definition. A Workflow Instance is always associated with a specific service or contract.</dd>
<dd>CATEGORY: Workbench</dd>


<dt>WS-Auditing Policy</dt>
<dd>An auditing policy provides instructions to an SOA Container for when to audit information about messages, what information to audit, and how to report the information. The following WS-Auditing Policies are supported: WS-Auditing Message Policy, WS-Auditing SOAP Message Policy, WS-Auditing SOAP Service Policy, WS-Auditing Service Policy, and WS-Auditing Transaction Tracking Policy.</dd>
<dd>CATEGORY: Policies</dd>


<dt>WS-Security</dt>
<dd>WS-Security is a mechanism for incorporating security information into SOAP messages. WS-Security builds from the SOAP specification, structuring the use of essential security capabilities by using binary tokens for authentication, digital signatures for integrity, and content-level encryption for confidentiality. By structuring SOAP security, WS-Security makes it easy to include security elements into SOAP through tools and enterprise applications.</dd>
<dd>CATEGORY: Policies, Security</dd>


<dt>WS-Security Asymmetric Binding Policy</dt>
<dd>The WS-Security Asymmetric Binding Policy is a Security Binding policy that is used when the <strong>client</strong> (Initiator) and <strong>service</strong> (Recipient) both have security tokens.</dd>
<dd>CATEGORY: Policies</dd>


<dt>WS-Security Decryption Component</dt>
<dd>The <strong>WS-S Decryption Component</strong> is a <strong>Pipeline</strong> Policy Component that is used to decrypt a SOAP message that has been encrypted based on WS-Security standard.</dd>
<dd>CATEGORY: Policies</dd>


<dt>WS-Security Encryption Component</dt>
<dd>The WS-S Encryption Component is a <strong>Pipeline</strong> Policy Component that can be used to encrypt SOAP requests to be consumed by next hop or SOAP responses to be consumed by clients.</dd>
<dd>CATEGORY: Policies</dd>


<dt>WS-Security Message Policy</dt>
<dd>WS-Security Message Policy specifies which portion of the SOAP message requires signed and/or encrypted.</dd>
<dd>CATEGORY: Policies</dd>


<dt>WS-Security Supporting Tokens Policy</dt>
<dd>The <strong>WS-Security Supporting Tokens Policy</strong> is used to specify supporting tokens which are additional tokens that can be specified to augment claims provided by the token associated with the <strong>message signature</strong> provided by the Security Binding.</dd>
<dd>CATEGORY: Policies</dd>


<dt>WS-Security Symmetric Binding Policy</dt>
<dd>The WS-Security Symmetric Binding Policy is used when only one party needs to generate the security tokens. A symmetric key is established using that security token and further signing and encrypting is done using this.
For example, symmetric binding can be used when only the server possesses an X509 Token.</dd>
<dd>CATEGORY: Policies</dd>


<dt>WS-Security Transport Binding Policy</dt>
<dd>The WS-Security Transport Binding Policy is used when the message protection is provided by the transport medium. Most common scenario is using HTTPS as the message exchange transport medium.</dd>
<dd>In transport binding assertion, we can define a transport token through which we can constrain messages to be exchanged only through a defined medium. WS-Security policy specification defines a HTTPS token that defines messages be transmitted over HTTPS.</dd>
<dd>CATEGORY: Policies</dd>


<dt>WSDL</dt>
<dd>Short for Web Services Description Language, an XML-formatted language used to describe a Web service's capabilities as collections of communication endpoints capable of exchanging messages. WSDL is an integral part of UDDI, an XML-based worldwide business registry.</dd>
<dd>CATEGORY: Services, Registry, Policies</dd>


<dt>WSDL URL</dt>
<dd>The Uniform Resource Locator of the Web Services Description Language (WSDL) document.</dd>
<dd>CATEGORY: Services</dd>


<dt>X.509 Certificate</dt>
<dd>An X.509 certificate is an authentication mechanism that provides visibility to public information and verifies private information while keeping it secure. Credential information is embedded in the body of a SOAP Message, or can be obtained from the HTTPS Context.</dd>
<dd>CATEGORY: Security, Policies</dd>


<dt>X.509 of HTTPS Context</dt>
<dd>An authentication mechanism requiring your client application to use a secure transport protocol (HTTPS socket) to make a secure connection with the application server. This option does not generate a message that includes credentials. HTTPS verifies that the user has a private key corresponding to the certificate, and then gets the certificate from the socket.</dd>
<dd>CATEGORY: Security, Policies</dd>


<dt>XML</dt>
<dd>Short for Extensible Markup Language, a specification developed by W3C. It allows designers to create their own customized tags, enabling the definition, transmission, validation, and interpretation of data between applications and between organizations.</dd>
<dd>CATEGORY: Services, Security, Policies</dd>


<dt>XML Policy</dt>
<dd>An XML policy is a policy that is imported into the Workbench that is of a type that has not been registered with the product. In other words, if a policy is imported with a WSDL document that holds an assertion that is not known within the product and therefore does not have an associated user interface, it will be treated as an XML policy. An XML policy will be displayed as raw XML text.</dd>
<dd>CATEGORY: Policies</dd>


<dt>XQuery</dt>
<dd>A query language that queries and transforms collections of structured and unstructured data, usually XML. XPath is a subset of XQuery. Specification: xxx. </dd>
<dd>Some of the platform's policies support XQuery for flexible querying of information such as the WSDL or messages for a service.</dd>


<dt>XSD</dt>
<dd>XSD (XML Schema Definition), a recommendation of the World Wide Web Consortium (W3C), specifies how to formally describe the elements in an Extensible Markup Language (XML) document. This description can be used to verify that each item of content in a document adheres to the description of the element in which the content is to be placed.</dd>
<dd>CATEGORY: Security, Policies</dd>


<dt>XSL</dt>
<dd>Short for Extensible Style Language, a specification for separating style from content when creating HTML or XML pages. The specifications work much like templates, allowing designers to apply single style documents to multiple pages.</dd>
<dd>CATEGORY: Security, Policies</dd>


<dt>XSLT</dt>
<dd>Short for Extensible Style Language Transformation, the language is used in XSL style sheets to transform XML documents into other XML documents. An XSL processor reads the XML document and follows the instructions in the XSL style sheet, and then it outputs a new XML document or XML-document fragment.</dd>
<dd>CATEGORY: Security, Policies</dd>


<dt>XQuery</dt>
<dd>A query language that queries and transforms collections of structured and unstructured data, usually XML. XPath is a subset of XQuery. Specification: xxx.</dd>
<dd>Some of the platform's policies support XQuery for flexible querying of information such as the WSDL or messages for a service.</dd>


</dl>