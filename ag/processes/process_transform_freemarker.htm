---
layout: page
title: Using FreeMarker in the Process Editor
description: Get started with using FreeMarker for transformation activities in the Process Editor.
product: ag
category: ref
weight: 10
sub-nav-class: Processes
type: page
nav-title: Using FreeMarker
---
<h2 id="top">Using FreeMarker in the Process Editor</h2>
<p>Get started using FreeMarker for transformation activities in the Process Editor.</p>

<p><a href="getting_started_with_processes.htm" class="button secondary"> Getting Started with Processes</a> 
<a href="process_management.htm" class="button secondary">Managing Processes</a> 
<a href="process_reference.htm" class="button secondary">Process Reference</a></p>


<div class = "divider1"></div>
<h3 style="color: gray;">Table of Contents</h3>


<ol class="table_of_contents">
	<li><a href="#freemarker_01">FreeMarker Introduction</a></li>
	<li><a href="#freemarker_02">Developing a FreeMarker Activity: Overview</a></li>
	<li><a href="#freemarker_03">Extracting data from XML</a></li>
	<li><a href="#freemarker_04">Creating an XML Document</a></li>
	<li><a href="#freemarker_05">Extracting Data from JSON</a></li>
	<li><a href="#freemarker_06">Error Handling</a></li>
	<li><a href="#freemarker_07">FreeMarker version</a></li>
	<li><a href="#freemarker_08">Using FreeMarker in the Process Editor Transformation Activity</a></li>
</ol>



<div class = "divider1"></div>



<h3 id="freemarker_01">FreeMarker Introduction</h3>
<p>Apache FreeMarker is a free Java-based template engine, a Java library that can be used to generate text output by combining variable input data with templates. It includes powerful macro-based capabilities.</p>
<p>Policy Manager supports FreeMarker as one of the languages available for creating Transformation activities in the Process Editor.</p>
<p>FreeMarker is very powerful, and its capabilities are not documented here. For a comprehensive description of the template language, see <a href="https://freemarker.apache.org/" title="Link to Freemarker home page" target="_blank">https://freemarker.apache.org/</a>.</p>
<p>The important thing with FreeMarker is to understand the concept. Essentially what FreeMarker does is to provide a means of creating a template that outputs text with the ability to insert content in the template based on extracting information from an input data model. In the context of the platform, the data model is built from the source message and process context. FreeMarker provides a language for specifying how to insert content from the data model, and it provides a set of control directives for actions such as looping through content and using conditionals.</p>

<h5>FreeMarker templates</h5>
<p>At its core, a FreeMarker template is just the text that is going to be output. For example, the template below would simply output that piece of static text.</p>
<pre>&lt;html&gt;
  &lt;body&gt;
    &lt;p&gt;Hello World&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;</pre>
<p>FreeMarker provides a language for inserting values from the data model into the template. In the example below, a variable is used along with some static text:</p>
<pre>&lt;html&gt;
  &lt;body&gt;
    &lt;p&gt;Hello ${user}&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;</pre>
<p>The template above extracts the user value from the data model and uses it to generate a personalized piece of html. That is, of course, assuming that your data model contains a scalar value stored as user.</p>

<h5>Dot Notation</h5>
<p>The data model is hierarchical, so if the user value is actually an object, you would access the inner values using a dot notation. For example:</p>
<pre>${user.name.lastname}</pre>
<p>This is a very important point. The value that you insert <strong>must</strong> be a scalar value. If your user value was a complex object, and you tried <strong>${user}</strong> in your template, the template rendering would fail with an error something like the below:</p>
<pre>"${...}" content: Expected a string or something automatically convertible to string (number, date or boolean), but this has evaluated to an extended_hash.</pre>
<p>The FreeMarker process activity replaces the content of the specified message variable with the result of running a template over the data model.</p>
<p>This document provides a couple of examples showing ways that you can use this activity for some common use cases.</p>
<p><a href="#top">Back to top</a></p>



<h3 id="freemarker_02">Developing a FreeMarker Activity: Overview</h3>
<p>The FreeMarker process activity allows you to create message content using FreeMarker templates. It provides a powerful content creation mechanism that can address any element in the process and message contexts, including headers, parameters, content, and more. It includes helper methods for returning message context as an XML document structure or a string, for easy addressing using the FreeMarker template syntax.</p>
<p>To use the FreeMarker activity you:</p>
<ul>
	<li>Provide a FreeMarker template.</li>
	<li>Specify the message variable, the content of which you will replace with the results of processing the template.</li>
	<li>Specify the Content-Type of the resulting message content.</li>
</ul>
<p>The activity populates the FreeMarker data model with all the variables named in the processContext, most notably the default message variable. For details on the processContext and messageContext, refer to the script API documentation (go to <a href="http://docs.akana.com/ag/apidoc_scripting_api_all.htm" title="Link to Scripting API doc overview page" target="_blank">http://docs.akana.com/ag/apidoc_scripting_api_all.htm</a> and choose the correct version for your installation).</p>
<p>There are two added helper methods in each message context:</p>
<ul>
	<li><strong>contentAsString</strong>&#8212;returns the message content as a string.</li>
	<li><strong>contentAsXml</strong>&#8212;returns the message content as an XML DOM object.</li>
</ul>
<p>You can access any of the properties in each context using a dot notation that skips the get prefix on the property. For example, a method in the script API of <strong>getTransportHeaders()</strong> can be accessed as a property using <strong>message.transportHeaders</strong>. This accesses the transportHeaders property of the default message context.</p>
<p><strong>Note</strong>: while many properties directly return a scalar value, this example returns a Headers map. To use this in a template, you'd need to find a specific instance of a header using something like the following:</p>
<pre>${message.transportHeaders.get("User-Agent").value}</pre>
<h5>JSON to XML: simple example</h5>
<p>The example below shows a very simple template for processing a JSON document, with example input and output.</p>
<p><strong>Template:</strong></p>
<pre>&lt;#assign m = message.contentAsString?eval&gt;
&lt;name&gt;${m.pet.name}&lt;/name&gt;</pre>
<p><strong>JSON input:</strong></p>
<pre>{
  "pet":{
    "name":"fido",
    "type":"dog"
  }
}</pre>
<p><strong>XML output results:</strong></p>
<pre>&lt;name&gt;fido&lt;/name&gt;</pre>
<p><a href="#top">Back to top</a></p>



<h3 id="freemarker_03">Extracting data from XML</h3>
<p>FreeMarker provides an easy way to extract some elements from an XML document with a complex structure and use their values to generate JSON, or even HTML, without having to become an XSLT expert. FreeMarker doesn't eliminate the need for XSLT, but it does provide a simpler alternative for many common uses.</p>
<p>We'll use an example of a fairly simply document that will be enough to show a lot of the common approaches and pitfalls:</p>
<pre>&lt;br:add xmlns:br="http://demo.akana.com/borrower"&gt;
  &lt;br:borrower&gt;
    &lt;br:id&gt;111-11-1111&lt;/br:id&gt;
    &lt;br:ssn&gt;111-11-1111&lt;/br:ssn&gt;
    &lt;br:city&gt;Los Angeles&lt;/br:city&gt;
    &lt;br:first&gt;John&lt;/br:first&gt;
    &lt;br:last&gt;Smith&lt;/br:last&gt;
    &lt;br:line1&gt;12100 Wilshire Blvd&lt;/br:line1&gt;
    &lt;br:phone&gt;310-000-0000&lt;/br:phone&gt;
    &lt;br:state&gt;CA&lt;/br:state&gt;
    &lt;br:zip&gt;90025&lt;/br:zip&gt;
  &lt;/br:borrower&gt;
&lt;/br:add&gt;</pre>
<p>The basic idea is that we are going to access the XML document structure by using the <strong>contentAsXml</strong> helper method, and then addressing the elements. For any XML document using namespaces, the first step is to define the namespaces using the FreeMarker <strong>ns_prefixes</strong> tag. Using that, it's possible to address elements using array notation (not dot notation).</p>

<h5>Example using array notation</h5>
<p>Below is an example using array notation, with sample output.</p>
<p><strong>Example:</strong></p>
<pre>&lt;#ftl ns_prefixes={&quot;br&quot;:&quot;http://demo.akana.com/borrower&quot;}&gt;
{ &quot;result&quot; : &quot;${message.contentAsXml[&quot;br:add&quot;][&quot;br:borrower&quot;][&quot;br:last&quot;]}&quot; }</pre>
<p><strong>Output:</strong></p>
<pre>{ "result" : "Smith" }</pre>

<h5>Using the "D" prefix to define default namespace</h5>
<p>You can also use the special "D" prefix to define a default namespace so that you can use dot notation.</p>

<h5>Assigning the result of the helper function to a variable</h5>
<p>Another strategy is to assign the result of the helper function to a variable so that you can use it more efficiently, as in the example below.</p>
<pre>&lt;#ftl ns_prefixes={"D":"http://demo.akana.com/borrower"}&gt;
&lt;#assign xmlmsg = message.contentAsXml&gt;
{ "result" : "${xmlmsg.add.borrower.last}" }
</pre>
<p>The above has the same effect as the first template, but is much more readable.</p>
<p class="apidoc_note"><strong>Note</strong>: if you have multiple namespaces in your message, pick the one you'll need to access the most for your default, and then remember that you'll have to use array notation with the prefixes to address elements in other namespaces.</p>
<p><a href="#top">Back to top</a></p>



<h3 id="freemarker_04">Creating an XML Document</h3>
<p>The FreeMarker template is essentially just the text you will output, so if you want to create an XML document, you must write the document.</p>
<p>Using the example above, and rewriting output XML rather than JSON, you might end up with something like the below:</p>
<pre>&lt;#ftl ns_prefixes={"D":"http://demo.akana.com/borrower"}&gt;
&lt;#assign xmlmsg = message.contentAsXml&gt;
&lt;br:borrower xmlns:br="http://demo.akana.com/borrower"&gt;
  &lt;br:last&gt;${xmlmsg.add.borrower.last}&lt;/br:last&gt;
&lt;/br:borrower&gt;</pre>
<p class="apidoc_note"><strong>Note</strong>: You'll need to manually structure your document so that it produces valid XML, complete with namespace definitions and prefixes, though if the resulting XML is invalid, the product doesn't generate errors unless you then choose to mediate the XML.</p>
<p><a href="#top">Back to top</a></p>



<h3 id="freemarker_05">Extracting Data from JSON</h3>
<p>JSON data is structured in a similar way to a FreeMarker data model. FreeMarker provides a simple evaluation utility for evaluating a string containing a JSON document and mapping it to a data model.</p>
<p>The following examples will all work with the fairly complex JSON document below:</p>
<pre>[
    {
        "category": {
            "id": 100,
            "name": "Dinosaur"
        },
        "name": "Tyrannosaurus",
        "photoUrls": [
            "http://en.wikipedia.org/wiki/Tyrannosaurus#/media/File:Tyrannosaurus_rex_mmartyniuk.png"
        ],
        "tags": [
            {
                "id": 100,
                "name": "reptile"
            },
            {
                "id": 101,
                "name": "dinosaur"
            }
        ],
        "status": "available",
        "id": "100",
        "href": "http://localhost:9900/things/petstore/100"
    },
    {
        "category": {
            "id": 200,
            "name": "Dog"
        },
        "name": "Rover",
        "photoUrls": [
            "http://en.wikipedia.org/wiki/Tyrannosaurus#/media/File:Tyrannosaurus_rex_mmartyniuk.png"
        ],
        "tags": [
            {
                "id": 102,
                "name": "mammal"
            },
            {
                "id": 103,
                "name": "dog"
            }
        ],
        "status": "available",
        "id": "101",
        "href": "http://localhost:9900/things/petstore/101"
    },
    {
        "category": {
            "id": 200,
            "name": "Dog"
        },
        "name": "Fido",
        "photoUrls": [],
        "tags": [
            {
                "id": 102,
                "name": "mammal"
            },
            {
                "id": 103,
                "name": "dog"
            }
        ],
        "status": "available",
        "id": "102",
        "href": "http://localhost:9900/things/petstore/102"
    },
    {
        "id": "1433943941767",
        "category": {
            "id": 100,
            "name": "Dinosaur"
        },
        "name": "Brontosaurus",
        "photoUrls": [],
        "tags": [
            {
                "id": 100,
                "name": "reptile"
            },
            {
                "id": 101,
                "name": "dinosaur"
            }
        ],
        "status": "sold",
        "href": "http://localhost:9900/things/petstore/1433943941767"
    }
]</pre>
<p>One of the most complex aspects of this example JSON document is that it has no top-level named objects; it's just an array of objects. Because of this, to extract information from the first item in the array, it's important to address it appropriately, as in the example below.</p>
<p>This:</p>
<pre>&lt;#assign m = message.contentAsString?eval&gt;
{ "name" : "${m[0].name}" }</pre>
<p>Returns this:</p>
<pre>{ "name" : "Tyrannosaurus" }</pre>
<p class="apidoc_note"><strong>Note</strong>: the <strong>&lt;#assign&gt;</strong> directive uses the platform's helper function to return the string value of the message content, and uses the FreeMarker <strong>eval</strong> function to map the JSON document to the data model.</p>
<p>Of course, it's really not that useful to be forced to manually select which element in the array you want to work with; a better approach is to use the <strong>&lt;#list&gt;</strong> directive:</p>
<pre>&lt;#assign m = message.contentAsString?eval&gt;
{
  "name" : [
	&lt;#list m as pet&gt;
		"${pet.name}"&lt;#sep&gt;,
	&lt;/#list&gt;
  ]
}</pre>
<p>This template iterates through the elements in the top-level array (assigned to <strong>m</strong>), and assigns each element to a new variable named <strong>pet</strong>. We can then work on each element in the pet array separately. This template also introduces the <strong>&lt;#sep&gt;</strong> directive, which is used when you have to display something between items (but not before the first item or after the last item).</p>
<p><a href="#top">Back to top</a></p>



<h3 id="freemarker_06">Error Handling</h3>
<p>If the template fails in the activity, it outputs any exceptions to a debug entry in the message log.</p>
<p>Once you have a template working, the most likely failure scenario is that an element doesn't exist. For example, in the JSON document above, if one of the pet objects didn't have a name, the listing template would fail. To address this, we can use conditionals around elements that might or might not be present. For example:</p>
<pre>&lt;#assign m = message.contentAsString?eval&gt;
{
  "name" : [
	&lt;#list m as pet&gt;
		"&lt;#if pet.name??&gt;${pet.name}&lt;#else&gt;${pet.category.name}&lt;/#if&gt;"&lt;#sep&gt;,
	&lt;/#list&gt;
  ]
}</pre>
<p>This example uses the <strong>??</strong> operator in a conditional <strong>&lt;#if pet.name??&gt;....&lt;/#if&gt;</strong> to detect if <strong>pet.name</strong> exists. In this case, the <strong>&lt;#else&gt;</strong> directive specifies another value to use, <strong>${pet.category.name}</strong>, in the event that the pet object doesn't have a name.</p>
<p><a href="#top">Back to top</a></p>



<h3 id="freemarker_07">FreeMarker version</h3>
<p>In version 8.4 and later, the Policy Manager Process Editor supports FreeMarker in the context of the Transformation Details Editor. The platform uses FreeMarker version 2.3.25. FreeMarker functionality is embedded in the product, and does not require any additional installation.</p>
<p>In versions earlier than 8.4, the platform supports FreeMarker, but installation of a separate plug-in is required.</p>
<p class="apidoc_note"><strong>Note</strong>: If you are using version 8.4x, do <strong>not</strong> install the plug-in.</p>
<p><a href="#top">Back to top</a></p>



<h3 id="freemarker_08">Using FreeMarker in the Process Editor Transformation Activity</h3>
<p>When you're writing transformations in the Process Editor, you can choose to craft your transformation in XSLT or FreeMarker. For an example in XSLT, see <a href="process_reference.htm#transformation_xslt">Transformation Activity: XSLT Example</a>.</p>
<p>Using FreeMarker, you can address any element in the process context and variables, including headers, parameters, content, and more.</p>

<h5>To get to the Transformation Details Editor:</h5>
<ol>
	<li>Open the Process Editor. For instructions, see <a href="process_management.htm#process_editor_access">Accessing the Process Editor</a>.</li>
	<li>In the Process Editor toolbar, click the <strong>Transformation</strong> tool (see <a href="#freemarker_tool">Note: Choosing the Transformation Tool</a> below), and drag it into the Process Editor workspace. For more information, see <a href="process_reference.htm#transformationactivity">Transformation Activity</a>.</li>
	<li>In the workspace, double-click the Transformation tool to access the Transformation Details Editor. See <a href="#freemarker_09">Using FreeMarker in the Transformation Details Editor</a> below.</li>
</ol>
<h5 id="freemarker_tool">Note: Choosing the Transformation Tool</h5>
<p>Make sure you choose the Transformation activity: <img src="images/transformation_activity_icon.jpg" style="vertical-align:bottom" alt="icon" />.</p>
<p>In some cases, the Process Editor toolbar might also include the FreeMarker plug-in tool: <img src="images/icon_freemarker_plugin.jpg" style="vertical-align:bottom" alt="icon" />. Do <strong>not</strong> use the plug-in; it is a custom activity that is not guaranteed to be available in all environments, and has been superseded by the transformation activity. Always use the Transformation activity.</p>

<h5 id="freemarker_09">Using FreeMarker in the Transformation Details Editor</h5>
<ol>
	<li>In the Transformation Details Editor, specify the key details for using FreeMarker in your transformation:
		<ul>
			<li><strong>Language</strong>: choose FreeMarker.</li>
			<li><strong>Out Variable</strong>: Specify the variable from the <strong>Out</strong> message that the FreeMarker template will use: <strong>message</strong> or <strong>fault</strong>.</li>
			<li><strong>Content Type</strong>: Specify the content-type. Start typing a valid content-type and the platform matches from a list of supported values.</li>
			<li><strong>Template</strong>: In the workspace, write or paste the body of the FreeMarker template.</li>
		</ul>
		</li>
	<li>Click <strong>Finish</strong>.</li>
</ol>
<p><a href="#top">Back to top</a></p>