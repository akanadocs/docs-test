---
layout: page
title: Process Reference for Policy Manager 8.x
description: Learn to create a process and use process activities in Policy Manager 8.x.
product: ag
category: ref
weight: 1
sub-nav-class: Processes
type: page
nav-title: Policy Manager 8.x Process Reference
---


<a name="top"></a><h2>Process Reference for Policy Manager 8.x</h2>

<p>Learn to create a process and use process activities.</p>

<p><a href="getting_started_with_processes_pm8x.htm" class="button secondary"> Getting Started (PM8x)</a>
<a href="process_management_pm8x.htm" class="button secondary">Managing Processes (PM8x)</a></p>

<h5 class="stamp">Supported Platforms: 8.x</h5>



<div class = "divider1"></div>

<h3 style="color: gray;">Table of Contents</h3>


<ol class="table_of_contents">
 <li><a href="#processeditor">Process Editor</a></li>
  <li><a href="#faultsequenceeditor">Fault Sequence Editor</a></li>
  <li><a href="#variableeditor">Variable and Faults Editor</a></li>
  <li><a href="#receiveactivity">Receive Activity</a></li>
  <li><a href="#replyactivity">Reply Activity</a></li>
  <li><a href="#invokeactivity">Invoke Activity</a></li>
  <li><a href="#scriptactivity">Script Activity</a></li>
  <li><a href="#branchactivity">Branch Activity</a></li>
  <li><a href="#splitactivity">Split Activity</a></li>
  <li><a href="#joinactivity">Join Activity</a></li>
  <li><a href="#transformationactivity">Transformation Activity</a></li>
  <li><a href="#auditactivity">Audit Activity</a></li>
  <li><a href="#insertcontentactivity">Insert Content Activity</a></li>
  <li><a href="#processactivity">Process Activity</a></li>
  <li><a href="#throwactivity">Throw Activity</a></li>
</ol>



<div class = "divider1"></div>



<a name="processes"></a><h3>About Processes</h3>
<p>A process is an ordered graph of activities that can be performed by a container that supports the virtualization capability, such as the Network Director. The logic performed in a virtual service operation is defined as a process. When the container receives a message, it first identifies the virtual service operation and then executes the process. As dictated by the activities in the process, down-stream services may be invoked. As a result of process execution, a response to the original message is generated.
</p>
<p>An example of a process is the default process of a virtual service operation. In that process, a message is received using a <a href="#receiveactivity">Receive Activity</a>, an Invoke Activity is executed that calls the virtualized service operation, and a Reply Activity responds with the response from the Invoke Activity.</p>
<p>Processes can get much more complex to perform functions such as transformation and content-based routing. The author of the process can assemble activities to achieve the desired results.</p>
<p>The Akana API Platform allows you to manage the process for an operation from the Implementation page for a specific implementation: API &gt; Implementations &gt; specific implementation &gt; at bottom, specific operation, Actions drop-down, click Edit Process.</p>
<p>Akana Policy Manager allows you to create processes within these contexts:</p>
<ul class="usingOrderedList">
  <li>As the implementation of a virtual service operation (<em>Services &gt; Operation &gt; Process</em> or <em>Services &gt; Operation &gt; Fault </em>section)</li>
  <li>As a standalone process (Processes Folder) that can be invoked by another process to achieve reusability.</li>
</ul>
<p>In all contexts, a graphical editor is provided to construct the process.</p>
<p><a href="#top">Back to top</a></p>



<a name="processeditor"></a><h3>Process Editor</h3>
<p>The <em>Process Editor</em> allows you to create a process in a graphical drag-and-drop environment. The process begins by receiving a message (see the <a href="#receiveactivity">Receive Activity</a>) and the process ends when a message is returned to the caller (see the <a href="#replyactivity">Reply Activity</a>).</p>
<p><img src="images/process_editor_activity_palette_8x.jpg" width="645" height="337" alt="Process Editor Activity Palette" /></p>
<p>Illustration: Process Editor Activity Palette</p>
<h5>Activities</h5>
<p>The activities available to be called from within a process are available on an <em>Activity Palette</em> located on the upper left-hand side of the editor workspace. You can select an activity icon in the palette and drag it on to the process editor workspace. Activities are called in order and are linked together by directional connectors. To link two activities, select the middle of the activity that will be executed first, as shown below.</p>
<p><img src="images/starting_a_link_between_activities.jpg" width="402" height="230" alt="Starting a Link Between Activities" /></p>
<p>Illustration: Starting a Link Between Activities</p>
<p>Drag your mouse to the center of the activity to be executed next and then release. A directional connector is drawn, linking the two activities.</p>
<p><img src="images/completing_a_link_between_activities.jpg" width="442" height="138" alt="Completing a Link Between Activities" /></p>
<p>Illustration: Completing a Link Between Activities</p>
<h5>Sequence</h5>
<p>A series of activities linked together is called a <em>Sequence</em>. A sequence is terminated by either a <a href="#branchactivity">Branch Activity</a> (see below) or a <a href="#replyactivity">Reply Activity</a> (see below). A set of linked activities from the <a href="#receiveactivity">Receive Activity</a> to a <a href="#replyactivity">Reply Activity</a> may contain several sequences separated by Branch Activities. In this scenario, the entire set of linked activities is called a <em>Flow</em>.</p>
<h5>General Functions</h5>
<p>Functions that can be performed on the entire process are available on a toolbar located on the bottom part of the editor palette, as shown below.</p>
<p><img src="images/process_editor_toolbar_8x.jpg" width="639" height="371" alt="Process Editor Toolbar" /></p>
<p>Illustration: Process Editor: Functions that apply to the entire process</p>
<p>The toolbar includes functions such as saving the process, editing the variables used in the process (see <a href="#variableeditor">Variable Editor</a>), refreshing the page, or undoing the last action.</p>
<p><a href="#top">Back to top</a></p>



<a name="faultsequenceeditor"></a><h3>Fault Sequence Editor</h3>
<p>Next to the Process Editor tab is a tab labeled <em>Fault</em>. On this tab, you define a sequence of activities to execute if a fault is encountered at any point of your main process. In the main process, once a fault is encountered, the process execution immediately stops and the activity sequence in the Fault tab is executed.</p>
<p>The editor supports a flow for each named fault as identified in the Variables and Faults Editor.</p>
<p>A pull-down of fault names, as defined in the Variables and Faults Editor, is displayed on the Fault tab. When you select a fault name from the pull-down list, the fault flow for the named fault is displayed on the workspace. By default, each fault flow has a single Reply activity. The default fault flow is displayed in the pull-down with the <strong>Unnamed</strong> label.</p>
<p><img src="images/fault_sequence_editor_v80.jpg" width="630" height="350" alt="Fault Sequence Editor" /></p>
<p>Illustration: Fault Sequence Editor</p>
<p>The <em>Fault Sequence Editor </em>works in exactly the same way as the main Process Editor, except that the sequence does not need to begin with a Receive Activity. The Receive from the external client has already been executed in the main process. At this point, we are just executing activities within the same process context.</p>
<p>When the fault sequence is executed, the reserved variable name <strong>fault</strong> contains the fault message that triggers the sequence. Activities that reference variables can use this fault variable.</p>
<p>A fault sequence is not required. If there is no fault sequence, the system simply returns the fault back to the client. If a sequence is constructed, at a minimum a Reply Activity must be present at the end. You can use any of the activities in the activity palette in the fault sequence, including <a href="#branchactivity">Branch </a> activities. However, each branch must end with a Reply Activity.</p>
<p>You can configure the Reply Activity to return a fault message or a regular message, as controlled by the Fault field in the Reply Activity Editor (see the <a href="#replyactivity">Reply Activity</a> section below). The reserved fault name <strong>CurrentFault</strong> as seen in the fault name pull-down indicates that the fault name for the content of the fault variable will be used as-is. You can change the name to any of the operation faults or to a Binding Fault. This allows you to perform fault mediation.</p>
<p><a href="#top">Back to top</a></p>



<a name="variableeditor"></a><h3><img src="images/variables_editor_icon.jpg" width="26" height="30" style="vertical-align:bottom" alt="icon" /> Variables and Faults Editor</h3>
<p>The <em>Variables and Faults Editor </em>allows you to define variables that can be used in the process and faults that are handled within the process.</p>
<p>You can use variables  in different activities to dictate behavior, such as using a variable to identify the endpoint of a service to invoke, to store the output from web service invocations, or to provide input to web service invocations.</p>
<h4>Variables</h4>


<p>A variable is identified by a name and defined by a type, or syntax. The types recognized by the system are:</p>
<ul>
  <li>message (used for input or output of a web service invocation, request, or Reply Activity)</li>
  <li>string</li>
  <li>int</li>
  <li>long</li>
  <li>Boolean</li>
  <li>float</li>
  <li>any (can hold any content)</li>
</ul>
<p>Activities that support the use of variables in their configurations often restrict the use of variables based on type. You can also define a default value for a variable. If a default value has been defined, the default value is assigned to the variable at the beginning of process execution.</p>
<h4>Faults</h4>
<p>Faults can be thrown as a result of an activity. If a fault is unhandled, the default fault flow is invoked. Optionally, fault flows can be defined for each named fault thrown within the process if they are identified in the Faults Editor, as shown below.</p>
<p><img src="images/variables_faults_editor_pm80.jpg" width="569" height="300" alt="Variables and Faults Editor" /></p>
<p>Illustration: Variables and Faults Editor</p>
<p><a href="#top">Back to top</a></p>



<a name="receiveactivity"></a><h3><img src="images/receive_activity_icon.jpg" width="44" height="42" style="vertical-align:bottom" alt="icon" />Receive Activity</h3>
<p>The Receive Activity provides the entry point into the process. The caller invokes the process by providing it with a message. That message is stored in the variable selected in the activity's configuration screen. Only variables of type <strong>message</strong> can be used. There can only be one Receive activity in a process.</p>
<p><img src="images/receive_activity_editor.jpg" width="631" height="69" alt="Receive Activity Editor" /></p>
<p>Illustration: Receive Activity Editor</p>
<p><a href="#top">Back to top</a></p>



<a name="replyactivity"></a><h3><img src="images/receive_activity_icon.jpg" width="44" height="42" style="vertical-align:bottom" alt="icon" />Reply Activity</h3>
<p>The Reply Activity provides the exit point from a process. Every flow through the process must have one and only one Reply Activity. If there are multiple branches created from a <a href="#branchactivity">Branch Activity</a>, each branch must be terminated with a Reply Activity. The Reply Activity can return a message to the caller. It is not required for one-way operation processes. Only variables of type <strong>message</strong> can be used.</p>
<p><img src="images/reply_activity_editor.jpg" width="630" height="68" alt="Reply Activity Editor" /></p>
<p>Illustration: Reply Activity Editor</p>
<h5>Application and Binding Faults</h5>
<p>In addition to specifying the variable holding the message to return you can also indicate that the message is a fault by providing a Fault Name. Faults fall into two main categories:</p>

<ul>
  <li><strong>Application faults</strong>
<p>An application fault is caused by a problem in the business process of the operation. For example, if the operation is to withdraw funds, there might be an application fault to identify that there are insufficient funds. An application fault is defined in the WSDL document for the operation. Policies can be attached to them. </p></li>
  <li><strong>Binding faults</strong>
<p>A binding fault is not specific to the business function of the operation; it is a problem at the protocol layer itself. Binding faults are general to all operations. Some examples: security failures, communication failures, or message parsing errors. A binding fault is typically not referenced anywhere.</p>
  </li>
</ul>

<p>The Fault Name pull-down in the Reply Activity Editor contains the application faults found in the WSDL document for the operation as well as a reserved fault name of <strong>BindingFault</strong>. You can choose what the message being returned represents. </p>
<p>One other option is provided that is called <strong>CurrentFault</strong>. That option is available only in the Fault Sequence Editor. It requires the reserved fault variable to be filled with a message and its fault name to be already known and used here.</p>
<p><img src="images/fault_reply_activity.jpg" width="630" height="151" alt="Fault Reply Activity" /></p>
<p>Illustration: Fault Reply Activity</p>
<p><a href="#top">Back to top</a></p>


<a name="invokeactivity"></a><h3><img src="images/invoke_activity_icon.jpg" width="41" height="38" style="vertical-align:bottom" alt="icon" /> Invoke Activity</h3>
<p>The Invoke Activity invokes an operation of a service registered in the system. It sends a message invoking the operation. The message includes a single input variable or multiple input parameters. The response from the operation invocation is stored in an output variable. You can configure these variables on the Manage Input/Output Parameters screen.</p>
<p>You can specify the operation that will be invoked, either statically or dynamically through the use of variables. To statically identify the operation to invoke, first start by searching for the service that includes the operation.</p>
<p>The search is performed using QNames. When the Search button is clicked, the system searches for any service with a QName that contains what is typed in the Service QName field. If nothing is entered, all services are returned.</p>
<p><img src="images/invoked_service_search_pm8x.jpg" width="504" height="85" alt="Invoked Service Search" /></p>
<p>Illustration: Invoked Service Search</p>
<p>You can use variables to specify the service, interface, and/or operation. The variable must be a string typed variable.</p>
<p><img src="images/Invoke_Activity_Variables_8x.jpg" width="519" height="128" alt="Static Operation Selection" /></p>
<p>Illustration: Static Operation Selection</p>
<p>By default, the access point (endpoint) that is called when invoking the operation is selected by the runtime container using its selection strategy.</p>
<p><img src="images/invoke_activity_access_point_8x.jpg" width="545" height="109" alt="Direct Access Point Invocation" /></p>
<p>Illustration: Direct Access Point Invocation</p>
<p>To set up auditing of  the message as it is sent over the wire to the access point, select the Audit check box. </p>
<p><strong>Note</strong>: In order for the downstream message to be audited, there must be an auditing policy currently attached to the virtual service operation invocation that is executing the process.</p>
<h4>Manage Input/Output Parameters</h4>
<p>An invocation activity must define where inputs to the invocation will come from and where the output to the invocation is held within the process.</p>
<p>An operation may have 0 or more parameters, or message parts that must be provided as input values. Depending on the protocol used, these parameters can be encoded differently.</p>
<p>By default, you can use a single message as input, using the Single Input Message option. The runtime engine will construct protocol messages using a default mapping of parameters from the single input message according to protocol-specific rules. In cases where there are multiple input parameters that cannot be constructed using the default mapping, you can directly specify values for each parameter with the Multiple Input Parameters option.</p>
<p>When choosing the Multiple Input Parameters option, you can identify variables in the process as the inputs to the parameters/parts defined for the operation. Each parameter of the operation is listed in the Parameters table. You can select a variable from the drop-down list in the same row to populate the parameter. If a variable is not assigned to a parameter, the runtime engine will attempt to perform its own mapping for that parameter.</p>
<p><img src="images/invoke_activity_manage_input_output1_8x.jpg" width="615" height="192" alt="Input" /></p>
<p>A single output message is returned from an invocation. A variable can be selected to hold that output for later use within the process.</p>
<p><img src="images/invoke_activity_manage_input_output2_8x.jpg" width="607" height="60" alt="Variable for output message" /></p>

<h4>Manage Outbound Identities</h4>
<p>You can configure whether you want to use incoming identities as outbound identities (the default), or specify custom identities to be used for all outbound messages to the downstream service on the <strong>Manage Outbound Identities</strong> screen.</p>
<p>When securing outbound calls from a virtual service, identities are typically required to be specified in request messages. Those identities can be categorized as different actors in a message exchange.</p>
<p>The <strong>Use Incoming Identities as Outbound Identities</strong> option is selected by default. This means that identities used when invoking the operation are dictated by the outbound identity configuration of the virtual service.</p>
<p>You can also define identities for outgoing messages in the <strong>Specify Outbound Identities</strong> section.</p>
<p>Identities that you add are stored in an Identity Table, which you can update as needed, modifying or deleting identities.</p>
<p><img src="images/invoke_activity_manage_outbound_identities_8x.jpg" width="539" height="295" alt="Manage outbound identities" /></p>

<h4>Assign Parameter Values from Script</h4>
<p>You can also specify parameters, or parts, using the following methods:</p>
<ul class="usingOrderedList">
  <li><strong>getPart (String)</strong>&#8212;Returns the message part (parameter) with the given name.</li>
  <li><strong>addPart (String, Object part)</strong>&#8212;Adds a value for a part (parameter) with the given name.</li>
  <li><strong>removePart (String)</strong>&#8212;Removes the value for the part (parameter) with the given name.</li>
  <li><strong>getPartNames()</strong>&#8212;Returns the names of all parts (parameters) that have been assigned a value.</li>
</ul>
<p>For details, refer to the <a href="http://docs.akana.com/ag/assets/scriptDocs_pm80/index.html">Policy Manager Scripting API documentation (8.0)</a>.</p>
<p><a href="#top">Back to top</a></p>



<a name="scriptactivity"></a><h3><img src="images/script_activity_icon.jpg" width="39" height="34" style="vertical-align:bottom" alt="icon" />Script Activity</h3>
<p>The Script Activity provides the ability to execute a script at the point in the process at which the activity is connected. The script can be written in JavaScript, Jython, or BeanShell.
</p>
<p>The Script Details Editor is organized into two separate areas, Imports and Source. The Source has a pull-down where you can select the script language. It also has a large source code editor text area.</p>
<p><img src="images/script_activity_source_area.jpg" width="591" height="140" alt="Script Activity Source Area" /></p>
<p>Illustration: Script Activity Source Area</p>
<p>If you have  functions that might be common to more than one script, you can save those as Script objects using the <strong>Add Script</strong> function in the <em>Scripts</em> section of each Organization in the Policy Manager Workbench. To make use of those common functions from the Script Activity, you must import the script objects defining those functions. The Imports area is where those scripts are identified for import. The available scripts are listed in the Available Scripts tree. Any number of Scripts in that tree can be moved to the Imported Scripts list box. Only scripts that match the language type are available for selection in the tree. The script does not return a value.</p>
<p><img src="images/script_activity_imports_area.jpg" width="572" height="174" alt="Script Activity Imports Area" /></p>
<p>Illustration: Script Activity Imports Area</p>
<p>In the figure above, the json2 script from the Registry Scripts folder is imported. Any functions defined in json2 can be used within the Script Activity source code.
</p>
<p>The following pre-defined variables are provided. For more information, refer to the Policy Manager Scripting API located in the docs\scriptDocs folder of the Policy Manager 8.x release folder, or on the Akana docs site: <a href="http://docs.akana.com/ag/assets/scriptDocs_pm80/index.html">Policy Manager Scripting API documentation (8.0)</a>.</p>
<p>Click the main index HTML file to launch the documentation:</p>
<ul class="usingOrderedList">
  <li><strong>processContext</strong>&#8212;Provides functions for retrieving and changing information about the currently running process, such as the variables defined in the process and the authenticated subjects of the process.</li>
  <li><strong>systemLog</strong>&#8212;Provides logging functions to the container&rsquo;s log. The statements logged with this interface are mixed with the other system log statements.</li>
  <li><strong>auditLog</strong>&#8212;Provides logging functions to the process audit log. If auditing is enabled for the virtual service operation that is invoking the process, statements logged using this variable log information is inserted into the audited message log for the operation&rsquo;s execution. This can be found on the service&rsquo;s Monitoring tab in the Logs sub-tab.</li>
  <li><strong>alerter</strong>&#8212;Provides an interface for generating alerts that are displayed in on the Policy Manager alert pages.</li>
  <li><strong>recorder</strong>&#8212;Provides an interface for recording content in the Policy Manager usage log pages.</li>
  <li><strong>msgFactory</strong>&#8212;Providers functions for create message variables. A message variable cannot simply be assigned content such as a simple string or int variable. It must be initialized using one of the functions in the msgFactory.</li>
</ul>

<h5>Normalized Copy Example</h5>
<p>The following is a script that creates a normalized copy of a message and saves it as a variable.</p>
<p><img src="images/script_activity_message1.jpg" width="589" height="39" alt="normalized message copy" /></p>

<ul>
  <li>Line 1: The processContext is used to get the message variable named <strong>message</strong>.</li>
  <li>Line 2: A normalized copy is made of the message.</li>
  <li>Line 3: The processContext is used to save the normalized copy as a variable named <strong>copy</strong> that can be used in other activities that execute after this one in the process.</li>
</ul>
<h5>Normalized Message Creation Example</h5>

<p>The next script illustrates the use of the msgFactory to create a normalized message. A normalized message contains the XML element referenced in the wsdl:Message element in a WSDL document.</p>

<p><img src="images/script_activity_message2.jpg" width="613" height="67" alt="Using msgFactory to create a normalized message" /></p>
<ul>
  <li>Line 3: The msgFactory is used to create a normalized message named temp.</li>
  <li>Line 4: The content from line 1 is set as the temp message content.</li>
  <li>Line 5: The processContext is used to save the new message as a variable named temp.</li>
</ul>
<h5>Protocol Message Creation Example</h5>

<p>Message creation is not limited to normalized messages. Protocol-specific messages of any Content-Type can be constructed using the msgFactory. The following example shows the creation of a JSON message.</p>
<p><img src="images/script_activity_message3.jpg" width="602" height="65" alt="Script activity message" /></p>
<p>Note that on line 2 the call on the msgFactory to create the message is different, both in function name and the need for specifying the content-type of the message. In this case, the content-type is application/json.</p>
<p><a href="#top">Back to top</a></p>



<a name="branchactivity"></a><h3><img src="images/branch_activity_icon.jpg" width="31" height="24" style="vertical-align:bottom" alt="icon" /> Branch Activity</h3>
<p>The Branch Activity provides a mechanism to have alternate process flows, or branches, based on Boolean conditions. Drop the Branch Activity on the Process page and then connect the last activity to be executed before the branch to the Branch Activity.</p>
<p><img src="images/adding_a_branch_activity.jpg" width="262" height="140" alt="Adding a Branch Activity" /></p>
<p>Illustration: Adding a Branch Activity</p>
<p>The Branch Activity itself has very little configuration. It is the branch conditions themselves that have most of the information. If you double-click the Branch Activity you can see a list of the conditions, and can establish what expression language each branch condition will use. All branch conditions must use the same language. Supported languages are:</p>
<ul>
  <li>XPath</li>
  <li>JavaScript</li>
  <li>Jython</li>
  <li>BeanShell</li>
  <li>Simple Expressions</li>
</ul>
<p><img src="images/branch_activity_editor.jpg" width="577" height="162" alt="Branch Activity Editor" /></p>
<p>Illustration: Branch Activity Editor</p>
<p>To create a branch, add the next activity in the process, and then select the Branch Activity and connect it to the next activity.</p>
<p><img src="images/creating_a_branch.jpg" width="487" height="160" alt="Creating a Branch" /></p>
<p>Illustration: Creating a Branch</p>
<p>A Branch Activity is similar to a Java switch statement. It can support multiple branches. Only one branch is followed. The branches have Boolean conditions defined by either an XPath expression or a script. Each branch is evaluated in order. The first to evaluate to <strong>true</strong> is selected, and the sequence of activities associated with the branch is performed.</p>
<p>Branch conditions are defined separately from the main Branch Activity in the Condition Details Editor. To add a branch condition, add a new activity to the sequence (for example, a Script Activity or Invoke Activity) and drag a connector from the main Branch Activity to the target activity. There must always be a default branch that can be selected if no other branch conditions evaluate to <strong>true</strong>. This default branch condition is named <strong>Otherwise</strong> and must be added and set for each Branch Activity configuration.</p>
<p>A branch condition can be written in any of the languages in the drop-down. It is set in the Branch Details Editor and can only be changed there. The language selected applies to all conditions within the branch.</p>
<p><strong>Note</strong>: If you define branch conditions and then change the language, all source is deleted. If you want to change the language, it's best to make a copy of your source content first.</p>
<p>After you select the language for case conditions, save and exit your Branch Activity and add your connections.</p>
<p>The result of the condition must be either <strong>true</strong> or <strong>false</strong>. If there are multiple conditions for a branch, you can change the order in which they are executed by moving conditions up or down in the Case Conditions table.</p>
<p><strong>Note</strong>: The <strong>Otherwise</strong> condition does not display in the Case Conditions table, but you must still define it.</p>

<p>The first branch created in most cases becomes the Otherwise branch although that can be changed. To change a branch&rsquo;s condition, double-click the connector between the Branch Activity and the next activity in the branch sequence. The branch condition can be written in XPath, JavaScript, Jython, or BeanShell. The result of the condition must be either <strong>true</strong> or <strong>false</strong>.</p>
<p><img src="images/branch_condition_editor.jpg" width="521" height="371" alt="Branch Condition Editor" /></p>
<p>Illustration: Branch Condition Editor</p>
<p>In the illustration above, the condition is configured to use XPath as the language for the Boolean expression. The expression first checks for the first price element found in the content of the message named <strong>message</strong>. If the value of this element is greater than 100, this condition is met. Note that the namespace prefix is defined at the bottom of the page.</p>
<p>If you are using XPath as the expression language, a field for selecting a message variable to use as the context of the expression is displayed. The expression is evaluated against that variable's content. The variable's content must be XML or an error is generated at runtime.</p>
<p>When using a script language, the script is evaluated and the last line of execution is expected to result in a Boolean true or false. The context of the script is provided with a subset of the variables described in the Script Activity above:</p>

<ul class="usingOrderedList">
  <li><strong>processContext</strong>&#8212;Provides functions for retrieving and changing information about the currently running process, such as the variables defined in the process and one or more authenticated subjects of the process.</li>
  <li><strong>systemLog</strong>&#8212;Provides logging functions to the container&rsquo;s log. The statements logged with this interface are mixed with the other system log statements.</li>
  <li><strong>auditLog</strong>&#8212;Provides logging functions to the process audit log. If auditing is enabled for the virtual service operation that is invoking the process, statements logged using this variable are inserted into the audited message log for the operation&rsquo;s execution. This can be found on the service&rsquo;s <em>Monitoring</em> tab in the <em>Logs</em> sub-tab.</li>
</ul>
<p>In the following figure the condition is triggered when the value of the <strong>price</strong> variable is greater than 100.</p>
<p><img src="images/javascript_branch_condition.jpg" width="569" height="163" alt="JavaScript Branch Condition" /></p>
<p>Illustration: JavaScript Branch Condition</p>
<p><a href="#top">Back to top</a></p>



<a name="splitactivity"></a><h3><img src="images/split-32px.gif" width="31" height="24" style="vertical-align:bottom" alt="icon" /> Split Activity</h3>
<p>The Split Activity provides a mechanism to split the process into multiple concurrent flows, or branches. Drop the Split Activity on the Process page and connect the last activity to be executed before the split to the Split Activity.</p>
<p><img src="images/adding_a_split_activity.jpg" width="262" height="120" alt="Adding a Split Activity" /></p>
<p>Illustration: Adding a Split Activity</p>
<p>When the activity that connects to the Split activity completes, the process engine executes all flows originating from the Split activity in parallel, each with its own thread. Each flow can have any of the activities from the palette, except those that would prematurely end the flow of execution before a required Join activity, such as a Reply activity. We recommend that you do not re-use the same process variable in different flows, because this can lead to unpredictable results. All flows that originate from the Split activity must be terminated by the same Join activity. All flows execute concurrently. When a flow is complete it waits until all are complete. At that point, execution is resumed after the Join activity.</p>
<p><a href="#top">Back to top</a></p>



<a name="joinactivity"></a><h3><img src="images/join-32px.gif" width="31" height="24" style="vertical-align:bottom" alt="Join Activity" /> Join Activity</h3>
<p>The Join Activity terminates multiple concurrent flows, or branches. Drop the Join Activity on the Process page and connect the last activity in each of the concurrent flows originating from a Join activity to the Split activity.</p>
<p><img src="images/adding_a_join_activity.jpg" width="262" height="190" alt="Adding a Join Activity" /></p>
<p>Illustration: Adding a Join Activity</p>
<p>All flows originating from a Split activity must be terminated by the same Join activity. The activity after the Join activity is executed in the same thread as the originating
Split activity, but it will not execute until all the flows complete their execution.</p>
<p><a href="#top">Back to top</a></p>



<a name="transformationactivity"></a><h3><img src="images/transformation_activity_icon.jpg" width="40" height="36" style="vertical-align:bottom" alt="icon" />Transformation Activity</h3>
<p>The Transformation Activity provides a mechanism for transforming XML message or string content. The transformation is based on XSLT. The input to the activity can be a message or string variable. At the completion of the activity, the transformed content replaces the input variable content.</p>
<p><img src="images/transformation_activity_example.jpg" width="581" height="301" alt="Transformation Activity Example" /></p>
<p>Illustration: Transformation Activity Example</p>
<p>In the figure above, the XSL stylesheet will remove the BankId element and prefix the account id of each account with the bank id. </p>
<p>The example below shows an example of the transformation for a specific content example.</p>
<p>Message variable content before the transformation:</p>
<p><img src="images/transformation_activity_message1.jpg" width="519" height="145" alt="Content before executing the Transformation Activity" /></p>
<p>Message variable content after executing the Transformation Activity:</p>
<p><img src="images/transformation_activity_message2.jpg" width="515" height="127" alt="content after executing the Transformation Activity" /></p>



<a name="auditactivity"></a><h3><img src="images/Audit Activity Icon.jpg" width="28" height="29" style="vertical-align:bottom" alt="icon" /> Audit Activity</h3>
<p>The Audit Activity provides a mechanism for auditing a message. The audited message content is recorded and displayed as audited message content from an Auditing Policy. This information displays on the <em>Monitoring</em> pages of a service (Services &gt; Monitoring). The input to the activity can be a message variable.</p>
<p>Drag and drop to the workspace, then double-click to access the Auditing Details Editor.</p>
<p>There are several options for defining which part of the message variable content will be audited. In the Capture Details section you can choose to capture the <strong>complete</strong> message or a <strong>portion</strong> of the message. </p>
<p><img src="images/auditing_complete_message.jpg" width="601" height="115" alt="Auditing Complete Message" /></p>
<p>Illustration: Auditing the Complete Message</p>
<p>If the <strong>Capture complete message</strong> option is selected, it's only necessary to specify a record name or label. If the <strong>Capture message at the following expressions</strong> option is selected, you can enter a list of expressions.</p>
<p><img src="images/auditing_portions_of_message.jpg" width="534" height="219" alt="Auditing Portions of Message" /></p>
<p>Illustration: Auditing Portions of a Message</p>
<p>Each expression can use a different language. The supported languages are XPath, JSONPath, and Regular Expression. The XPath expressions are used when the input content is XML. The JSONPath expressions are used when the input content is JSON. The Regular Expressions are used for all other types of content. Each expression has its own Record Name, or label.</p>
<p>In case there is content that should not be viewable by others in the audit log, there is an option for masking content. In the Masked Elements section, you specify a mask (for example, password or account number) and a list of expressions that identify the content to be masked.</p>
<p><img src="images/masking_audited_elements.jpg" width="576" height="235" alt="Masking Audited Elements" /></p>
<p>Illustration: Masking Audited Elements</p>
<p>The expressions in the Masked Elements section are similar to those in the Capture Details section. The same languages are supported for masking and the same mapping of message content type to expression language. The results of the expressions are replaced by the mask string.</p>
<p>If we look at the entire activity definition we can see that we are auditing just the account elements/properties of XML and JSON messages but we are masking out the account ids with a mask of *******.</p>
<p><img src="images/audit_activity_example.jpg" width="497" height="548" alt="Audit Activity Example" /></p>
<p>Illustration: Audit Activity Example</p>
<p>Note that the XPath expressions require the namespace prefix definitions that are specified at the bottom of the editor.</p>
<p><a href="#top">Back to top</a></p>



<a name="insertcontentactivity"></a><h3><img src="images/insert_content_activity_icon.jpg" width="45" height="37" style="vertical-align:bottom" alt="icon" />Insert Content Activity</h3>
<p>The Insert Content Activity can be used to fill the content of a String or Message variable. The source of the content can be either statically defined content or an existing variable.</p>
<p>The From section of the activity editor identifies the source of the content. To specify static content to be inserted, select the Static Content radio button. Once you select the button, a text area is displayed where you can enter content of any type, such as XML, JSON, or text. A text field is also displayed where you must enter the mime content type of the static content you entered in the text area (for example, application/xml or application/json). </p>
<p><img src="images/static_content.jpg" width="537" height="232" alt="Static Content" /></p>
<p>Illustration: Static Content</p>
<p>To use content from a variable as input, select the <strong>Variable</strong> radio button. The <strong>Filter</strong> section is displayed. To insert only a specific portion of the variable's content, select the <strong>Filter</strong> check box. To insert the entire content of the variable, leave the check box cleared.</p>
<p>A filter is defined using a filter expression written in a selected language. The languages supported are XPath (for XML content), JSONPath (for JSON content), or Regular Expression (for any content). The result of the filter expression applied to the input variable will be inserted. It is possible that the filter expression results in multiple elements or properties being used as input.</p>
<p><img src="images/filtered_variable_content.jpg" width="571" height="173" alt="Filtered Variable Content" /></p>
<p>Illustration: Filtered Variable Content</p>
<p>When defining XPath filter expressions, you must include the namespaces of specified elements by including a namespace prefix in the expression. All namespace prefixes must be mapped to a namespace in the Namespace Prefixes table at the bottom of the activity page.</p>
<p><img src="images/namespace_prefixes.jpg" width="568" height="117" alt="Namespace Prefixes" /></p>
<p>Illustration: Namespace Prefixes</p>
<p>The <strong>To</strong> section of the activity identifies the target of the content specified in the <strong>From</strong> section. The target of the inserted content must be a variable. The <strong>From</strong> content can initialize or replace the content of the variable in the <strong>To</strong> section, or it can be inserted into the existing content of the target variable. If replacing the entire content of a variable, if the variable has not yet been initialized it is initialized as a result of the activity.</p>
<p>To insert into existing content, the target location must be identified using a filter similar to the one described in the <strong>To</strong> section. Based on the filter expression, it is possible that there might be multiple target locations.</p>
<p>Once you've identified the target location, you can specify one of the following:</p>
<ul>
  <li>The source content is inserted/added at the specified location (click <strong>Append</strong> button).</li>
  <li>The source content replaces any existing content at the specified location (click <strong>Replace</strong> button).</li>
</ul>
<p><strong>Note</strong>: If you are using a regular expression, only the Replace option is available.</p>
<p><img src="images/filtered_content_target.jpg" width="554" height="146" alt="Filtered Content Target" /></p>
<p>Illustration: Filtered Content Target</p>
<p>The following figure illustrates the use of the Insert Content activity to initialize a message with static XML content.</p>
<p><img src="images/static_content_example.jpg" width="512" height="465" alt="Static Content Example" /></p>
<p>Illustration: Static Content Example</p>
<p>In the example above, since no filter is defined in the <strong>To</strong> section, the static XML content will replace the content of var1, but if var1 has not yet been initialized in the process the static XML content is used to initialize var1.</p>
<p>The next figure illustrates using the Insert Content Activity to extract a portion of a source variable and append it to a target variable in a specified location.</p>
<p><img src="images/append_content_example.jpg" width="549" height="424" alt="Append Content Example" /></p>
<p>Illustration: Append Content Example</p>
<p>All account elements in the message variable are appended to the accounts element in var1. If no accounts element is found at the root of var1, an error is generated. To see how this activity would perform at runtime, take the following content for the message variable:</p>
<p><img src="images/insert_content_activity_message1.jpg" width="550" height="229" alt="Message variable content" /></p>
<p>And take the following content for the var1 variable:</p>
<p><img src="images/insert_content_activity_message2.jpg" width="512" height="15" alt="Var variable content" /></p>
<p>As a result of the activity, var1 will have the following content:</p>
<p><img src="images/insert_content_activity_message3.jpg" width="521" height="131" alt="Result" /></p>
<p><a href="#top">Back to top</a></p>



<a name="processactivity"></a><h3><img src="images/process_activity_icon.jpg" width="41" height="40" style="vertical-align:bottom" alt="icon" /> Process Activity</h3>
<p>The Process Activity allows you to call one process from another so that you can create processes with common activities and then call those processes at an appropriate point of another process. These processes with common activities are reusable. Reusable processes can themselves include Process activities so that they can call other reusable processes.</p>
<p>The configuration of a Process Activity is simple. The editor presents a tree of reusable processes in the <strong>Processes</strong> folder of each Organization in the Policy Manager Workbench. You simply select one.</p>
<p><img src="images/process_activity_editor.jpg" width="550" height="222" alt="Process Activity Editor" /></p>
<p>Illustration: Process Activity Editor</p>

<p>When a process is called from another process, the calling process's context is passed to the called process. All the variables and their values from the calling process are passed through. If the called process defines variables with the same names as variables in the calling process, the variables defined for the calling process are used.</p>



<a name="throwactivity"></a><h3><img src="images/throw_activity_icon.jpg" width="30" height="29" style="vertical-align:bottom" alt="icon" /> Throw Activity</h3>
<p>The Throw Activity exits the current flow of activities and enters the fault flow. You can add a Throw Activity at any point in the process (not in the fault flow). At the conclusion of the Throw Activity, the current flow is terminated and one of two things occurs:</p>
<ul>
  <li>If a fault flow is defined for the fault that was thrown, that flow is executed.</li>
  <li>If there is no fault flow defined for the fault that was thrown, the default fault flow is executed.</li>
</ul>
<p>The Throw Details Editor allows you to configure the Throw Activity. Here you define the fault name and a message variable for the throw message, as shown below.</p>
<p><img src="images/throw_activity_editor.jpg" width="617" height="103" alt="Throw Details Editor" /></p>
<p>Illustration: Throw Details Editor</p>
<p><img src="images/throw_activity_illustration.jpg" width="638" height="363" alt="Adding a Throw Activity" /></p>
<p>Illustration: Adding a Throw Activity</p>
<p>The Throw Activity is defined by the fault it throws and optionally a message containing information about the fault.</p>
<p>If there is a fault flow constructed for the fault with the given name, that flow is executed. If a matching fault flow is not defined, the default, or unnamed fault flow is executed. The variable identifies a message variable in the process that holds the contents of the fault. It is assigned to the standard fault variable that is used in the default Reply activity of fault flows.</p>
<p><a href="#top">Back to top</a></p>



<div class = "divider1"></div>