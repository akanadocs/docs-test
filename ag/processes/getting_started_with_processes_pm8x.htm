---
layout: page
title: Getting Started with Processes using Policy Manager 8.x
description: Learn about common vs. operation-specific processes, documentation, management tools, and use cases using Policy Manager 8.x.
product: ag
category: gs
sub-nav-class: Processes
weight: 107
type: page
nav-title: Getting Started with Processes (Policy Manager 8.x)
---


<a name="top"></a><h2>Getting Started with Processes (Policy Manager 8.x)</h2>
<p>Learn about common vs. operation-specific processes, documentation, management tools, and use cases.</p>

<a href="process_reference_pm8x.htm" class="button secondary">Process Reference (PM8x)</a> <a href="process_management_pm8x.htm" class="button secondary">Managing Processes (PM8x)</a>
<br />
<h5 class="stamp">Supported Platforms: 8.x</h5>



<div class = "divider1"></div>
<h3 style="color: gray;">Table of Contents</h3>

<ol class="table_of_contents">
  <li><a href="#process_contexts"> Process Contexts</a></li>
  <li><a href="#process_function_reference">Process Function Reference</a></li>
  <li><a href="#policy_manager_scripting_api">Policy Manager Scripting API</a></li>
  <li><a href="#process_management_tools">Process Management Tools</a></li>
  <li><a href="#process_editor_example">Example: Adding a Script Activity</a></li>
</ol>



<div class = "divider1"></div><p></p>

<p>The Akana API Platform and Akana Policy Manager allow you to define web service orchestration concepts using an XML-based graphical editor called the Process Palette. Here you can:</p>
<ul>
  <li>Define the sequence of messages as they flow through for each virtual service operation.</li>
  <li>Configure a variety of different <em>Activities</em> for achieving the results required for each operation.</li>
</ul>
<p>Let's take a quick walkthrough of the process types and tools available to get you started.</p>



<a name="process_contexts"></a><h3>Process Contexts</h3>
<p>There are several approaches to configuring process definitions:</p>
<ul class="usingOrderedList">
  <li>You can define a process from scratch for each virtual service operation in the <em>Services &gt; Operations &gt; Process</em> or <em>Services &gt; Operations &gt; Fault</em> sections.</li>
  <li> You can configure a set of &quot;common&quot; processes in the <em>Processes</em> folder of an Organization, using the <strong>Add Process</strong> function. </li>
</ul>

<h5>Referencing a Process</h5>

<p>In the virtual service operation process, you can reference (and reuse) common processes defined in the Processes folder by adding a <em>Process Activity</em>. This approach saves time and can help make your process development cycle more efficient.</p>
<p><img src="images/sample_process_8x.jpg" width="773" height="198" alt="Create Common Processes" /></p>
<p>Illustration: Create Common Processes in <em>Processes</em> Folder</p>
<p><img src="images/process_with_referenced_process_activity_8x.jpg" width="671" height="378" alt="Reference Process using Process Activity" /></p>
<p>Illustration: Reference Process using <em>Process Activity</em> in <em>Service &gt; Operation</em> Process Definition.</p>
<h5>Referencing a Script</h5>
<p>In the same way that you can reuse a process by referencing it, you can also reuse a script.</p>
<p>In the Policy Manager <em>Scripts</em> folder, you can define a series of utility scripts for performing common tasks. To do this, use the <strong>Add Script </strong>function. Then, in your virtual service operation process definition, add a <em>Script Activity</em>, import a pre-defined script, and then add a script reference for the function you want to perform.</p>
<p>For example, you might have a requirement to validate some data as part of your process. In this example, you might create a reusable script that includes a function for validating data (validateData), and call the script TestScript.</p>
<p>Then, in your process definition, you can import TestScript and reference the function in the script source. This example is shown below.</p>
<p><img src="images/script_example.jpg" width="436" height="285" alt="Referencing a Script Function" /></p>
<p>Illustration: Example of Referencing a Script Function</p>
<p><a href="#top">Back to top</a></p>



<a name="process_function_reference"></a><h3>Process Function Reference</h3>
<p>The <em>Process Function Reference</em> includes a tour of the Process Editor and descriptions and usage examples for each Activity type. To ensure a smooth process when building your process definitions, familiarize yourself with the functionality, techniques, and rules for using each Activity. For more information, refer to <a href="process_reference_pm8x.htm">Process Reference for Policy Manager 8.x</a>.</p>
<p><a href="#top">Back to top</a></p>



<a name="policy_manager_scripting_api"></a><h3>Policy Manager Scripting API</h3>
<p>The <em>Policy Manager Scripting API</em> provides a series of interfaces and classes that you can use to build process-related scripts. You can access this API in the following locations:</p>
<h5>Policy Manager 8.x:</h5>
<ul class="usingOrderedList">
  <li>Documentation files in the <strong>docs\scriptDocs</strong> folder of the Akana Platform Folder.</li>
  <li>On the Akana Documentation Repository: <a href="http://docs.akana.com/ag/assets/scriptDocs_pm80/index.html" >Policy Manager 8.0 </a> 
</li>
</ul>
<p><a href="#top">Back to top</a></p>



<a name="process_management_tools"></a><h3>Process Management Tools</h3>
<p>The <em>Managing Processes</em> topic includes an overview of all the tools in the Process Palette, and functions that apply to the common process definitions in the <em>Processes</em> folder. See <a href="process_management_pm8x.htm"> Managing Processes</a>.</p>
<p><a href="#top">Back to top</a></p>



<a name="process_editor_example"></a><h3>Example: Adding a Script Activity</h3>
<p>The procedure below walks you through adding a Script activity to a specific operation using the Process Editor. When you've added the script, you can run the operation in Test Client and you will see a new header in the Response/Headers tab.</p>
<h5>Example: to add a specific script activity to an operation</h5>
<ol>
  <li>Open the Process Editor for a specific operation.</li>
  <li>Drag and drop the Script Activity icon to the grid.</li>
  <li>Change the arrows so that the order of activity is Receive > Invoke Activity > Script Activity > Reply:
    <ol>
      <li>Drag the end arrow from Reply Activity to Script Activity. This directs the Script Activity to execute directly after the Invoke Activity.</li>
      <li>Click the center of the Script Activity and drag and drop (draw) a new arrow to the center of the Reply Activity. This directs the Reply Activity to execute after the Script Activity.</li>
      </ol>
  </li>
  <li>Specify values for the Script Activity:
    <ol>
      <li>Double-click any activity to open up the Activity Edit page.</li>
      <li>From the Language drop-down list, choose JavaScript.</li>
      <li>In the Script text box, type or paste the following script:
    <pre>var msg = processContext.getVariable("message");
var headers = msg.getTransportHeaders();
headers.add("myHeaderName", "myHeaderValue");
msg.setTransportHeaders(headers);</pre></li>
    </ol>
  </li>
  <li>Click the <strong>Save</strong> icon (on the palette) to save the data.</li>
  <li>Click <strong>Cancel</strong> to exit the Process Editor and return to the Implementation page.</li>
  </ol>
<p>For additional information on using script activity variables, refer to the <a href="http://docs.akana.com/ag/processes/process_reference_pm8x.htm#scriptactivity" >Process Editor reference documentation for the Script activity</a>.</p>
<p><a href="#top">Back to top</a></p>



<a name="whats_next"></a><h3>What's Next?</h3>
<p>Now that you've familiarized yourself with the high-level approach of building processes, and know what reference materials and tools are available, you can start building your processes.</p>
<p><a href="#top">Back to top</a></p>
<div class = "divider1"></div>