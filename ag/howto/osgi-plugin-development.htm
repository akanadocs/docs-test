---
layout: page
title: OSGi Plug-in Projects
description: A guide to creating and compiling an OSGi plug-in project for a custom policy.
product: ag
category: learn
sub-nav-class: Custom Development
weight: 05
type: page
nav-title: OSGi Plug-in Projects
---
<h1 id="top">Creating and Compiling an OSGi plug-in project</h1>
<p>A guide to creating and compiling an OSGi plug-in project for a custom policy.</p>
<hr class="divide_hr" />



<h2 style="color: gray;">Table of Contents</h2>
<ol class="table_of_contents">
	<li><a href="#introduction">Overview</a></li>
	<li><a href="#master">Creating the build project</a></li>
	<li><a href="#project">Creating a plug-in project</a></li>
	<li><a href="#build">Compiling the simple policy handler example</a></li>
	<li><a href="#build_complex">Compiling the complex policy handler example</a></li>
</ol>
<hr class="divide_hr" />



<h2 id="introduction">Overview</h2>
<p>This document describes how to create and compile an OSGi Plug-in project (such as a custom policy component) using the Eclipse IDE.</p>


<h3 id="data">Prerequisites</h3>
<ul>
	<li>This configuration guide assumes that youâ€™ve already installed the platform. If you need help installing the platform, please refer to the applicable version of the Installation Guide. See <a href="../../sp/platform_install/installing_akana_api_platform_all.htm">Installing the Akana API Platform (all versions)</a>.</li>
	<li>If you're writing policy components for the API Gateway, you'll have to create and configure a Policy Manager (PM) and Network Directory (ND) container. This is described in the document <a href="../api_management/simple-api.htm">Getting Started: Managing a Simple API</a></li>
	<li>Install and configure the Eclipse IDE as described in the document <a href="../../sp/howto/eclipse-setup.htm">Eclipse Workspace Setup</a></li>
</ul>



<h2 id="master">Creating the build project</h2>
<p>The platform ships with a number of samples that can be found in the <strong>/samples</strong> subdirectory. Included in these is a primary build project that is used for the samples. This needs to be imported into your workspace.</p>
<ol>
	<li>Switch to the Java perspective, click on <strong>File</strong>, choose <strong>New</strong>, and select <strong>Java Project</strong>. </li>
	<li>Give the project the name <strong>build</strong>. </li>
	<li>Drag and drop the contents of the <strong>/samples/build</strong> directory into the root of the <strong>build</strong> project.</li>
	<li>
Modify the project.properties file as follows:
<ol>
	<li>third.party.dir=[product<em>installation</em>dir]/201800/lib/X.Y.Z. X.Y.Z is the version of the product installed.</li>
	<li>local.tools.dependent.lib.dir=[install_dir]/201800/lib/X.Y.Z. Same as above.</li>
</ol>
</li>
	<li>Modify the <strong>build.xml</strong> file to build only the projects that are required. For example:
<pre>...
&lt;target name="clean" depends="
  complex-policy-handler-clean,
  complex-policy-console-clean
"/&gt;

&lt;target name="samples" depends="
  complex-policy-handler,
  complex-policy-console
"/&gt;
...</pre></li>
</ol>



<h2 id="project">Creating a plug-in project</h2>
<ol>
	<li>Switch to the Plug-in Development perspective, click on <strong>File</strong>, choose <strong>New</strong>, and select <strong>Plug-in Project</strong>. </li>
	<li>Give the project a name, such as <strong>com.soa.examples.policy.handler.simple</strong>. In <strong>Target Platform</strong>, select the <strong>OSGi framework</strong>, and choose <strong>standard</strong> in the drop-down. Click <strong>Next</strong>.</li>
	<li>Provide or remove the qualifier in the <strong>version</strong> field and select the JavaSE-1.7 Execution Environment. Unselect <strong>Generate an Activator</strong>. Click <strong>Next</strong>.</li>
	<li>Clear the  <strong>Create a plug-in using one of the templates</strong> setting, and then click <strong>Finish</strong>.</li>
</ol>



<h2 id="build">Compiling the simple policy handler example</h2>
<ol>
	<li>Drag and drop the contents of the <strong>/samples/com.soa.examples.policy.handler.simple</strong> directory into the root of the <strong>com.soa.examples.policy.handler.simple</strong> plug-in project created in the previous section. Since the directory already contains a MANIFEST.MF file, the values entered into #3 of the previous section will be overwritten.</li>
	<li>Build the project from top **Project ** menu and verify that there are no compilation errors.</li>
	<li>Edit the primary build file described in the previous section:
<pre>...
&lt;target name="clean" depends="
  simple-policy-handler-clean
"/  

&lt;target name="samples" depends="
  simple-policy-handler
"/  
...</pre></li>
	<li>Open the Ant view and drag the primary build file into it. Double-click on the <strong>samples</strong> project to run the build script.</li>
	<li>If the build is successful, the resulting JAR file can be found in the primary build project under the <strong>/bin</strong> sub-directory. It may be hidden from view, so look on the filesystem.</li>
</ol>



<h2 id="build_complex">Compiling the complex policy handler example</h2>
<p>The complex policy handler is comprised of two projects, the core handler and the console project that provides a user interface for the Policy Manager.</p>
<p>The process for the complex handler is the same as the simple handler above:</p>
<ol>
	<li>Create a new plug-in as described above. Call it <strong>com.soa.examples.policy.handler.complex</strong>.</li>
	<li>Drag and drop the contents of the <strong>/samples/com.soa.examples.policy.handler.complex</strong> directory into the root of the <strong>com.soa.examples.policy.handler.complex</strong> plug-in project created in the previous step. Since the directory already contains a MANIFEST.MF file, the values entered into #3 of the previous section will be overwritten.</li>
	<li>Build the project from top <strong>Project</strong> menu and verify that there are no compilation errors.</li>
</ol>
<p>The console plug-in is the same:</p>
<ol>
	<li>Create a new plug-in as described above. Call it <strong>com.soa.examples.console.policy.complex</strong>.</li>
	<li>Drag and drop the contents of the <strong>/samples/com.soa.examples.console.policy.complex</strong> directory into the root of the <strong>com.soa.examples.console.policy.complex</strong> plug-in project created in the previous step. Since the directory already contains a MANIFEST.MF file, the values entered into #3 of the previous section will be overwritten.</li>
</ol>
<p>Now build both:</p>
<ol>
	<li>Edit the primary build file described in the previous section:
<pre>...
&lt;target name="clean" depends="
	complex-policy-handler-clean,
	complex-policy-console-clean
"/&gt;

&lt;target name="samples" depends="
	complex-policy-handler,
	complex-policy-console
"/&gt;
...</pre></li>
	<li>Open the Ant view and drag the primary build file into it. Double-click on the <strong>samples</strong> project to run the build script.</li>
	<li>If the build is successful, the resulting JAR files can be found in a <strong>/build/bin/</strong> sub-directory in your Eclipse workspace root directory.</li>
</ol>